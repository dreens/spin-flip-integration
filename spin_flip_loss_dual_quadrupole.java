/*
 * spin_flip_loss_dual_quadrupole.java
 */

import com.comsol.model.*;
import com.comsol.model.util.*;

/** Model exported on Jul 1 2017, 11:57 by COMSOL 5.2.1.262. */
public class spin_flip_loss_dual_quadrupole {

  public static Model run() {
    Model model = ModelUtil.create("Model");

    model.modelPath("R:\\COMSOL files\\Magnetoelectrostatic Cloverleaf");

    model.modelNode().create("mod1");

    model.geom().create("geom1", 3);

    model.mesh().create("mesh1", "geom1");

    model.physics().create("mfnc", "MagnetostaticsNoCurrents", "geom1");

    model.study().create("std1");
    model.study("std1").feature().create("stat", "Stationary");
    model.study("std1").feature("stat").activate("mfnc", true);

    model.geom("geom1").feature().create("cyl1", "Cylinder");

    model.param().set("ID", "4");
    model.param().set("OD", "12");
    model.param().set("ID", "3");
    model.param().set("OD", "15");
    model.param().set("tc", "4");
    model.param().set("te", "2");

    model.geom("geom1").lengthUnit("mm");
    model.geom("geom1").feature("cyl1").set("r", "OD/2");
    model.geom("geom1").feature("cyl1").set("h", "tc");
    model.geom("geom1").feature("cyl1").setIndex("pos", "-tc/2", 2);
    model.geom("geom1").run("cyl1");
    model.geom("geom1").run("cyl1");
    model.geom("geom1").feature().create("cyl2", "Cylinder");
    model.geom("geom1").feature("cyl2").set("r", "ID/2");
    model.geom("geom1").feature("cyl2").set("h", "tc");
    model.geom("geom1").feature("cyl2").setIndex("pos", "tc/2", 2);
    model.geom("geom1").feature("cyl2").setIndex("pos", "-tc/2", 2);
    model.geom("geom1").run("cyl2");
    model.geom("geom1").run("cyl2");
    model.geom("geom1").feature().create("blk1", "Block");
    model.geom("geom1").feature("blk1").setIndex("size", "OD/2", 0);
    model.geom("geom1").feature("blk1").setIndex("size", "OD/2", 1);
    model.geom("geom1").feature("blk1").setIndex("size", "tc", 2);
    model.geom("geom1").feature("blk1").setIndex("pos", "-tc/2", 2);
    model.geom("geom1").run("blk1");
    model.geom("geom1").run("blk1");
    model.geom("geom1").feature().create("dif1", "Difference");
    model.geom("geom1").feature("dif1").selection("input").set(new String[]{"cyl1"});
    model.geom("geom1").feature("dif1").selection("input2").set(new String[]{"cyl2"});
    model.geom("geom1").run("dif1");
    model.geom("geom1").feature("cyl1").set("h", "tc/2");
    model.geom("geom1").feature("cyl1").setIndex("pos", "0", 2);
    model.geom("geom1").feature("cyl2").set("h", "tc/2");
    model.geom("geom1").feature("cyl2").setIndex("pos", "0", 2);
    model.geom("geom1").feature("blk1").setIndex("pos", "0", 2);
    model.geom("geom1").feature("blk1").setIndex("size", "tc/2", 2);
    model.geom("geom1").runAll();
    model.geom("geom1").feature().duplicate("cyl3", "cyl1");
    model.geom("geom1").feature().duplicate("cyl4", "cyl2");
    model.geom("geom1").feature("cyl3").set("h", "te");
    model.geom("geom1").feature("cyl4").set("h", "te");
    model.geom("geom1").runAll();
    model.geom("geom1").feature("cyl3").setIndex("pos", "tc/2", 2);
    model.geom("geom1").feature("cyl4").setIndex("pos", "tc/2", 2);
    model.geom("geom1").runAll();
    model.geom("geom1").feature().duplicate("dif2", "dif1");
    model.geom("geom1").feature("dif2").selection("input").set(new String[]{"cyl3"});
    model.geom("geom1").feature("dif2").selection("input2").set(new String[]{"cyl4"});
    model.geom("geom1").feature("dif2").set("keep", "off");
    model.geom("geom1").runAll();

    model.view("view1").hideObjects().create("hide1");
    model.view("view1").hideObjects("hide1").init();
    model.view("view1").hideObjects("hide1").add(new String[]{"dif2"});

    model.geom("geom1").run("dif2");
    model.geom("geom1").feature().create("int1", "Intersection");
    model.geom("geom1").feature("int1").selection("input").set(new String[]{"blk1", "dif1"});
    model.geom("geom1").run("int1");
    model.geom("geom1").feature("dif1").name("Wedge1");
    model.geom("geom1").feature().duplicate("dif3", "dif1");
    model.geom("geom1").feature().remove("dif3");
    model.geom("geom1").run("int1");
    model.geom("geom1").feature().create("swe1", "Sweep");
    model.geom("geom1").feature("swe1").set("includefinal", false);
    model.geom("geom1").feature().remove("swe1");
    model.geom("geom1").run("int1");
    model.geom("geom1").feature().create("spl1", "Split");
    model.geom("geom1").feature().remove("dif1");
    model.geom("geom1").run("int1");
    model.geom("geom1").run("cyl1");
    model.geom("geom1").run("int1");
    model.geom("geom1").feature("spl1").active(false);
    model.geom("geom1").runAll();
    model.geom("geom1").runAll();
    model.geom("geom1").runAll();
    model.geom("geom1").runAll();
    model.geom("geom1").runAll();
    model.geom("geom1").runPre("int1");
    model.geom("geom1").feature().remove("int1");

    model.view("view1").hideObjects().clear();
    model.view("view1").hideObjects().create("hide1");
    model.view("view1").hideObjects("hide1").init();
    model.view("view1").hideObjects("hide1").add(new String[]{"dif2"});

    model.geom("geom1").feature("spl1").active(true);
    model.geom("geom1").feature().duplicate("dif3", "dif2");
    model.geom("geom1").feature().move("dif3", 2);
    model.geom("geom1").runPre("dif3");
    model.geom("geom1").feature("dif3").selection("input").set(new String[]{"cyl1"});
    model.geom("geom1").feature("dif3").selection("input2").set(new String[]{"cyl2"});
    model.geom("geom1").run("dif3");
    model.geom("geom1").runPre("spl1");
    model.geom("geom1").feature("spl1").selection("input").set(new String[]{"blk1", "dif3"});
    model.geom("geom1").run("spl1");
    model.geom("geom1").runPre("spl1");
    model.geom("geom1").feature("spl1").selection("input").set(new String[]{"dif3"});
    model.geom("geom1").run("spl1");
    model.geom("geom1").runPre("spl1");
    model.geom("geom1").feature("spl1").set("createselection", "on");
    model.geom("geom1").run("spl1");
    model.geom("geom1").run("spl1");
    model.geom("geom1").feature().create("copy1", "Copy");
    model.geom("geom1").feature().remove("spl1");
    model.geom("geom1").run("dif2");
    model.geom("geom1").run("dif2");
    model.geom("geom1").feature().create("int1", "Intersection");
    model.geom("geom1").feature("int1").selection("input").set(new String[]{"blk1", "dif3"});
    model.geom("geom1").run("int1");
    model.geom("geom1").feature("copy1").selection("input").set(new String[]{"int1"});
    model.geom("geom1").feature("copy1").set("displx", "2");
    model.geom("geom1").feature("copy1").set("disply", "2");
    model.geom("geom1").run("copy1");
    model.geom("geom1").feature().remove("copy1");
    model.geom("geom1").run("int1");
    model.geom("geom1").feature().create("copy1", "Copy");
    model.geom("geom1").feature("copy1").selection("input").set(new String[]{"int1"});
    model.geom("geom1").run("copy1");
    model.geom("geom1").run("copy1");
    model.geom("geom1").feature().create("rot1", "Rotate");
    model.geom("geom1").feature("rot1").selection("input").set(new String[]{"copy1"});
    model.geom("geom1").feature("rot1").set("rot", "90");
    model.geom("geom1").run("rot1");
    model.geom("geom1").feature().duplicate("copy2", "copy1");
    model.geom("geom1").feature().move("copy2", 9);
    model.geom("geom1").feature().move("copy2", 10);
    model.geom("geom1").runPre("copy2");
    model.geom("geom1").feature("copy2").selection("input").set(new String[]{"rot1"});
    model.geom("geom1").run("copy2");
    model.geom("geom1").feature().duplicate("rot2", "rot1");
    model.geom("geom1").run("rot2");
    model.geom("geom1").run("rot2");
    model.geom("geom1").feature().create("uni1", "Union");
    model.geom("geom1").feature("uni1").selection("input").set(new String[]{});
    model.geom("geom1").feature().remove("uni1");
    model.geom("geom1").feature().duplicate("copy3", "copy2");
    model.geom("geom1").feature().duplicate("rot3", "rot2");
    model.geom("geom1").runPre("copy3");
    model.geom("geom1").feature("copy3").selection("input").set(new String[]{"rot2"});
    model.geom("geom1").run("copy3");
    model.geom("geom1").feature("rot3").selection("input").set(new String[]{"rot2"});
    model.geom("geom1").run("rot3");

    model.view("view1").hideObjects().clear();
    model.view("view1").hideObjects().create("hide1");
    model.view("view1").hideObjects("hide1").init();
    model.view("view1").hideObjects("hide1").add(new String[]{"dif2"});

    model.geom("geom1").runAll();
    model.geom("geom1").run("rot3");
    model.geom("geom1").feature().create("copy4", "Copy");
    model.geom("geom1").feature("copy4").selection("input").set(new String[]{});
    model.geom("geom1").feature("int1").name("Wedge1");
    model.geom("geom1").feature("copy4").selection("input").set(new String[]{});
    model.geom("geom1").feature("copy2").name("Wedge2");
    model.geom("geom1").feature("copy4").selection("input").set(new String[]{"copy3"});
    model.geom("geom1").feature("copy3").name("Wedge3");
    model.geom("geom1").feature("copy4").selection("input").set(new String[]{"rot3"});
    model.geom("geom1").feature("rot3").name("Wedge4");
    model.geom("geom1").feature().remove("copy4");
    model.geom("geom1").run("rot3");
    model.geom("geom1").feature().create("cyl5", "Cylinder");
    model.geom("geom1").feature("cyl5").name("SimBound");
    model.geom("geom1").feature("cyl5").set("r", "OD*1.5");
    model.geom("geom1").feature("cyl5").set("h", "ct+et");
    model.geom("geom1").run("rot3");
    model.geom("geom1").feature("cyl5").set("h", "tc+te");
    model.geom("geom1").run("cyl5");
    model.geom("geom1").feature("cyl5").set("h", "(tc+te)*1.5");
    model.geom("geom1").run("cyl5");

    model.view("view1").hideObjects().create("hide2");
    model.view("view1").hideObjects("hide2").init(2);
    model.view("view1").hideObjects("hide2").add("cyl5", new int[]{4});
    model.view("view1").hideObjects().clear();
    model.view("view1").hideObjects().create("hide1");
    model.view("view1").hideObjects("hide1").init(2);
    model.view("view1").hideObjects("hide1").add("cyl5", new int[]{4});

    model.geom("geom1").run();

    model.physics("mfnc").feature().create("zsp1", "ZeroMagneticScalarPotential", 2);
    model.physics("mfnc").feature("zsp1").selection().set(new int[]{3, 8, 9, 17, 23, 30});
    model.physics("mfnc").feature().create("mfc2", "MagneticFluxConservation", 3);
    model.physics("mfnc").feature("mfc2").selection().set(new int[]{2});
    model.physics("mfnc").feature("mfc2").set("ConstitutiveRelationH", 1, "Magnetization");

    model.param().set("M", "1.5");

    model.physics("mfnc").feature("mfc2").set("M", new String[]{"M/sqrt(2)", "M/sqrt(2)", "0"});
    model.physics("mfnc").feature().duplicate("mfc3", "mfc2");
    model.physics("mfnc").feature("mfc3").selection().set(new int[]{6});
    model.physics("mfnc").feature("mfc3").set("M", new String[]{"-M/sqrt(2)", "-M/sqrt(2)", "0"});
    model.physics("mfnc").feature().duplicate("mfc4", "mfc2");
    model.physics("mfnc").feature().duplicate("mfc5", "mfc3");
    model.physics("mfnc").feature("mfc4").selection().set(new int[]{5});
    model.physics("mfnc").feature("mfc4").set("M", new String[]{"-M/sqrt(2)", "M/sqrt(2)", "0"});
    model.physics("mfnc").feature("mfc5").selection().set(new int[]{3});
    model.physics("mfnc").feature("mfc5").set("M", new String[]{"M/sqrt(2)", "-M/sqrt(2)", "0"});
    model.physics("mfnc").feature().create("mfc6", "MagneticFluxConservation", 3);

    model.view("view1").hideEntities().create("hide1");
    model.view("view1").hideEntities("hide1").geom(3);
    model.view("view1").hideEntities("hide1").add(new int[]{2});

    model.physics("mfnc").feature("mfc6").selection().set(new int[]{4});

    model.view("view1").hideEntities("hide1").add(new int[]{5});

    model.geom("geom1").feature("cyl1").set("h", "tc");
    model.geom("geom1").feature("cyl1").setIndex("pos", "-tc/2", 2);
    model.geom("geom1").feature("cyl2").set("h", "tc");
    model.geom("geom1").feature("cyl2").setIndex("pos", "-tc/2", 2);
    model.geom("geom1").feature("blk1").setIndex("size", "tc", 2);
    model.geom("geom1").feature("blk1").setIndex("pos", "-tc/2", 2);
    model.geom("geom1").feature("cyl5").setIndex("pos", "-(tc+te)*1.5/2", 2);
    model.geom("geom1").runAll();

    model.view("view1").hideObjects().create("hide2");
    model.view("view1").hideObjects("hide2").init();
    model.view("view1").hideObjects("hide2").add(new String[]{"cyl5"});

    model.geom("geom1").run("cyl5");
    model.geom("geom1").feature().create("copy4", "Copy");
    model.geom("geom1").feature("copy4").selection("input").set(new String[]{"dif2"});
    model.geom("geom1").feature("copy4").set("displz", "-tc-te");
    model.geom("geom1").run("copy4");
    model.geom("geom1").run();

    model.view("view1").hideEntities("hide1").add(new int[]{1});
    model.view("view1").hideEntities().clear();
    model.view("view1").hideEntities().create("hide1");
    model.view("view1").hideEntities("hide1").geom(3);
    model.view("view1").hideEntities("hide1").add(new int[]{1});

    model.physics("mfnc").feature("mfc6").set("ConstitutiveRelationH", 1, "Magnetization");
    model.physics("mfnc").feature("mfc6").set("M", new String[]{"0", "0", "M"});

    model.view("view1").hideEntities().clear();

    model.mesh("mesh1").autoMeshSize(4);

    model.sol().create("sol1");
    model.sol("sol1").study("std1");
    model.sol("sol1").feature().create("st1", "StudyStep");
    model.sol("sol1").feature("st1").set("study", "std1");
    model.sol("sol1").feature("st1").set("studystep", "stat");
    model.sol("sol1").feature().create("v1", "Variables");
    model.sol("sol1").feature("v1").set("control", "stat");
    model.sol("sol1").feature().create("s1", "Stationary");
    model.sol("sol1").feature("s1").feature().create("fc1", "FullyCoupled");
    model.sol("sol1").feature("s1").feature().create("i1", "Iterative");
    model.sol("sol1").feature("s1").feature("i1").set("prefuntype", "left");
    model.sol("sol1").feature("s1").feature("i1").set("maxlinit", 10000);
    model.sol("sol1").feature("s1").feature("i1").set("linsolver", "cg");
    model.sol("sol1").feature("s1").feature("i1").set("rhob", 400);
    model.sol("sol1").feature("s1").feature("fc1").set("linsolver", "i1");
    model.sol("sol1").feature("s1").feature("i1").feature().create("mg1", "Multigrid");
    model.sol("sol1").feature("s1").feature("i1").feature("mg1").set("amgauto", 3);
    model.sol("sol1").feature("s1").feature("i1").feature("mg1").set("scale", 2);
    model.sol("sol1").feature("s1").feature("i1").feature("mg1").set("gmglevels", 1);
    model.sol("sol1").feature("s1").feature("i1").feature("mg1").set("massem", true);
    model.sol("sol1").feature("s1").feature("i1").feature("mg1").set("rmethod", "longest");
    model.sol("sol1").feature("s1").feature("i1").feature("mg1").set("mkeep", false);
    model.sol("sol1").feature("s1").feature("i1").feature("mg1").set("mgcycle", "v");
    model.sol("sol1").feature("s1").feature("i1").feature("mg1").set("prefun", "amg");
    model.sol("sol1").feature("s1").feature("i1").feature("mg1").set("mcasegen", "any");
    model.sol("sol1").feature("s1").feature("i1").feature("mg1").set("mglevels", 5);
    model.sol("sol1").feature("s1").feature("i1").feature("mg1").set("iter", 2);
    model.sol("sol1").feature("s1").feature("i1").feature("mg1").set("maxcoarsedof", 5000);
    model.sol("sol1").feature("s1").feature().remove("fcDef");
    model.sol("sol1").attach("std1");

    model.result().create("pg1", "PlotGroup3D");
    model.result("pg1").name("Magnetic flux density");
    model.result("pg1").set("data", "dset1");
    model.result("pg1").feature().create("mslc1", "Multislice");
    model.result("pg1").feature("mslc1").name("Multislice 1.1");
    model.result("pg1").feature("mslc1").set("expr", "mfnc.normB");
    model.result("pg1").feature("mslc1").set("data", "parent");

    model.material().create("mat1");
    model.material().create("mat2");
    model.material("mat2").selection().all();
    model.material("mat2").selection().set(new int[]{});
    model.material("mat2").set("family", "air");
    model.material("mat2").selection().all();
    model.material().remove("mat1");
    model.material().create("mat3");
    model.material("mat3").name("Air");
    model.material("mat3").set("family", "air");
    model.material("mat3").propertyGroup("def").set("relpermeability", "1");
    model.material("mat3").propertyGroup("def").set("relpermittivity", "1");
    model.material("mat3").propertyGroup("def").set("dynamicviscosity", "eta(T[1/K])[Pa*s]");
    model.material("mat3").propertyGroup("def").set("ratioofspecificheat", "1.4");
    model.material("mat3").propertyGroup("def").set("electricconductivity", "0[S/m]");
    model.material("mat3").propertyGroup("def").set("heatcapacity", "Cp(T[1/K])[J/(kg*K)]");
    model.material("mat3").propertyGroup("def").set("density", "rho(pA[1/Pa],T[1/K])[kg/m^3]");
    model.material("mat3").propertyGroup("def").set("thermalconductivity", "k(T[1/K])[W/(m*K)]");
    model.material("mat3").propertyGroup("def").set("soundspeed", "cs(T[1/K])[m/s]");
    model.material("mat3").propertyGroup("def").func().create("eta", "Piecewise");
    model.material("mat3").propertyGroup("def").func("eta").set("funcname", "eta");
    model.material("mat3").propertyGroup("def").func("eta").set("arg", "T");
    model.material("mat3").propertyGroup("def").func("eta").set("extrap", "constant");
    model.material("mat3").propertyGroup("def").func("eta")
         .set("pieces", new String[][]{{"200.0", "1600.0", "-8.38278E-7+8.35717342E-8*T^1-7.69429583E-11*T^2+4.6437266E-14*T^3-1.06585607E-17*T^4"}});
    model.material("mat3").propertyGroup("def").func().create("Cp", "Piecewise");
    model.material("mat3").propertyGroup("def").func("Cp").set("funcname", "Cp");
    model.material("mat3").propertyGroup("def").func("Cp").set("arg", "T");
    model.material("mat3").propertyGroup("def").func("Cp").set("extrap", "constant");
    model.material("mat3").propertyGroup("def").func("Cp")
         .set("pieces", new String[][]{{"200.0", "1600.0", "1047.63657-0.372589265*T^1+9.45304214E-4*T^2-6.02409443E-7*T^3+1.2858961E-10*T^4"}});
    model.material("mat3").propertyGroup("def").func().create("rho", "Analytic");
    model.material("mat3").propertyGroup("def").func("rho").set("funcname", "rho");
    model.material("mat3").propertyGroup("def").func("rho").set("args", new String[]{"pA", "T"});
    model.material("mat3").propertyGroup("def").func("rho").set("expr", "pA*0.02897/8.314/T");
    model.material("mat3").propertyGroup("def").func("rho").set("dermethod", "manual");
    model.material("mat3").propertyGroup("def").func("rho")
         .set("argders", new String[][]{{"pA", "d(pA*0.02897/8.314/T,pA)"}, {"T", "d(pA*0.02897/8.314/T,T)"}});
    model.material("mat3").propertyGroup("def").func().create("k", "Piecewise");
    model.material("mat3").propertyGroup("def").func("k").set("funcname", "k");
    model.material("mat3").propertyGroup("def").func("k").set("arg", "T");
    model.material("mat3").propertyGroup("def").func("k").set("extrap", "constant");
    model.material("mat3").propertyGroup("def").func("k")
         .set("pieces", new String[][]{{"200.0", "1600.0", "-0.00227583562+1.15480022E-4*T^1-7.90252856E-8*T^2+4.11702505E-11*T^3-7.43864331E-15*T^4"}});
    model.material("mat3").propertyGroup("def").func().create("cs", "Analytic");
    model.material("mat3").propertyGroup("def").func("cs").set("funcname", "cs");
    model.material("mat3").propertyGroup("def").func("cs").set("args", new String[]{"T"});
    model.material("mat3").propertyGroup("def").func("cs").set("expr", "sqrt(1.4*287*T)");
    model.material("mat3").propertyGroup("def").func("cs").set("dermethod", "manual");
    model.material("mat3").propertyGroup("def").func("cs")
         .set("argders", new String[][]{{"T", "d(sqrt(1.4*287*T),T)"}});
    model.material("mat3").propertyGroup("def").addInput("temperature");
    model.material("mat3").propertyGroup("def").addInput("pressure");
    model.material("mat3").set("family", "air");
    model.material().remove("mat2");
    model.material("mat3").selection().all();

    model.sol("sol1").study("std1");
    model.sol("sol1").feature().remove("s1");
    model.sol("sol1").feature().remove("v1");
    model.sol("sol1").feature().remove("st1");
    model.sol("sol1").feature().create("st1", "StudyStep");
    model.sol("sol1").feature("st1").set("study", "std1");
    model.sol("sol1").feature("st1").set("studystep", "stat");
    model.sol("sol1").feature().create("v1", "Variables");
    model.sol("sol1").feature("v1").set("control", "stat");
    model.sol("sol1").feature().create("s1", "Stationary");
    model.sol("sol1").feature("s1").feature().create("fc1", "FullyCoupled");
    model.sol("sol1").feature("s1").feature().create("i1", "Iterative");
    model.sol("sol1").feature("s1").feature("i1").set("prefuntype", "left");
    model.sol("sol1").feature("s1").feature("i1").set("maxlinit", 10000);
    model.sol("sol1").feature("s1").feature("i1").set("linsolver", "cg");
    model.sol("sol1").feature("s1").feature("i1").set("rhob", 400);
    model.sol("sol1").feature("s1").feature("fc1").set("linsolver", "i1");
    model.sol("sol1").feature("s1").feature("i1").feature().create("mg1", "Multigrid");
    model.sol("sol1").feature("s1").feature("i1").feature("mg1").set("amgauto", 3);
    model.sol("sol1").feature("s1").feature("i1").feature("mg1").set("scale", 2);
    model.sol("sol1").feature("s1").feature("i1").feature("mg1").set("gmglevels", 1);
    model.sol("sol1").feature("s1").feature("i1").feature("mg1").set("massem", true);
    model.sol("sol1").feature("s1").feature("i1").feature("mg1").set("rmethod", "longest");
    model.sol("sol1").feature("s1").feature("i1").feature("mg1").set("mkeep", false);
    model.sol("sol1").feature("s1").feature("i1").feature("mg1").set("mgcycle", "v");
    model.sol("sol1").feature("s1").feature("i1").feature("mg1").set("prefun", "amg");
    model.sol("sol1").feature("s1").feature("i1").feature("mg1").set("mcasegen", "any");
    model.sol("sol1").feature("s1").feature("i1").feature("mg1").set("mglevels", 5);
    model.sol("sol1").feature("s1").feature("i1").feature("mg1").set("iter", 2);
    model.sol("sol1").feature("s1").feature("i1").feature("mg1").set("maxcoarsedof", 5000);
    model.sol("sol1").feature("s1").feature().remove("fcDef");
    model.sol("sol1").attach("std1");
    model.sol("sol1").runAll();

    model.result("pg1").run();
    model.result().dataset().create("cpl1", "CutPlane");
    model.result().dataset().create("cpl2", "CutPlane");
    model.result().dataset("cpl2").run();
    model.result().create("pg2", "PlotGroup2D");
    model.result("pg2").run();
    model.result("pg1").run();
    model.result("pg2").run();
    model.result("pg2").feature().create("surf1", "Surface");
    model.result("pg2").feature("surf1").set("expr", "mfnc.normB");
    model.result("pg2").run();

    model.view("view1").hideEntities().create("hide1");
    model.view("view1").hideEntities("hide1").geom(3);
    model.view("view1").hideEntities("hide1").add(new int[]{1});

    model.physics("mfnc").feature().remove("zsp1");

    model.sol("sol1").study("std1");
    model.sol("sol1").feature().remove("s1");
    model.sol("sol1").feature().remove("v1");
    model.sol("sol1").feature().remove("st1");
    model.sol("sol1").feature().create("st1", "StudyStep");
    model.sol("sol1").feature("st1").set("study", "std1");
    model.sol("sol1").feature("st1").set("studystep", "stat");
    model.sol("sol1").feature().create("v1", "Variables");
    model.sol("sol1").feature("v1").set("control", "stat");
    model.sol("sol1").feature().create("s1", "Stationary");
    model.sol("sol1").feature("s1").feature().create("fc1", "FullyCoupled");
    model.sol("sol1").feature("s1").feature().create("i1", "Iterative");
    model.sol("sol1").feature("s1").feature("i1").set("prefuntype", "left");
    model.sol("sol1").feature("s1").feature("i1").set("maxlinit", 10000);
    model.sol("sol1").feature("s1").feature("i1").set("linsolver", "cg");
    model.sol("sol1").feature("s1").feature("i1").set("rhob", 400);
    model.sol("sol1").feature("s1").feature("fc1").set("linsolver", "i1");
    model.sol("sol1").feature("s1").feature("i1").feature().create("mg1", "Multigrid");
    model.sol("sol1").feature("s1").feature("i1").feature("mg1").set("amgauto", 3);
    model.sol("sol1").feature("s1").feature("i1").feature("mg1").set("scale", 2);
    model.sol("sol1").feature("s1").feature("i1").feature("mg1").set("gmglevels", 1);
    model.sol("sol1").feature("s1").feature("i1").feature("mg1").set("massem", true);
    model.sol("sol1").feature("s1").feature("i1").feature("mg1").set("rmethod", "longest");
    model.sol("sol1").feature("s1").feature("i1").feature("mg1").set("mkeep", false);
    model.sol("sol1").feature("s1").feature("i1").feature("mg1").set("mgcycle", "v");
    model.sol("sol1").feature("s1").feature("i1").feature("mg1").set("prefun", "amg");
    model.sol("sol1").feature("s1").feature("i1").feature("mg1").set("mcasegen", "any");
    model.sol("sol1").feature("s1").feature("i1").feature("mg1").set("mglevels", 5);
    model.sol("sol1").feature("s1").feature("i1").feature("mg1").set("iter", 2);
    model.sol("sol1").feature("s1").feature("i1").feature("mg1").set("maxcoarsedof", 5000);
    model.sol("sol1").feature("s1").feature().remove("fcDef");
    model.sol("sol1").attach("std1");
    model.sol("sol1").runAll();

    model.result("pg1").run();
    model.result("pg2").run();

    model.view("view1").hideEntities().clear();

    model.result("pg2").run();

    model.sol("sol1").study("std1");
    model.sol("sol1").feature().remove("s1");
    model.sol("sol1").feature().remove("v1");
    model.sol("sol1").feature().remove("st1");
    model.sol("sol1").feature().create("st1", "StudyStep");
    model.sol("sol1").feature("st1").set("study", "std1");
    model.sol("sol1").feature("st1").set("studystep", "stat");
    model.sol("sol1").feature().create("v1", "Variables");
    model.sol("sol1").feature("v1").set("control", "stat");
    model.sol("sol1").feature().create("s1", "Stationary");
    model.sol("sol1").feature("s1").feature().create("fc1", "FullyCoupled");
    model.sol("sol1").feature("s1").feature().create("i1", "Iterative");
    model.sol("sol1").feature("s1").feature("i1").set("prefuntype", "left");
    model.sol("sol1").feature("s1").feature("i1").set("maxlinit", 10000);
    model.sol("sol1").feature("s1").feature("i1").set("linsolver", "cg");
    model.sol("sol1").feature("s1").feature("i1").set("rhob", 400);
    model.sol("sol1").feature("s1").feature("fc1").set("linsolver", "i1");
    model.sol("sol1").feature("s1").feature("i1").feature().create("mg1", "Multigrid");
    model.sol("sol1").feature("s1").feature("i1").feature("mg1").set("amgauto", 3);
    model.sol("sol1").feature("s1").feature("i1").feature("mg1").set("scale", 2);
    model.sol("sol1").feature("s1").feature("i1").feature("mg1").set("gmglevels", 1);
    model.sol("sol1").feature("s1").feature("i1").feature("mg1").set("massem", true);
    model.sol("sol1").feature("s1").feature("i1").feature("mg1").set("rmethod", "longest");
    model.sol("sol1").feature("s1").feature("i1").feature("mg1").set("mkeep", false);
    model.sol("sol1").feature("s1").feature("i1").feature("mg1").set("mgcycle", "v");
    model.sol("sol1").feature("s1").feature("i1").feature("mg1").set("prefun", "amg");
    model.sol("sol1").feature("s1").feature("i1").feature("mg1").set("mcasegen", "any");
    model.sol("sol1").feature("s1").feature("i1").feature("mg1").set("mglevels", 5);
    model.sol("sol1").feature("s1").feature("i1").feature("mg1").set("iter", 2);
    model.sol("sol1").feature("s1").feature("i1").feature("mg1").set("maxcoarsedof", 5000);
    model.sol("sol1").feature("s1").feature().remove("fcDef");
    model.sol("sol1").attach("std1");
    model.sol("sol1").runAll();

    model.result("pg1").run();
    model.result("pg2").run();
    model.result("pg2").run();
    model.result("pg2").run();
    model.result("pg2").set("data", "cpl2");
    model.result("pg2").run();
    model.result("pg2").feature().create("arwl1", "ArrowLine");
    model.result("pg2").run();
    model.result("pg2").feature("arwl1").set("data", "cpl2");
    model.result("pg2").feature("arwl1").set("placement", "uniform");
    model.result("pg2").run();
    model.result("pg2").run();
    model.result("pg2").feature("arwl1").set("placement", "elements");
    model.result("pg2").run();
    model.result("pg2").feature("arwl1").set("placement", "uniformani");
    model.result("pg2").run();
    model.result("pg2").feature().remove("arwl1");
    model.result("pg2").run();
    model.result("pg2").feature().create("arws1", "ArrowSurface");
    model.result("pg2").run();
    model.result("pg2").feature("arws1").set("xnumber", "45");
    model.result("pg2").run();

    model.view("view1").hideEntities().clear();
    model.view("view1").hideEntities().create("hide1");
    model.view("view1").hideEntities("hide1").geom(3);
    model.view("view1").hideEntities("hide1").add(new int[]{1});

    model.physics("mfnc").feature("mfc4").set("M", new String[]{"M/sqrt(2)", "-M/sqrt(2)", "0"});
    model.physics("mfnc").feature("mfc5").set("M", new String[]{"-M/sqrt(2)", "M/sqrt(2)", "0"});

    model.sol("sol1").study("std1");
    model.sol("sol1").feature().remove("s1");
    model.sol("sol1").feature().remove("v1");
    model.sol("sol1").feature().remove("st1");
    model.sol("sol1").feature().create("st1", "StudyStep");
    model.sol("sol1").feature("st1").set("study", "std1");
    model.sol("sol1").feature("st1").set("studystep", "stat");
    model.sol("sol1").feature().create("v1", "Variables");
    model.sol("sol1").feature("v1").set("control", "stat");
    model.sol("sol1").feature().create("s1", "Stationary");
    model.sol("sol1").feature("s1").feature().create("fc1", "FullyCoupled");
    model.sol("sol1").feature("s1").feature().create("i1", "Iterative");
    model.sol("sol1").feature("s1").feature("i1").set("prefuntype", "left");
    model.sol("sol1").feature("s1").feature("i1").set("maxlinit", 10000);
    model.sol("sol1").feature("s1").feature("i1").set("linsolver", "cg");
    model.sol("sol1").feature("s1").feature("i1").set("rhob", 400);
    model.sol("sol1").feature("s1").feature("fc1").set("linsolver", "i1");
    model.sol("sol1").feature("s1").feature("i1").feature().create("mg1", "Multigrid");
    model.sol("sol1").feature("s1").feature("i1").feature("mg1").set("amgauto", 3);
    model.sol("sol1").feature("s1").feature("i1").feature("mg1").set("scale", 2);
    model.sol("sol1").feature("s1").feature("i1").feature("mg1").set("gmglevels", 1);
    model.sol("sol1").feature("s1").feature("i1").feature("mg1").set("massem", true);
    model.sol("sol1").feature("s1").feature("i1").feature("mg1").set("rmethod", "longest");
    model.sol("sol1").feature("s1").feature("i1").feature("mg1").set("mkeep", false);
    model.sol("sol1").feature("s1").feature("i1").feature("mg1").set("mgcycle", "v");
    model.sol("sol1").feature("s1").feature("i1").feature("mg1").set("prefun", "amg");
    model.sol("sol1").feature("s1").feature("i1").feature("mg1").set("mcasegen", "any");
    model.sol("sol1").feature("s1").feature("i1").feature("mg1").set("mglevels", 5);
    model.sol("sol1").feature("s1").feature("i1").feature("mg1").set("iter", 2);
    model.sol("sol1").feature("s1").feature("i1").feature("mg1").set("maxcoarsedof", 5000);
    model.sol("sol1").feature("s1").feature().remove("fcDef");
    model.sol("sol1").attach("std1");
    model.sol("sol1").runAll();

    model.result("pg1").run();
    model.result("pg2").run();

    return model;
  }

  public static Model run2(Model model) {

    model.view("view1").hideEntities().clear();

    model.result("pg2").run();
    model.result("pg2").set("allowtableupdate", true);
    model.result("pg2").set("renderdatacached", true);
    model.result().table().create("evl2", "Table");
    model.result().table("evl2").comments("Interactive 2D values");
    model.result().table("evl2").name("Evaluation 2D");
    model.result().table("evl2")
         .addRow(new double[]{-0.04721713066101074, -0.2814047336578369, 1.251334552374892E-7});
    model.result("pg1").run();

    model.physics("mfnc").feature("mfc2").set("ConstitutiveRelationH", 1, "RemanentFluxDensity");
    model.physics("mfnc").feature("mfc2").set("ConstitutiveRelationH", 1, "Magnetization");
    model.physics("mfnc").feature("mfc2").set("ConstitutiveRelationH", 1, "RemanentFluxDensity");
    model.physics("mfnc").feature("mfc2").set("Br", new String[]{"M/sqrt(2)", "M/sqrt(2)", "0"});
    model.physics("mfnc").feature("mfc3").set("ConstitutiveRelationH", 1, "RemanentFluxDensity");
    model.physics("mfnc").feature("mfc3").set("Br", new String[]{"-M/sqrt(2)", "-M/sqrt(2)", "0"});
    model.physics("mfnc").feature("mfc4").set("ConstitutiveRelationH", 1, "RemanentFluxDensity");
    model.physics("mfnc").feature("mfc4").set("Br", new String[]{"M/sqrt(2)", "-M/sqrt(2)", "0"});
    model.physics("mfnc").feature("mfc5").set("ConstitutiveRelationH", 1, "RemanentFluxDensity");
    model.physics("mfnc").feature("mfc5").set("Br", new String[]{"-M/sqrt(2)", "M/sqrt(2)", "0"});
    model.physics("mfnc").feature("mfc6").set("ConstitutiveRelationH", 1, "RemanentFluxDensity");
    model.physics("mfnc").feature("mfc6").set("Br", new String[]{"0", "0", "M"});

    model.sol("sol1").study("std1");
    model.sol("sol1").feature().remove("s1");
    model.sol("sol1").feature().remove("v1");
    model.sol("sol1").feature().remove("st1");
    model.sol("sol1").feature().create("st1", "StudyStep");
    model.sol("sol1").feature("st1").set("study", "std1");
    model.sol("sol1").feature("st1").set("studystep", "stat");
    model.sol("sol1").feature().create("v1", "Variables");
    model.sol("sol1").feature("v1").set("control", "stat");
    model.sol("sol1").feature().create("s1", "Stationary");
    model.sol("sol1").feature("s1").feature().create("fc1", "FullyCoupled");
    model.sol("sol1").feature("s1").feature().create("i1", "Iterative");
    model.sol("sol1").feature("s1").feature("i1").set("prefuntype", "left");
    model.sol("sol1").feature("s1").feature("i1").set("maxlinit", 10000);
    model.sol("sol1").feature("s1").feature("i1").set("linsolver", "cg");
    model.sol("sol1").feature("s1").feature("i1").set("rhob", 400);
    model.sol("sol1").feature("s1").feature("fc1").set("linsolver", "i1");
    model.sol("sol1").feature("s1").feature("i1").feature().create("mg1", "Multigrid");
    model.sol("sol1").feature("s1").feature("i1").feature("mg1").set("amgauto", 3);
    model.sol("sol1").feature("s1").feature("i1").feature("mg1").set("scale", 2);
    model.sol("sol1").feature("s1").feature("i1").feature("mg1").set("gmglevels", 1);
    model.sol("sol1").feature("s1").feature("i1").feature("mg1").set("massem", true);
    model.sol("sol1").feature("s1").feature("i1").feature("mg1").set("rmethod", "longest");
    model.sol("sol1").feature("s1").feature("i1").feature("mg1").set("mkeep", false);
    model.sol("sol1").feature("s1").feature("i1").feature("mg1").set("mgcycle", "v");
    model.sol("sol1").feature("s1").feature("i1").feature("mg1").set("prefun", "amg");
    model.sol("sol1").feature("s1").feature("i1").feature("mg1").set("mcasegen", "any");
    model.sol("sol1").feature("s1").feature("i1").feature("mg1").set("mglevels", 5);
    model.sol("sol1").feature("s1").feature("i1").feature("mg1").set("iter", 2);
    model.sol("sol1").feature("s1").feature("i1").feature("mg1").set("maxcoarsedof", 5000);
    model.sol("sol1").feature("s1").feature().remove("fcDef");
    model.sol("sol1").attach("std1");
    model.sol("sol1").runAll();

    model.result("pg1").run();
    model.result("pg2").run();
    model.result("pg2").set("allowtableupdate", true);
    model.result("pg2").set("renderdatacached", true);
    model.result().table("evl2").addRow(new double[]{0.008231639862060547, -2.9479563236236572, 0.7035514780767413});
    model.result("pg2").feature("surf1").set("rangecoloractive", "on");
    model.result("pg2").feature("surf1").set("rangecolormax", "0.4");
    model.result().table("evl2")
         .addRow(new double[]{0.020365357398986816, -0.07717472314834595, 0.08820717741483011});
    model.result().table("evl2")
         .addRow(new double[]{0.0058051347732543945, -0.07717472314834595, 0.08601454289263079});
    model.result("pg2").feature("surf1").set("unit", "G");
    model.result("pg2").set("allowtableupdate", true);
    model.result("pg2").set("renderdatacached", true);
    model.result().table("evl2")
         .addRow(new double[]{-0.013608455657958984, 4.7957897186279297E-4, 857.1099481873316});
    model.result().table("evl2").addRow(new double[]{0.020365357398986816, -0.16453582048416138, 895.1725851551075});
    model.result().table("evl2").addRow(new double[]{9.517669677734375E-4, 0.06357359886169434, 841.6273354532264});
    model.result().table("evl2").addRow(new double[]{0.01551198959350586, -0.009227275848388672, 866.0347471224484});
    model.result().table("evl2").addRow(new double[]{-0.5135077834129333, 0.039306640625, 2777.64324417879});
    model.result().table("evl2").addRow(new double[]{0.020365357398986816, 0.00533294677734375, 870.7097173031424});

    model.param().set("te", "1");

    model.sol("sol1").study("std1");
    model.sol("sol1").feature().remove("s1");
    model.sol("sol1").feature().remove("v1");
    model.sol("sol1").feature().remove("st1");
    model.sol("sol1").feature().create("st1", "StudyStep");
    model.sol("sol1").feature("st1").set("study", "std1");
    model.sol("sol1").feature("st1").set("studystep", "stat");
    model.sol("sol1").feature().create("v1", "Variables");
    model.sol("sol1").feature("v1").set("control", "stat");
    model.sol("sol1").feature().create("s1", "Stationary");
    model.sol("sol1").feature("s1").feature().create("fc1", "FullyCoupled");
    model.sol("sol1").feature("s1").feature().create("i1", "Iterative");
    model.sol("sol1").feature("s1").feature("i1").set("prefuntype", "left");
    model.sol("sol1").feature("s1").feature("i1").set("maxlinit", 10000);
    model.sol("sol1").feature("s1").feature("i1").set("linsolver", "cg");
    model.sol("sol1").feature("s1").feature("i1").set("rhob", 400);
    model.sol("sol1").feature("s1").feature("fc1").set("linsolver", "i1");
    model.sol("sol1").feature("s1").feature("i1").feature().create("mg1", "Multigrid");
    model.sol("sol1").feature("s1").feature("i1").feature("mg1").set("amgauto", 3);
    model.sol("sol1").feature("s1").feature("i1").feature("mg1").set("scale", 2);
    model.sol("sol1").feature("s1").feature("i1").feature("mg1").set("gmglevels", 1);
    model.sol("sol1").feature("s1").feature("i1").feature("mg1").set("massem", true);
    model.sol("sol1").feature("s1").feature("i1").feature("mg1").set("rmethod", "longest");
    model.sol("sol1").feature("s1").feature("i1").feature("mg1").set("mkeep", false);
    model.sol("sol1").feature("s1").feature("i1").feature("mg1").set("mgcycle", "v");
    model.sol("sol1").feature("s1").feature("i1").feature("mg1").set("prefun", "amg");
    model.sol("sol1").feature("s1").feature("i1").feature("mg1").set("mcasegen", "any");
    model.sol("sol1").feature("s1").feature("i1").feature("mg1").set("mglevels", 5);
    model.sol("sol1").feature("s1").feature("i1").feature("mg1").set("iter", 2);
    model.sol("sol1").feature("s1").feature("i1").feature("mg1").set("maxcoarsedof", 5000);
    model.sol("sol1").feature("s1").feature().remove("fcDef");
    model.sol("sol1").attach("std1");
    model.sol("sol1").runAll();

    model.result("pg1").run();
    model.result("pg2").run();
    model.result("pg2").set("allowtableupdate", true);
    model.result("pg2").set("renderdatacached", true);
    model.result().table("evl2").addRow(new double[]{0.01551198959350586, -0.004373908042907715, 806.7706353813752});
    model.result().table("evl2")
         .addRow(new double[]{0.025218725204467773, -0.004373908042907715, 785.3590551770922});
    model.result().table("evl2").addRow(new double[]{0.03007209300994873, -0.07232129573822021, 825.164048839154});
    model.result().table("evl2")
         .addRow(new double[]{0.039778828620910645, -0.004373908042907715, 757.3582976360351});
    model.result().table("evl2")
         .addRow(new double[]{0.025218725204467773, -0.004373908042907715, 785.3590551770922});
    model.result().table("evl2")
         .addRow(new double[]{0.0058051347732543945, -0.08202815055847168, 885.9091518579237});

    model.param().set("te", ".5");

    model.sol("sol1").study("std1");
    model.sol("sol1").feature().remove("s1");
    model.sol("sol1").feature().remove("v1");
    model.sol("sol1").feature().remove("st1");
    model.sol("sol1").feature().create("st1", "StudyStep");
    model.sol("sol1").feature("st1").set("study", "std1");
    model.sol("sol1").feature("st1").set("studystep", "stat");
    model.sol("sol1").feature().create("v1", "Variables");
    model.sol("sol1").feature("v1").set("control", "stat");
    model.sol("sol1").feature().create("s1", "Stationary");
    model.sol("sol1").feature("s1").feature().create("fc1", "FullyCoupled");
    model.sol("sol1").feature("s1").feature().create("i1", "Iterative");
    model.sol("sol1").feature("s1").feature("i1").set("prefuntype", "left");
    model.sol("sol1").feature("s1").feature("i1").set("maxlinit", 10000);
    model.sol("sol1").feature("s1").feature("i1").set("linsolver", "cg");
    model.sol("sol1").feature("s1").feature("i1").set("rhob", 400);
    model.sol("sol1").feature("s1").feature("fc1").set("linsolver", "i1");
    model.sol("sol1").feature("s1").feature("i1").feature().create("mg1", "Multigrid");
    model.sol("sol1").feature("s1").feature("i1").feature("mg1").set("amgauto", 3);
    model.sol("sol1").feature("s1").feature("i1").feature("mg1").set("scale", 2);
    model.sol("sol1").feature("s1").feature("i1").feature("mg1").set("gmglevels", 1);
    model.sol("sol1").feature("s1").feature("i1").feature("mg1").set("massem", true);
    model.sol("sol1").feature("s1").feature("i1").feature("mg1").set("rmethod", "longest");
    model.sol("sol1").feature("s1").feature("i1").feature("mg1").set("mkeep", false);
    model.sol("sol1").feature("s1").feature("i1").feature("mg1").set("mgcycle", "v");
    model.sol("sol1").feature("s1").feature("i1").feature("mg1").set("prefun", "amg");
    model.sol("sol1").feature("s1").feature("i1").feature("mg1").set("mcasegen", "any");
    model.sol("sol1").feature("s1").feature("i1").feature("mg1").set("mglevels", 5);
    model.sol("sol1").feature("s1").feature("i1").feature("mg1").set("iter", 2);
    model.sol("sol1").feature("s1").feature("i1").feature("mg1").set("maxcoarsedof", 5000);
    model.sol("sol1").feature("s1").feature().remove("fcDef");
    model.sol("sol1").attach("std1");
    model.sol("sol1").runAll();

    model.result("pg1").run();
    model.result("pg2").run();
    model.result("pg2").set("allowtableupdate", true);
    model.result("pg2").set("renderdatacached", true);
    model.result().table("evl2")
         .addRow(new double[]{-0.013608455657958984, -0.03349417448043823, 605.6898580517025});
    model.result().table("evl2").addRow(new double[]{9.517669677734375E-4, -0.05290776491165161, 584.6270551900493});
    model.result().table("evl2")
         .addRow(new double[]{-0.0039016008377075195, -0.004373908042907715, 586.8964485574688});
    model.result().table("evl2").addRow(new double[]{0.008231639862060547, 2.1578121185302734, 1951.7279804975176});
    model.result().table("evl2").addRow(new double[]{-0.011181831359863281, 2.235466957092285, 1971.9812079259366});

    model.param().set("te", "2");

    model.sol("sol1").study("std1");
    model.sol("sol1").feature().remove("s1");
    model.sol("sol1").feature().remove("v1");
    model.sol("sol1").feature().remove("st1");
    model.sol("sol1").feature().create("st1", "StudyStep");
    model.sol("sol1").feature("st1").set("study", "std1");
    model.sol("sol1").feature("st1").set("studystep", "stat");
    model.sol("sol1").feature().create("v1", "Variables");
    model.sol("sol1").feature("v1").set("control", "stat");
    model.sol("sol1").feature().create("s1", "Stationary");
    model.sol("sol1").feature("s1").feature().create("fc1", "FullyCoupled");
    model.sol("sol1").feature("s1").feature().create("i1", "Iterative");
    model.sol("sol1").feature("s1").feature("i1").set("prefuntype", "left");
    model.sol("sol1").feature("s1").feature("i1").set("maxlinit", 10000);
    model.sol("sol1").feature("s1").feature("i1").set("linsolver", "cg");
    model.sol("sol1").feature("s1").feature("i1").set("rhob", 400);
    model.sol("sol1").feature("s1").feature("fc1").set("linsolver", "i1");
    model.sol("sol1").feature("s1").feature("i1").feature().create("mg1", "Multigrid");
    model.sol("sol1").feature("s1").feature("i1").feature("mg1").set("amgauto", 3);
    model.sol("sol1").feature("s1").feature("i1").feature("mg1").set("scale", 2);
    model.sol("sol1").feature("s1").feature("i1").feature("mg1").set("gmglevels", 1);
    model.sol("sol1").feature("s1").feature("i1").feature("mg1").set("massem", true);
    model.sol("sol1").feature("s1").feature("i1").feature("mg1").set("rmethod", "longest");
    model.sol("sol1").feature("s1").feature("i1").feature("mg1").set("mkeep", false);
    model.sol("sol1").feature("s1").feature("i1").feature("mg1").set("mgcycle", "v");
    model.sol("sol1").feature("s1").feature("i1").feature("mg1").set("prefun", "amg");
    model.sol("sol1").feature("s1").feature("i1").feature("mg1").set("mcasegen", "any");
    model.sol("sol1").feature("s1").feature("i1").feature("mg1").set("mglevels", 5);
    model.sol("sol1").feature("s1").feature("i1").feature("mg1").set("iter", 2);
    model.sol("sol1").feature("s1").feature("i1").feature("mg1").set("maxcoarsedof", 5000);
    model.sol("sol1").feature("s1").feature().remove("fcDef");
    model.sol("sol1").attach("std1");
    model.sol("sol1").runAll();

    model.result("pg1").run();
    model.result("pg2").run();
    model.result("pg2").set("allowtableupdate", true);
    model.result("pg2").set("renderdatacached", true);
    model.result().table("evl2").addRow(new double[]{-0.03059530258178711, -0.0941617488861084, 915.0325458712389});
    model.result().table("evl2")
         .addRow(new double[]{-0.011181831359863281, 0.002906322479248047, 849.4667179229281});
    model.result().table("evl2").addRow(new double[]{-0.03059530258178711, 0.022319793701171875, 908.4047589406689});
    model.result().table("evl2")
         .addRow(new double[]{0.008231639862060547, -0.016507387161254883, 857.7241281317224});
    model.result("pg2").run();
    model.result("pg2").feature("surf1").set("rangecolormax", "12000");
    model.result("pg2").set("allowtableupdate", true);
    model.result("pg2").set("renderdatacached", true);
    model.result().table("evl2").addRow(new double[]{-0.0014743804931640625, -2.9188361167907715, 6986.81332909575});
    model.result().table("evl2").addRow(new double[]{-0.04030132293701172, -2.9188361167907715, 6964.487450200637});
    model.result().table("evl2").addRow(new double[]{-0.0014743804931640625, 3.021716594696045, 6756.133450846126});
    model.result().table("evl2").addRow(new double[]{-0.0014743804931640625, 3.021716594696045, 6756.133450846126});
    model.result().table("evl2").addRow(new double[]{-0.0014743804931640625, 2.7499260902404785, 6739.537554943498});
    model.result().table("evl2").addRow(new double[]{-0.04030132293701172, 3.0605435371398926, 6782.971891650176});
    model.result().table("evl2")
         .addRow(new double[]{0.008231639862060547, -0.016507387161254883, 857.7241281317224});
    model.result().table("evl2")
         .addRow(new double[]{0.008231639862060547, -0.016507387161254883, 857.7241281317224});
    model.result().table("evl2").addRow(new double[]{-1.4671993255615234, -0.15240240097045898, 8918.855135713595});
    model.result().table("evl2").addRow(new double[]{0.027645111083984375, -0.0941617488861084, 896.3177144353795});
    model.result().table("evl2").addRow(new double[]{0.027645111083984375, -0.0941617488861084, 896.3177144353795});
    model.result().table("evl2").addRow(new double[]{1.0177373886108398, 0.13880133628845215, 5657.657012737168});
    model.result().dataset("cpl2").set("quickx", ".5");
    model.result("pg2").run();
    model.result().dataset("cpl2").set("quickx", "1");
    model.result("pg2").run();
    model.result().dataset("cpl2").set("quickx", "1.5");
    model.result("pg2").run();
    model.result().dataset("cpl2").set("quickx", ".2");
    model.result("pg2").run();
    model.result().dataset("cpl2").set("quickx", ".5");
    model.result("pg2").run();
    model.result().dataset("cpl2").run();
    model.result().dataset("cpl2").set("quickx", "0");
    model.result().dataset().duplicate("cpl3", "cpl2");
    model.result().dataset("cpl3").set("planetype", "general");
    model.result().dataset("cpl3").setIndex("genpoints", "1", 2, 2);
    model.result().dataset("cpl3").setIndex("genpoints", "1", 1, 1);
    model.result().dataset("cpl3").setIndex("genpoints", "1", 2, 0);
    model.result().dataset("cpl3").run();
    model.result("pg2").run();
    model.result("pg2").run();
    model.result("pg2").set("data", "cpl3");
    model.result("pg2").run();
    model.result("pg2").set("allowtableupdate", true);
    model.result("pg2").set("renderdatacached", true);
    model.result().table("evl2").addRow(new double[]{0.027684688568115234, 0.07613253593444824, 831.6667645270201});
    model.result().table("evl2").addRow(new double[]{0.027684688568115234, 0.07613253593444824, 831.6667645270201});
    model.result().table("evl2").addRow(new double[]{0.6367449760437012, 1.3911492824554443, 2557.2080923329895});
    model.result().table("evl2").addRow(new double[]{0.6367449760437012, 1.3911492824554443, 2557.2080923329895});
    model.result().table("evl2").addRow(new double[]{-0.6921138763427734, 1.4465186595916748, 2597.589744334289});
    model.result().table("evl2").addRow(new double[]{0.006921291351318359, -0.03806638717651367, 841.2795617329816});
    model.result().table("evl2").addRow(new double[]{0.006921291351318359, -0.03806638717651367, 841.2795617329816});
    model.result().table("evl2").addRow(new double[]{1.2596476078033447, 1.7614303827285767, 911.0217013316146});
    model.result().table("evl2").addRow(new double[]{1.2388842105865479, 1.7129822969436646, 1206.0021659251765});
    model.result().table("evl2").addRow(new double[]{1.2596476078033447, 1.7337456941604614, 1126.4691780787928});
    model.result().table("evl2").addRow(new double[]{1.2319629192352295, 1.8029571771621704, 1184.9469674703323});
    model.result().table("evl2").addRow(new double[]{1.2804110050201416, 1.7821937799453735, 1244.2762991083132});
    model.result().table("evl2").addRow(new double[]{1.2596476078033447, 1.6783770322799683, 1759.3076027333918});
    model.result().table("evl2").addRow(new double[]{3.2252519130706787, -2.05903959274292, 2253.903713121741});
    model.result().table("evl2").addRow(new double[]{3.3152267932891846, -2.0521183013916016, 2297.319170057265});
    model.result().table("evl2").addRow(new double[]{-1.2111997604370117, 1.7406672239303589, 860.5423798320383});
    model.result().table("evl2").addRow(new double[]{-1.2111997604370117, 1.7406672239303589, 860.5423798320383});
    model.result("pg2").run();
    model.result("pg2").feature("arws1").setIndex("expr", "mfnc.Bz", 1);
    model.result("pg2").feature("arws1").setIndex("expr", "(mfnc.Bx+mfnc.By)/sqrt(2)", 0);
    model.result("pg2").run();
    model.result().dataset("cpl3").run();

    model.param().set("tc", "1");

    model.sol("sol1").study("std1");
    model.sol("sol1").feature().remove("s1");
    model.sol("sol1").feature().remove("v1");
    model.sol("sol1").feature().remove("st1");
    model.sol("sol1").feature().create("st1", "StudyStep");
    model.sol("sol1").feature("st1").set("study", "std1");
    model.sol("sol1").feature("st1").set("studystep", "stat");
    model.sol("sol1").feature().create("v1", "Variables");
    model.sol("sol1").feature("v1").set("control", "stat");
    model.sol("sol1").feature().create("s1", "Stationary");
    model.sol("sol1").feature("s1").feature().create("fc1", "FullyCoupled");
    model.sol("sol1").feature("s1").feature().create("i1", "Iterative");
    model.sol("sol1").feature("s1").feature("i1").set("prefuntype", "left");
    model.sol("sol1").feature("s1").feature("i1").set("maxlinit", 10000);
    model.sol("sol1").feature("s1").feature("i1").set("linsolver", "cg");
    model.sol("sol1").feature("s1").feature("i1").set("rhob", 400);
    model.sol("sol1").feature("s1").feature("fc1").set("linsolver", "i1");
    model.sol("sol1").feature("s1").feature("i1").feature().create("mg1", "Multigrid");
    model.sol("sol1").feature("s1").feature("i1").feature("mg1").set("amgauto", 3);
    model.sol("sol1").feature("s1").feature("i1").feature("mg1").set("scale", 2);
    model.sol("sol1").feature("s1").feature("i1").feature("mg1").set("gmglevels", 1);
    model.sol("sol1").feature("s1").feature("i1").feature("mg1").set("massem", true);
    model.sol("sol1").feature("s1").feature("i1").feature("mg1").set("rmethod", "longest");
    model.sol("sol1").feature("s1").feature("i1").feature("mg1").set("mkeep", false);
    model.sol("sol1").feature("s1").feature("i1").feature("mg1").set("mgcycle", "v");
    model.sol("sol1").feature("s1").feature("i1").feature("mg1").set("prefun", "amg");
    model.sol("sol1").feature("s1").feature("i1").feature("mg1").set("mcasegen", "any");
    model.sol("sol1").feature("s1").feature("i1").feature("mg1").set("mglevels", 5);
    model.sol("sol1").feature("s1").feature("i1").feature("mg1").set("iter", 2);
    model.sol("sol1").feature("s1").feature("i1").feature("mg1").set("maxcoarsedof", 5000);
    model.sol("sol1").feature("s1").feature().remove("fcDef");
    model.sol("sol1").attach("std1");
    model.sol("sol1").runAll();

    model.result("pg1").run();
    model.result("pg2").run();

    model.geom("geom1").feature("cyl5").set("h", "(tc+2*te)*1.5");

    model.sol("sol1").study("std1");
    model.sol("sol1").feature().remove("s1");
    model.sol("sol1").feature().remove("v1");
    model.sol("sol1").feature().remove("st1");
    model.sol("sol1").feature().create("st1", "StudyStep");
    model.sol("sol1").feature("st1").set("study", "std1");
    model.sol("sol1").feature("st1").set("studystep", "stat");
    model.sol("sol1").feature().create("v1", "Variables");
    model.sol("sol1").feature("v1").set("control", "stat");
    model.sol("sol1").feature().create("s1", "Stationary");
    model.sol("sol1").feature("s1").feature().create("fc1", "FullyCoupled");
    model.sol("sol1").feature("s1").feature().create("i1", "Iterative");
    model.sol("sol1").feature("s1").feature("i1").set("prefuntype", "left");
    model.sol("sol1").feature("s1").feature("i1").set("maxlinit", 10000);
    model.sol("sol1").feature("s1").feature("i1").set("linsolver", "cg");
    model.sol("sol1").feature("s1").feature("i1").set("rhob", 400);
    model.sol("sol1").feature("s1").feature("fc1").set("linsolver", "i1");
    model.sol("sol1").feature("s1").feature("i1").feature().create("mg1", "Multigrid");
    model.sol("sol1").feature("s1").feature("i1").feature("mg1").set("amgauto", 3);
    model.sol("sol1").feature("s1").feature("i1").feature("mg1").set("scale", 2);
    model.sol("sol1").feature("s1").feature("i1").feature("mg1").set("gmglevels", 1);
    model.sol("sol1").feature("s1").feature("i1").feature("mg1").set("massem", true);
    model.sol("sol1").feature("s1").feature("i1").feature("mg1").set("rmethod", "longest");
    model.sol("sol1").feature("s1").feature("i1").feature("mg1").set("mkeep", false);
    model.sol("sol1").feature("s1").feature("i1").feature("mg1").set("mgcycle", "v");
    model.sol("sol1").feature("s1").feature("i1").feature("mg1").set("prefun", "amg");
    model.sol("sol1").feature("s1").feature("i1").feature("mg1").set("mcasegen", "any");
    model.sol("sol1").feature("s1").feature("i1").feature("mg1").set("mglevels", 5);
    model.sol("sol1").feature("s1").feature("i1").feature("mg1").set("iter", 2);
    model.sol("sol1").feature("s1").feature("i1").feature("mg1").set("maxcoarsedof", 5000);
    model.sol("sol1").feature("s1").feature().remove("fcDef");
    model.sol("sol1").attach("std1");
    model.sol("sol1").runAll();

    model.result("pg1").run();
    model.result("pg2").run();
    model.result("pg2").run();

    model.geom("geom1").feature("cyl5").setIndex("pos", "-(tc+2*te)*1.5/2", 2);
    model.geom("geom1").run();

    model.physics("mfnc").feature("mfc6").active(false);

    model.sol("sol1").study("std1");
    model.sol("sol1").feature().remove("s1");
    model.sol("sol1").feature().remove("v1");
    model.sol("sol1").feature().remove("st1");
    model.sol("sol1").feature().create("st1", "StudyStep");
    model.sol("sol1").feature("st1").set("study", "std1");
    model.sol("sol1").feature("st1").set("studystep", "stat");
    model.sol("sol1").feature().create("v1", "Variables");
    model.sol("sol1").feature("v1").set("control", "stat");
    model.sol("sol1").feature().create("s1", "Stationary");
    model.sol("sol1").feature("s1").feature().create("fc1", "FullyCoupled");
    model.sol("sol1").feature("s1").feature().create("i1", "Iterative");
    model.sol("sol1").feature("s1").feature("i1").set("prefuntype", "left");
    model.sol("sol1").feature("s1").feature("i1").set("maxlinit", 10000);
    model.sol("sol1").feature("s1").feature("i1").set("linsolver", "cg");
    model.sol("sol1").feature("s1").feature("i1").set("rhob", 400);
    model.sol("sol1").feature("s1").feature("fc1").set("linsolver", "i1");
    model.sol("sol1").feature("s1").feature("i1").feature().create("mg1", "Multigrid");
    model.sol("sol1").feature("s1").feature("i1").feature("mg1").set("amgauto", 3);
    model.sol("sol1").feature("s1").feature("i1").feature("mg1").set("scale", 2);
    model.sol("sol1").feature("s1").feature("i1").feature("mg1").set("gmglevels", 1);
    model.sol("sol1").feature("s1").feature("i1").feature("mg1").set("massem", true);
    model.sol("sol1").feature("s1").feature("i1").feature("mg1").set("rmethod", "longest");
    model.sol("sol1").feature("s1").feature("i1").feature("mg1").set("mkeep", false);
    model.sol("sol1").feature("s1").feature("i1").feature("mg1").set("mgcycle", "v");
    model.sol("sol1").feature("s1").feature("i1").feature("mg1").set("prefun", "amg");
    model.sol("sol1").feature("s1").feature("i1").feature("mg1").set("mcasegen", "any");
    model.sol("sol1").feature("s1").feature("i1").feature("mg1").set("mglevels", 5);
    model.sol("sol1").feature("s1").feature("i1").feature("mg1").set("iter", 2);
    model.sol("sol1").feature("s1").feature("i1").feature("mg1").set("maxcoarsedof", 5000);
    model.sol("sol1").feature("s1").feature().remove("fcDef");
    model.sol("sol1").attach("std1");
    model.sol("sol1").runAll();

    model.result("pg1").run();
    model.result("pg2").run();
    model.result("pg2").feature("surf1").set("rangecolormax", "5000");

    model.name("magnetoelectrostatic.mph");

    model.result("pg2").run();

    model.physics().create("es", "Electrostatics", "geom1");

    model.study("std1").feature("stat").activate("es", false);
    model.study().create("std2");
    model.study("std2").feature().create("stat", "Stationary");
    model.study("std2").feature("stat").set("sweeptype", "sparse");
    model.study("std2").feature("stat").set("plistarr_vector_start", new String[]{});
    model.study("std2").feature("stat").set("notmanualsolnum", 1);
    model.study("std2").feature("stat").set("timeinterp", "off");
    model.study("std2").feature("stat").set("usesol", "off");
    model.study("std2").feature("stat").set("plistarrexceloverwrite", true);
    model.study("std2").feature("stat").set("constraintgroup", new String[][]{});
    model.study("std2").feature("stat").set("plot", "off");
    model.study("std2").feature("stat").set("adaption", "off");
    model.study("std2").feature("stat").set("notstudy", "zero");
    model.study("std2").feature("stat").set("notsolnum", 1);
    model.study("std2").feature("stat").set("plistarr", new String[][]{});
    model.study("std2").feature("stat").set("plistarr_vector_numvalues", new String[]{});
    model.study("std2").feature("stat").set("plist", "");
    model.study("std2").feature("stat").set("nottimeinterp", "off");
    model.study("std2").feature("stat").set("useloadcase", "off");
    model.study("std2").feature("stat").set("loadgroup", new String[][]{});
    model.study("std2").feature("stat").set("useparam", "off");
    model.study("std2").feature("stat").set("plistarr_vector_step", new String[]{});
    model.study("std2").feature("stat").set("plistarrexcelfilename", "");
    model.study("std2").feature("stat").set("plistarr_vector_function", new String[]{});
    model.study("std2").feature("stat").set("plistarr_vector_method", new String[]{});
    model.study("std2").feature("stat").set("notsolmethod", "init");
    model.study("std2").feature("stat").set("optimization", false);
    model.study("std2").feature("stat").set("geometricNonlinearity", false);
    model.study("std2").feature("stat").set("nott", 0);
    model.study("std2").feature("stat").set("solnum", 1);
    model.study("std2").feature("stat").set("notmanualsol", "off");
    model.study("std2").feature("stat").set("useinitsol", "off");
    model.study("std2").feature("stat").set("loadgroupweight", new double[][]{});
    model.study("std2").feature("stat").set("manualsolnum", 1);
    model.study("std2").feature("stat").set("initstudy", "zero");
    model.study("std2").feature("stat").set("manualsol", "off");
    model.study("std2").feature("stat").set("probesel", "all");
    model.study("std2").feature("stat").set("notsolvertype", "none");
    model.study("std2").feature("stat").set("loadcase", new String[]{});
    model.study("std2").feature("stat").set("t", 0);
    model.study("std2").feature("stat").set("plistarrexcelsheet", "");
    model.study("std2").feature("stat").set("geometricNonlinearityActive", true);
    model.study("std2").feature("stat").set("solvertype", "none");
    model.study("std2").feature("stat").set("pname", new String[]{});
    model.study("std2").feature("stat").set("plistarr_vector_stop", new String[]{});
    model.study("std2").feature("stat").set("showGeometricNonlinearity", "on");
    model.study("std2").feature("stat").set("initmethod", "init");
    model.study("std2").feature("stat").set("plistarrexcelrange", "");
    model.study("std2").feature("stat").activate("mfnc", true);
    model.study("std2").feature("stat").activate("es", true);

    model.param().set("te", "1");
    model.param().set("sp", "2");

    model.geom("geom1").feature("cyl3").setIndex("pos", "tc/2+sp", 2);
    model.geom("geom1").feature("cyl4").setIndex("pos", "tc/2+sp", 2);
    model.geom("geom1").feature("cyl5").setIndex("pos", "-(tc+2*te+2*sp)*1.5/2", 2);
    model.geom("geom1").feature("cyl5").set("h", "(tc+2*te+2*sp)*1.5");
    model.geom("geom1").feature("copy4").set("displz", "-tc-te-sp-sp");
    model.geom("geom1").runAll();
    model.geom("geom1").run();

    model.view("view1").hideEntities().create("hide1");
    model.view("view1").hideEntities("hide1").geom(3);

    return model;
  }

  public static Model run3(Model model) {
    model.view("view1").hideEntities("hide1").add(new int[]{1});

    model.physics("es").feature().create("pot1", "ElectricPotential", 2);
    model.physics("es").feature("pot1").selection().set(new int[]{5, 6, 7, 8, 20, 21, 27, 33, 36, 42});
    model.physics("es").feature("pot1").set("V0", 1, "vp");

    model.param().set("vp", "300000");
    model.param().set("vm", "300000");

    model.physics("es").feature().duplicate("pot2", "pot1");
    model.physics("es").feature("pot2").selection().set(new int[]{16, 17, 18, 19, 24, 25, 32, 35, 41, 44});
    model.physics("es").feature("pot2").set("V0", 1, "vm");

    model.study().remove("std2");

    model.sol("sol1").study("std1");
    model.sol("sol1").feature().remove("s1");
    model.sol("sol1").feature().remove("v1");
    model.sol("sol1").feature().remove("st1");
    model.sol("sol1").feature().create("st1", "StudyStep");
    model.sol("sol1").feature("st1").set("study", "std1");
    model.sol("sol1").feature("st1").set("studystep", "stat");
    model.sol("sol1").feature().create("v1", "Variables");
    model.sol("sol1").feature("v1").set("control", "stat");
    model.sol("sol1").feature().create("s1", "Stationary");
    model.sol("sol1").feature("s1").feature().create("fc1", "FullyCoupled");
    model.sol("sol1").feature("s1").feature().create("i1", "Iterative");
    model.sol("sol1").feature("s1").feature("i1").set("prefuntype", "left");
    model.sol("sol1").feature("s1").feature("i1").set("maxlinit", 10000);
    model.sol("sol1").feature("s1").feature("i1").set("linsolver", "cg");
    model.sol("sol1").feature("s1").feature("i1").set("rhob", 400);
    model.sol("sol1").feature("s1").feature("fc1").set("linsolver", "i1");
    model.sol("sol1").feature("s1").feature("i1").feature().create("mg1", "Multigrid");
    model.sol("sol1").feature("s1").feature("i1").feature("mg1").set("amgauto", 3);
    model.sol("sol1").feature("s1").feature("i1").feature("mg1").set("scale", 2);
    model.sol("sol1").feature("s1").feature("i1").feature("mg1").set("gmglevels", 1);
    model.sol("sol1").feature("s1").feature("i1").feature("mg1").set("massem", true);
    model.sol("sol1").feature("s1").feature("i1").feature("mg1").set("rmethod", "longest");
    model.sol("sol1").feature("s1").feature("i1").feature("mg1").set("mkeep", false);
    model.sol("sol1").feature("s1").feature("i1").feature("mg1").set("mgcycle", "v");
    model.sol("sol1").feature("s1").feature("i1").feature("mg1").set("prefun", "amg");
    model.sol("sol1").feature("s1").feature("i1").feature("mg1").set("mcasegen", "any");
    model.sol("sol1").feature("s1").feature("i1").feature("mg1").set("mglevels", 5);
    model.sol("sol1").feature("s1").feature("i1").feature("mg1").set("iter", 2);
    model.sol("sol1").feature("s1").feature("i1").feature("mg1").set("maxcoarsedof", 5000);
    model.sol("sol1").feature("s1").feature().remove("fcDef");
    model.sol("sol1").attach("std1");
    model.sol("sol1").runAll();

    model.result("pg1").run();

    model.sol().remove("sol1");

    model.study("std1").feature().clear();
    model.study("std1").feature().create("stat", "Stationary");
    model.study("std1").feature("stat").set("sweeptype", "sparse");
    model.study("std1").feature("stat").set("plistarr_vector_start", new String[]{});
    model.study("std1").feature("stat").set("notmanualsolnum", 1);
    model.study("std1").feature("stat").set("timeinterp", "off");
    model.study("std1").feature("stat").set("usesol", "off");
    model.study("std1").feature("stat").set("plistarrexceloverwrite", true);
    model.study("std1").feature("stat").set("constraintgroup", new String[][]{});
    model.study("std1").feature("stat").set("plot", "off");
    model.study("std1").feature("stat").set("adaption", "off");
    model.study("std1").feature("stat").set("notstudy", "zero");
    model.study("std1").feature("stat").set("notsolnum", 1);
    model.study("std1").feature("stat").set("plistarr", new String[][]{});
    model.study("std1").feature("stat").set("plistarr_vector_numvalues", new String[]{});
    model.study("std1").feature("stat").set("plist", "");
    model.study("std1").feature("stat").set("nottimeinterp", "off");
    model.study("std1").feature("stat").set("useloadcase", "off");
    model.study("std1").feature("stat").set("loadgroup", new String[][]{});
    model.study("std1").feature("stat").set("useparam", "off");
    model.study("std1").feature("stat").set("plistarr_vector_step", new String[]{});
    model.study("std1").feature("stat").set("plistarrexcelfilename", "");
    model.study("std1").feature("stat").set("plistarr_vector_function", new String[]{});
    model.study("std1").feature("stat").set("plistarr_vector_method", new String[]{});
    model.study("std1").feature("stat").set("notsolmethod", "init");
    model.study("std1").feature("stat").set("optimization", false);
    model.study("std1").feature("stat").set("geometricNonlinearity", false);
    model.study("std1").feature("stat").set("nott", 0);
    model.study("std1").feature("stat").set("solnum", 1);
    model.study("std1").feature("stat").set("notmanualsol", "off");
    model.study("std1").feature("stat").set("useinitsol", "off");
    model.study("std1").feature("stat").set("loadgroupweight", new double[][]{});
    model.study("std1").feature("stat").set("manualsolnum", 1);
    model.study("std1").feature("stat").set("initstudy", "zero");
    model.study("std1").feature("stat").set("manualsol", "off");
    model.study("std1").feature("stat").set("probesel", "all");
    model.study("std1").feature("stat").set("notsolvertype", "none");
    model.study("std1").feature("stat").set("loadcase", new String[]{});
    model.study("std1").feature("stat").set("t", 0);
    model.study("std1").feature("stat").set("plistarrexcelsheet", "");
    model.study("std1").feature("stat").set("geometricNonlinearityActive", true);
    model.study("std1").feature("stat").set("solvertype", "none");
    model.study("std1").feature("stat").set("pname", new String[]{});
    model.study("std1").feature("stat").set("plistarr_vector_stop", new String[]{});
    model.study("std1").feature("stat").set("showGeometricNonlinearity", "on");
    model.study("std1").feature("stat").set("initmethod", "init");
    model.study("std1").feature("stat").set("plistarrexcelrange", "");
    model.study("std1").feature("stat").activate("mfnc", true);
    model.study("std1").feature("stat").activate("es", true);

    model.sol().create("sol1");
    model.sol("sol1").study("std1");
    model.sol("sol1").feature().create("st1", "StudyStep");
    model.sol("sol1").feature("st1").set("study", "std1");
    model.sol("sol1").feature("st1").set("studystep", "stat");
    model.sol("sol1").feature().create("v1", "Variables");
    model.sol("sol1").feature("v1").set("control", "stat");
    model.sol("sol1").feature().create("s1", "Stationary");
    model.sol("sol1").feature("s1").feature().create("se1", "Segregated");
    model.sol("sol1").feature("s1").feature("se1").feature().remove("ssDef");
    model.sol("sol1").feature("s1").feature("se1").feature().create("ss1", "SegregatedStep");
    model.sol("sol1").feature("s1").feature("se1").feature("ss1").set("segvar", new String[]{"mod1_V"});
    model.sol("sol1").feature("s1").feature().create("i1", "Iterative");
    model.sol("sol1").feature("s1").feature("i1").set("prefuntype", "left");
    model.sol("sol1").feature("s1").feature("i1").set("maxlinit", 10000);
    model.sol("sol1").feature("s1").feature("i1").set("linsolver", "cg");
    model.sol("sol1").feature("s1").feature("i1").set("rhob", 400);
    model.sol("sol1").feature("s1").feature("se1").feature("ss1").set("linsolver", "i1");
    model.sol("sol1").feature("s1").feature("i1").feature().create("mg1", "Multigrid");
    model.sol("sol1").feature("s1").feature("i1").feature("mg1").set("amgauto", 3);
    model.sol("sol1").feature("s1").feature("i1").feature("mg1").set("scale", 2);
    model.sol("sol1").feature("s1").feature("i1").feature("mg1").set("gmglevels", 1);
    model.sol("sol1").feature("s1").feature("i1").feature("mg1").set("massem", true);
    model.sol("sol1").feature("s1").feature("i1").feature("mg1").set("rmethod", "longest");
    model.sol("sol1").feature("s1").feature("i1").feature("mg1").set("mkeep", false);
    model.sol("sol1").feature("s1").feature("i1").feature("mg1").set("mgcycle", "v");
    model.sol("sol1").feature("s1").feature("i1").feature("mg1").set("prefun", "amg");
    model.sol("sol1").feature("s1").feature("i1").feature("mg1").set("mcasegen", "any");
    model.sol("sol1").feature("s1").feature("i1").feature("mg1").set("mglevels", 5);
    model.sol("sol1").feature("s1").feature("i1").feature("mg1").set("iter", 2);
    model.sol("sol1").feature("s1").feature("i1").feature("mg1").set("maxcoarsedof", 5000);
    model.sol("sol1").feature("s1").feature("se1").feature().create("ss2", "SegregatedStep");
    model.sol("sol1").feature("s1").feature("se1").feature("ss2").set("segvar", new String[]{"mod1_Vm"});
    model.sol("sol1").feature("s1").feature().create("i2", "Iterative");
    model.sol("sol1").feature("s1").feature("i2").set("prefuntype", "left");
    model.sol("sol1").feature("s1").feature("i2").set("maxlinit", 10000);
    model.sol("sol1").feature("s1").feature("i2").set("linsolver", "cg");
    model.sol("sol1").feature("s1").feature("i2").set("rhob", 400);
    model.sol("sol1").feature("s1").feature("se1").feature("ss2").set("linsolver", "i2");
    model.sol("sol1").feature("s1").feature("i2").feature().create("mg1", "Multigrid");
    model.sol("sol1").feature("s1").feature("i2").feature("mg1").set("amgauto", 3);
    model.sol("sol1").feature("s1").feature("i2").feature("mg1").set("scale", 2);
    model.sol("sol1").feature("s1").feature("i2").feature("mg1").set("gmglevels", 1);
    model.sol("sol1").feature("s1").feature("i2").feature("mg1").set("massem", true);
    model.sol("sol1").feature("s1").feature("i2").feature("mg1").set("rmethod", "longest");
    model.sol("sol1").feature("s1").feature("i2").feature("mg1").set("mkeep", false);
    model.sol("sol1").feature("s1").feature("i2").feature("mg1").set("mgcycle", "v");
    model.sol("sol1").feature("s1").feature("i2").feature("mg1").set("prefun", "amg");
    model.sol("sol1").feature("s1").feature("i2").feature("mg1").set("mcasegen", "any");
    model.sol("sol1").feature("s1").feature("i2").feature("mg1").set("mglevels", 5);
    model.sol("sol1").feature("s1").feature("i2").feature("mg1").set("iter", 2);
    model.sol("sol1").feature("s1").feature("i2").feature("mg1").set("maxcoarsedof", 5000);
    model.sol("sol1").feature("s1").feature().remove("fcDef");
    model.sol("sol1").attach("std1");

    model.result().create("pg1", "PlotGroup3D");
    model.result("pg1").name("Magnetic flux density");
    model.result("pg1").set("data", "dset1");
    model.result("pg1").feature().create("mslc1", "Multislice");
    model.result("pg1").feature("mslc1").name("Multislice 1.1");
    model.result("pg1").feature("mslc1").set("expr", "mfnc.normB");
    model.result("pg1").feature("mslc1").set("data", "parent");
    model.result().create("pg2", "PlotGroup3D");
    model.result("pg2").name("Electric potential");
    model.result("pg2").set("data", "dset1");
    model.result("pg2").feature().create("mslc1", "Multislice");
    model.result("pg2").feature("mslc1").name("Multislice");
    model.result("pg2").feature("mslc1").set("expr", "V");
    model.result("pg2").feature("mslc1").set("data", "parent");

    model.sol("sol1").runAll();

    model.result("pg1").run();

    model.view("view1").hideEntities().clear();

    model.result("pg1").run();
    model.result("pg2").run();

    model.physics("es").feature().create("pot3", "ElectricPotential", 2);

    model.view("view1").hideEntities().create("hide1");
    model.view("view1").hideEntities("hide1").geom(3);
    model.view("view1").hideEntities("hide1").add(new int[]{1});
    model.view("view1").hideEntities("hide1").add(new int[]{2});
    model.view("view1").hideEntities("hide1").add(new int[]{5});

    model.physics("es").feature("pot3").selection()
         .set(new int[]{10, 11, 12, 13, 14, 15, 22, 23, 29, 30, 31, 34, 38, 39, 40, 43});

    model.sol("sol1").study("std1");
    model.sol("sol1").feature().remove("s1");
    model.sol("sol1").feature().remove("v1");
    model.sol("sol1").feature().remove("st1");
    model.sol("sol1").feature().create("st1", "StudyStep");
    model.sol("sol1").feature("st1").set("study", "std1");
    model.sol("sol1").feature("st1").set("studystep", "stat");
    model.sol("sol1").feature().create("v1", "Variables");
    model.sol("sol1").feature("v1").set("control", "stat");
    model.sol("sol1").feature().create("s1", "Stationary");
    model.sol("sol1").feature("s1").feature().create("se1", "Segregated");
    model.sol("sol1").feature("s1").feature("se1").feature().remove("ssDef");
    model.sol("sol1").feature("s1").feature("se1").feature().create("ss1", "SegregatedStep");
    model.sol("sol1").feature("s1").feature("se1").feature("ss1").set("segvar", new String[]{"mod1_V"});
    model.sol("sol1").feature("s1").feature().create("i1", "Iterative");
    model.sol("sol1").feature("s1").feature("i1").set("prefuntype", "left");
    model.sol("sol1").feature("s1").feature("i1").set("maxlinit", 10000);
    model.sol("sol1").feature("s1").feature("i1").set("linsolver", "cg");
    model.sol("sol1").feature("s1").feature("i1").set("rhob", 400);
    model.sol("sol1").feature("s1").feature("se1").feature("ss1").set("linsolver", "i1");
    model.sol("sol1").feature("s1").feature("i1").feature().create("mg1", "Multigrid");
    model.sol("sol1").feature("s1").feature("i1").feature("mg1").set("amgauto", 3);
    model.sol("sol1").feature("s1").feature("i1").feature("mg1").set("scale", 2);
    model.sol("sol1").feature("s1").feature("i1").feature("mg1").set("gmglevels", 1);
    model.sol("sol1").feature("s1").feature("i1").feature("mg1").set("massem", true);
    model.sol("sol1").feature("s1").feature("i1").feature("mg1").set("rmethod", "longest");
    model.sol("sol1").feature("s1").feature("i1").feature("mg1").set("mkeep", false);
    model.sol("sol1").feature("s1").feature("i1").feature("mg1").set("mgcycle", "v");
    model.sol("sol1").feature("s1").feature("i1").feature("mg1").set("prefun", "amg");
    model.sol("sol1").feature("s1").feature("i1").feature("mg1").set("mcasegen", "any");
    model.sol("sol1").feature("s1").feature("i1").feature("mg1").set("mglevels", 5);
    model.sol("sol1").feature("s1").feature("i1").feature("mg1").set("iter", 2);
    model.sol("sol1").feature("s1").feature("i1").feature("mg1").set("maxcoarsedof", 5000);
    model.sol("sol1").feature("s1").feature("se1").feature().create("ss2", "SegregatedStep");
    model.sol("sol1").feature("s1").feature("se1").feature("ss2").set("segvar", new String[]{"mod1_Vm"});
    model.sol("sol1").feature("s1").feature().create("i2", "Iterative");
    model.sol("sol1").feature("s1").feature("i2").set("prefuntype", "left");
    model.sol("sol1").feature("s1").feature("i2").set("maxlinit", 10000);
    model.sol("sol1").feature("s1").feature("i2").set("linsolver", "cg");
    model.sol("sol1").feature("s1").feature("i2").set("rhob", 400);
    model.sol("sol1").feature("s1").feature("se1").feature("ss2").set("linsolver", "i2");
    model.sol("sol1").feature("s1").feature("i2").feature().create("mg1", "Multigrid");
    model.sol("sol1").feature("s1").feature("i2").feature("mg1").set("amgauto", 3);
    model.sol("sol1").feature("s1").feature("i2").feature("mg1").set("scale", 2);
    model.sol("sol1").feature("s1").feature("i2").feature("mg1").set("gmglevels", 1);
    model.sol("sol1").feature("s1").feature("i2").feature("mg1").set("massem", true);
    model.sol("sol1").feature("s1").feature("i2").feature("mg1").set("rmethod", "longest");
    model.sol("sol1").feature("s1").feature("i2").feature("mg1").set("mkeep", false);
    model.sol("sol1").feature("s1").feature("i2").feature("mg1").set("mgcycle", "v");
    model.sol("sol1").feature("s1").feature("i2").feature("mg1").set("prefun", "amg");
    model.sol("sol1").feature("s1").feature("i2").feature("mg1").set("mcasegen", "any");
    model.sol("sol1").feature("s1").feature("i2").feature("mg1").set("mglevels", 5);
    model.sol("sol1").feature("s1").feature("i2").feature("mg1").set("iter", 2);
    model.sol("sol1").feature("s1").feature("i2").feature("mg1").set("maxcoarsedof", 5000);
    model.sol("sol1").feature("s1").feature().remove("fcDef");
    model.sol("sol1").attach("std1");
    model.sol("sol1").runAll();

    model.result("pg1").run();
    model.result("pg2").run();

    model.view("view1").hideEntities().clear();

    model.result("pg2").run();
    model.result().dataset().create("cpl1", "CutPlane");
    model.result().dataset("cpl1").run();
    model.result().dataset().create("cpl2", "CutPlane");
    model.result().dataset("cpl2").set("planetype", "general");
    model.result().dataset("cpl2").setIndex("genpoints", "1", 1, 1);
    model.result().dataset("cpl2").setIndex("genpoints", "1", 2, 0);
    model.result().dataset("cpl2").setIndex("genpoints", "1", 2, 2);
    model.result().dataset("cpl2").run();
    model.result().create("pg3", "PlotGroup2D");
    model.result("pg3").run();
    model.result("pg3").feature().create("surf1", "Surface");
    model.result("pg3").feature("surf1").set("expr", "es.normE");
    model.result("pg3").run();
    model.result("pg3").feature("surf1").set("expr", "mfnc.normB");
    model.result("pg3").run();
    model.result("pg3").feature("surf1").set("rangecoloractive", "on");
    model.result("pg3").feature("surf1").set("rangecolormax", "1");
    model.result("pg3").feature("surf1")
         .set("expr", "sqrt((mfnc.Bx+es.Ex)^2 + (mfnc.By+es.Ey)^2 + (mfnc.Bz+es.Ez)^2)");
    model.result("pg3").run();
    model.result("pg3").feature("surf1").set("rangecoloractive", "off");
    model.result("pg3").feature("surf1")
         .set("expr", "sqrt((mfnc.Bx+es.Ex/10)^2 + (mfnc.By+es.Ey/10)^2 + (mfnc.Bz+es.Ez/10)^2)");
    model.result("pg3").run();
    model.result("pg3").run();
    model.result("pg3").feature("surf1")
         .set("expr", "sqrt((mfnc.Bx+es.Ex/100)^2 + (mfnc.By+es.Ey/100)^2 + (mfnc.Bz+es.Ez/100)^2)");
    model.result("pg3").run();
    model.result("pg3").run();
    model.result("pg3").run();
    model.result("pg3").run();
    model.result("pg3").run();
    model.result("pg3").feature("surf1")
         .set("expr", "sqrt((mfnc.Bx+es.Ex/1000)^2 + (mfnc.By+es.Ey/1000)^2 + (mfnc.Bz+es.Ez/1000)^2)");
    model.result("pg3").run();
    model.result("pg3").run();
    model.result("pg3").run();
    model.result("pg3").feature("surf1")
         .set("expr", "sqrt((mfnc.Bx+es.Ex/100000)^2 + (mfnc.By+es.Ey/100000)^2 + (mfnc.Bz+es.Ez/100000)^2)");
    model.result("pg3").run();
    model.result("pg3").feature("surf1")
         .set("expr", "sqrt((mfnc.Bx+es.Ex/10000000)^2 + (mfnc.By+es.Ey/10000000)^2 + (mfnc.Bz+es.Ez/10000000)^2)");
    model.result("pg3").run();
    model.result("pg3").feature("surf1")
         .set("expr", "sqrt((mfnc.Bx+es.Ex/1000000000)^2 + (mfnc.By+es.Ey/1000000000)^2 + (mfnc.Bz+es.Ez/1000000000)^2)");
    model.result("pg3").run();
    model.result("pg3").feature("surf1")
         .set("expr", "sqrt((mfnc.Bx+es.Ex/100000000)^2 + (mfnc.By+es.Ey/100000000)^2 + (mfnc.Bz+es.Ez/100000000)^2)");
    model.result("pg3").run();
    model.result("pg3").feature("surf1")
         .set("expr", "sqrt((mfnc.Bx+es.Ex/2e8)^2 + (mfnc.By+es.Ey/2e8)^2 + (mfnc.Bz+es.Ez/2e8)^2)");
    model.result("pg3").run();
    model.result("pg3").feature("surf1").set("rangecoloractive", "on");
    model.result("pg3").feature("surf1").set("rangecolormax", "1.6");
    model.result("pg3").feature("surf1")
         .set("expr", "sqrt((mfnc.Bx+es.Ex/3e8)^2 + (mfnc.By+es.Ey/3e8)^2 + (mfnc.Bz+es.Ez/3e8)^2)");
    model.result("pg3").run();
    model.result("pg3").set("allowtableupdate", true);
    model.result("pg3").set("renderdatacached", true);
    model.result().table("evl2").addRow(new double[]{0.019797563552856445, 1.5392608642578125, 0.3302170403926806});
    model.result().table("evl2").addRow(new double[]{0.019797563552856445, 1.5392608642578125, 0.3302170403926806});
    model.result().table("evl2").addRow(new double[]{0.049494028091430664, 1.5293622016906738, 0.3315228139498225});
    model.result().table("evl2").addRow(new double[]{0.06929159164428711, -1.5986536741256714, 0.32766140080078254});
    model.result().table("evl2").addRow(new double[]{0.07919025421142578, -1.5491597652435303, 0.3294522465325072});
    model.result("pg3").feature("surf1")
         .set("expr", "sqrt((mfnc.Bx+es.Ex/1e8)^2 + (mfnc.By+es.Ey/1e8)^2 + (mfnc.Bz+es.Ez/1e8)^2)");
    model.result("pg3").run();
    model.result("pg3").feature("surf1")
         .set("expr", "sqrt((0*mfnc.Bx+es.Ex/1e8)^2 + (0*mfnc.By+es.Ey/1e8)^2 + (0*mfnc.Bz+es.Ez/1e8)^2)");
    model.result("pg3").run();
    model.result("pg3").feature("surf1")
         .set("expr", "sqrt((1*mfnc.Bx+es.Ex/1e8)^2 + (1*mfnc.By+es.Ey/1e8)^2 + (1*mfnc.Bz+es.Ez/1e8)^2)");
    model.result("pg3").run();
    model.result("pg3").feature("surf1")
         .set("expr", "sqrt((1*mfnc.Bx+es.Ex/2e8)^2 + (1*mfnc.By+es.Ey/2e8)^2 + (1*mfnc.Bz+es.Ez/2e8)^2)");
    model.result("pg3").run();
    model.result("pg3").feature("surf1")
         .set("expr", "sqrt((0*mfnc.Bx+es.Ex/2e8)^2 + (0*mfnc.By+es.Ey/2e8)^2 + (0*mfnc.Bz+es.Ez/2e8)^2)");
    model.result("pg3").run();
    model.result("pg3").run();
    model.result("pg3").set("data", "cpl2");
    model.result("pg3").run();
    model.result("pg3").run();

    model.param().set("tc", "3");

    model.sol("sol1").study("std1");
    model.sol("sol1").feature().remove("s1");
    model.sol("sol1").feature().remove("v1");
    model.sol("sol1").feature().remove("st1");
    model.sol("sol1").feature().create("st1", "StudyStep");
    model.sol("sol1").feature("st1").set("study", "std1");
    model.sol("sol1").feature("st1").set("studystep", "stat");
    model.sol("sol1").feature().create("v1", "Variables");
    model.sol("sol1").feature("v1").set("control", "stat");
    model.sol("sol1").feature().create("s1", "Stationary");
    model.sol("sol1").feature("s1").feature().create("se1", "Segregated");
    model.sol("sol1").feature("s1").feature("se1").feature().remove("ssDef");
    model.sol("sol1").feature("s1").feature("se1").feature().create("ss1", "SegregatedStep");
    model.sol("sol1").feature("s1").feature("se1").feature("ss1").set("segvar", new String[]{"mod1_V"});
    model.sol("sol1").feature("s1").feature().create("i1", "Iterative");
    model.sol("sol1").feature("s1").feature("i1").set("prefuntype", "left");
    model.sol("sol1").feature("s1").feature("i1").set("maxlinit", 10000);
    model.sol("sol1").feature("s1").feature("i1").set("linsolver", "cg");
    model.sol("sol1").feature("s1").feature("i1").set("rhob", 400);
    model.sol("sol1").feature("s1").feature("se1").feature("ss1").set("linsolver", "i1");
    model.sol("sol1").feature("s1").feature("i1").feature().create("mg1", "Multigrid");
    model.sol("sol1").feature("s1").feature("i1").feature("mg1").set("amgauto", 3);
    model.sol("sol1").feature("s1").feature("i1").feature("mg1").set("scale", 2);
    model.sol("sol1").feature("s1").feature("i1").feature("mg1").set("gmglevels", 1);
    model.sol("sol1").feature("s1").feature("i1").feature("mg1").set("massem", true);
    model.sol("sol1").feature("s1").feature("i1").feature("mg1").set("rmethod", "longest");
    model.sol("sol1").feature("s1").feature("i1").feature("mg1").set("mkeep", false);
    model.sol("sol1").feature("s1").feature("i1").feature("mg1").set("mgcycle", "v");
    model.sol("sol1").feature("s1").feature("i1").feature("mg1").set("prefun", "amg");
    model.sol("sol1").feature("s1").feature("i1").feature("mg1").set("mcasegen", "any");
    model.sol("sol1").feature("s1").feature("i1").feature("mg1").set("mglevels", 5);
    model.sol("sol1").feature("s1").feature("i1").feature("mg1").set("iter", 2);
    model.sol("sol1").feature("s1").feature("i1").feature("mg1").set("maxcoarsedof", 5000);
    model.sol("sol1").feature("s1").feature("se1").feature().create("ss2", "SegregatedStep");
    model.sol("sol1").feature("s1").feature("se1").feature("ss2").set("segvar", new String[]{"mod1_Vm"});
    model.sol("sol1").feature("s1").feature().create("i2", "Iterative");
    model.sol("sol1").feature("s1").feature("i2").set("prefuntype", "left");
    model.sol("sol1").feature("s1").feature("i2").set("maxlinit", 10000);
    model.sol("sol1").feature("s1").feature("i2").set("linsolver", "cg");
    model.sol("sol1").feature("s1").feature("i2").set("rhob", 400);
    model.sol("sol1").feature("s1").feature("se1").feature("ss2").set("linsolver", "i2");
    model.sol("sol1").feature("s1").feature("i2").feature().create("mg1", "Multigrid");
    model.sol("sol1").feature("s1").feature("i2").feature("mg1").set("amgauto", 3);
    model.sol("sol1").feature("s1").feature("i2").feature("mg1").set("scale", 2);
    model.sol("sol1").feature("s1").feature("i2").feature("mg1").set("gmglevels", 1);
    model.sol("sol1").feature("s1").feature("i2").feature("mg1").set("massem", true);
    model.sol("sol1").feature("s1").feature("i2").feature("mg1").set("rmethod", "longest");
    model.sol("sol1").feature("s1").feature("i2").feature("mg1").set("mkeep", false);
    model.sol("sol1").feature("s1").feature("i2").feature("mg1").set("mgcycle", "v");
    model.sol("sol1").feature("s1").feature("i2").feature("mg1").set("prefun", "amg");
    model.sol("sol1").feature("s1").feature("i2").feature("mg1").set("mcasegen", "any");
    model.sol("sol1").feature("s1").feature("i2").feature("mg1").set("mglevels", 5);
    model.sol("sol1").feature("s1").feature("i2").feature("mg1").set("iter", 2);
    model.sol("sol1").feature("s1").feature("i2").feature("mg1").set("maxcoarsedof", 5000);
    model.sol("sol1").feature("s1").feature().remove("fcDef");
    model.sol("sol1").attach("std1");
    model.sol("sol1").runAll();

    model.result("pg1").run();
    model.result("pg3").run();
    model.result("pg3").run();
    model.result("pg3").feature("surf1")
         .set("expr", "sqrt((1*mfnc.Bx+es.Ex/2e8)^2 + (1*mfnc.By+es.Ey/2e8)^2 + (1*mfnc.Bz+es.Ez/2e8)^2)");
    model.result("pg3").run();
    model.result("pg3").feature("surf1")
         .set("expr", "sqrt((1*mfnc.Bx-es.Ex/2e8)^2 + (1*mfnc.By-es.Ey/2e8)^2 + (1*mfnc.Bz-es.Ez/2e8)^2)");
    model.result("pg3").run();

    model.param().set("tc", "1");

    model.sol("sol1").study("std1");
    model.sol("sol1").feature().remove("s1");
    model.sol("sol1").feature().remove("v1");
    model.sol("sol1").feature().remove("st1");
    model.sol("sol1").feature().create("st1", "StudyStep");
    model.sol("sol1").feature("st1").set("study", "std1");
    model.sol("sol1").feature("st1").set("studystep", "stat");
    model.sol("sol1").feature().create("v1", "Variables");
    model.sol("sol1").feature("v1").set("control", "stat");
    model.sol("sol1").feature().create("s1", "Stationary");
    model.sol("sol1").feature("s1").feature().create("se1", "Segregated");
    model.sol("sol1").feature("s1").feature("se1").feature().remove("ssDef");
    model.sol("sol1").feature("s1").feature("se1").feature().create("ss1", "SegregatedStep");
    model.sol("sol1").feature("s1").feature("se1").feature("ss1").set("segvar", new String[]{"mod1_V"});
    model.sol("sol1").feature("s1").feature().create("i1", "Iterative");
    model.sol("sol1").feature("s1").feature("i1").set("prefuntype", "left");
    model.sol("sol1").feature("s1").feature("i1").set("maxlinit", 10000);
    model.sol("sol1").feature("s1").feature("i1").set("linsolver", "cg");
    model.sol("sol1").feature("s1").feature("i1").set("rhob", 400);
    model.sol("sol1").feature("s1").feature("se1").feature("ss1").set("linsolver", "i1");
    model.sol("sol1").feature("s1").feature("i1").feature().create("mg1", "Multigrid");
    model.sol("sol1").feature("s1").feature("i1").feature("mg1").set("amgauto", 3);
    model.sol("sol1").feature("s1").feature("i1").feature("mg1").set("scale", 2);
    model.sol("sol1").feature("s1").feature("i1").feature("mg1").set("gmglevels", 1);
    model.sol("sol1").feature("s1").feature("i1").feature("mg1").set("massem", true);
    model.sol("sol1").feature("s1").feature("i1").feature("mg1").set("rmethod", "longest");
    model.sol("sol1").feature("s1").feature("i1").feature("mg1").set("mkeep", false);
    model.sol("sol1").feature("s1").feature("i1").feature("mg1").set("mgcycle", "v");
    model.sol("sol1").feature("s1").feature("i1").feature("mg1").set("prefun", "amg");
    model.sol("sol1").feature("s1").feature("i1").feature("mg1").set("mcasegen", "any");
    model.sol("sol1").feature("s1").feature("i1").feature("mg1").set("mglevels", 5);
    model.sol("sol1").feature("s1").feature("i1").feature("mg1").set("iter", 2);
    model.sol("sol1").feature("s1").feature("i1").feature("mg1").set("maxcoarsedof", 5000);
    model.sol("sol1").feature("s1").feature("se1").feature().create("ss2", "SegregatedStep");
    model.sol("sol1").feature("s1").feature("se1").feature("ss2").set("segvar", new String[]{"mod1_Vm"});
    model.sol("sol1").feature("s1").feature().create("i2", "Iterative");
    model.sol("sol1").feature("s1").feature("i2").set("prefuntype", "left");
    model.sol("sol1").feature("s1").feature("i2").set("maxlinit", 10000);
    model.sol("sol1").feature("s1").feature("i2").set("linsolver", "cg");
    model.sol("sol1").feature("s1").feature("i2").set("rhob", 400);
    model.sol("sol1").feature("s1").feature("se1").feature("ss2").set("linsolver", "i2");
    model.sol("sol1").feature("s1").feature("i2").feature().create("mg1", "Multigrid");
    model.sol("sol1").feature("s1").feature("i2").feature("mg1").set("amgauto", 3);
    model.sol("sol1").feature("s1").feature("i2").feature("mg1").set("scale", 2);
    model.sol("sol1").feature("s1").feature("i2").feature("mg1").set("gmglevels", 1);
    model.sol("sol1").feature("s1").feature("i2").feature("mg1").set("massem", true);
    model.sol("sol1").feature("s1").feature("i2").feature("mg1").set("rmethod", "longest");
    model.sol("sol1").feature("s1").feature("i2").feature("mg1").set("mkeep", false);
    model.sol("sol1").feature("s1").feature("i2").feature("mg1").set("mgcycle", "v");
    model.sol("sol1").feature("s1").feature("i2").feature("mg1").set("prefun", "amg");
    model.sol("sol1").feature("s1").feature("i2").feature("mg1").set("mcasegen", "any");
    model.sol("sol1").feature("s1").feature("i2").feature("mg1").set("mglevels", 5);
    model.sol("sol1").feature("s1").feature("i2").feature("mg1").set("iter", 2);
    model.sol("sol1").feature("s1").feature("i2").feature("mg1").set("maxcoarsedof", 5000);
    model.sol("sol1").feature("s1").feature().remove("fcDef");
    model.sol("sol1").attach("std1");
    model.sol("sol1").runAll();

    model.result("pg1").run();
    model.result("pg3").run();
    model.result("pg3").set("allowtableupdate", true);
    model.result("pg3").set("renderdatacached", true);
    model.result().table("evl2").addRow(new double[]{0.04157447814941406, 1.3851134777069092, 0.49591614553771823});
    model.result().table("evl2")
         .addRow(new double[]{-0.042183876037597656, 1.5065622329711914, 0.49446582607931205});
    model.result().table("evl2")
         .addRow(new double[]{-0.042183876037597656, 1.5065622329711914, 0.49446582607931205});
    model.result().table("evl2")
         .addRow(new double[]{0.04157400131225586, -0.0010869503021240234, 0.0663963677694874});
    model.result().table("evl2")
         .addRow(new double[]{0.008070945739746094, 0.01566457748413086, 0.06921103441646549});
    model.result().table("evl2")
         .addRow(new double[]{-0.008680343627929688, 0.032416343688964844, 0.07206531530244105});

    return model;
  }

  public static Model run4(Model model) {
    model.result().table("evl2")
         .addRow(new double[]{-0.008680343627929688, 0.04916787147521973, 0.07495912692777373});
    model.result().table("evl2")
         .addRow(new double[]{-0.025432109832763672, 0.04916787147521973, 0.07610473128120186});
    model.result().table("evl2")
         .addRow(new double[]{-0.025432109832763672, -0.08484530448913574, 0.055749324262719974});
    model.result().table("evl2")
         .addRow(new double[]{-0.025432109832763672, -0.08484530448913574, 0.055749324262719974});
    model.result().table("evl2")
         .addRow(new double[]{0.008070945739746094, -0.15185189247131348, 0.0786478749925495});
    model.result().table("evl2")
         .addRow(new double[]{0.09182977676391602, -0.20210719108581543, 0.12196143010288504});
    model.result().table("evl2").addRow(new double[]{0.1085810661315918, -0.26911354064941406, 0.1461837344538932});
    model.result().table("evl2")
         .addRow(new double[]{-0.025432109832763672, -0.2523620128631592, 0.1328018166423031});
    model.result().table("evl2")
         .addRow(new double[]{-0.05893516540527344, -0.15185189247131348, 0.08483171235455812});
    model.result().table("evl2")
         .addRow(new double[]{0.05832672119140625, -0.16860389709472656, 0.10097507522594162});
    model.result().table("evl2")
         .addRow(new double[]{0.07507801055908203, -0.16860389709472656, 0.10689174303411748});
    model.result().table("evl2")
         .addRow(new double[]{0.07507801055908203, -0.16860389709472656, 0.10689174303411748});
    model.result().table("evl2")
         .addRow(new double[]{0.008070945739746094, -0.03459048271179199, 0.060529517167269634});
    model.result().table("evl2")
         .addRow(new double[]{0.04157400131225586, 0.032416343688964844, 0.07218403220675168});
    model.result().table("evl2")
         .addRow(new double[]{0.024822711944580078, -0.03459048271179199, 0.06223994817278578});
    model.result().table("evl2")
         .addRow(new double[]{0.008070945739746094, -0.03459048271179199, 0.060529517167269634});
    model.result().table("evl2")
         .addRow(new double[]{-0.008680343627929688, -0.0010869503021240234, 0.06627765086517678});
    model.result().table("evl2")
         .addRow(new double[]{-0.025432109832763672, -0.0010869503021240234, 0.06766998620349675});
    model.result("pg3").run();
    model.result("pg3").feature("surf1")
         .set("expr", "sqrt((1*mfnc.Bx-es.Ex/1e8)^2 + (1*mfnc.By-es.Ey/1e8)^2 + (1*mfnc.Bz-es.Ez/1e8)^2)");
    model.result("pg3").run();
    model.result("pg3").feature("surf1")
         .set("expr", "sqrt((0*mfnc.Bx-es.Ex/1e8)^2 + (0*mfnc.By-es.Ey/1e8)^2 + (0*mfnc.Bz-es.Ez/1e8)^2)");
    model.result("pg3").run();
    model.result("pg3").feature("surf1")
         .set("expr", "sqrt((1*mfnc.Bx-es.Ex/1e8)^2 + (1*mfnc.By-es.Ey/1e8)^2 + (1*mfnc.Bz-es.Ez/1e8)^2)");
    model.result("pg3").run();

    model.param().set("vm", "-300000");

    model.sol("sol1").study("std1");
    model.sol("sol1").feature().remove("s1");
    model.sol("sol1").feature().remove("v1");
    model.sol("sol1").feature().remove("st1");
    model.sol("sol1").feature().create("st1", "StudyStep");
    model.sol("sol1").feature("st1").set("study", "std1");
    model.sol("sol1").feature("st1").set("studystep", "stat");
    model.sol("sol1").feature().create("v1", "Variables");
    model.sol("sol1").feature("v1").set("control", "stat");
    model.sol("sol1").feature().create("s1", "Stationary");
    model.sol("sol1").feature("s1").feature().create("se1", "Segregated");
    model.sol("sol1").feature("s1").feature("se1").feature().remove("ssDef");
    model.sol("sol1").feature("s1").feature("se1").feature().create("ss1", "SegregatedStep");
    model.sol("sol1").feature("s1").feature("se1").feature("ss1").set("segvar", new String[]{"mod1_V"});
    model.sol("sol1").feature("s1").feature().create("i1", "Iterative");
    model.sol("sol1").feature("s1").feature("i1").set("prefuntype", "left");
    model.sol("sol1").feature("s1").feature("i1").set("maxlinit", 10000);
    model.sol("sol1").feature("s1").feature("i1").set("linsolver", "cg");
    model.sol("sol1").feature("s1").feature("i1").set("rhob", 400);
    model.sol("sol1").feature("s1").feature("se1").feature("ss1").set("linsolver", "i1");
    model.sol("sol1").feature("s1").feature("i1").feature().create("mg1", "Multigrid");
    model.sol("sol1").feature("s1").feature("i1").feature("mg1").set("amgauto", 3);
    model.sol("sol1").feature("s1").feature("i1").feature("mg1").set("scale", 2);
    model.sol("sol1").feature("s1").feature("i1").feature("mg1").set("gmglevels", 1);
    model.sol("sol1").feature("s1").feature("i1").feature("mg1").set("massem", true);
    model.sol("sol1").feature("s1").feature("i1").feature("mg1").set("rmethod", "longest");
    model.sol("sol1").feature("s1").feature("i1").feature("mg1").set("mkeep", false);
    model.sol("sol1").feature("s1").feature("i1").feature("mg1").set("mgcycle", "v");
    model.sol("sol1").feature("s1").feature("i1").feature("mg1").set("prefun", "amg");
    model.sol("sol1").feature("s1").feature("i1").feature("mg1").set("mcasegen", "any");
    model.sol("sol1").feature("s1").feature("i1").feature("mg1").set("mglevels", 5);
    model.sol("sol1").feature("s1").feature("i1").feature("mg1").set("iter", 2);
    model.sol("sol1").feature("s1").feature("i1").feature("mg1").set("maxcoarsedof", 5000);
    model.sol("sol1").feature("s1").feature("se1").feature().create("ss2", "SegregatedStep");
    model.sol("sol1").feature("s1").feature("se1").feature("ss2").set("segvar", new String[]{"mod1_Vm"});
    model.sol("sol1").feature("s1").feature().create("i2", "Iterative");
    model.sol("sol1").feature("s1").feature("i2").set("prefuntype", "left");
    model.sol("sol1").feature("s1").feature("i2").set("maxlinit", 10000);
    model.sol("sol1").feature("s1").feature("i2").set("linsolver", "cg");
    model.sol("sol1").feature("s1").feature("i2").set("rhob", 400);
    model.sol("sol1").feature("s1").feature("se1").feature("ss2").set("linsolver", "i2");
    model.sol("sol1").feature("s1").feature("i2").feature().create("mg1", "Multigrid");
    model.sol("sol1").feature("s1").feature("i2").feature("mg1").set("amgauto", 3);
    model.sol("sol1").feature("s1").feature("i2").feature("mg1").set("scale", 2);
    model.sol("sol1").feature("s1").feature("i2").feature("mg1").set("gmglevels", 1);
    model.sol("sol1").feature("s1").feature("i2").feature("mg1").set("massem", true);
    model.sol("sol1").feature("s1").feature("i2").feature("mg1").set("rmethod", "longest");
    model.sol("sol1").feature("s1").feature("i2").feature("mg1").set("mkeep", false);
    model.sol("sol1").feature("s1").feature("i2").feature("mg1").set("mgcycle", "v");
    model.sol("sol1").feature("s1").feature("i2").feature("mg1").set("prefun", "amg");
    model.sol("sol1").feature("s1").feature("i2").feature("mg1").set("mcasegen", "any");
    model.sol("sol1").feature("s1").feature("i2").feature("mg1").set("mglevels", 5);
    model.sol("sol1").feature("s1").feature("i2").feature("mg1").set("iter", 2);
    model.sol("sol1").feature("s1").feature("i2").feature("mg1").set("maxcoarsedof", 5000);
    model.sol("sol1").feature("s1").feature().remove("fcDef");
    model.sol("sol1").attach("std1");
    model.sol("sol1").runAll();

    model.result("pg1").run();
    model.result("pg3").run();

    model.param().set("vm", "300000");

    model.sol("sol1").study("std1");
    model.sol("sol1").feature().remove("s1");
    model.sol("sol1").feature().remove("v1");
    model.sol("sol1").feature().remove("st1");
    model.sol("sol1").feature().create("st1", "StudyStep");
    model.sol("sol1").feature("st1").set("study", "std1");
    model.sol("sol1").feature("st1").set("studystep", "stat");
    model.sol("sol1").feature().create("v1", "Variables");
    model.sol("sol1").feature("v1").set("control", "stat");
    model.sol("sol1").feature().create("s1", "Stationary");
    model.sol("sol1").feature("s1").feature().create("se1", "Segregated");
    model.sol("sol1").feature("s1").feature("se1").feature().remove("ssDef");
    model.sol("sol1").feature("s1").feature("se1").feature().create("ss1", "SegregatedStep");
    model.sol("sol1").feature("s1").feature("se1").feature("ss1").set("segvar", new String[]{"mod1_V"});
    model.sol("sol1").feature("s1").feature().create("i1", "Iterative");
    model.sol("sol1").feature("s1").feature("i1").set("prefuntype", "left");
    model.sol("sol1").feature("s1").feature("i1").set("maxlinit", 10000);
    model.sol("sol1").feature("s1").feature("i1").set("linsolver", "cg");
    model.sol("sol1").feature("s1").feature("i1").set("rhob", 400);
    model.sol("sol1").feature("s1").feature("se1").feature("ss1").set("linsolver", "i1");
    model.sol("sol1").feature("s1").feature("i1").feature().create("mg1", "Multigrid");
    model.sol("sol1").feature("s1").feature("i1").feature("mg1").set("amgauto", 3);
    model.sol("sol1").feature("s1").feature("i1").feature("mg1").set("scale", 2);
    model.sol("sol1").feature("s1").feature("i1").feature("mg1").set("gmglevels", 1);
    model.sol("sol1").feature("s1").feature("i1").feature("mg1").set("massem", true);
    model.sol("sol1").feature("s1").feature("i1").feature("mg1").set("rmethod", "longest");
    model.sol("sol1").feature("s1").feature("i1").feature("mg1").set("mkeep", false);
    model.sol("sol1").feature("s1").feature("i1").feature("mg1").set("mgcycle", "v");
    model.sol("sol1").feature("s1").feature("i1").feature("mg1").set("prefun", "amg");
    model.sol("sol1").feature("s1").feature("i1").feature("mg1").set("mcasegen", "any");
    model.sol("sol1").feature("s1").feature("i1").feature("mg1").set("mglevels", 5);
    model.sol("sol1").feature("s1").feature("i1").feature("mg1").set("iter", 2);
    model.sol("sol1").feature("s1").feature("i1").feature("mg1").set("maxcoarsedof", 5000);
    model.sol("sol1").feature("s1").feature("se1").feature().create("ss2", "SegregatedStep");
    model.sol("sol1").feature("s1").feature("se1").feature("ss2").set("segvar", new String[]{"mod1_Vm"});
    model.sol("sol1").feature("s1").feature().create("i2", "Iterative");
    model.sol("sol1").feature("s1").feature("i2").set("prefuntype", "left");
    model.sol("sol1").feature("s1").feature("i2").set("maxlinit", 10000);
    model.sol("sol1").feature("s1").feature("i2").set("linsolver", "cg");
    model.sol("sol1").feature("s1").feature("i2").set("rhob", 400);
    model.sol("sol1").feature("s1").feature("se1").feature("ss2").set("linsolver", "i2");
    model.sol("sol1").feature("s1").feature("i2").feature().create("mg1", "Multigrid");
    model.sol("sol1").feature("s1").feature("i2").feature("mg1").set("amgauto", 3);
    model.sol("sol1").feature("s1").feature("i2").feature("mg1").set("scale", 2);
    model.sol("sol1").feature("s1").feature("i2").feature("mg1").set("gmglevels", 1);
    model.sol("sol1").feature("s1").feature("i2").feature("mg1").set("massem", true);
    model.sol("sol1").feature("s1").feature("i2").feature("mg1").set("rmethod", "longest");
    model.sol("sol1").feature("s1").feature("i2").feature("mg1").set("mkeep", false);
    model.sol("sol1").feature("s1").feature("i2").feature("mg1").set("mgcycle", "v");
    model.sol("sol1").feature("s1").feature("i2").feature("mg1").set("prefun", "amg");
    model.sol("sol1").feature("s1").feature("i2").feature("mg1").set("mcasegen", "any");
    model.sol("sol1").feature("s1").feature("i2").feature("mg1").set("mglevels", 5);
    model.sol("sol1").feature("s1").feature("i2").feature("mg1").set("iter", 2);
    model.sol("sol1").feature("s1").feature("i2").feature("mg1").set("maxcoarsedof", 5000);
    model.sol("sol1").feature("s1").feature().remove("fcDef");
    model.sol("sol1").attach("std1");
    model.sol("sol1").runAll();

    model.result("pg1").run();
    model.result("pg3").run();
    model.result("pg3").set("allowtableupdate", true);
    model.result("pg3").set("renderdatacached", true);
    model.result().table("evl2").addRow(new double[]{0.07507777214050293, -1.554803729057312, 0.9914588853268632});
    model.result().table("evl2")
         .addRow(new double[]{-0.008680582046508789, -1.5799311399459839, 0.9980563456026326});
    model.result("pg3").run();
    model.result("pg3").run();
    model.result("pg3").feature("surf1").set("expr", "mfnc.normB");
    model.result("pg3").run();
    model.result("pg3").set("allowtableupdate", true);
    model.result("pg3").set("renderdatacached", true);
    model.result().table("evl2")
         .addRow(new double[]{1.0550501346588135, -0.022026777267456055, 0.39627019920817186});

    model.physics("mfnc").feature("mfc6").active(true);

    model.sol("sol1").study("std1");
    model.sol("sol1").feature().remove("s1");
    model.sol("sol1").feature().remove("v1");
    model.sol("sol1").feature().remove("st1");
    model.sol("sol1").feature().create("st1", "StudyStep");
    model.sol("sol1").feature("st1").set("study", "std1");
    model.sol("sol1").feature("st1").set("studystep", "stat");
    model.sol("sol1").feature().create("v1", "Variables");
    model.sol("sol1").feature("v1").set("control", "stat");
    model.sol("sol1").feature().create("s1", "Stationary");
    model.sol("sol1").feature("s1").feature().create("se1", "Segregated");
    model.sol("sol1").feature("s1").feature("se1").feature().remove("ssDef");
    model.sol("sol1").feature("s1").feature("se1").feature().create("ss1", "SegregatedStep");
    model.sol("sol1").feature("s1").feature("se1").feature("ss1").set("segvar", new String[]{"mod1_V"});
    model.sol("sol1").feature("s1").feature().create("i1", "Iterative");
    model.sol("sol1").feature("s1").feature("i1").set("prefuntype", "left");
    model.sol("sol1").feature("s1").feature("i1").set("maxlinit", 10000);
    model.sol("sol1").feature("s1").feature("i1").set("linsolver", "cg");
    model.sol("sol1").feature("s1").feature("i1").set("rhob", 400);
    model.sol("sol1").feature("s1").feature("se1").feature("ss1").set("linsolver", "i1");
    model.sol("sol1").feature("s1").feature("i1").feature().create("mg1", "Multigrid");
    model.sol("sol1").feature("s1").feature("i1").feature("mg1").set("amgauto", 3);
    model.sol("sol1").feature("s1").feature("i1").feature("mg1").set("scale", 2);
    model.sol("sol1").feature("s1").feature("i1").feature("mg1").set("gmglevels", 1);
    model.sol("sol1").feature("s1").feature("i1").feature("mg1").set("massem", true);
    model.sol("sol1").feature("s1").feature("i1").feature("mg1").set("rmethod", "longest");
    model.sol("sol1").feature("s1").feature("i1").feature("mg1").set("mkeep", false);
    model.sol("sol1").feature("s1").feature("i1").feature("mg1").set("mgcycle", "v");
    model.sol("sol1").feature("s1").feature("i1").feature("mg1").set("prefun", "amg");
    model.sol("sol1").feature("s1").feature("i1").feature("mg1").set("mcasegen", "any");
    model.sol("sol1").feature("s1").feature("i1").feature("mg1").set("mglevels", 5);
    model.sol("sol1").feature("s1").feature("i1").feature("mg1").set("iter", 2);
    model.sol("sol1").feature("s1").feature("i1").feature("mg1").set("maxcoarsedof", 5000);
    model.sol("sol1").feature("s1").feature("se1").feature().create("ss2", "SegregatedStep");
    model.sol("sol1").feature("s1").feature("se1").feature("ss2").set("segvar", new String[]{"mod1_Vm"});
    model.sol("sol1").feature("s1").feature().create("i2", "Iterative");
    model.sol("sol1").feature("s1").feature("i2").set("prefuntype", "left");
    model.sol("sol1").feature("s1").feature("i2").set("maxlinit", 10000);
    model.sol("sol1").feature("s1").feature("i2").set("linsolver", "cg");
    model.sol("sol1").feature("s1").feature("i2").set("rhob", 400);
    model.sol("sol1").feature("s1").feature("se1").feature("ss2").set("linsolver", "i2");
    model.sol("sol1").feature("s1").feature("i2").feature().create("mg1", "Multigrid");
    model.sol("sol1").feature("s1").feature("i2").feature("mg1").set("amgauto", 3);
    model.sol("sol1").feature("s1").feature("i2").feature("mg1").set("scale", 2);
    model.sol("sol1").feature("s1").feature("i2").feature("mg1").set("gmglevels", 1);
    model.sol("sol1").feature("s1").feature("i2").feature("mg1").set("massem", true);
    model.sol("sol1").feature("s1").feature("i2").feature("mg1").set("rmethod", "longest");
    model.sol("sol1").feature("s1").feature("i2").feature("mg1").set("mkeep", false);
    model.sol("sol1").feature("s1").feature("i2").feature("mg1").set("mgcycle", "v");
    model.sol("sol1").feature("s1").feature("i2").feature("mg1").set("prefun", "amg");
    model.sol("sol1").feature("s1").feature("i2").feature("mg1").set("mcasegen", "any");
    model.sol("sol1").feature("s1").feature("i2").feature("mg1").set("mglevels", 5);
    model.sol("sol1").feature("s1").feature("i2").feature("mg1").set("iter", 2);
    model.sol("sol1").feature("s1").feature("i2").feature("mg1").set("maxcoarsedof", 5000);
    model.sol("sol1").feature("s1").feature().remove("fcDef");
    model.sol("sol1").attach("std1");
    model.sol("sol1").runAll();

    model.result("pg1").run();
    model.result().remove("pg1");
    model.result().remove("pg2");
    model.result("pg3").run();
    model.result("pg3").run();
    model.result("pg3").feature("surf1").set("rangecolormax", "0.2");
    model.result("pg3").set("allowtableupdate", true);
    model.result("pg3").set("renderdatacached", true);
    model.result().table("evl2")
         .addRow(new double[]{-0.025432109832763672, 0.09523487091064453, 0.01431850124948514});
    model.result().table("evl2")
         .addRow(new double[]{-0.025432109832763672, 0.09523487091064453, 0.01431850124948514});
    model.result("pg3").run();

    model.geom("geom1").run("copy4");
    model.geom("geom1").feature().create("cyl6", "Cylinder");
    model.geom("geom1").feature("cyl6").set("r", "ID*.75");
    model.geom("geom1").feature("cyl6").set("h", "tc+2*sp+2*te");
    model.geom("geom1").run("cyl6");
    model.geom("geom1").feature("cyl6").setIndex("pos", "(tc+2*sp+2*te)/2", 2);
    model.geom("geom1").run("cyl6");
    model.geom("geom1").feature("cyl6").setIndex("pos", "-(tc+2*sp+2*te)/2", 2);
    model.geom("geom1").run("cyl6");
    model.geom("geom1").feature("cyl6").name("Finer Mesh");
    model.geom("geom1").run();

    model.mesh("mesh1").feature().create("ref1", "Refine");
    model.mesh("mesh1").feature("ref1").selection().geom("geom1", 3);

    model.view("view1").hideEntities().create("hide1");
    model.view("view1").hideEntities("hide1").geom(3);
    model.view("view1").hideEntities("hide1").add(new int[]{1});
    model.view("view1").hideEntities("hide1").add(new int[]{5});
    model.view("view1").hideEntities("hide1").add(new int[]{2, 3, 4, 11, 14});

    model.mesh("mesh1").feature("ref1").selection().set(new int[]{3, 4, 6, 7, 10, 11, 13});

    model.view("view1").hideEntities().clear();
    model.view("view1").hideEntities().create("hide1");
    model.view("view1").hideEntities("hide1").geom(3);
    model.view("view1").hideEntities("hide1").add(new int[]{1});

    model.mesh("mesh1").feature("ref1").selection().set(new int[]{6, 7, 10, 13});

    model.view("view1").hideEntities("hide1").add(new int[]{5});
    model.view("view1").hideEntities("hide1").add(new int[]{7});
    model.view("view1").hideEntities("hide1").add(new int[]{10});

    model.mesh("mesh1").feature("ref1").selection().set(new int[]{6, 7, 8, 9, 10, 12});

    model.view("view1").hideEntities().clear();
    model.view("view1").hideEntities().create("hide1");
    model.view("view1").hideEntities("hide1").geom(3);
    model.view("view1").hideEntities("hide1").add(new int[]{1});
    model.view("view1").hideEntities("hide1").add(new int[]{5});
    model.view("view1").hideEntities("hide1").add(new int[]{14});
    model.view("view1").hideEntities("hide1").add(new int[]{2});
    model.view("view1").hideEntities("hide1").add(new int[]{3, 4, 11});
    model.view("view1").hideEntities("hide1").add(new int[]{7});

    model.mesh("mesh1").feature("ref1").set("numrefine", "3");
    model.mesh("mesh1").run("size");

    model.sol().remove("sol1");

    model.view("view1").hideEntities().clear();

    model.sol().create("sol1");
    model.sol().remove("sol1");

    model.view("view1").hideEntities().create("hide1");
    model.view("view1").hideEntities("hide1").geom(3);
    model.view("view1").hideEntities("hide1").add(new int[]{1});

    model.mesh("mesh1").feature("ref1").selection().set(new int[]{7, 8, 9, 10, 12});
    model.mesh("mesh1").feature().create("ftet1", "FreeTet");
    model.mesh("mesh1").feature("ftet1").selection().geom("geom1");
    model.mesh("mesh1").feature("ref1").selection().set(new int[]{6, 7, 8, 9, 10, 12});
    model.mesh("mesh1").run();

    model.view("view1").hideEntities().create("hide1");
    model.view("view1").hideEntities("hide1").geom(3);
    model.view("view1").hideEntities("hide1").add(new int[]{1});

    model.sol().create("sol1");
    model.sol("sol1").study("std1");
    model.sol("sol1").feature().create("st1", "StudyStep");
    model.sol("sol1").feature("st1").set("study", "std1");
    model.sol("sol1").feature("st1").set("studystep", "stat");
    model.sol("sol1").feature().create("v1", "Variables");
    model.sol("sol1").feature("v1").set("control", "stat");
    model.sol("sol1").feature().create("s1", "Stationary");
    model.sol("sol1").feature("s1").feature().create("se1", "Segregated");
    model.sol("sol1").feature("s1").feature("se1").feature().remove("ssDef");
    model.sol("sol1").feature("s1").feature("se1").feature().create("ss1", "SegregatedStep");
    model.sol("sol1").feature("s1").feature("se1").feature("ss1").set("segvar", new String[]{"mod1_V"});
    model.sol("sol1").feature("s1").feature().create("i1", "Iterative");
    model.sol("sol1").feature("s1").feature("i1").set("prefuntype", "left");
    model.sol("sol1").feature("s1").feature("i1").set("maxlinit", 10000);
    model.sol("sol1").feature("s1").feature("i1").set("linsolver", "cg");
    model.sol("sol1").feature("s1").feature("i1").set("rhob", 400);
    model.sol("sol1").feature("s1").feature("se1").feature("ss1").set("linsolver", "i1");
    model.sol("sol1").feature("s1").feature("i1").feature().create("mg1", "Multigrid");
    model.sol("sol1").feature("s1").feature("i1").feature("mg1").set("amgauto", 3);
    model.sol("sol1").feature("s1").feature("i1").feature("mg1").set("scale", 2);
    model.sol("sol1").feature("s1").feature("i1").feature("mg1").set("gmglevels", 1);
    model.sol("sol1").feature("s1").feature("i1").feature("mg1").set("massem", true);
    model.sol("sol1").feature("s1").feature("i1").feature("mg1").set("rmethod", "longest");
    model.sol("sol1").feature("s1").feature("i1").feature("mg1").set("mkeep", false);
    model.sol("sol1").feature("s1").feature("i1").feature("mg1").set("mgcycle", "v");
    model.sol("sol1").feature("s1").feature("i1").feature("mg1").set("prefun", "amg");
    model.sol("sol1").feature("s1").feature("i1").feature("mg1").set("mcasegen", "any");
    model.sol("sol1").feature("s1").feature("i1").feature("mg1").set("mglevels", 5);
    model.sol("sol1").feature("s1").feature("i1").feature("mg1").set("iter", 2);
    model.sol("sol1").feature("s1").feature("i1").feature("mg1").set("maxcoarsedof", 5000);
    model.sol("sol1").feature("s1").feature("se1").feature().create("ss2", "SegregatedStep");
    model.sol("sol1").feature("s1").feature("se1").feature("ss2").set("segvar", new String[]{"mod1_Vm"});
    model.sol("sol1").feature("s1").feature().create("i2", "Iterative");
    model.sol("sol1").feature("s1").feature("i2").set("prefuntype", "left");
    model.sol("sol1").feature("s1").feature("i2").set("maxlinit", 10000);
    model.sol("sol1").feature("s1").feature("i2").set("linsolver", "cg");
    model.sol("sol1").feature("s1").feature("i2").set("rhob", 400);
    model.sol("sol1").feature("s1").feature("se1").feature("ss2").set("linsolver", "i2");
    model.sol("sol1").feature("s1").feature("i2").feature().create("mg1", "Multigrid");
    model.sol("sol1").feature("s1").feature("i2").feature("mg1").set("amgauto", 3);
    model.sol("sol1").feature("s1").feature("i2").feature("mg1").set("scale", 2);
    model.sol("sol1").feature("s1").feature("i2").feature("mg1").set("gmglevels", 1);
    model.sol("sol1").feature("s1").feature("i2").feature("mg1").set("massem", true);
    model.sol("sol1").feature("s1").feature("i2").feature("mg1").set("rmethod", "longest");
    model.sol("sol1").feature("s1").feature("i2").feature("mg1").set("mkeep", false);
    model.sol("sol1").feature("s1").feature("i2").feature("mg1").set("mgcycle", "v");
    model.sol("sol1").feature("s1").feature("i2").feature("mg1").set("prefun", "amg");
    model.sol("sol1").feature("s1").feature("i2").feature("mg1").set("mcasegen", "any");
    model.sol("sol1").feature("s1").feature("i2").feature("mg1").set("mglevels", 5);
    model.sol("sol1").feature("s1").feature("i2").feature("mg1").set("iter", 2);
    model.sol("sol1").feature("s1").feature("i2").feature("mg1").set("maxcoarsedof", 5000);
    model.sol("sol1").feature("s1").feature().remove("fcDef");
    model.sol("sol1").attach("std1");

    model.result().create("pg1", "PlotGroup3D");
    model.result("pg1").name("Magnetic flux density");
    model.result("pg1").set("data", "dset1");
    model.result("pg1").feature().create("mslc1", "Multislice");
    model.result("pg1").feature("mslc1").name("Multislice 1.1");
    model.result("pg1").feature("mslc1").set("expr", "mfnc.normB");
    model.result("pg1").feature("mslc1").set("data", "parent");
    model.result().create("pg2", "PlotGroup3D");
    model.result("pg2").name("Electric potential");
    model.result("pg2").set("data", "dset1");
    model.result("pg2").feature().create("mslc1", "Multislice");
    model.result("pg2").feature("mslc1").name("Multislice");
    model.result("pg2").feature("mslc1").set("expr", "V");
    model.result("pg2").feature("mslc1").set("data", "parent");

    model.sol("sol1").runAll();

    model.result("pg1").run();
    model.result("pg2").run();
    model.result("pg1").run();
    model.result().dataset().create("cpl1", "CutPlane");
    model.result().dataset("cpl1").run();

    model.view("view1").hideEntities().clear();

    model.result().dataset("cpl1").run();
    model.result().dataset().create("cpl2", "CutPlane");
    model.result().dataset("cpl2").set("planetype", "general");
    model.result().dataset("cpl2").setIndex("genpoints", "1", 2, 2);
    model.result().dataset("cpl2").setIndex("genpoints", "1", 1, 1);
    model.result().dataset("cpl2").setIndex("genpoints", "1", 2, 0);
    model.result().dataset("cpl2").run();
    model.result("pg1").run();
    model.result().remove("pg1");
    model.result().remove("pg2");
    model.result().create("pg1", "PlotGroup2D");
    model.result("pg1").run();
    model.result("pg1").feature().create("surf1", "Surface");
    model.result("pg1").feature("surf1").set("expr", "mfnc.normB");
    model.result("pg1").feature("surf1").set("unit", "G");
    model.result("pg1").run();
    model.result("pg1").feature("surf1").set("data", "cpl1");
    model.result("pg1").run();
    model.result("pg1").run();
    model.result("pg1").feature("surf1").set("data", "cpl2");
    model.result("pg1").run();
    model.result("pg1").feature("surf1").set("data", "cpl1");
    model.result("pg1").run();
    model.result("pg1").feature("surf1").set("rangecoloractive", "on");
    model.result("pg1").feature("surf1").set("rangecolormax", "4000");
    model.result("pg1").feature("surf1").set("data", "cpl2");
    model.result("pg1").run();
    model.result("pg1").set("allowtableupdate", true);
    model.result("pg1").set("renderdatacached", true);
    model.result().table("evl2").addRow(new double[]{-0.38605260848999023, 0.9453339576721191, 410.4259534213651});
    model.result().table("evl2").addRow(new double[]{-0.38605260848999023, 0.9453339576721191, 410.4259534213651});
    model.result().table("evl2").addRow(new double[]{-0.356356143951416, 0.9156374931335449, 419.25892153246093});
    model.result().table("evl2").addRow(new double[]{0, 0.12373495101928711, 60.69692800109637});
    model.result().table("evl2").addRow(new double[]{0, 0.1633298397064209, 64.52309210884772});
    model.result().table("evl2").addRow(new double[]{0, 0.2623178958892822, 85.07410505868313});
    model.result().table("evl2").addRow(new double[]{-0.8018016815185547, 1.1829047203063965, 178.03994118240107});
    model.result().table("evl2").addRow(new double[]{-0.8314979076385498, 1.1928033828735352, 186.30556327828785});
    model.result().table("evl2").addRow(new double[]{-0.7424087524414062, 1.2818925380706787, 332.9823559396711});
    model.result().table("evl2").addRow(new double[]{-0.7622063159942627, 1.133410930633545, 224.59982309866186});
    model.result().table("evl2").addRow(new double[]{-0.7919027805328369, 1.1730060577392578, 186.3524651074772});
    model.result().table("evl2").addRow(new double[]{-0.7919027805328369, 1.1829047203063965, 170.07928548936385});
    model.result().table("evl2").addRow(new double[]{-0.821599006652832, 1.1829047203063965, 193.96086909798277});
    model.result().table("evl2").addRow(new double[]{-0.7622063159942627, 1.16310715675354, 172.24493800918205});
    model.result().table("evl2").addRow(new double[]{-0.7226111888885498, 1.133410930633545, 202.37636232395124});
    model.result().table("evl2").addRow(new double[]{-0.7028136253356934, 1.123511791229248, 226.63749643307074});
    model.result().table("evl2").addRow(new double[]{-0.6731173992156982, 1.093815565109253, 290.59153452488385});
    model.result().table("evl2").addRow(new double[]{-0.6236233711242676, 1.0740180015563965, 339.1962230522189});
    model.result().table("evl2").addRow(new double[]{-0.5939269065856934, 1.05422043800354, 356.2992674881535});
    model.result().table("evl2").addRow(new double[]{-0.8314979076385498, 1.16310715675354, 234.4682759820522});
    model.result().table("evl2").addRow(new double[]{-0.9007892608642578, 1.202702283859253, 246.39869967607427});
    model.result().table("evl2").addRow(new double[]{-0.9007892608642578, 1.2126009464263916, 236.61186579451467});
    model.result().table("evl2").addRow(new double[]{-0.8413965702056885, 1.1928033828735352, 196.28834680261537});
    model.result().table("evl2").addRow(new double[]{-0.8413965702056885, 1.1928033828735352, 196.28834680261537});
    model.result().table("evl2").addRow(new double[]{-0.8512954711914062, 1.123511791229248, 319.26080088761466});
    model.result().table("evl2").addRow(new double[]{-0.8413965702056885, 1.202702283859253, 186.5012771959755});
    model.result().table("evl2").addRow(new double[]{-0.8314979076385498, 1.2225000858306885, 169.88230359943833});
    model.result().table("evl2").addRow(new double[]{-0.8314979076385498, 1.232398509979248, 185.78579807588753});
    model.result().table("evl2").addRow(new double[]{0.8018016815185547, 1.202702283859253, 198.3694122755259});
    model.result().table("evl2").addRow(new double[]{0.8018016815185547, 1.202702283859253, 198.3694122755259});
    model.result().table("evl2").addRow(new double[]{0.7622060775756836, 1.1730060577392578, 209.76206838521284});
    model.result().table("evl2").addRow(new double[]{0.7127127647399902, 1.1928033828735352, 222.27291752892864});
    model.result().table("evl2").addRow(new double[]{0.7721052169799805, 1.2521963119506836, 210.28470942283042});
    model.result().table("evl2").addRow(new double[]{0.7721052169799805, 1.2521963119506836, 210.28470942283042});
    model.result().table("evl2").addRow(new double[]{-0.009898662567138672, 0.06434226036071777, 75.21260588812407});

    model.view("view1").hideEntities().create("hide1");
    model.view("view1").hideEntities("hide1").geom(3);
    model.view("view1").hideEntities("hide1").add(new int[]{1});

    return model;
  }

  public static Model run5(Model model) {

    model.result("pg1").run();
    model.result("pg1").set("allowtableupdate", true);
    model.result("pg1").set("renderdatacached", true);
    model.result().table("evl2").addRow(new double[]{-7.384492874145508, -3.118117094039917, 8110.794542998409});
    model.result().table("evl2").addRow(new double[]{-1.0492711067199707, -1.3165383338928223, 1406.4350090518287});
    model.result().table("evl2").addRow(new double[]{-1.0492711067199707, -1.3165383338928223, 1406.4350090518287});
    model.result().table("evl2").addRow(new double[]{-1.0096759796142578, -1.2967407703399658, 1405.9410805170282});
    model.result().table("evl2").addRow(new double[]{-1.0096759796142578, -1.2967407703399658, 1405.9410805170282});
    model.result().table("evl2").addRow(new double[]{-1.148259162902832, -1.2967407703399658, 1388.2863715004175});
    model.result("pg1").feature("surf1").set("expr", "es.normE");
    model.result("pg1").run();

    model.view("view1").hideEntities("hide1").add(new int[]{7});

    model.result("pg1").run();

    model.view("view1").hideEntities().clear();

    model.result("pg1").run();
    model.result("pg1").feature("surf1").set("rangecoloractive", "off");

    model.param().set("vm", "-300000");

    model.sol("sol1").updateSolution();

    model.result("pg1").run();
    model.result("pg1").run();

    model.sol("sol1").study("std1");
    model.sol("sol1").feature().remove("s1");
    model.sol("sol1").feature().remove("v1");
    model.sol("sol1").feature().remove("st1");
    model.sol("sol1").feature().create("st1", "StudyStep");
    model.sol("sol1").feature("st1").set("study", "std1");
    model.sol("sol1").feature("st1").set("studystep", "stat");
    model.sol("sol1").feature().create("v1", "Variables");
    model.sol("sol1").feature("v1").set("control", "stat");
    model.sol("sol1").feature().create("s1", "Stationary");
    model.sol("sol1").feature("s1").feature().create("se1", "Segregated");
    model.sol("sol1").feature("s1").feature("se1").feature().remove("ssDef");
    model.sol("sol1").feature("s1").feature("se1").feature().create("ss1", "SegregatedStep");
    model.sol("sol1").feature("s1").feature("se1").feature("ss1").set("segvar", new String[]{"mod1_V"});
    model.sol("sol1").feature("s1").feature().create("i1", "Iterative");
    model.sol("sol1").feature("s1").feature("i1").set("prefuntype", "left");
    model.sol("sol1").feature("s1").feature("i1").set("maxlinit", 10000);
    model.sol("sol1").feature("s1").feature("i1").set("linsolver", "cg");
    model.sol("sol1").feature("s1").feature("i1").set("rhob", 400);
    model.sol("sol1").feature("s1").feature("se1").feature("ss1").set("linsolver", "i1");
    model.sol("sol1").feature("s1").feature("i1").feature().create("mg1", "Multigrid");
    model.sol("sol1").feature("s1").feature("i1").feature("mg1").set("amgauto", 3);
    model.sol("sol1").feature("s1").feature("i1").feature("mg1").set("scale", 2);
    model.sol("sol1").feature("s1").feature("i1").feature("mg1").set("gmglevels", 1);
    model.sol("sol1").feature("s1").feature("i1").feature("mg1").set("massem", true);
    model.sol("sol1").feature("s1").feature("i1").feature("mg1").set("rmethod", "longest");
    model.sol("sol1").feature("s1").feature("i1").feature("mg1").set("mkeep", false);
    model.sol("sol1").feature("s1").feature("i1").feature("mg1").set("mgcycle", "v");
    model.sol("sol1").feature("s1").feature("i1").feature("mg1").set("prefun", "amg");
    model.sol("sol1").feature("s1").feature("i1").feature("mg1").set("mcasegen", "any");
    model.sol("sol1").feature("s1").feature("i1").feature("mg1").set("mglevels", 5);
    model.sol("sol1").feature("s1").feature("i1").feature("mg1").set("iter", 2);
    model.sol("sol1").feature("s1").feature("i1").feature("mg1").set("maxcoarsedof", 5000);
    model.sol("sol1").feature("s1").feature("se1").feature().create("ss2", "SegregatedStep");
    model.sol("sol1").feature("s1").feature("se1").feature("ss2").set("segvar", new String[]{"mod1_Vm"});
    model.sol("sol1").feature("s1").feature().create("i2", "Iterative");
    model.sol("sol1").feature("s1").feature("i2").set("prefuntype", "left");
    model.sol("sol1").feature("s1").feature("i2").set("maxlinit", 10000);
    model.sol("sol1").feature("s1").feature("i2").set("linsolver", "cg");
    model.sol("sol1").feature("s1").feature("i2").set("rhob", 400);
    model.sol("sol1").feature("s1").feature("se1").feature("ss2").set("linsolver", "i2");
    model.sol("sol1").feature("s1").feature("i2").feature().create("mg1", "Multigrid");
    model.sol("sol1").feature("s1").feature("i2").feature("mg1").set("amgauto", 3);
    model.sol("sol1").feature("s1").feature("i2").feature("mg1").set("scale", 2);
    model.sol("sol1").feature("s1").feature("i2").feature("mg1").set("gmglevels", 1);
    model.sol("sol1").feature("s1").feature("i2").feature("mg1").set("massem", true);
    model.sol("sol1").feature("s1").feature("i2").feature("mg1").set("rmethod", "longest");
    model.sol("sol1").feature("s1").feature("i2").feature("mg1").set("mkeep", false);
    model.sol("sol1").feature("s1").feature("i2").feature("mg1").set("mgcycle", "v");
    model.sol("sol1").feature("s1").feature("i2").feature("mg1").set("prefun", "amg");
    model.sol("sol1").feature("s1").feature("i2").feature("mg1").set("mcasegen", "any");
    model.sol("sol1").feature("s1").feature("i2").feature("mg1").set("mglevels", 5);
    model.sol("sol1").feature("s1").feature("i2").feature("mg1").set("iter", 2);
    model.sol("sol1").feature("s1").feature("i2").feature("mg1").set("maxcoarsedof", 5000);
    model.sol("sol1").feature("s1").feature().remove("fcDef");
    model.sol("sol1").attach("std1");
    model.sol("sol1").runAll();

    model.result("pg1").run();
    model.result("pg1").set("allowtableupdate", true);
    model.result("pg1").set("renderdatacached", true);
    model.result().table("evl2")
         .addRow(new double[]{0.03959512710571289, 0.009899139404296875, 8.455028718528113E7});
    model.result().table("evl2")
         .addRow(new double[]{0.07919073104858398, -1.4155261516571045, 1.0785797973295118E8});
    model.result().table("evl2").addRow(new double[]{0.03959512710571289, -1.435323715209961, 1.0771591886714652E8});
    model.result().table("evl2")
         .addRow(new double[]{0.019797801971435547, 0.009899139404296875, 8.457789044859421E7});

    model.param().set("vm", "3e5");

    model.sol("sol1").study("std1");
    model.sol("sol1").feature().remove("s1");
    model.sol("sol1").feature().remove("v1");
    model.sol("sol1").feature().remove("st1");
    model.sol("sol1").feature().create("st1", "StudyStep");
    model.sol("sol1").feature("st1").set("study", "std1");
    model.sol("sol1").feature("st1").set("studystep", "stat");
    model.sol("sol1").feature().create("v1", "Variables");
    model.sol("sol1").feature("v1").set("control", "stat");
    model.sol("sol1").feature().create("s1", "Stationary");
    model.sol("sol1").feature("s1").feature().create("se1", "Segregated");
    model.sol("sol1").feature("s1").feature("se1").feature().remove("ssDef");
    model.sol("sol1").feature("s1").feature("se1").feature().create("ss1", "SegregatedStep");
    model.sol("sol1").feature("s1").feature("se1").feature("ss1").set("segvar", new String[]{"mod1_V"});
    model.sol("sol1").feature("s1").feature().create("i1", "Iterative");
    model.sol("sol1").feature("s1").feature("i1").set("prefuntype", "left");
    model.sol("sol1").feature("s1").feature("i1").set("maxlinit", 10000);
    model.sol("sol1").feature("s1").feature("i1").set("linsolver", "cg");
    model.sol("sol1").feature("s1").feature("i1").set("rhob", 400);
    model.sol("sol1").feature("s1").feature("se1").feature("ss1").set("linsolver", "i1");
    model.sol("sol1").feature("s1").feature("i1").feature().create("mg1", "Multigrid");
    model.sol("sol1").feature("s1").feature("i1").feature("mg1").set("amgauto", 3);
    model.sol("sol1").feature("s1").feature("i1").feature("mg1").set("scale", 2);
    model.sol("sol1").feature("s1").feature("i1").feature("mg1").set("gmglevels", 1);
    model.sol("sol1").feature("s1").feature("i1").feature("mg1").set("massem", true);
    model.sol("sol1").feature("s1").feature("i1").feature("mg1").set("rmethod", "longest");
    model.sol("sol1").feature("s1").feature("i1").feature("mg1").set("mkeep", false);
    model.sol("sol1").feature("s1").feature("i1").feature("mg1").set("mgcycle", "v");
    model.sol("sol1").feature("s1").feature("i1").feature("mg1").set("prefun", "amg");
    model.sol("sol1").feature("s1").feature("i1").feature("mg1").set("mcasegen", "any");
    model.sol("sol1").feature("s1").feature("i1").feature("mg1").set("mglevels", 5);
    model.sol("sol1").feature("s1").feature("i1").feature("mg1").set("iter", 2);
    model.sol("sol1").feature("s1").feature("i1").feature("mg1").set("maxcoarsedof", 5000);
    model.sol("sol1").feature("s1").feature("se1").feature().create("ss2", "SegregatedStep");
    model.sol("sol1").feature("s1").feature("se1").feature("ss2").set("segvar", new String[]{"mod1_Vm"});
    model.sol("sol1").feature("s1").feature().create("i2", "Iterative");
    model.sol("sol1").feature("s1").feature("i2").set("prefuntype", "left");
    model.sol("sol1").feature("s1").feature("i2").set("maxlinit", 10000);
    model.sol("sol1").feature("s1").feature("i2").set("linsolver", "cg");
    model.sol("sol1").feature("s1").feature("i2").set("rhob", 400);
    model.sol("sol1").feature("s1").feature("se1").feature("ss2").set("linsolver", "i2");
    model.sol("sol1").feature("s1").feature("i2").feature().create("mg1", "Multigrid");
    model.sol("sol1").feature("s1").feature("i2").feature("mg1").set("amgauto", 3);
    model.sol("sol1").feature("s1").feature("i2").feature("mg1").set("scale", 2);
    model.sol("sol1").feature("s1").feature("i2").feature("mg1").set("gmglevels", 1);
    model.sol("sol1").feature("s1").feature("i2").feature("mg1").set("massem", true);
    model.sol("sol1").feature("s1").feature("i2").feature("mg1").set("rmethod", "longest");
    model.sol("sol1").feature("s1").feature("i2").feature("mg1").set("mkeep", false);
    model.sol("sol1").feature("s1").feature("i2").feature("mg1").set("mgcycle", "v");
    model.sol("sol1").feature("s1").feature("i2").feature("mg1").set("prefun", "amg");
    model.sol("sol1").feature("s1").feature("i2").feature("mg1").set("mcasegen", "any");
    model.sol("sol1").feature("s1").feature("i2").feature("mg1").set("mglevels", 5);
    model.sol("sol1").feature("s1").feature("i2").feature("mg1").set("iter", 2);
    model.sol("sol1").feature("s1").feature("i2").feature("mg1").set("maxcoarsedof", 5000);
    model.sol("sol1").feature("s1").feature().remove("fcDef");
    model.sol("sol1").attach("std1");
    model.sol("sol1").runAll();

    model.result("pg1").run();
    model.result("pg1").set("allowtableupdate", true);
    model.result("pg1").set("renderdatacached", true);
    model.result().table("evl2")
         .addRow(new double[]{0.0055828094482421875, 0.0055828094482421875, 752348.9980576376});
    model.result().table("evl2").addRow(new double[]{0.055829524993896484, -0.480130672454834, 4.718584286082484E7});
    model.result().table("evl2").addRow(new double[]{0.10049200057983398, 0.03349733352661133, 7356105.817379424});
    model.result().table("evl2").addRow(new double[]{-0.05582904815673828, -0.05582904815673828, 6827887.301539619});

    model.param().set("tc", "3");

    model.sol("sol1").study("std1");
    model.sol("sol1").feature().remove("s1");
    model.sol("sol1").feature().remove("v1");
    model.sol("sol1").feature().remove("st1");
    model.sol("sol1").feature().create("st1", "StudyStep");
    model.sol("sol1").feature("st1").set("study", "std1");
    model.sol("sol1").feature("st1").set("studystep", "stat");
    model.sol("sol1").feature().create("v1", "Variables");
    model.sol("sol1").feature("v1").set("control", "stat");
    model.sol("sol1").feature().create("s1", "Stationary");
    model.sol("sol1").feature("s1").feature().create("se1", "Segregated");
    model.sol("sol1").feature("s1").feature("se1").feature().remove("ssDef");
    model.sol("sol1").feature("s1").feature("se1").feature().create("ss1", "SegregatedStep");
    model.sol("sol1").feature("s1").feature("se1").feature("ss1").set("segvar", new String[]{"mod1_V"});
    model.sol("sol1").feature("s1").feature().create("i1", "Iterative");
    model.sol("sol1").feature("s1").feature("i1").set("prefuntype", "left");
    model.sol("sol1").feature("s1").feature("i1").set("maxlinit", 10000);
    model.sol("sol1").feature("s1").feature("i1").set("linsolver", "cg");
    model.sol("sol1").feature("s1").feature("i1").set("rhob", 400);
    model.sol("sol1").feature("s1").feature("se1").feature("ss1").set("linsolver", "i1");
    model.sol("sol1").feature("s1").feature("i1").feature().create("mg1", "Multigrid");
    model.sol("sol1").feature("s1").feature("i1").feature("mg1").set("amgauto", 3);
    model.sol("sol1").feature("s1").feature("i1").feature("mg1").set("scale", 2);
    model.sol("sol1").feature("s1").feature("i1").feature("mg1").set("gmglevels", 1);
    model.sol("sol1").feature("s1").feature("i1").feature("mg1").set("massem", true);
    model.sol("sol1").feature("s1").feature("i1").feature("mg1").set("rmethod", "longest");
    model.sol("sol1").feature("s1").feature("i1").feature("mg1").set("mkeep", false);
    model.sol("sol1").feature("s1").feature("i1").feature("mg1").set("mgcycle", "v");
    model.sol("sol1").feature("s1").feature("i1").feature("mg1").set("prefun", "amg");
    model.sol("sol1").feature("s1").feature("i1").feature("mg1").set("mcasegen", "any");
    model.sol("sol1").feature("s1").feature("i1").feature("mg1").set("mglevels", 5);
    model.sol("sol1").feature("s1").feature("i1").feature("mg1").set("iter", 2);
    model.sol("sol1").feature("s1").feature("i1").feature("mg1").set("maxcoarsedof", 5000);
    model.sol("sol1").feature("s1").feature("se1").feature().create("ss2", "SegregatedStep");
    model.sol("sol1").feature("s1").feature("se1").feature("ss2").set("segvar", new String[]{"mod1_Vm"});
    model.sol("sol1").feature("s1").feature().create("i2", "Iterative");
    model.sol("sol1").feature("s1").feature("i2").set("prefuntype", "left");
    model.sol("sol1").feature("s1").feature("i2").set("maxlinit", 10000);
    model.sol("sol1").feature("s1").feature("i2").set("linsolver", "cg");
    model.sol("sol1").feature("s1").feature("i2").set("rhob", 400);
    model.sol("sol1").feature("s1").feature("se1").feature("ss2").set("linsolver", "i2");
    model.sol("sol1").feature("s1").feature("i2").feature().create("mg1", "Multigrid");
    model.sol("sol1").feature("s1").feature("i2").feature("mg1").set("amgauto", 3);
    model.sol("sol1").feature("s1").feature("i2").feature("mg1").set("scale", 2);
    model.sol("sol1").feature("s1").feature("i2").feature("mg1").set("gmglevels", 1);
    model.sol("sol1").feature("s1").feature("i2").feature("mg1").set("massem", true);
    model.sol("sol1").feature("s1").feature("i2").feature("mg1").set("rmethod", "longest");
    model.sol("sol1").feature("s1").feature("i2").feature("mg1").set("mkeep", false);
    model.sol("sol1").feature("s1").feature("i2").feature("mg1").set("mgcycle", "v");
    model.sol("sol1").feature("s1").feature("i2").feature("mg1").set("prefun", "amg");
    model.sol("sol1").feature("s1").feature("i2").feature("mg1").set("mcasegen", "any");
    model.sol("sol1").feature("s1").feature("i2").feature("mg1").set("mglevels", 5);
    model.sol("sol1").feature("s1").feature("i2").feature("mg1").set("iter", 2);
    model.sol("sol1").feature("s1").feature("i2").feature("mg1").set("maxcoarsedof", 5000);
    model.sol("sol1").feature("s1").feature().remove("fcDef");
    model.sol("sol1").attach("std1");
    model.sol("sol1").runAll();

    model.result("pg1").run();
    model.result("pg1").run();
    model.result("pg1").run();
    model.result("pg1").feature().create("con1", "Contour");
    model.result("pg1").feature("con1").set("expr", "mfnc.normB");
    model.result("pg1").run();
    model.result("pg1").feature("con1").set("colortablerev", "off");
    model.result("pg1").run();
    model.result("pg1").feature().remove("surf1");
    model.result("pg1").run();
    model.result("pg1").feature().create("con2", "Contour");
    model.result("pg1").feature("con2").set("expr", "es.normE");
    model.result("pg1").run();

    model.param().set("vm", "-3e5");

    model.result("pg1").run();
    model.result("pg1").set("allowtableupdate", true);
    model.result("pg1").set("renderdatacached", true);
    model.result("pg1").set("data", "cpl2");
    model.result("pg1").run();
    model.result("pg1").set("data", "cpl1");
    model.result("pg1").run();
    model.result("pg1").run();
    model.result("pg1").run();
    model.result("pg1").set("data", "cpl2");
    model.result("pg1").run();
    model.result("pg1").set("allowtableupdate", true);
    model.result("pg1").set("renderdatacached", true);

    model.name("magnetoelectrostatic.mph");

    model.result("pg1").run();

    model.view("view1").hideObjects("hide2").add(new String[]{"cyl6"});

    model.geom("geom1").runPre("int1");

    model.param().set("gap", "1");

    model.geom("geom1").feature("blk1").setIndex("pos", "gap/2", 0);
    model.geom("geom1").feature("blk1").setIndex("pos", "gap/2", 1);
    model.geom("geom1").run("blk1");
    model.geom("geom1").runAll();
    model.geom("geom1").run();

    model.view("view1").hideEntities().create("hide1");
    model.view("view1").hideEntities("hide1").geom(3);
    model.view("view1").hideEntities("hide1").add(new int[]{1});
    model.view("view1").hideEntities("hide1").add(new int[]{7});

    model.physics("mfnc").feature("mfc6").active(false);
    model.physics("es").feature("pot3").selection()
         .set(new int[]{14, 15, 16, 18, 19, 20, 33, 34, 37, 38, 45, 46, 49, 50, 68, 69, 70, 73, 74, 75, 76, 77, 78, 79, 80, 82, 83, 84, 88});

    model.view("view1").hideEntities("hide1").add(new int[]{2});

    model.physics("es").feature("pot3").selection()
         .set(new int[]{13, 14, 15, 16, 17, 18, 19, 20, 31, 33, 34, 35, 37, 38, 45, 46, 47, 48, 49, 50, 67, 68, 69, 70, 71, 73, 74, 75, 76, 77, 78, 79, 80, 82, 83, 84, 85, 86, 87, 88});

    model.view("view1").hideEntities().clear();
    model.view("view1").hideEntities().create("hide1");
    model.view("view1").hideEntities("hide1").geom(2);
    model.view("view1").hideEntities("hide1").add(new int[]{3});
    model.view("view1").hideEntities().clear();

    model.study().create("std2");
    model.study("std2").feature().create("stat", "Stationary");
    model.study("std2").feature("stat").set("sweeptype", "sparse");
    model.study("std2").feature("stat").set("plistarr_vector_start", new String[]{});
    model.study("std2").feature("stat").set("notmanualsolnum", 1);
    model.study("std2").feature("stat").set("timeinterp", "off");
    model.study("std2").feature("stat").set("usesol", "off");
    model.study("std2").feature("stat").set("plistarrexceloverwrite", true);
    model.study("std2").feature("stat").set("constraintgroup", new String[][]{});
    model.study("std2").feature("stat").set("plot", "off");
    model.study("std2").feature("stat").set("adaption", "off");
    model.study("std2").feature("stat").set("notstudy", "zero");
    model.study("std2").feature("stat").set("notsolnum", 1);
    model.study("std2").feature("stat").set("plistarr", new String[][]{});
    model.study("std2").feature("stat").set("plistarr_vector_numvalues", new String[]{});
    model.study("std2").feature("stat").set("plist", "");
    model.study("std2").feature("stat").set("nottimeinterp", "off");
    model.study("std2").feature("stat").set("useloadcase", "off");
    model.study("std2").feature("stat").set("loadgroup", new String[][]{});
    model.study("std2").feature("stat").set("useparam", "off");
    model.study("std2").feature("stat").set("plistarr_vector_step", new String[]{});
    model.study("std2").feature("stat").set("plistarrexcelfilename", "");
    model.study("std2").feature("stat").set("plistarr_vector_function", new String[]{});
    model.study("std2").feature("stat").set("plistarr_vector_method", new String[]{});
    model.study("std2").feature("stat").set("notsolmethod", "init");
    model.study("std2").feature("stat").set("optimization", false);
    model.study("std2").feature("stat").set("geometricNonlinearity", false);
    model.study("std2").feature("stat").set("nott", 0);
    model.study("std2").feature("stat").set("solnum", 1);
    model.study("std2").feature("stat").set("notmanualsol", "off");
    model.study("std2").feature("stat").set("useinitsol", "off");
    model.study("std2").feature("stat").set("loadgroupweight", new double[][]{});
    model.study("std2").feature("stat").set("manualsolnum", 1);
    model.study("std2").feature("stat").set("initstudy", "zero");
    model.study("std2").feature("stat").set("manualsol", "off");
    model.study("std2").feature("stat").set("probesel", "all");
    model.study("std2").feature("stat").set("notsolvertype", "none");
    model.study("std2").feature("stat").set("loadcase", new String[]{});
    model.study("std2").feature("stat").set("t", 0);
    model.study("std2").feature("stat").set("plistarrexcelsheet", "");
    model.study("std2").feature("stat").set("geometricNonlinearityActive", true);
    model.study("std2").feature("stat").set("solvertype", "none");
    model.study("std2").feature("stat").set("pname", new String[]{});
    model.study("std2").feature("stat").set("plistarr_vector_stop", new String[]{});
    model.study("std2").feature("stat").set("showGeometricNonlinearity", "on");
    model.study("std2").feature("stat").set("initmethod", "init");
    model.study("std2").feature("stat").set("plistarrexcelrange", "");
    model.study("std2").feature("stat").activate("mfnc", true);
    model.study("std2").feature("stat").activate("es", true);

    model.sol().create("sol2");
    model.sol("sol2").study("std2");
    model.sol("sol2").feature().create("st1", "StudyStep");
    model.sol("sol2").feature("st1").set("study", "std2");
    model.sol("sol2").feature("st1").set("studystep", "stat");
    model.sol("sol2").feature().create("v1", "Variables");
    model.sol("sol2").feature("v1").set("control", "stat");
    model.sol("sol2").feature().create("s1", "Stationary");
    model.sol("sol2").feature("s1").feature().create("se1", "Segregated");
    model.sol("sol2").feature("s1").feature("se1").feature().remove("ssDef");
    model.sol("sol2").feature("s1").feature("se1").feature().create("ss1", "SegregatedStep");
    model.sol("sol2").feature("s1").feature("se1").feature("ss1").set("segvar", new String[]{"mod1_V"});
    model.sol("sol2").feature("s1").feature().create("i1", "Iterative");
    model.sol("sol2").feature("s1").feature("i1").set("prefuntype", "left");
    model.sol("sol2").feature("s1").feature("i1").set("maxlinit", 10000);
    model.sol("sol2").feature("s1").feature("i1").set("linsolver", "cg");
    model.sol("sol2").feature("s1").feature("i1").set("rhob", 400);
    model.sol("sol2").feature("s1").feature("se1").feature("ss1").set("linsolver", "i1");
    model.sol("sol2").feature("s1").feature("i1").feature().create("mg1", "Multigrid");
    model.sol("sol2").feature("s1").feature("i1").feature("mg1").set("amgauto", 3);
    model.sol("sol2").feature("s1").feature("i1").feature("mg1").set("scale", 2);
    model.sol("sol2").feature("s1").feature("i1").feature("mg1").set("gmglevels", 1);
    model.sol("sol2").feature("s1").feature("i1").feature("mg1").set("massem", true);
    model.sol("sol2").feature("s1").feature("i1").feature("mg1").set("rmethod", "longest");
    model.sol("sol2").feature("s1").feature("i1").feature("mg1").set("mkeep", false);
    model.sol("sol2").feature("s1").feature("i1").feature("mg1").set("mgcycle", "v");
    model.sol("sol2").feature("s1").feature("i1").feature("mg1").set("prefun", "amg");
    model.sol("sol2").feature("s1").feature("i1").feature("mg1").set("mcasegen", "any");
    model.sol("sol2").feature("s1").feature("i1").feature("mg1").set("mglevels", 5);
    model.sol("sol2").feature("s1").feature("i1").feature("mg1").set("iter", 2);
    model.sol("sol2").feature("s1").feature("i1").feature("mg1").set("maxcoarsedof", 5000);
    model.sol("sol2").feature("s1").feature("se1").feature().create("ss2", "SegregatedStep");
    model.sol("sol2").feature("s1").feature("se1").feature("ss2").set("segvar", new String[]{"mod1_Vm"});
    model.sol("sol2").feature("s1").feature().create("i2", "Iterative");
    model.sol("sol2").feature("s1").feature("i2").set("prefuntype", "left");
    model.sol("sol2").feature("s1").feature("i2").set("maxlinit", 10000);
    model.sol("sol2").feature("s1").feature("i2").set("linsolver", "cg");
    model.sol("sol2").feature("s1").feature("i2").set("rhob", 400);
    model.sol("sol2").feature("s1").feature("se1").feature("ss2").set("linsolver", "i2");
    model.sol("sol2").feature("s1").feature("i2").feature().create("mg1", "Multigrid");
    model.sol("sol2").feature("s1").feature("i2").feature("mg1").set("amgauto", 3);
    model.sol("sol2").feature("s1").feature("i2").feature("mg1").set("scale", 2);
    model.sol("sol2").feature("s1").feature("i2").feature("mg1").set("gmglevels", 1);
    model.sol("sol2").feature("s1").feature("i2").feature("mg1").set("massem", true);
    model.sol("sol2").feature("s1").feature("i2").feature("mg1").set("rmethod", "longest");
    model.sol("sol2").feature("s1").feature("i2").feature("mg1").set("mkeep", false);
    model.sol("sol2").feature("s1").feature("i2").feature("mg1").set("mgcycle", "v");
    model.sol("sol2").feature("s1").feature("i2").feature("mg1").set("prefun", "amg");
    model.sol("sol2").feature("s1").feature("i2").feature("mg1").set("mcasegen", "any");
    model.sol("sol2").feature("s1").feature("i2").feature("mg1").set("mglevels", 5);
    model.sol("sol2").feature("s1").feature("i2").feature("mg1").set("iter", 2);
    model.sol("sol2").feature("s1").feature("i2").feature("mg1").set("maxcoarsedof", 5000);
    model.sol("sol2").feature("s1").feature().remove("fcDef");
    model.sol("sol2").attach("std2");

    model.result().create("pg2", "PlotGroup3D");
    model.result("pg2").name("Magnetic flux density");
    model.result("pg2").set("data", "dset2");
    model.result("pg2").feature().create("mslc1", "Multislice");
    model.result("pg2").feature("mslc1").name("Multislice 1.1");
    model.result("pg2").feature("mslc1").set("expr", "mfnc.normB");
    model.result("pg2").feature("mslc1").set("data", "parent");
    model.result().create("pg3", "PlotGroup3D");
    model.result("pg3").name("Electric potential");
    model.result("pg3").set("data", "dset2");
    model.result("pg3").feature().create("mslc1", "Multislice");
    model.result("pg3").feature("mslc1").name("Multislice");
    model.result("pg3").feature("mslc1").set("expr", "V");
    model.result("pg3").feature("mslc1").set("data", "parent");

    model.sol("sol2").runAll();

    model.result("pg2").run();
    model.result("pg1").run();
    model.result("pg2").run();
    model.result("pg1").run();
    model.result().dataset("cpl1").set("data", "dset2");
    model.result().dataset("cpl2").set("data", "dset2");
    model.result("pg1").run();
    model.result("pg1").run();
    model.result("pg1").run();
    model.result("pg1").feature("con2").active(false);
    model.result("pg1").run();
    model.result("pg1").set("allowtableupdate", true);
    model.result("pg1").set("renderdatacached", true);
    model.result("pg1").feature("con2").set("data", "cpl2");
    model.result("pg1").feature("con2").active(true);
    model.result("pg1").run();
    model.result("pg1").run();
    model.result("pg1").set("data", "cpl1");
    model.result("pg1").run();
    model.result("pg1").run();
    model.result("pg1").run();
    model.result("pg1").run();
    model.result("pg1").feature("con2").active(false);
    model.result("pg1").run();
    model.result("pg1").set("allowtableupdate", true);
    model.result("pg1").set("renderdatacached", true);
    model.result("pg1").run();
    model.result("pg1").run();
    model.result("pg1").set("data", "cpl2");
    model.result("pg1").run();
    model.result("pg1").set("allowtableupdate", true);
    model.result("pg1").set("renderdatacached", true);
    model.result().dataset().create("cpl3", "CutPlane");
    model.result().dataset().move("cpl3", 3);
    model.result().dataset("cpl3").set("quickplane", "xy");
    model.result().dataset("cpl2").run();
    model.result().dataset("cpl1").run();

    model.param().set("gap", "1.5");

    model.sol("sol2").study("std2");
    model.sol("sol2").feature().remove("s1");
    model.sol("sol2").feature().remove("v1");
    model.sol("sol2").feature().remove("st1");
    model.sol("sol2").feature().create("st1", "StudyStep");
    model.sol("sol2").feature("st1").set("study", "std2");
    model.sol("sol2").feature("st1").set("studystep", "stat");
    model.sol("sol2").feature().create("v1", "Variables");
    model.sol("sol2").feature("v1").set("control", "stat");
    model.sol("sol2").feature().create("s1", "Stationary");
    model.sol("sol2").feature("s1").feature().create("se1", "Segregated");
    model.sol("sol2").feature("s1").feature("se1").feature().remove("ssDef");
    model.sol("sol2").feature("s1").feature("se1").feature().create("ss1", "SegregatedStep");
    model.sol("sol2").feature("s1").feature("se1").feature("ss1").set("segvar", new String[]{"mod1_V"});
    model.sol("sol2").feature("s1").feature().create("i1", "Iterative");
    model.sol("sol2").feature("s1").feature("i1").set("prefuntype", "left");
    model.sol("sol2").feature("s1").feature("i1").set("maxlinit", 10000);
    model.sol("sol2").feature("s1").feature("i1").set("linsolver", "cg");
    model.sol("sol2").feature("s1").feature("i1").set("rhob", 400);
    model.sol("sol2").feature("s1").feature("se1").feature("ss1").set("linsolver", "i1");
    model.sol("sol2").feature("s1").feature("i1").feature().create("mg1", "Multigrid");
    model.sol("sol2").feature("s1").feature("i1").feature("mg1").set("amgauto", 3);
    model.sol("sol2").feature("s1").feature("i1").feature("mg1").set("scale", 2);
    model.sol("sol2").feature("s1").feature("i1").feature("mg1").set("gmglevels", 1);
    model.sol("sol2").feature("s1").feature("i1").feature("mg1").set("massem", true);
    model.sol("sol2").feature("s1").feature("i1").feature("mg1").set("rmethod", "longest");
    model.sol("sol2").feature("s1").feature("i1").feature("mg1").set("mkeep", false);
    model.sol("sol2").feature("s1").feature("i1").feature("mg1").set("mgcycle", "v");
    model.sol("sol2").feature("s1").feature("i1").feature("mg1").set("prefun", "amg");
    model.sol("sol2").feature("s1").feature("i1").feature("mg1").set("mcasegen", "any");
    model.sol("sol2").feature("s1").feature("i1").feature("mg1").set("mglevels", 5);
    model.sol("sol2").feature("s1").feature("i1").feature("mg1").set("iter", 2);
    model.sol("sol2").feature("s1").feature("i1").feature("mg1").set("maxcoarsedof", 5000);
    model.sol("sol2").feature("s1").feature("se1").feature().create("ss2", "SegregatedStep");
    model.sol("sol2").feature("s1").feature("se1").feature("ss2").set("segvar", new String[]{"mod1_Vm"});
    model.sol("sol2").feature("s1").feature().create("i2", "Iterative");
    model.sol("sol2").feature("s1").feature("i2").set("prefuntype", "left");
    model.sol("sol2").feature("s1").feature("i2").set("maxlinit", 10000);
    model.sol("sol2").feature("s1").feature("i2").set("linsolver", "cg");
    model.sol("sol2").feature("s1").feature("i2").set("rhob", 400);

    return model;
  }

  public static Model run6(Model model) {
    model.sol("sol2").feature("s1").feature("se1").feature("ss2").set("linsolver", "i2");
    model.sol("sol2").feature("s1").feature("i2").feature().create("mg1", "Multigrid");
    model.sol("sol2").feature("s1").feature("i2").feature("mg1").set("amgauto", 3);
    model.sol("sol2").feature("s1").feature("i2").feature("mg1").set("scale", 2);
    model.sol("sol2").feature("s1").feature("i2").feature("mg1").set("gmglevels", 1);
    model.sol("sol2").feature("s1").feature("i2").feature("mg1").set("massem", true);
    model.sol("sol2").feature("s1").feature("i2").feature("mg1").set("rmethod", "longest");
    model.sol("sol2").feature("s1").feature("i2").feature("mg1").set("mkeep", false);
    model.sol("sol2").feature("s1").feature("i2").feature("mg1").set("mgcycle", "v");
    model.sol("sol2").feature("s1").feature("i2").feature("mg1").set("prefun", "amg");
    model.sol("sol2").feature("s1").feature("i2").feature("mg1").set("mcasegen", "any");
    model.sol("sol2").feature("s1").feature("i2").feature("mg1").set("mglevels", 5);
    model.sol("sol2").feature("s1").feature("i2").feature("mg1").set("iter", 2);
    model.sol("sol2").feature("s1").feature("i2").feature("mg1").set("maxcoarsedof", 5000);
    model.sol("sol2").feature("s1").feature().remove("fcDef");
    model.sol("sol2").attach("std2");
    model.sol("sol2").runAll();

    model.result("pg1").run();
    model.result("pg1").set("allowtableupdate", true);
    model.result("pg1").set("renderdatacached", true);
    model.result("pg1").set("data", "cpl1");
    model.result("pg1").run();
    model.result("pg1").set("allowtableupdate", true);
    model.result("pg1").set("renderdatacached", true);
    model.result("pg1").run();
    model.result("pg1").feature("con2").active(true);
    model.result("pg1").run();
    model.result("pg1").feature("con2").set("data", "cpl1");
    model.result("pg1").run();
    model.result("pg1").run();
    model.result("pg1").feature("con1").active(false);
    model.result("pg1").run();
    model.result("pg1").run();
    model.result("pg1").feature("con2").set("data", "cpl2");
    model.result("pg1").run();
    model.result("pg1").run();
    model.result("pg1").run();
    model.result("pg1").feature().create("surf1", "Surface");
    model.result("pg1").run();
    model.result("pg1").run();
    model.result("pg1").feature("surf1").set("expr", "es.normE");
    model.result("pg1").run();
    model.result("pg1").run();
    model.result("pg1").run();
    model.result("pg1").feature("con2").active(false);
    model.result("pg1").run();
    model.result("pg1").run();
    model.result("pg1").feature().create("arws1", "ArrowSurface");
    model.result("pg1").feature("arws1").setIndex("expr", "es.Ex", 0);
    model.result("pg1").feature("arws1").setIndex("expr", "es.Ez", 1);
    model.result("pg1").run();

    model.param().set("vm", "3e5");

    model.sol("sol2").study("std2");
    model.sol("sol2").feature().remove("s1");
    model.sol("sol2").feature().remove("v1");
    model.sol("sol2").feature().remove("st1");
    model.sol("sol2").feature().create("st1", "StudyStep");
    model.sol("sol2").feature("st1").set("study", "std2");
    model.sol("sol2").feature("st1").set("studystep", "stat");
    model.sol("sol2").feature().create("v1", "Variables");
    model.sol("sol2").feature("v1").set("control", "stat");
    model.sol("sol2").feature().create("s1", "Stationary");
    model.sol("sol2").feature("s1").feature().create("se1", "Segregated");
    model.sol("sol2").feature("s1").feature("se1").feature().remove("ssDef");
    model.sol("sol2").feature("s1").feature("se1").feature().create("ss1", "SegregatedStep");
    model.sol("sol2").feature("s1").feature("se1").feature("ss1").set("segvar", new String[]{"mod1_V"});
    model.sol("sol2").feature("s1").feature().create("i1", "Iterative");
    model.sol("sol2").feature("s1").feature("i1").set("prefuntype", "left");
    model.sol("sol2").feature("s1").feature("i1").set("maxlinit", 10000);
    model.sol("sol2").feature("s1").feature("i1").set("linsolver", "cg");
    model.sol("sol2").feature("s1").feature("i1").set("rhob", 400);
    model.sol("sol2").feature("s1").feature("se1").feature("ss1").set("linsolver", "i1");
    model.sol("sol2").feature("s1").feature("i1").feature().create("mg1", "Multigrid");
    model.sol("sol2").feature("s1").feature("i1").feature("mg1").set("amgauto", 3);
    model.sol("sol2").feature("s1").feature("i1").feature("mg1").set("scale", 2);
    model.sol("sol2").feature("s1").feature("i1").feature("mg1").set("gmglevels", 1);
    model.sol("sol2").feature("s1").feature("i1").feature("mg1").set("massem", true);
    model.sol("sol2").feature("s1").feature("i1").feature("mg1").set("rmethod", "longest");
    model.sol("sol2").feature("s1").feature("i1").feature("mg1").set("mkeep", false);
    model.sol("sol2").feature("s1").feature("i1").feature("mg1").set("mgcycle", "v");
    model.sol("sol2").feature("s1").feature("i1").feature("mg1").set("prefun", "amg");
    model.sol("sol2").feature("s1").feature("i1").feature("mg1").set("mcasegen", "any");
    model.sol("sol2").feature("s1").feature("i1").feature("mg1").set("mglevels", 5);
    model.sol("sol2").feature("s1").feature("i1").feature("mg1").set("iter", 2);
    model.sol("sol2").feature("s1").feature("i1").feature("mg1").set("maxcoarsedof", 5000);
    model.sol("sol2").feature("s1").feature("se1").feature().create("ss2", "SegregatedStep");
    model.sol("sol2").feature("s1").feature("se1").feature("ss2").set("segvar", new String[]{"mod1_Vm"});
    model.sol("sol2").feature("s1").feature().create("i2", "Iterative");
    model.sol("sol2").feature("s1").feature("i2").set("prefuntype", "left");
    model.sol("sol2").feature("s1").feature("i2").set("maxlinit", 10000);
    model.sol("sol2").feature("s1").feature("i2").set("linsolver", "cg");
    model.sol("sol2").feature("s1").feature("i2").set("rhob", 400);
    model.sol("sol2").feature("s1").feature("se1").feature("ss2").set("linsolver", "i2");
    model.sol("sol2").feature("s1").feature("i2").feature().create("mg1", "Multigrid");
    model.sol("sol2").feature("s1").feature("i2").feature("mg1").set("amgauto", 3);
    model.sol("sol2").feature("s1").feature("i2").feature("mg1").set("scale", 2);
    model.sol("sol2").feature("s1").feature("i2").feature("mg1").set("gmglevels", 1);
    model.sol("sol2").feature("s1").feature("i2").feature("mg1").set("massem", true);
    model.sol("sol2").feature("s1").feature("i2").feature("mg1").set("rmethod", "longest");
    model.sol("sol2").feature("s1").feature("i2").feature("mg1").set("mkeep", false);
    model.sol("sol2").feature("s1").feature("i2").feature("mg1").set("mgcycle", "v");
    model.sol("sol2").feature("s1").feature("i2").feature("mg1").set("prefun", "amg");
    model.sol("sol2").feature("s1").feature("i2").feature("mg1").set("mcasegen", "any");
    model.sol("sol2").feature("s1").feature("i2").feature("mg1").set("mglevels", 5);
    model.sol("sol2").feature("s1").feature("i2").feature("mg1").set("iter", 2);
    model.sol("sol2").feature("s1").feature("i2").feature("mg1").set("maxcoarsedof", 5000);
    model.sol("sol2").feature("s1").feature().remove("fcDef");
    model.sol("sol2").attach("std2");
    model.sol("sol2").runAll();

    model.result("pg1").run();
    model.result("pg1").run();
    model.result("pg1").run();
    model.result("pg1").run();
    model.result("pg1").feature("con2").set("data", "parent");
    model.result("pg1").run();
    model.result("pg1").run();
    model.result("pg1").set("data", "cpl2");
    model.result("pg1").run();
    model.result("pg1").set("data", "cpl1");
    model.result("pg1").run();
    model.result("pg1").run();
    model.result("pg1").feature("surf1").active(false);
    model.result("pg1").run();
    model.result("pg1").run();
    model.result("pg1").feature("arws1").active(false);
    model.result("pg1").run();
    model.result("pg1").run();
    model.result("pg1").run();
    model.result("pg1").run();
    model.result("pg1").feature("con1").active(true);
    model.result("pg1").run();
    model.result("pg1").run();
    model.result("pg1").feature("con2").active(true);
    model.result("pg1").run();
    model.result("pg1").run();
    model.result("pg1").set("data", "cpl3");
    model.result("pg1").run();
    model.result("pg1").run();
    model.result("pg1").run();
    model.result("pg1").feature("con2").active(false);
    model.result("pg1").run();

    model.view("view1").hideEntities().create("hide1");
    model.view("view1").hideEntities("hide1").geom(3);
    model.view("view1").hideEntities("hide1").add(new int[]{1});
    model.view("view1").hideEntities("hide1").add(new int[]{7});

    model.result("pg1").run();
    model.result().dataset("cpl3").run();

    model.geom("geom1").runAll();

    model.result().dataset("cpl3").set("data", "dset2");
    model.result("pg1").run();

    model.view("view1").hideEntities().clear();

    model.result("pg1").run();
    model.result("pg1").run();
    model.result("pg1").feature("con2").active(true);
    model.result("pg1").run();
    model.result("pg1").run();
    model.result("pg1").feature("con1").active(false);
    model.result("pg1").run();

    model.param().set("vp", "0");
    model.param().set("vm", "0");
    model.param().set("vs", "1");

    model.view("view1").hideEntities().create("hide1");
    model.view("view1").hideEntities("hide1").geom(3);
    model.view("view1").hideEntities("hide1").add(new int[]{1});
    model.view("view1").hideEntities("hide1").add(new int[]{7});

    model.physics("es").feature().duplicate("pot4", "pot3");
    model.physics("es").feature("pot4").selection()
         .set(new int[]{13, 16, 17, 18, 19, 20, 31, 33, 34, 35, 37, 38, 45, 46, 47, 48, 49, 50, 71, 73, 74, 75, 76, 77, 78, 79, 80, 82, 83, 84, 85, 86, 88});

    model.view("view1").hideEntities("hide1").add(new int[]{});
    model.view("view1").hideEntities("hide1").add(new int[]{});
    model.view("view1").hideEntities("hide1").add(new int[]{2});
    model.view("view1").hideEntities("hide1").add(new int[]{6});
    model.view("view1").hideEntities("hide1").add(new int[]{3});
    model.view("view1").hideEntities("hide1").add(new int[]{8});

    model.physics("es").feature("pot4").selection()
         .set(new int[]{17, 18, 19, 20, 35, 37, 38, 46, 49, 50, 76, 77, 78, 79, 80, 82, 83, 84, 86, 88});
    model.physics("es").feature("pot3").selection()
         .set(new int[]{13, 14, 15, 16, 31, 33, 34, 45, 47, 48, 67, 68, 69, 70, 71, 73, 74, 75, 85, 87});
    model.physics("es").feature("pot3").set("V0", 1, "vs");
    model.physics("es").feature("pot4").set("V0", 1, "-vs");

    model.result("pg1").run();

    model.sol("sol2").study("std2");
    model.sol("sol2").feature().remove("s1");
    model.sol("sol2").feature().remove("v1");
    model.sol("sol2").feature().remove("st1");
    model.sol("sol2").feature().create("st1", "StudyStep");
    model.sol("sol2").feature("st1").set("study", "std2");
    model.sol("sol2").feature("st1").set("studystep", "stat");
    model.sol("sol2").feature().create("v1", "Variables");
    model.sol("sol2").feature("v1").set("control", "stat");
    model.sol("sol2").feature().create("s1", "Stationary");
    model.sol("sol2").feature("s1").feature().create("se1", "Segregated");
    model.sol("sol2").feature("s1").feature("se1").feature().remove("ssDef");
    model.sol("sol2").feature("s1").feature("se1").feature().create("ss1", "SegregatedStep");
    model.sol("sol2").feature("s1").feature("se1").feature("ss1").set("segvar", new String[]{"mod1_V"});
    model.sol("sol2").feature("s1").feature().create("i1", "Iterative");
    model.sol("sol2").feature("s1").feature("i1").set("prefuntype", "left");
    model.sol("sol2").feature("s1").feature("i1").set("maxlinit", 10000);
    model.sol("sol2").feature("s1").feature("i1").set("linsolver", "cg");
    model.sol("sol2").feature("s1").feature("i1").set("rhob", 400);
    model.sol("sol2").feature("s1").feature("se1").feature("ss1").set("linsolver", "i1");
    model.sol("sol2").feature("s1").feature("i1").feature().create("mg1", "Multigrid");
    model.sol("sol2").feature("s1").feature("i1").feature("mg1").set("amgauto", 3);
    model.sol("sol2").feature("s1").feature("i1").feature("mg1").set("scale", 2);
    model.sol("sol2").feature("s1").feature("i1").feature("mg1").set("gmglevels", 1);
    model.sol("sol2").feature("s1").feature("i1").feature("mg1").set("massem", true);
    model.sol("sol2").feature("s1").feature("i1").feature("mg1").set("rmethod", "longest");
    model.sol("sol2").feature("s1").feature("i1").feature("mg1").set("mkeep", false);
    model.sol("sol2").feature("s1").feature("i1").feature("mg1").set("mgcycle", "v");
    model.sol("sol2").feature("s1").feature("i1").feature("mg1").set("prefun", "amg");
    model.sol("sol2").feature("s1").feature("i1").feature("mg1").set("mcasegen", "any");
    model.sol("sol2").feature("s1").feature("i1").feature("mg1").set("mglevels", 5);
    model.sol("sol2").feature("s1").feature("i1").feature("mg1").set("iter", 2);
    model.sol("sol2").feature("s1").feature("i1").feature("mg1").set("maxcoarsedof", 5000);
    model.sol("sol2").feature("s1").feature("se1").feature().create("ss2", "SegregatedStep");
    model.sol("sol2").feature("s1").feature("se1").feature("ss2").set("segvar", new String[]{"mod1_Vm"});
    model.sol("sol2").feature("s1").feature().create("i2", "Iterative");
    model.sol("sol2").feature("s1").feature("i2").set("prefuntype", "left");
    model.sol("sol2").feature("s1").feature("i2").set("maxlinit", 10000);
    model.sol("sol2").feature("s1").feature("i2").set("linsolver", "cg");
    model.sol("sol2").feature("s1").feature("i2").set("rhob", 400);
    model.sol("sol2").feature("s1").feature("se1").feature("ss2").set("linsolver", "i2");
    model.sol("sol2").feature("s1").feature("i2").feature().create("mg1", "Multigrid");
    model.sol("sol2").feature("s1").feature("i2").feature("mg1").set("amgauto", 3);
    model.sol("sol2").feature("s1").feature("i2").feature("mg1").set("scale", 2);
    model.sol("sol2").feature("s1").feature("i2").feature("mg1").set("gmglevels", 1);
    model.sol("sol2").feature("s1").feature("i2").feature("mg1").set("massem", true);
    model.sol("sol2").feature("s1").feature("i2").feature("mg1").set("rmethod", "longest");
    model.sol("sol2").feature("s1").feature("i2").feature("mg1").set("mkeep", false);
    model.sol("sol2").feature("s1").feature("i2").feature("mg1").set("mgcycle", "v");
    model.sol("sol2").feature("s1").feature("i2").feature("mg1").set("prefun", "amg");
    model.sol("sol2").feature("s1").feature("i2").feature("mg1").set("mcasegen", "any");
    model.sol("sol2").feature("s1").feature("i2").feature("mg1").set("mglevels", 5);
    model.sol("sol2").feature("s1").feature("i2").feature("mg1").set("iter", 2);
    model.sol("sol2").feature("s1").feature("i2").feature("mg1").set("maxcoarsedof", 5000);
    model.sol("sol2").feature("s1").feature().remove("fcDef");
    model.sol("sol2").attach("std2");
    model.sol("sol2").runAll();

    model.result("pg1").run();

    model.view("view1").hideEntities().clear();

    model.result("pg1").run();
    model.result("pg1").run();
    model.result("pg1").set("data", "cpl2");
    model.result("pg1").run();
    model.result("pg1").set("data", "cpl1");
    model.result("pg1").run();

    model.geom("geom1").run("cyl6");
    model.geom("geom1").feature().create("blk2", "Block");
    model.geom("geom1").feature("blk2").setIndex("pos", "gap", 2);
    model.geom("geom1").run();

    model.view("view1").hideEntities().create("hide1");
    model.view("view1").hideEntities("hide1").geom(3);
    model.view("view1").hideEntities("hide1").add(new int[]{1});

    model.geom("geom1").feature("blk2").setIndex("size", "gap", 2);
    model.geom("geom1").feature("blk2").setIndex("size", "OD-2-ID-2", 1);
    model.geom("geom1").feature("blk2").setIndex("size", "gap", 0);
    model.geom("geom1").feature("blk2").setIndex("size", "tc", 2);
    model.geom("geom1").feature("blk2").setIndex("pos", "-tc/2", 2);
    model.geom("geom1").feature("blk2").setIndex("pos", "ID/2", 1);
    model.geom("geom1").feature("blk2").setIndex("pos", "-gap/2", 0);
    model.geom("geom1").run("blk2");
    model.geom("geom1").feature("blk2").setIndex("size", "OD/2-ID/2", 1);
    model.geom("geom1").run("blk2");
    model.geom("geom1").feature("blk2").setIndex("pos", "sqrt(ID/2)", 1);
    model.geom("geom1").run("blk2");
    model.geom("geom1").feature("blk2").setIndex("pos", "sqrt(ID^2-gap^2)/2", 1);
    model.geom("geom1").run("blk2");
    model.geom("geom1").feature("blk2").setIndex("size", "sqrt(OD^2-gap^2)/2-sqrt(ID^2-gap^2)/2", 1);
    model.geom("geom1").run("blk2");
    model.geom("geom1").feature().duplicate("blk3", "blk2");
    model.geom("geom1").feature("blk3").setIndex("pos", "sqrt(ID^2-gap^2)/2-OD/2-ID/2", 1);
    model.geom("geom1").run("blk3");
    model.geom("geom1").feature("blk3").setIndex("pos", "-sqrt(OD^2-gap^2)/2", 1);
    model.geom("geom1").run("blk3");
    model.geom("geom1").run();

    model.view("view1").hideEntities().clear();
    model.view("view1").hideEntities().create("hide1");
    model.view("view1").hideEntities("hide1").geom(3);
    model.view("view1").hideEntities("hide1").add(new int[]{1});
    model.view("view1").hideEntities("hide1").add(new int[]{7});

    model.physics("es").feature("pot3").selection()
         .set(new int[]{13, 14, 15, 16, 31, 33, 34, 45, 51, 84, 85, 86, 87, 89, 90, 91, 101, 103});

    model.view("view1").hideEntities("hide1").add(new int[]{2});
    model.view("view1").hideEntities("hide1").add(new int[]{6});
    model.view("view1").hideEntities("hide1").add(new int[]{3});
    model.view("view1").hideEntities("hide1").add(new int[]{8});

    model.physics("es").feature("pot3").selection()
         .set(new int[]{13, 14, 15, 16, 31, 33, 34, 45, 48, 49, 50, 53, 54, 55, 84, 85, 86, 89, 90, 91, 101, 103});
    model.physics("es").feature("pot4").selection()
         .set(new int[]{17, 18, 19, 20, 35, 37, 38, 46, 56, 57, 58, 59, 60, 62, 63, 64, 93, 94, 95, 98, 99, 100, 102, 104});

    model.sol("sol2").study("std2");
    model.sol("sol2").feature().remove("s1");
    model.sol("sol2").feature().remove("v1");
    model.sol("sol2").feature().remove("st1");
    model.sol("sol2").feature().create("st1", "StudyStep");
    model.sol("sol2").feature("st1").set("study", "std2");
    model.sol("sol2").feature("st1").set("studystep", "stat");
    model.sol("sol2").feature().create("v1", "Variables");
    model.sol("sol2").feature("v1").set("control", "stat");
    model.sol("sol2").feature().create("s1", "Stationary");
    model.sol("sol2").feature("s1").feature().create("se1", "Segregated");
    model.sol("sol2").feature("s1").feature("se1").feature().remove("ssDef");
    model.sol("sol2").feature("s1").feature("se1").feature().create("ss1", "SegregatedStep");
    model.sol("sol2").feature("s1").feature("se1").feature("ss1").set("segvar", new String[]{"mod1_V"});
    model.sol("sol2").feature("s1").feature().create("i1", "Iterative");
    model.sol("sol2").feature("s1").feature("i1").set("prefuntype", "left");
    model.sol("sol2").feature("s1").feature("i1").set("maxlinit", 10000);
    model.sol("sol2").feature("s1").feature("i1").set("linsolver", "cg");
    model.sol("sol2").feature("s1").feature("i1").set("rhob", 400);
    model.sol("sol2").feature("s1").feature("se1").feature("ss1").set("linsolver", "i1");
    model.sol("sol2").feature("s1").feature("i1").feature().create("mg1", "Multigrid");
    model.sol("sol2").feature("s1").feature("i1").feature("mg1").set("amgauto", 3);
    model.sol("sol2").feature("s1").feature("i1").feature("mg1").set("scale", 2);
    model.sol("sol2").feature("s1").feature("i1").feature("mg1").set("gmglevels", 1);
    model.sol("sol2").feature("s1").feature("i1").feature("mg1").set("massem", true);
    model.sol("sol2").feature("s1").feature("i1").feature("mg1").set("rmethod", "longest");
    model.sol("sol2").feature("s1").feature("i1").feature("mg1").set("mkeep", false);
    model.sol("sol2").feature("s1").feature("i1").feature("mg1").set("mgcycle", "v");
    model.sol("sol2").feature("s1").feature("i1").feature("mg1").set("prefun", "amg");
    model.sol("sol2").feature("s1").feature("i1").feature("mg1").set("mcasegen", "any");
    model.sol("sol2").feature("s1").feature("i1").feature("mg1").set("mglevels", 5);
    model.sol("sol2").feature("s1").feature("i1").feature("mg1").set("iter", 2);
    model.sol("sol2").feature("s1").feature("i1").feature("mg1").set("maxcoarsedof", 5000);
    model.sol("sol2").feature("s1").feature("se1").feature().create("ss2", "SegregatedStep");
    model.sol("sol2").feature("s1").feature("se1").feature("ss2").set("segvar", new String[]{"mod1_Vm"});
    model.sol("sol2").feature("s1").feature().create("i2", "Iterative");
    model.sol("sol2").feature("s1").feature("i2").set("prefuntype", "left");
    model.sol("sol2").feature("s1").feature("i2").set("maxlinit", 10000);
    model.sol("sol2").feature("s1").feature("i2").set("linsolver", "cg");
    model.sol("sol2").feature("s1").feature("i2").set("rhob", 400);
    model.sol("sol2").feature("s1").feature("se1").feature("ss2").set("linsolver", "i2");
    model.sol("sol2").feature("s1").feature("i2").feature().create("mg1", "Multigrid");
    model.sol("sol2").feature("s1").feature("i2").feature("mg1").set("amgauto", 3);
    model.sol("sol2").feature("s1").feature("i2").feature("mg1").set("scale", 2);
    model.sol("sol2").feature("s1").feature("i2").feature("mg1").set("gmglevels", 1);
    model.sol("sol2").feature("s1").feature("i2").feature("mg1").set("massem", true);
    model.sol("sol2").feature("s1").feature("i2").feature("mg1").set("rmethod", "longest");
    model.sol("sol2").feature("s1").feature("i2").feature("mg1").set("mkeep", false);
    model.sol("sol2").feature("s1").feature("i2").feature("mg1").set("mgcycle", "v");
    model.sol("sol2").feature("s1").feature("i2").feature("mg1").set("prefun", "amg");
    model.sol("sol2").feature("s1").feature("i2").feature("mg1").set("mcasegen", "any");
    model.sol("sol2").feature("s1").feature("i2").feature("mg1").set("mglevels", 5);
    model.sol("sol2").feature("s1").feature("i2").feature("mg1").set("iter", 2);
    model.sol("sol2").feature("s1").feature("i2").feature("mg1").set("maxcoarsedof", 5000);
    model.sol("sol2").feature("s1").feature().remove("fcDef");
    model.sol("sol2").attach("std2");
    model.sol("sol2").runAll();

    model.result("pg1").run();

    model.view("view1").hideEntities().clear();

    model.result("pg1").run();
    model.result("pg1").set("data", "cpl2");
    model.result("pg1").run();
    model.result("pg1").set("data", "cpl3");
    model.result("pg1").run();

    model.geom("geom1").feature("blk2").active(false);
    model.geom("geom1").feature("blk3").active(false);
    model.geom("geom1").run();

    model.view("view1").hideEntities().create("hide1");
    model.view("view1").hideEntities("hide1").geom(3);
    model.view("view1").hideEntities("hide1").add(new int[]{1});
    model.view("view1").hideEntities("hide1").add(new int[]{2});
    model.view("view1").hideEntities("hide1").add(new int[]{6});
    model.view("view1").hideEntities("hide1").add(new int[]{7});
    model.view("view1").hideEntities("hide1").add(new int[]{8});
    model.view("view1").hideEntities("hide1").add(new int[]{3});

    model.physics("es").feature("pot3").selection()
         .set(new int[]{13, 14, 15, 16, 31, 33, 34, 45, 47, 48, 67, 68, 69, 70, 71, 73, 74, 75, 85, 87});
    model.physics("es").feature("pot4").selection()
         .set(new int[]{17, 18, 19, 20, 35, 37, 38, 46, 49, 50, 76, 77, 78, 79, 80, 82, 83, 84, 86, 88});
    model.physics("es").feature().duplicate("pot5", "pot3");
    model.physics("es").feature().duplicate("pot6", "pot4");
    model.physics("es").feature("pot5").selection().set(new int[]{13, 14, 15, 16, 31, 33, 34, 45, 47, 48});
    model.physics("es").feature("pot6").selection().set(new int[]{17, 18, 19, 20, 35, 37, 38, 46, 49, 50});
    model.physics("es").feature("pot4").name("N");
    model.physics("es").feature("pot5").name("S");
    model.physics("es").feature("pot3").name("E");
    model.physics("es").feature("pot6").name("W");
    model.physics("es").feature("pot6").set("V0", 1, "vs");
    model.physics("es").feature("pot5").set("V0", 1, "-vs");

    model.material("mat3").selection().set(new int[]{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14});
    model.material("mat3").selection().all();

    model.view("view1").hideEntities().clear();

    model.sol("sol2").study("std2");
    model.sol("sol2").feature().remove("s1");
    model.sol("sol2").feature().remove("v1");
    model.sol("sol2").feature().remove("st1");
    model.sol("sol2").feature().create("st1", "StudyStep");
    model.sol("sol2").feature("st1").set("study", "std2");
    model.sol("sol2").feature("st1").set("studystep", "stat");
    model.sol("sol2").feature().create("v1", "Variables");
    model.sol("sol2").feature("v1").set("control", "stat");
    model.sol("sol2").feature().create("s1", "Stationary");
    model.sol("sol2").feature("s1").feature().create("se1", "Segregated");
    model.sol("sol2").feature("s1").feature("se1").feature().remove("ssDef");
    model.sol("sol2").feature("s1").feature("se1").feature().create("ss1", "SegregatedStep");
    model.sol("sol2").feature("s1").feature("se1").feature("ss1").set("segvar", new String[]{"mod1_V"});
    model.sol("sol2").feature("s1").feature().create("i1", "Iterative");
    model.sol("sol2").feature("s1").feature("i1").set("prefuntype", "left");
    model.sol("sol2").feature("s1").feature("i1").set("maxlinit", 10000);
    model.sol("sol2").feature("s1").feature("i1").set("linsolver", "cg");
    model.sol("sol2").feature("s1").feature("i1").set("rhob", 400);
    model.sol("sol2").feature("s1").feature("se1").feature("ss1").set("linsolver", "i1");
    model.sol("sol2").feature("s1").feature("i1").feature().create("mg1", "Multigrid");
    model.sol("sol2").feature("s1").feature("i1").feature("mg1").set("amgauto", 3);
    model.sol("sol2").feature("s1").feature("i1").feature("mg1").set("scale", 2);
    model.sol("sol2").feature("s1").feature("i1").feature("mg1").set("gmglevels", 1);
    model.sol("sol2").feature("s1").feature("i1").feature("mg1").set("massem", true);
    model.sol("sol2").feature("s1").feature("i1").feature("mg1").set("rmethod", "longest");
    model.sol("sol2").feature("s1").feature("i1").feature("mg1").set("mkeep", false);
    model.sol("sol2").feature("s1").feature("i1").feature("mg1").set("mgcycle", "v");
    model.sol("sol2").feature("s1").feature("i1").feature("mg1").set("prefun", "amg");
    model.sol("sol2").feature("s1").feature("i1").feature("mg1").set("mcasegen", "any");
    model.sol("sol2").feature("s1").feature("i1").feature("mg1").set("mglevels", 5);
    model.sol("sol2").feature("s1").feature("i1").feature("mg1").set("iter", 2);
    model.sol("sol2").feature("s1").feature("i1").feature("mg1").set("maxcoarsedof", 5000);
    model.sol("sol2").feature("s1").feature("se1").feature().create("ss2", "SegregatedStep");
    model.sol("sol2").feature("s1").feature("se1").feature("ss2").set("segvar", new String[]{"mod1_Vm"});
    model.sol("sol2").feature("s1").feature().create("i2", "Iterative");
    model.sol("sol2").feature("s1").feature("i2").set("prefuntype", "left");
    model.sol("sol2").feature("s1").feature("i2").set("maxlinit", 10000);
    model.sol("sol2").feature("s1").feature("i2").set("linsolver", "cg");
    model.sol("sol2").feature("s1").feature("i2").set("rhob", 400);
    model.sol("sol2").feature("s1").feature("se1").feature("ss2").set("linsolver", "i2");
    model.sol("sol2").feature("s1").feature("i2").feature().create("mg1", "Multigrid");
    model.sol("sol2").feature("s1").feature("i2").feature("mg1").set("amgauto", 3);
    model.sol("sol2").feature("s1").feature("i2").feature("mg1").set("scale", 2);
    model.sol("sol2").feature("s1").feature("i2").feature("mg1").set("gmglevels", 1);
    model.sol("sol2").feature("s1").feature("i2").feature("mg1").set("massem", true);
    model.sol("sol2").feature("s1").feature("i2").feature("mg1").set("rmethod", "longest");
    model.sol("sol2").feature("s1").feature("i2").feature("mg1").set("mkeep", false);
    model.sol("sol2").feature("s1").feature("i2").feature("mg1").set("mgcycle", "v");
    model.sol("sol2").feature("s1").feature("i2").feature("mg1").set("prefun", "amg");
    model.sol("sol2").feature("s1").feature("i2").feature("mg1").set("mcasegen", "any");
    model.sol("sol2").feature("s1").feature("i2").feature("mg1").set("mglevels", 5);
    model.sol("sol2").feature("s1").feature("i2").feature("mg1").set("iter", 2);
    model.sol("sol2").feature("s1").feature("i2").feature("mg1").set("maxcoarsedof", 5000);
    model.sol("sol2").feature("s1").feature().remove("fcDef");
    model.sol("sol2").attach("std2");
    model.sol("sol2").runAll();

    model.result("pg1").run();
    model.result("pg1").set("data", "cpl2");
    model.result("pg1").run();

    model.geom("geom1").feature("blk2").active(true);
    model.geom("geom1").feature("blk3").active(true);
    model.geom("geom1").feature().duplicate("blk4", "blk2");
    model.geom("geom1").feature().duplicate("blk5", "blk3");
    model.geom("geom1").feature("blk4").setIndex("size", "sqrt(OD^2-gap^2)/2-sqrt(ID^2-gap^2)/2", 0);
    model.geom("geom1").feature("blk4").setIndex("size", "gap", 1);
    model.geom("geom1").feature("blk4").setIndex("pos", "sqrt(ID^2-gap^2)/2", 0);
    model.geom("geom1").feature("blk4").setIndex("pos", "-gap/2", 1);
    model.geom("geom1").runAll();
    model.geom("geom1").feature("blk5").setIndex("size", "sqrt(OD^2-gap^2)/2-sqrt(ID^2-gap^2)/2", 0);
    model.geom("geom1").feature("blk5").setIndex("size", "gap", 1);
    model.geom("geom1").feature("blk5").setIndex("pos", "-gap/2", 1);
    model.geom("geom1").feature("blk5").setIndex("pos", "-sqrt(OD^2-gap^2)/2", 0);
    model.geom("geom1").runAll();

    model.param().set("gap", ".5");

    model.geom("geom1").run();

    model.physics("es").feature().create("init2", "init", 3);

    model.view("view1").hideEntities().create("hide1");
    model.view("view1").hideEntities("hide1").geom(3);
    model.view("view1").hideEntities("hide1").add(new int[]{1});
    model.view("view1").hideEntities("hide1").add(new int[]{8});

    model.physics("es").feature("init2").selection().set(new int[]{4, 5, 6, 11, 13, 14, 16, 17, 18, 20, 22});

    model.view("view1").hideEntities("hide1").add(new int[]{3});
    model.view("view1").hideEntities("hide1").add(new int[]{10});

    model.physics("es").feature("init2").selection()
         .set(new int[]{4, 5, 6, 9, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22});
    model.physics("es").feature("pot3").active(false);
    model.physics("es").feature("pot4").active(false);
    model.physics("es").feature("pot5").active(false);
    model.physics("es").feature("pot6").active(false);
    model.physics("es").feature("pot3").active(true);
    model.physics("es").feature("pot4").active(true);
    model.physics("es").feature("pot5").active(true);
    model.physics("es").feature("pot6").active(true);
    model.physics("es").feature("pot3").selection().set(new int[]{95, 96, 97, 98, 99, 101, 102, 103, 114, 119});
    model.physics("es").feature("pot4").selection().set(new int[]{104, 105, 106, 107, 108, 110, 111, 112, 117, 123});
    model.physics("es").feature("pot3").active(false);
    model.physics("es").feature("pot4").active(false);
    model.physics("es").feature("pot5").active(false);
    model.physics("es").feature("pot6").active(false);

    model.param().set("vp", "10000");

    return model;
  }

  public static Model run7(Model model) {
    model.param().set("vs", "0");

    model.sol("sol2").study("std2");
    model.sol("sol2").feature().remove("s1");
    model.sol("sol2").feature().remove("v1");
    model.sol("sol2").feature().remove("st1");
    model.sol("sol2").feature().create("st1", "StudyStep");
    model.sol("sol2").feature("st1").set("study", "std2");
    model.sol("sol2").feature("st1").set("studystep", "stat");
    model.sol("sol2").feature().create("v1", "Variables");
    model.sol("sol2").feature("v1").set("control", "stat");
    model.sol("sol2").feature().create("s1", "Stationary");
    model.sol("sol2").feature("s1").feature().create("se1", "Segregated");
    model.sol("sol2").feature("s1").feature("se1").feature().remove("ssDef");
    model.sol("sol2").feature("s1").feature("se1").feature().create("ss1", "SegregatedStep");
    model.sol("sol2").feature("s1").feature("se1").feature("ss1").set("segvar", new String[]{"mod1_V"});
    model.sol("sol2").feature("s1").feature().create("i1", "Iterative");
    model.sol("sol2").feature("s1").feature("i1").set("prefuntype", "left");
    model.sol("sol2").feature("s1").feature("i1").set("maxlinit", 10000);
    model.sol("sol2").feature("s1").feature("i1").set("linsolver", "cg");
    model.sol("sol2").feature("s1").feature("i1").set("rhob", 400);
    model.sol("sol2").feature("s1").feature("se1").feature("ss1").set("linsolver", "i1");
    model.sol("sol2").feature("s1").feature("i1").feature().create("mg1", "Multigrid");
    model.sol("sol2").feature("s1").feature("i1").feature("mg1").set("amgauto", 3);
    model.sol("sol2").feature("s1").feature("i1").feature("mg1").set("scale", 2);
    model.sol("sol2").feature("s1").feature("i1").feature("mg1").set("gmglevels", 1);
    model.sol("sol2").feature("s1").feature("i1").feature("mg1").set("massem", true);
    model.sol("sol2").feature("s1").feature("i1").feature("mg1").set("rmethod", "longest");
    model.sol("sol2").feature("s1").feature("i1").feature("mg1").set("mkeep", false);
    model.sol("sol2").feature("s1").feature("i1").feature("mg1").set("mgcycle", "v");
    model.sol("sol2").feature("s1").feature("i1").feature("mg1").set("prefun", "amg");
    model.sol("sol2").feature("s1").feature("i1").feature("mg1").set("mcasegen", "any");
    model.sol("sol2").feature("s1").feature("i1").feature("mg1").set("mglevels", 5);
    model.sol("sol2").feature("s1").feature("i1").feature("mg1").set("iter", 2);
    model.sol("sol2").feature("s1").feature("i1").feature("mg1").set("maxcoarsedof", 5000);
    model.sol("sol2").feature("s1").feature("se1").feature().create("ss2", "SegregatedStep");
    model.sol("sol2").feature("s1").feature("se1").feature("ss2").set("segvar", new String[]{"mod1_Vm"});
    model.sol("sol2").feature("s1").feature().create("i2", "Iterative");
    model.sol("sol2").feature("s1").feature("i2").set("prefuntype", "left");
    model.sol("sol2").feature("s1").feature("i2").set("maxlinit", 10000);
    model.sol("sol2").feature("s1").feature("i2").set("linsolver", "cg");
    model.sol("sol2").feature("s1").feature("i2").set("rhob", 400);
    model.sol("sol2").feature("s1").feature("se1").feature("ss2").set("linsolver", "i2");
    model.sol("sol2").feature("s1").feature("i2").feature().create("mg1", "Multigrid");
    model.sol("sol2").feature("s1").feature("i2").feature("mg1").set("amgauto", 3);
    model.sol("sol2").feature("s1").feature("i2").feature("mg1").set("scale", 2);
    model.sol("sol2").feature("s1").feature("i2").feature("mg1").set("gmglevels", 1);
    model.sol("sol2").feature("s1").feature("i2").feature("mg1").set("massem", true);
    model.sol("sol2").feature("s1").feature("i2").feature("mg1").set("rmethod", "longest");
    model.sol("sol2").feature("s1").feature("i2").feature("mg1").set("mkeep", false);
    model.sol("sol2").feature("s1").feature("i2").feature("mg1").set("mgcycle", "v");
    model.sol("sol2").feature("s1").feature("i2").feature("mg1").set("prefun", "amg");
    model.sol("sol2").feature("s1").feature("i2").feature("mg1").set("mcasegen", "any");
    model.sol("sol2").feature("s1").feature("i2").feature("mg1").set("mglevels", 5);
    model.sol("sol2").feature("s1").feature("i2").feature("mg1").set("iter", 2);
    model.sol("sol2").feature("s1").feature("i2").feature("mg1").set("maxcoarsedof", 5000);
    model.sol("sol2").feature("s1").feature().remove("fcDef");
    model.sol("sol2").attach("std2");

    model.physics("mfnc").active(false);

    model.sol("sol2").study("std2");
    model.sol("sol2").feature().remove("s1");
    model.sol("sol2").feature().remove("v1");
    model.sol("sol2").feature().remove("st1");
    model.sol("sol2").feature().create("st1", "StudyStep");
    model.sol("sol2").feature("st1").set("study", "std2");
    model.sol("sol2").feature("st1").set("studystep", "stat");
    model.sol("sol2").feature().create("v1", "Variables");
    model.sol("sol2").feature("v1").set("control", "stat");
    model.sol("sol2").feature().create("s1", "Stationary");
    model.sol("sol2").feature("s1").feature().create("fc1", "FullyCoupled");
    model.sol("sol2").feature("s1").feature().create("i1", "Iterative");
    model.sol("sol2").feature("s1").feature("i1").set("prefuntype", "left");
    model.sol("sol2").feature("s1").feature("i1").set("maxlinit", 10000);
    model.sol("sol2").feature("s1").feature("i1").set("linsolver", "cg");
    model.sol("sol2").feature("s1").feature("i1").set("rhob", 400);
    model.sol("sol2").feature("s1").feature("fc1").set("linsolver", "i1");
    model.sol("sol2").feature("s1").feature("i1").feature().create("mg1", "Multigrid");
    model.sol("sol2").feature("s1").feature("i1").feature("mg1").set("amgauto", 3);
    model.sol("sol2").feature("s1").feature("i1").feature("mg1").set("scale", 2);
    model.sol("sol2").feature("s1").feature("i1").feature("mg1").set("gmglevels", 1);
    model.sol("sol2").feature("s1").feature("i1").feature("mg1").set("massem", true);
    model.sol("sol2").feature("s1").feature("i1").feature("mg1").set("rmethod", "longest");
    model.sol("sol2").feature("s1").feature("i1").feature("mg1").set("mkeep", false);
    model.sol("sol2").feature("s1").feature("i1").feature("mg1").set("mgcycle", "v");
    model.sol("sol2").feature("s1").feature("i1").feature("mg1").set("prefun", "amg");
    model.sol("sol2").feature("s1").feature("i1").feature("mg1").set("mcasegen", "any");
    model.sol("sol2").feature("s1").feature("i1").feature("mg1").set("mglevels", 5);
    model.sol("sol2").feature("s1").feature("i1").feature("mg1").set("iter", 2);
    model.sol("sol2").feature("s1").feature("i1").feature("mg1").set("maxcoarsedof", 5000);
    model.sol("sol2").feature("s1").feature().remove("fcDef");
    model.sol("sol2").attach("std2");
    model.sol("sol2").runAll();

    model.result("pg1").run();

    model.view("view1").hideEntities().clear();

    model.result("pg1").run();

    model.physics("es").feature("pot1").active(false);
    model.physics("es").feature("pot2").active(false);
    model.physics("es").feature().create("ccn2", "ChargeConservation", 3);
    model.physics("es").feature().remove("ccn2");

    model.view("view1").hideEntities().create("hide1");
    model.view("view1").hideEntities("hide1").geom(3);
    model.view("view1").hideEntities("hide1").add(new int[]{1});
    model.view("view1").hideEntities("hide1").add(new int[]{8});

    model.physics("es").feature().create("fcal1", "ForceCalculation", 3);
    model.physics("es").feature().remove("fcal1");
    model.physics("es").feature().create("pot7", "ElectricPotential", 2);
    model.physics("es").feature("pot7").selection().set(new int[]{21});

    model.view("view1").hideEntities("hide1").add(new int[]{2});
    model.view("view1").hideEntities("hide1").add(new int[]{3, 10});
    model.view("view1").hideEntities("hide1").add(new int[]{7});

    model.physics("es").feature("pot7").selection()
         .set(new int[]{13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 30, 31, 32, 35, 40, 41, 42, 43, 44, 45, 46, 47, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 80, 89, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124});

    model.view("view1").hideEntities().clear();

    model.sol("sol1").study("std1");
    model.sol("sol1").feature().remove("s1");
    model.sol("sol1").feature().remove("v1");
    model.sol("sol1").feature().remove("st1");
    model.sol("sol1").feature().create("st1", "StudyStep");
    model.sol("sol1").feature("st1").set("study", "std1");
    model.sol("sol1").feature("st1").set("studystep", "stat");
    model.sol("sol1").feature().create("v1", "Variables");
    model.sol("sol1").feature("v1").set("control", "stat");
    model.sol("sol1").feature().create("s1", "Stationary");
    model.sol("sol1").feature("s1").feature().create("fc1", "FullyCoupled");
    model.sol("sol1").feature("s1").feature().create("i1", "Iterative");
    model.sol("sol1").feature("s1").feature("i1").set("prefuntype", "left");
    model.sol("sol1").feature("s1").feature("i1").set("maxlinit", 10000);
    model.sol("sol1").feature("s1").feature("i1").set("linsolver", "cg");
    model.sol("sol1").feature("s1").feature("i1").set("rhob", 400);
    model.sol("sol1").feature("s1").feature("fc1").set("linsolver", "i1");
    model.sol("sol1").feature("s1").feature("i1").feature().create("mg1", "Multigrid");
    model.sol("sol1").feature("s1").feature("i1").feature("mg1").set("amgauto", 3);
    model.sol("sol1").feature("s1").feature("i1").feature("mg1").set("scale", 2);
    model.sol("sol1").feature("s1").feature("i1").feature("mg1").set("gmglevels", 1);
    model.sol("sol1").feature("s1").feature("i1").feature("mg1").set("massem", true);
    model.sol("sol1").feature("s1").feature("i1").feature("mg1").set("rmethod", "longest");
    model.sol("sol1").feature("s1").feature("i1").feature("mg1").set("mkeep", false);
    model.sol("sol1").feature("s1").feature("i1").feature("mg1").set("mgcycle", "v");
    model.sol("sol1").feature("s1").feature("i1").feature("mg1").set("prefun", "amg");
    model.sol("sol1").feature("s1").feature("i1").feature("mg1").set("mcasegen", "any");
    model.sol("sol1").feature("s1").feature("i1").feature("mg1").set("mglevels", 5);
    model.sol("sol1").feature("s1").feature("i1").feature("mg1").set("iter", 2);
    model.sol("sol1").feature("s1").feature("i1").feature("mg1").set("maxcoarsedof", 5000);
    model.sol("sol1").feature("s1").feature().remove("fcDef");
    model.sol("sol1").attach("std1");

    model.result().create("pg4", "PlotGroup3D");
    model.result("pg4").name("Electric potential 1");
    model.result("pg4").set("data", "dset1");
    model.result("pg4").feature().create("mslc1", "Multislice");
    model.result("pg4").feature("mslc1").name("Multislice");
    model.result("pg4").feature("mslc1").set("expr", "V");
    model.result("pg4").feature("mslc1").set("data", "parent");

    model.sol("sol1").runAll();

    model.result("pg4").run();
    model.result().dataset("cpl1").set("data", "dset1");
    model.result().dataset("cpl2").set("data", "dset1");
    model.result().dataset("cpl3").set("data", "dset1");

    model.physics("es").feature("pot1").active(true);
    model.physics("es").feature("pot2").active(true);

    model.sol("sol1").study("std1");
    model.sol("sol1").feature().remove("s1");
    model.sol("sol1").feature().remove("v1");
    model.sol("sol1").feature().remove("st1");
    model.sol("sol1").feature().create("st1", "StudyStep");
    model.sol("sol1").feature("st1").set("study", "std1");
    model.sol("sol1").feature("st1").set("studystep", "stat");
    model.sol("sol1").feature().create("v1", "Variables");
    model.sol("sol1").feature("v1").set("control", "stat");
    model.sol("sol1").feature().create("s1", "Stationary");
    model.sol("sol1").feature("s1").feature().create("fc1", "FullyCoupled");
    model.sol("sol1").feature("s1").feature().create("i1", "Iterative");
    model.sol("sol1").feature("s1").feature("i1").set("prefuntype", "left");
    model.sol("sol1").feature("s1").feature("i1").set("maxlinit", 10000);
    model.sol("sol1").feature("s1").feature("i1").set("linsolver", "cg");
    model.sol("sol1").feature("s1").feature("i1").set("rhob", 400);
    model.sol("sol1").feature("s1").feature("fc1").set("linsolver", "i1");
    model.sol("sol1").feature("s1").feature("i1").feature().create("mg1", "Multigrid");
    model.sol("sol1").feature("s1").feature("i1").feature("mg1").set("amgauto", 3);
    model.sol("sol1").feature("s1").feature("i1").feature("mg1").set("scale", 2);
    model.sol("sol1").feature("s1").feature("i1").feature("mg1").set("gmglevels", 1);
    model.sol("sol1").feature("s1").feature("i1").feature("mg1").set("massem", true);
    model.sol("sol1").feature("s1").feature("i1").feature("mg1").set("rmethod", "longest");
    model.sol("sol1").feature("s1").feature("i1").feature("mg1").set("mkeep", false);
    model.sol("sol1").feature("s1").feature("i1").feature("mg1").set("mgcycle", "v");
    model.sol("sol1").feature("s1").feature("i1").feature("mg1").set("prefun", "amg");
    model.sol("sol1").feature("s1").feature("i1").feature("mg1").set("mcasegen", "any");
    model.sol("sol1").feature("s1").feature("i1").feature("mg1").set("mglevels", 5);
    model.sol("sol1").feature("s1").feature("i1").feature("mg1").set("iter", 2);
    model.sol("sol1").feature("s1").feature("i1").feature("mg1").set("maxcoarsedof", 5000);
    model.sol("sol1").feature("s1").feature().remove("fcDef");
    model.sol("sol1").attach("std1");
    model.sol("sol1").runAll();

    model.result("pg1").run();

    model.geom("geom1").feature("blk5").active(false);
    model.geom("geom1").feature("blk3").active(false);

    model.result("pg1").run();

    model.geom("geom1").feature().remove("cyl1");
    model.geom("geom1").feature().remove("cyl2");
    model.geom("geom1").feature().remove("dif3");
    model.geom("geom1").feature().remove("blk1");
    model.geom("geom1").feature().remove("cyl3");
    model.geom("geom1").feature().remove("cyl4");
    model.geom("geom1").feature().remove("dif2");
    model.geom("geom1").feature().remove("int1");
    model.geom("geom1").feature().remove("copy1");
    model.geom("geom1").feature().remove("rot1");
    model.geom("geom1").feature().remove("copy2");
    model.geom("geom1").feature().remove("rot2");
    model.geom("geom1").feature().remove("copy3");
    model.geom("geom1").feature().remove("rot3");
    model.geom("geom1").feature().remove("cyl5");
    model.geom("geom1").feature().remove("copy4");
    model.geom("geom1").feature().remove("cyl6");
    model.geom("geom1").feature().remove("blk2");
    model.geom("geom1").feature().remove("blk3");
    model.geom("geom1").feature().remove("blk4");
    model.geom("geom1").feature().remove("blk5");

    model.study().remove("std2");

    model.geom("geom1").feature().create("wp1", "WorkPlane");
    model.geom("geom1").feature("wp1").geom().feature().create("e1", "Ellipse");
    model.geom("geom1").feature("wp1").geom().feature().remove("e1");
    model.geom("geom1").feature("wp1").geom().feature().create("sq1", "Square");
    model.geom("geom1").feature("wp1").geom().feature().remove("sq1");
    model.geom("geom1").feature("wp1").geom().feature().create("r1", "Rectangle");
    model.geom("geom1").feature("wp1").geom().feature("r1").setIndex("size", "tc", 0);
    model.geom("geom1").feature("wp1").geom().feature("r1").setIndex("size", "(OD-ID)/2", 1);
    model.geom("geom1").feature("wp1").geom().feature("r1").setIndex("pos", "-tc/2", 0);
    model.geom("geom1").feature("wp1").geom().feature("r1").setIndex("pos", "ID/2", 1);
    model.geom("geom1").feature("wp1").geom().run("r1");
    model.geom("geom1").feature("wp1").geom().run("r1");
    model.geom("geom1").feature("wp1").geom().feature().create("e1", "Ellipse");
    model.geom("geom1").feature("wp1").geom().feature("e1").setIndex("semiaxes", "tc/2", 0);
    model.geom("geom1").feature("wp1").geom().feature("e1").setIndex("semiaxes", "ID/2", 1);
    model.geom("geom1").feature("wp1").geom().feature("e1").set("angle", "180");
    model.geom("geom1").feature("wp1").geom().run("e1");
    model.geom("geom1").feature("wp1").geom().feature("e1").setIndex("semiaxes", "1/2", 1);
    model.geom("geom1").feature("wp1").geom().feature("e1").set("rot", "180");
    model.geom("geom1").feature("wp1").geom().feature("e1").setIndex("pos", "ID/2", 1);
    model.geom("geom1").feature("wp1").geom().run("e1");

    model.param().set("ID", "4");

    model.geom("geom1").feature("wp1").geom().runAll();
    model.geom("geom1").feature("wp1").set("quickplane", "yz");
    model.geom("geom1").run("wp1");
    model.geom("geom1").feature().create("rev1", "Revolve");
    model.geom("geom1").feature("rev1").setIndex("axis", "1", 0);
    model.geom("geom1").feature("rev1").setIndex("axis", "0", 1);
    model.geom("geom1").feature("rev1").setIndex("axis", "0", 0);
    model.geom("geom1").feature("rev1").setIndex("axis", "1", 1);
    model.geom("geom1").feature("wp1").geom().feature("r1").setIndex("size", "tc", 1);
    model.geom("geom1").feature("wp1").geom().feature("r1").setIndex("size", "(OD-ID)/2", 0);
    model.geom("geom1").feature("wp1").geom().feature("r1").setIndex("pos", "ID/2", 0);
    model.geom("geom1").feature("wp1").geom().feature("r1").setIndex("pos", "-tc/2", 1);
    model.geom("geom1").feature("wp1").geom().run("r1");
    model.geom("geom1").feature("wp1").geom().feature("e1").setIndex("semiaxes", "1/2", 0);
    model.geom("geom1").feature("wp1").geom().feature("e1").setIndex("semiaxes", "tc/2", 1);
    model.geom("geom1").feature("wp1").geom().feature("e1").setIndex("pos", "ID/2", 0);
    model.geom("geom1").feature("wp1").geom().feature("e1").setIndex("pos", "0", 1);
    model.geom("geom1").feature("wp1").geom().runAll();
    model.geom("geom1").feature("wp1").geom().feature("e1").set("angle", "90");
    model.geom("geom1").feature("wp1").geom().run("e1");
    model.geom("geom1").feature("wp1").geom().feature("e1").set("rot", "90");
    model.geom("geom1").feature("wp1").geom().feature("e1").set("angle", "180");
    model.geom("geom1").feature("wp1").geom().run("e1");
    model.geom("geom1").feature("wp1").geom().feature("e1").setIndex("semiaxes", "1/2", 1);
    model.geom("geom1").feature("wp1").geom().feature("e1").setIndex("semiaxes", "tc/2", 0);
    model.geom("geom1").feature("wp1").geom().run("e1");
    model.geom("geom1").feature("rev1").setIndex("axis", "1", 0);
    model.geom("geom1").feature("rev1").setIndex("axis", "0", 1);
    model.geom("geom1").feature("wp1").set("quickplane", "xz");
    model.geom("geom1").run("wp1");
    model.geom("geom1").feature("rev1").setIndex("axis", "0", 0);
    model.geom("geom1").feature("rev1").setIndex("axis", "1", 1);
    model.geom("geom1").run("rev1");
    model.geom("geom1").run("rev1");
    model.geom("geom1").feature().create("cyl1", "Cylinder");

    model.param().remove("te");
    model.param().remove("sp");
    model.param().remove("gap");
    model.param().remove("vs");
    model.param().remove("M");
    model.param().set("rd", "3");
    model.param().set("rs", "2");
    model.param().set("rg", "3");

    model.geom("geom1").feature("cyl1").set("r", "rd/2");
    model.geom("geom1").feature("cyl1").set("h", "20");
    model.geom("geom1").feature("cyl1").setIndex("pos", "rs/2+rd/2", 0);
    model.geom("geom1").feature("cyl1").setIndex("pos", "tc/2+rg+rd/2", 2);
    model.geom("geom1").feature("cyl1").setIndex("pos", "-10", 1);
    model.geom("geom1").run("cyl1");
    model.geom("geom1").feature("cyl1").set("axistype", "y");
    model.geom("geom1").run("cyl1");
    model.geom("geom1").feature().duplicate("cyl2", "cyl1");
    model.geom("geom1").feature("cyl2").setIndex("pos", "-rs/2-rd/2", 0);
    model.geom("geom1").run("cyl2");
    model.geom("geom1").run("cyl2");
    model.geom("geom1").feature().create("sph1", "Sphere");
    model.geom("geom1").feature("sph1").set("r", "1.5");
    model.geom("geom1").feature("sph1").setIndex("pos", "-tc/2-rg", 2);
    model.geom("geom1").run("sph1");
    model.geom("geom1").run();

    model.physics("es").feature().remove("pot3");
    model.physics("es").feature().remove("pot4");
    model.physics("es").feature().remove("pot5");
    model.physics("es").feature().remove("pot6");
    model.physics("es").feature().remove("init2");
    model.physics("es").feature().remove("pot7");

    model.view("view1").hideEntities().create("hide1");
    model.view("view1").hideEntities("hide1").geom(3);
    model.view("view1").hideEntities("hide1").add(new int[]{1});
    model.view("view1").hideEntities("hide1").add(new int[]{3});
    model.view("view1").hideEntities("hide1").add(new int[]{4});
    model.view("view1").hideEntities("hide1").add(new int[]{5});

    model.physics("es").feature("pot1").selection().set(new int[]{7, 8, 9, 10, 11, 12});
    model.physics("es").feature("pot1").set("V0", 1, "vr1");

    model.view("view1").hideEntities().clear();

    model.physics("es").feature("pot2").selection().set(new int[]{43, 44, 45, 46, 49, 50});
    model.physics("es").feature("pot2").set("V0", 1, "vr2");
    model.physics("es").feature().create("pot3", "ElectricPotential", 2);
    model.physics("es").feature("pot3").selection()
         .set(new int[]{1, 2, 3, 4, 5, 6, 13, 14, 15, 16, 17, 18, 19, 20, 25, 26, 27, 28, 29, 30, 31, 36, 37, 38, 39, 40, 41, 42, 47, 48});
    model.physics("es").feature("pot3").set("V0", 1, "vmag");
    model.physics("es").feature().create("pot4", "ElectricPotential", 2);
    model.physics("es").feature("pot4").selection().set(new int[]{21, 22, 23, 24, 32, 33, 34, 35});
    model.physics("es").feature("pot4").set("V0", 1, "vsph");

    model.param().remove("vm");
    model.param().remove("vp");
    model.param().set("vr1", "-1");
    model.param().set("vr2", "1");
    model.param().set("vmag", "0");
    model.param().set("vsph", "0");

    model.geom("geom1").run("sph1");
    model.geom("geom1").feature().create("cyl3", "Cylinder");
    model.geom("geom1").feature("cyl3").set("r", "ID*.75");
    model.geom("geom1").feature("cyl3").set("h", "tc+5");
    model.geom("geom1").feature("cyl3").setIndex("pos", "-tc/2-2.5", 2);
    model.geom("geom1").run("cyl3");
    model.geom("geom1").run();
    model.geom("geom1").run("cyl3");
    model.geom("geom1").feature().create("cyl4", "Cylinder");

    model.param().set("rl", "20");
    model.param().remove("rl");
    model.param().set("rl", "20");

    model.geom("geom1").feature("cyl1").set("h", "rl");
    model.geom("geom1").feature("cyl1").setIndex("pos", "-rl/2", 1);
    model.geom("geom1").feature("cyl2").set("h", "rl");
    model.geom("geom1").feature("cyl2").setIndex("pos", "-rl/2", 1);

    model.param().set("rl", "15");

    model.geom("geom1").runAll();
    model.geom("geom1").feature("cyl4").set("r", "10");
    model.geom("geom1").feature("cyl4").set("h", "20");
    model.geom("geom1").run("cyl4");
    model.geom("geom1").feature("cyl4").setIndex("pos", "10", 2);
    model.geom("geom1").run("cyl4");
    model.geom("geom1").feature("cyl4").setIndex("pos", "-10", 2);
    model.geom("geom1").run("cyl4");

    model.view("view1").hideObjects("hide1").add("cyl4", new int[]{6});

    model.geom("geom1").run();

    model.view("view1").hideEntities().create("hide1");
    model.view("view1").hideEntities("hide1").geom(3);
    model.view("view1").hideEntities("hide1").add(new int[]{1});
    model.view("view1").hideEntities("hide1").add(new int[]{2});
    model.view("view1").hideEntities("hide1").add(new int[]{7});
    model.view("view1").hideEntities("hide1").add(new int[]{9});
    model.view("view1").hideEntities("hide1").add(new int[]{3});

    model.mesh("mesh1").feature("ref1").selection().set(new int[]{4, 5, 6});

    model.view("view1").hideEntities("hide1").add(new int[]{4});

    model.mesh("mesh1").feature("ref1").selection().set(new int[]{4, 5, 6, 8});

    model.view("view1").hideEntities().clear();
    model.view("view1").hideEntities().create("hide1");
    model.view("view1").hideEntities("hide1").geom(3);
    model.view("view1").hideEntities("hide1").add(new int[]{1});
    model.view("view1").hideEntities("hide1").add(new int[]{2});

    model.sol("sol1").study("std1");
    model.sol("sol1").feature().remove("s1");
    model.sol("sol1").feature().remove("v1");
    model.sol("sol1").feature().remove("st1");
    model.sol("sol1").feature().create("st1", "StudyStep");
    model.sol("sol1").feature("st1").set("study", "std1");
    model.sol("sol1").feature("st1").set("studystep", "stat");
    model.sol("sol1").feature().create("v1", "Variables");
    model.sol("sol1").feature("v1").set("control", "stat");
    model.sol("sol1").feature().create("s1", "Stationary");
    model.sol("sol1").feature("s1").feature().create("fc1", "FullyCoupled");
    model.sol("sol1").feature("s1").feature().create("i1", "Iterative");
    model.sol("sol1").feature("s1").feature("i1").set("prefuntype", "left");
    model.sol("sol1").feature("s1").feature("i1").set("maxlinit", 10000);
    model.sol("sol1").feature("s1").feature("i1").set("linsolver", "cg");
    model.sol("sol1").feature("s1").feature("i1").set("rhob", 400);
    model.sol("sol1").feature("s1").feature("fc1").set("linsolver", "i1");
    model.sol("sol1").feature("s1").feature("i1").feature().create("mg1", "Multigrid");
    model.sol("sol1").feature("s1").feature("i1").feature("mg1").set("amgauto", 3);
    model.sol("sol1").feature("s1").feature("i1").feature("mg1").set("scale", 2);
    model.sol("sol1").feature("s1").feature("i1").feature("mg1").set("gmglevels", 1);
    model.sol("sol1").feature("s1").feature("i1").feature("mg1").set("massem", true);
    model.sol("sol1").feature("s1").feature("i1").feature("mg1").set("rmethod", "longest");
    model.sol("sol1").feature("s1").feature("i1").feature("mg1").set("mkeep", false);
    model.sol("sol1").feature("s1").feature("i1").feature("mg1").set("mgcycle", "v");
    model.sol("sol1").feature("s1").feature("i1").feature("mg1").set("prefun", "amg");
    model.sol("sol1").feature("s1").feature("i1").feature("mg1").set("mcasegen", "any");
    model.sol("sol1").feature("s1").feature("i1").feature("mg1").set("mglevels", 5);
    model.sol("sol1").feature("s1").feature("i1").feature("mg1").set("iter", 2);
    model.sol("sol1").feature("s1").feature("i1").feature("mg1").set("maxcoarsedof", 5000);
    model.sol("sol1").feature("s1").feature().remove("fcDef");
    model.sol("sol1").attach("std1");
    model.sol("sol1").runAll();

    model.result("pg1").run();

    model.view("view1").hideObjects().clear();

    model.result("pg1").run();

    model.view("view1").hideEntities().clear();
    model.view("view1").hideEntities().create("hide1");
    model.view("view1").hideEntities("hide1").geom(3);
    model.view("view1").hideEntities("hide1").add(new int[]{1});

    model.result("pg1").run();

    model.view("view1").hideObjects().clear();
    model.view("view1").hideEntities().clear();

    model.result("pg1").run();

    model.param().set("vr1", "0");
    model.param().set("vr2", "0");
    model.param().set("vsph", "1");

    model.mesh("mesh1").feature("ref1").set("numrefine", "2");
    model.mesh("mesh1").feature("size").set("hauto", "5");

    model.sol("sol1").study("std1");
    model.sol("sol1").feature().remove("s1");
    model.sol("sol1").feature().remove("v1");
    model.sol("sol1").feature().remove("st1");
    model.sol("sol1").feature().create("st1", "StudyStep");
    model.sol("sol1").feature("st1").set("study", "std1");
    model.sol("sol1").feature("st1").set("studystep", "stat");
    model.sol("sol1").feature().create("v1", "Variables");
    model.sol("sol1").feature("v1").set("control", "stat");
    model.sol("sol1").feature().create("s1", "Stationary");
    model.sol("sol1").feature("s1").feature().create("fc1", "FullyCoupled");
    model.sol("sol1").feature("s1").feature().create("i1", "Iterative");
    model.sol("sol1").feature("s1").feature("i1").set("prefuntype", "left");
    model.sol("sol1").feature("s1").feature("i1").set("maxlinit", 10000);
    model.sol("sol1").feature("s1").feature("i1").set("linsolver", "cg");
    model.sol("sol1").feature("s1").feature("i1").set("rhob", 400);
    model.sol("sol1").feature("s1").feature("fc1").set("linsolver", "i1");
    model.sol("sol1").feature("s1").feature("i1").feature().create("mg1", "Multigrid");
    model.sol("sol1").feature("s1").feature("i1").feature("mg1").set("amgauto", 3);
    model.sol("sol1").feature("s1").feature("i1").feature("mg1").set("scale", 2);
    model.sol("sol1").feature("s1").feature("i1").feature("mg1").set("gmglevels", 1);
    model.sol("sol1").feature("s1").feature("i1").feature("mg1").set("massem", true);
    model.sol("sol1").feature("s1").feature("i1").feature("mg1").set("rmethod", "longest");
    model.sol("sol1").feature("s1").feature("i1").feature("mg1").set("mkeep", false);
    model.sol("sol1").feature("s1").feature("i1").feature("mg1").set("mgcycle", "v");
    model.sol("sol1").feature("s1").feature("i1").feature("mg1").set("prefun", "amg");
    model.sol("sol1").feature("s1").feature("i1").feature("mg1").set("mcasegen", "any");
    model.sol("sol1").feature("s1").feature("i1").feature("mg1").set("mglevels", 5);
    model.sol("sol1").feature("s1").feature("i1").feature("mg1").set("iter", 2);
    model.sol("sol1").feature("s1").feature("i1").feature("mg1").set("maxcoarsedof", 5000);
    model.sol("sol1").feature("s1").feature().remove("fcDef");
    model.sol("sol1").attach("std1");
    model.sol("sol1").runAll();

    model.result("pg1").run();
    model.result("pg1").feature().create("surf2", "Surface");
    model.result("pg1").run();
    model.result("pg1").feature("con2").active(false);
    model.result("pg1").run();
    model.result("pg1").run();
    model.result("pg1").feature("surf2").set("rangecoloractive", "on");
    model.result("pg1").feature("surf2").set("rangecolormax", "0.2");
    model.result("pg1").feature("surf2").set("expr", "es.normE");
    model.result("pg1").run();
    model.result("pg1").feature("surf2").set("rangecolormax", "250");

    model.param().set("vsph", "0");
    model.param().set("vr1", "1");
    model.param().set("vr2", "-1");

    model.sol("sol1").study("std1");
    model.sol("sol1").feature().remove("s1");
    model.sol("sol1").feature().remove("v1");
    model.sol("sol1").feature().remove("st1");
    model.sol("sol1").feature().create("st1", "StudyStep");
    model.sol("sol1").feature("st1").set("study", "std1");
    model.sol("sol1").feature("st1").set("studystep", "stat");
    model.sol("sol1").feature().create("v1", "Variables");
    model.sol("sol1").feature("v1").set("control", "stat");
    model.sol("sol1").feature().create("s1", "Stationary");
    model.sol("sol1").feature("s1").feature().create("fc1", "FullyCoupled");
    model.sol("sol1").feature("s1").feature().create("i1", "Iterative");
    model.sol("sol1").feature("s1").feature("i1").set("prefuntype", "left");
    model.sol("sol1").feature("s1").feature("i1").set("maxlinit", 10000);
    model.sol("sol1").feature("s1").feature("i1").set("linsolver", "cg");
    model.sol("sol1").feature("s1").feature("i1").set("rhob", 400);
    model.sol("sol1").feature("s1").feature("fc1").set("linsolver", "i1");
    model.sol("sol1").feature("s1").feature("i1").feature().create("mg1", "Multigrid");
    model.sol("sol1").feature("s1").feature("i1").feature("mg1").set("amgauto", 3);
    model.sol("sol1").feature("s1").feature("i1").feature("mg1").set("scale", 2);
    model.sol("sol1").feature("s1").feature("i1").feature("mg1").set("gmglevels", 1);

    return model;
  }

  public static Model run8(Model model) {
    model.sol("sol1").feature("s1").feature("i1").feature("mg1").set("massem", true);
    model.sol("sol1").feature("s1").feature("i1").feature("mg1").set("rmethod", "longest");
    model.sol("sol1").feature("s1").feature("i1").feature("mg1").set("mkeep", false);
    model.sol("sol1").feature("s1").feature("i1").feature("mg1").set("mgcycle", "v");
    model.sol("sol1").feature("s1").feature("i1").feature("mg1").set("prefun", "amg");
    model.sol("sol1").feature("s1").feature("i1").feature("mg1").set("mcasegen", "any");
    model.sol("sol1").feature("s1").feature("i1").feature("mg1").set("mglevels", 5);
    model.sol("sol1").feature("s1").feature("i1").feature("mg1").set("iter", 2);
    model.sol("sol1").feature("s1").feature("i1").feature("mg1").set("maxcoarsedof", 5000);
    model.sol("sol1").feature("s1").feature().remove("fcDef");
    model.sol("sol1").attach("std1");
    model.sol("sol1").runAll();

    model.result("pg1").run();
    model.result().dataset("cpl2").set("planetype", "quick");
    model.result().dataset("cpl2").set("quickplane", "zx");
    model.result("pg1").run();
    model.result("pg1").feature("surf2").set("data", "cpl1");
    model.result("pg1").run();
    model.result("pg1").run();
    model.result("pg1").feature("surf2").set("data", "parent");
    model.result("pg1").run();
    model.result("pg1").set("data", "cpl1");
    model.result("pg1").run();
    model.result("pg1").set("data", "cpl2");
    model.result("pg1").run();
    model.result("pg1").set("data", "cpl1");
    model.result("pg1").run();
    model.result("pg1").set("data", "cpl2");
    model.result("pg1").run();
    model.result("pg1").set("data", "cpl1");
    model.result("pg1").run();
    model.result("pg1").set("data", "cpl3");
    model.result("pg1").run();
    model.result("pg1").set("data", "cpl2");
    model.result("pg1").run();
    model.result("pg1").set("data", "cpl1");
    model.result("pg1").run();

    model.param().set("vr2", "1");

    model.sol("sol1").study("std1");
    model.sol("sol1").feature().remove("s1");
    model.sol("sol1").feature().remove("v1");
    model.sol("sol1").feature().remove("st1");
    model.sol("sol1").feature().create("st1", "StudyStep");
    model.sol("sol1").feature("st1").set("study", "std1");
    model.sol("sol1").feature("st1").set("studystep", "stat");
    model.sol("sol1").feature().create("v1", "Variables");
    model.sol("sol1").feature("v1").set("control", "stat");
    model.sol("sol1").feature().create("s1", "Stationary");
    model.sol("sol1").feature("s1").feature().create("fc1", "FullyCoupled");
    model.sol("sol1").feature("s1").feature().create("i1", "Iterative");
    model.sol("sol1").feature("s1").feature("i1").set("prefuntype", "left");
    model.sol("sol1").feature("s1").feature("i1").set("maxlinit", 10000);
    model.sol("sol1").feature("s1").feature("i1").set("linsolver", "cg");
    model.sol("sol1").feature("s1").feature("i1").set("rhob", 400);
    model.sol("sol1").feature("s1").feature("fc1").set("linsolver", "i1");
    model.sol("sol1").feature("s1").feature("i1").feature().create("mg1", "Multigrid");
    model.sol("sol1").feature("s1").feature("i1").feature("mg1").set("amgauto", 3);
    model.sol("sol1").feature("s1").feature("i1").feature("mg1").set("scale", 2);
    model.sol("sol1").feature("s1").feature("i1").feature("mg1").set("gmglevels", 1);
    model.sol("sol1").feature("s1").feature("i1").feature("mg1").set("massem", true);
    model.sol("sol1").feature("s1").feature("i1").feature("mg1").set("rmethod", "longest");
    model.sol("sol1").feature("s1").feature("i1").feature("mg1").set("mkeep", false);
    model.sol("sol1").feature("s1").feature("i1").feature("mg1").set("mgcycle", "v");
    model.sol("sol1").feature("s1").feature("i1").feature("mg1").set("prefun", "amg");
    model.sol("sol1").feature("s1").feature("i1").feature("mg1").set("mcasegen", "any");
    model.sol("sol1").feature("s1").feature("i1").feature("mg1").set("mglevels", 5);
    model.sol("sol1").feature("s1").feature("i1").feature("mg1").set("iter", 2);
    model.sol("sol1").feature("s1").feature("i1").feature("mg1").set("maxcoarsedof", 5000);
    model.sol("sol1").feature("s1").feature().remove("fcDef");
    model.sol("sol1").attach("std1");
    model.sol("sol1").runAll();

    model.result("pg1").run();
    model.result("pg1").set("data", "cpl2");
    model.result("pg1").run();

    model.param().set("vsph", "1");

    model.sol("sol1").study("std1");
    model.sol("sol1").feature().remove("s1");
    model.sol("sol1").feature().remove("v1");
    model.sol("sol1").feature().remove("st1");
    model.sol("sol1").feature().create("st1", "StudyStep");
    model.sol("sol1").feature("st1").set("study", "std1");
    model.sol("sol1").feature("st1").set("studystep", "stat");
    model.sol("sol1").feature().create("v1", "Variables");
    model.sol("sol1").feature("v1").set("control", "stat");
    model.sol("sol1").feature().create("s1", "Stationary");
    model.sol("sol1").feature("s1").feature().create("fc1", "FullyCoupled");
    model.sol("sol1").feature("s1").feature().create("i1", "Iterative");
    model.sol("sol1").feature("s1").feature("i1").set("prefuntype", "left");
    model.sol("sol1").feature("s1").feature("i1").set("maxlinit", 10000);
    model.sol("sol1").feature("s1").feature("i1").set("linsolver", "cg");
    model.sol("sol1").feature("s1").feature("i1").set("rhob", 400);
    model.sol("sol1").feature("s1").feature("fc1").set("linsolver", "i1");
    model.sol("sol1").feature("s1").feature("i1").feature().create("mg1", "Multigrid");
    model.sol("sol1").feature("s1").feature("i1").feature("mg1").set("amgauto", 3);
    model.sol("sol1").feature("s1").feature("i1").feature("mg1").set("scale", 2);
    model.sol("sol1").feature("s1").feature("i1").feature("mg1").set("gmglevels", 1);
    model.sol("sol1").feature("s1").feature("i1").feature("mg1").set("massem", true);
    model.sol("sol1").feature("s1").feature("i1").feature("mg1").set("rmethod", "longest");
    model.sol("sol1").feature("s1").feature("i1").feature("mg1").set("mkeep", false);
    model.sol("sol1").feature("s1").feature("i1").feature("mg1").set("mgcycle", "v");
    model.sol("sol1").feature("s1").feature("i1").feature("mg1").set("prefun", "amg");
    model.sol("sol1").feature("s1").feature("i1").feature("mg1").set("mcasegen", "any");
    model.sol("sol1").feature("s1").feature("i1").feature("mg1").set("mglevels", 5);
    model.sol("sol1").feature("s1").feature("i1").feature("mg1").set("iter", 2);
    model.sol("sol1").feature("s1").feature("i1").feature("mg1").set("maxcoarsedof", 5000);
    model.sol("sol1").feature("s1").feature().remove("fcDef");
    model.sol("sol1").attach("std1");
    model.sol("sol1").runAll();

    model.result("pg1").run();
    model.result("pg1").set("data", "cpl1");
    model.result("pg1").run();
    model.result("pg1").set("data", "cpl2");
    model.result("pg1").run();

    model.param().set("vr1", "-.5");
    model.param().set("vr2", "-.5");

    model.sol("sol1").study("std1");
    model.sol("sol1").feature().remove("s1");
    model.sol("sol1").feature().remove("v1");
    model.sol("sol1").feature().remove("st1");
    model.sol("sol1").feature().create("st1", "StudyStep");
    model.sol("sol1").feature("st1").set("study", "std1");
    model.sol("sol1").feature("st1").set("studystep", "stat");
    model.sol("sol1").feature().create("v1", "Variables");
    model.sol("sol1").feature("v1").set("control", "stat");
    model.sol("sol1").feature().create("s1", "Stationary");
    model.sol("sol1").feature("s1").feature().create("fc1", "FullyCoupled");
    model.sol("sol1").feature("s1").feature().create("i1", "Iterative");
    model.sol("sol1").feature("s1").feature("i1").set("prefuntype", "left");
    model.sol("sol1").feature("s1").feature("i1").set("maxlinit", 10000);
    model.sol("sol1").feature("s1").feature("i1").set("linsolver", "cg");
    model.sol("sol1").feature("s1").feature("i1").set("rhob", 400);
    model.sol("sol1").feature("s1").feature("fc1").set("linsolver", "i1");
    model.sol("sol1").feature("s1").feature("i1").feature().create("mg1", "Multigrid");
    model.sol("sol1").feature("s1").feature("i1").feature("mg1").set("amgauto", 3);
    model.sol("sol1").feature("s1").feature("i1").feature("mg1").set("scale", 2);
    model.sol("sol1").feature("s1").feature("i1").feature("mg1").set("gmglevels", 1);
    model.sol("sol1").feature("s1").feature("i1").feature("mg1").set("massem", true);
    model.sol("sol1").feature("s1").feature("i1").feature("mg1").set("rmethod", "longest");
    model.sol("sol1").feature("s1").feature("i1").feature("mg1").set("mkeep", false);
    model.sol("sol1").feature("s1").feature("i1").feature("mg1").set("mgcycle", "v");
    model.sol("sol1").feature("s1").feature("i1").feature("mg1").set("prefun", "amg");
    model.sol("sol1").feature("s1").feature("i1").feature("mg1").set("mcasegen", "any");
    model.sol("sol1").feature("s1").feature("i1").feature("mg1").set("mglevels", 5);
    model.sol("sol1").feature("s1").feature("i1").feature("mg1").set("iter", 2);
    model.sol("sol1").feature("s1").feature("i1").feature("mg1").set("maxcoarsedof", 5000);
    model.sol("sol1").feature("s1").feature().remove("fcDef");
    model.sol("sol1").attach("std1");
    model.sol("sol1").runAll();

    model.result("pg1").run();

    model.geom("geom1").feature("sph1").set("r", ".5");
    model.geom("geom1").feature("sph1").setIndex("pos", "-tc/2-rg*.7", 2);

    model.param().set("vr1", "0");
    model.param().set("vr2", "0");

    model.sol("sol1").study("std1");
    model.sol("sol1").feature().remove("s1");
    model.sol("sol1").feature().remove("v1");
    model.sol("sol1").feature().remove("st1");
    model.sol("sol1").feature().create("st1", "StudyStep");
    model.sol("sol1").feature("st1").set("study", "std1");
    model.sol("sol1").feature("st1").set("studystep", "stat");
    model.sol("sol1").feature().create("v1", "Variables");
    model.sol("sol1").feature("v1").set("control", "stat");
    model.sol("sol1").feature().create("s1", "Stationary");
    model.sol("sol1").feature("s1").feature().create("fc1", "FullyCoupled");
    model.sol("sol1").feature("s1").feature().create("i1", "Iterative");
    model.sol("sol1").feature("s1").feature("i1").set("prefuntype", "left");
    model.sol("sol1").feature("s1").feature("i1").set("maxlinit", 10000);
    model.sol("sol1").feature("s1").feature("i1").set("linsolver", "cg");
    model.sol("sol1").feature("s1").feature("i1").set("rhob", 400);
    model.sol("sol1").feature("s1").feature("fc1").set("linsolver", "i1");
    model.sol("sol1").feature("s1").feature("i1").feature().create("mg1", "Multigrid");
    model.sol("sol1").feature("s1").feature("i1").feature("mg1").set("amgauto", 3);
    model.sol("sol1").feature("s1").feature("i1").feature("mg1").set("scale", 2);
    model.sol("sol1").feature("s1").feature("i1").feature("mg1").set("gmglevels", 1);
    model.sol("sol1").feature("s1").feature("i1").feature("mg1").set("massem", true);
    model.sol("sol1").feature("s1").feature("i1").feature("mg1").set("rmethod", "longest");
    model.sol("sol1").feature("s1").feature("i1").feature("mg1").set("mkeep", false);
    model.sol("sol1").feature("s1").feature("i1").feature("mg1").set("mgcycle", "v");
    model.sol("sol1").feature("s1").feature("i1").feature("mg1").set("prefun", "amg");
    model.sol("sol1").feature("s1").feature("i1").feature("mg1").set("mcasegen", "any");
    model.sol("sol1").feature("s1").feature("i1").feature("mg1").set("mglevels", 5);
    model.sol("sol1").feature("s1").feature("i1").feature("mg1").set("iter", 2);
    model.sol("sol1").feature("s1").feature("i1").feature("mg1").set("maxcoarsedof", 5000);
    model.sol("sol1").feature("s1").feature().remove("fcDef");
    model.sol("sol1").attach("std1");
    model.sol("sol1").runAll();

    model.result("pg1").run();
    model.result("pg1").run();
    model.result("pg1").feature("surf2").set("rangecolormax", "100");

    model.geom("geom1").feature("sph1").setIndex("pos", "-tc/2-1", 2);

    model.sol("sol1").study("std1");
    model.sol("sol1").feature().remove("s1");
    model.sol("sol1").feature().remove("v1");
    model.sol("sol1").feature().remove("st1");
    model.sol("sol1").feature().create("st1", "StudyStep");
    model.sol("sol1").feature("st1").set("study", "std1");
    model.sol("sol1").feature("st1").set("studystep", "stat");
    model.sol("sol1").feature().create("v1", "Variables");
    model.sol("sol1").feature("v1").set("control", "stat");
    model.sol("sol1").feature().create("s1", "Stationary");
    model.sol("sol1").feature("s1").feature().create("fc1", "FullyCoupled");
    model.sol("sol1").feature("s1").feature().create("i1", "Iterative");
    model.sol("sol1").feature("s1").feature("i1").set("prefuntype", "left");
    model.sol("sol1").feature("s1").feature("i1").set("maxlinit", 10000);
    model.sol("sol1").feature("s1").feature("i1").set("linsolver", "cg");
    model.sol("sol1").feature("s1").feature("i1").set("rhob", 400);
    model.sol("sol1").feature("s1").feature("fc1").set("linsolver", "i1");
    model.sol("sol1").feature("s1").feature("i1").feature().create("mg1", "Multigrid");
    model.sol("sol1").feature("s1").feature("i1").feature("mg1").set("amgauto", 3);
    model.sol("sol1").feature("s1").feature("i1").feature("mg1").set("scale", 2);
    model.sol("sol1").feature("s1").feature("i1").feature("mg1").set("gmglevels", 1);
    model.sol("sol1").feature("s1").feature("i1").feature("mg1").set("massem", true);
    model.sol("sol1").feature("s1").feature("i1").feature("mg1").set("rmethod", "longest");
    model.sol("sol1").feature("s1").feature("i1").feature("mg1").set("mkeep", false);
    model.sol("sol1").feature("s1").feature("i1").feature("mg1").set("mgcycle", "v");
    model.sol("sol1").feature("s1").feature("i1").feature("mg1").set("prefun", "amg");
    model.sol("sol1").feature("s1").feature("i1").feature("mg1").set("mcasegen", "any");
    model.sol("sol1").feature("s1").feature("i1").feature("mg1").set("mglevels", 5);
    model.sol("sol1").feature("s1").feature("i1").feature("mg1").set("iter", 2);
    model.sol("sol1").feature("s1").feature("i1").feature("mg1").set("maxcoarsedof", 5000);
    model.sol("sol1").feature("s1").feature().remove("fcDef");
    model.sol("sol1").attach("std1");
    model.sol("sol1").runAll();

    model.result("pg1").run();
    model.result("pg1").run();
    model.result("pg1").feature("surf2").set("rangecolormax", "200");

    model.view("view1").hideObjects().create("hide1");
    model.view("view1").hideObjects("hide1").init(2);
    model.view("view1").hideObjects("hide1").add("cyl4", new int[]{2});
    model.view("view1").hideObjects().create("hide2");
    model.view("view1").hideObjects("hide2").init(3);
    model.view("view1").hideObjects("hide2").add("cyl4", new int[]{1});
    model.view("view1").hideObjects().clear();
    model.view("view1").hideObjects().create("hide1");
    model.view("view1").hideObjects("hide1").init(3);
    model.view("view1").hideObjects("hide1").add("cyl4", new int[]{1});

    model.geom("geom1").feature().duplicate("cyl5", "cyl1");
    model.geom("geom1").feature().duplicate("cyl6", "cyl2");
    model.geom("geom1").feature("cyl6").setIndex("pos", "-(tc/2+rg+rd/2)", 2);
    model.geom("geom1").feature("cyl5").setIndex("pos", "-(tc/2+rg+rd/2)", 2);
    model.geom("geom1").runAll();

    model.view("view1").hideObjects().clear();
    model.view("view1").hideObjects().create("hide1");
    model.view("view1").hideObjects("hide1").init(3);
    model.view("view1").hideObjects("hide1").add("cyl4", new int[]{1});

    model.param().remove("vsph");
    model.param().set("vr3", "1");
    model.param().set("vr4", "1");

    model.view("view1").hideObjects("hide1").add("cyl3", new int[]{1});

    model.geom("geom1").feature().remove("sph1");
    model.geom("geom1").feature("cyl1").name("Rod 1");
    model.geom("geom1").feature("cyl2").name("Rod 2");
    model.geom("geom1").feature("cyl5").name("Rod 3");
    model.geom("geom1").feature("cyl1").name("Front Rod 1");
    model.geom("geom1").feature("cyl2").name("Front Rod 2");
    model.geom("geom1").feature("cyl5").name("Back Rod 3");
    model.geom("geom1").feature("cyl6").name("Back Rod 2");
    model.geom("geom1").feature("cyl5").name("Back Rod 1");
    model.geom("geom1").feature("cyl3").name("Finer Mesh");
    model.geom("geom1").feature("cyl4").name("Sim Bound");
    model.geom("geom1").run("cyl6");
    model.geom("geom1").feature().create("blk1", "Block");
    model.geom("geom1").feature("blk1").setIndex("size", "tc", 2);
    model.geom("geom1").feature("blk1").setIndex("size", "(OD-ID)/2", 1);
    model.geom("geom1").feature("blk1").setIndex("size", "ID", 0);
    model.geom("geom1").feature("blk1").setIndex("pos", "-ID/2", 0);
    model.geom("geom1").feature("blk1").setIndex("pos", "ID/2", 1);
    model.geom("geom1").feature("blk1").setIndex("pos", "-tc/2", 2);
    model.geom("geom1").run("blk1");
    model.geom("geom1").feature("blk1").setIndex("size", "(sqrt(OD^2-ID^2)-ID)/2", 1);
    model.geom("geom1").run("blk1");
    model.geom("geom1").feature("blk1").name("Mag Up");
    model.geom("geom1").feature().duplicate("blk2", "blk1");

    model.result("pg1").run();
    model.result("pg1").run();

    model.geom("geom1").feature("blk2").name("Mag Down");
    model.geom("geom1").feature("blk2").setIndex("pos", "-ID/2-(sqrt(OD^2-ID^2)-ID)/2", 1);
    model.geom("geom1").run("blk2");
    model.geom("geom1").feature().duplicate("blk3", "blk2");
    model.geom("geom1").feature("blk3").name("Mag Left");
    model.geom("geom1").feature("blk3").setIndex("pos", "-ID/2", 1);
    model.geom("geom1").feature("blk3").setIndex("pos", "-ID/2-(sqrt(OD^2-ID^2)-ID)/2", 0);
    model.geom("geom1").feature("blk3").setIndex("size", "ID", 1);
    model.geom("geom1").feature("blk3").setIndex("size", "(sqrt(OD^2-ID^2)-ID)/2", 0);
    model.geom("geom1").run("blk3");
    model.geom("geom1").feature().duplicate("blk4", "blk3");
    model.geom("geom1").feature("blk4").name("Mag Right");
    model.geom("geom1").feature("blk4").setIndex("pos", "ID/2", 0);
    model.geom("geom1").run("blk4");
    model.geom("geom1").run();

    model.physics("mfnc").feature().remove("mfc6");

    model.view("view1").hideEntities().create("hide1");
    model.view("view1").hideEntities("hide1").geom(3);
    model.view("view1").hideEntities("hide1").add(new int[]{1});
    model.view("view1").hideEntities("hide1").add(new int[]{8});
    model.view("view1").hideEntities("hide1").add(new int[]{6, 23});
    model.view("view1").hideEntities("hide1").add(new int[]{7, 24});
    model.view("view1").hideEntities("hide1").add(new int[]{15, 16, 17, 21, 22});
    model.view("view1").hideEntities("hide1").add(new int[]{4, 5, 25, 30});

    model.physics("mfnc").feature("mfc2").selection().set(new int[]{18, 19});
    model.physics("mfnc").feature("mfc2").set("Br", new String[]{"0", "M", "0"});
    model.physics("mfnc").feature("mfc3").selection().set(new int[]{12, 14});
    model.physics("mfnc").feature("mfc3").set("Br", new String[]{"0", "-M", "0"});
    model.physics("mfnc").feature("mfc4").selection().set(new int[]{27, 28, 31, 32});
    model.physics("mfnc").feature("mfc4").set("Br", new String[]{"-M", "0", "0"});
    model.physics("mfnc").feature("mfc5").selection().set(new int[]{3, 9});

    model.view("view1").hideEntities("hide1").add(new int[]{2});

    model.physics("mfnc").feature("mfc5").set("Br", new String[]{"M", "0", "0"});

    model.view("view1").hideEntities().clear();

    model.physics("mfnc").active(true);

    model.mesh("mesh1").run("size");

    model.sol().remove("sol1");

    model.param().set("M", "1.5");

    model.sol().create("sol1");
    model.sol("sol1").study("std1");
    model.sol("sol1").feature().create("st1", "StudyStep");
    model.sol("sol1").feature("st1").set("study", "std1");
    model.sol("sol1").feature("st1").set("studystep", "stat");
    model.sol("sol1").feature().create("v1", "Variables");
    model.sol("sol1").feature("v1").set("control", "stat");
    model.sol("sol1").feature().create("s1", "Stationary");
    model.sol("sol1").feature("s1").feature().create("se1", "Segregated");
    model.sol("sol1").feature("s1").feature("se1").feature().remove("ssDef");
    model.sol("sol1").feature("s1").feature("se1").feature().create("ss1", "SegregatedStep");
    model.sol("sol1").feature("s1").feature("se1").feature("ss1").set("segvar", new String[]{"mod1_V"});
    model.sol("sol1").feature("s1").feature().create("i1", "Iterative");
    model.sol("sol1").feature("s1").feature("i1").set("prefuntype", "left");
    model.sol("sol1").feature("s1").feature("i1").set("maxlinit", 10000);
    model.sol("sol1").feature("s1").feature("i1").set("linsolver", "cg");
    model.sol("sol1").feature("s1").feature("i1").set("rhob", 400);
    model.sol("sol1").feature("s1").feature("se1").feature("ss1").set("linsolver", "i1");
    model.sol("sol1").feature("s1").feature("i1").feature().create("mg1", "Multigrid");
    model.sol("sol1").feature("s1").feature("i1").feature("mg1").set("amgauto", 3);
    model.sol("sol1").feature("s1").feature("i1").feature("mg1").set("scale", 2);
    model.sol("sol1").feature("s1").feature("i1").feature("mg1").set("gmglevels", 1);
    model.sol("sol1").feature("s1").feature("i1").feature("mg1").set("massem", true);
    model.sol("sol1").feature("s1").feature("i1").feature("mg1").set("rmethod", "longest");
    model.sol("sol1").feature("s1").feature("i1").feature("mg1").set("mkeep", false);
    model.sol("sol1").feature("s1").feature("i1").feature("mg1").set("mgcycle", "v");
    model.sol("sol1").feature("s1").feature("i1").feature("mg1").set("prefun", "amg");
    model.sol("sol1").feature("s1").feature("i1").feature("mg1").set("mcasegen", "any");
    model.sol("sol1").feature("s1").feature("i1").feature("mg1").set("mglevels", 5);
    model.sol("sol1").feature("s1").feature("i1").feature("mg1").set("iter", 2);
    model.sol("sol1").feature("s1").feature("i1").feature("mg1").set("maxcoarsedof", 5000);
    model.sol("sol1").feature("s1").feature("se1").feature().create("ss2", "SegregatedStep");
    model.sol("sol1").feature("s1").feature("se1").feature("ss2").set("segvar", new String[]{"mod1_Vm"});
    model.sol("sol1").feature("s1").feature().create("i2", "Iterative");
    model.sol("sol1").feature("s1").feature("i2").set("prefuntype", "left");
    model.sol("sol1").feature("s1").feature("i2").set("maxlinit", 10000);
    model.sol("sol1").feature("s1").feature("i2").set("linsolver", "cg");
    model.sol("sol1").feature("s1").feature("i2").set("rhob", 400);
    model.sol("sol1").feature("s1").feature("se1").feature("ss2").set("linsolver", "i2");
    model.sol("sol1").feature("s1").feature("i2").feature().create("mg1", "Multigrid");
    model.sol("sol1").feature("s1").feature("i2").feature("mg1").set("amgauto", 3);
    model.sol("sol1").feature("s1").feature("i2").feature("mg1").set("scale", 2);
    model.sol("sol1").feature("s1").feature("i2").feature("mg1").set("gmglevels", 1);
    model.sol("sol1").feature("s1").feature("i2").feature("mg1").set("massem", true);
    model.sol("sol1").feature("s1").feature("i2").feature("mg1").set("rmethod", "longest");
    model.sol("sol1").feature("s1").feature("i2").feature("mg1").set("mkeep", false);
    model.sol("sol1").feature("s1").feature("i2").feature("mg1").set("mgcycle", "v");
    model.sol("sol1").feature("s1").feature("i2").feature("mg1").set("prefun", "amg");
    model.sol("sol1").feature("s1").feature("i2").feature("mg1").set("mcasegen", "any");
    model.sol("sol1").feature("s1").feature("i2").feature("mg1").set("mglevels", 5);
    model.sol("sol1").feature("s1").feature("i2").feature("mg1").set("iter", 2);
    model.sol("sol1").feature("s1").feature("i2").feature("mg1").set("maxcoarsedof", 5000);
    model.sol("sol1").feature("s1").feature().remove("fcDef");
    model.sol("sol1").attach("std1");

    model.result().create("pg1", "PlotGroup3D");
    model.result("pg1").name("Magnetic flux density");
    model.result("pg1").set("data", "dset1");
    model.result("pg1").feature().create("mslc1", "Multislice");
    model.result("pg1").feature("mslc1").name("Multislice 1.1");
    model.result("pg1").feature("mslc1").set("expr", "mfnc.normB");
    model.result("pg1").feature("mslc1").set("data", "parent");
    model.result().create("pg2", "PlotGroup3D");
    model.result("pg2").name("Electric potential");
    model.result("pg2").set("data", "dset1");
    model.result("pg2").feature().create("mslc1", "Multislice");
    model.result("pg2").feature("mslc1").name("Multislice");
    model.result("pg2").feature("mslc1").set("expr", "V");
    model.result("pg2").feature("mslc1").set("data", "parent");

    model.sol("sol1").runAll();

    model.result("pg1").run();
    model.result("pg2").run();
    model.result().create("pg3", "PlotGroup2D");
    model.result("pg3").run();
    model.result().dataset().create("cpl1", "CutPlane");
    model.result().dataset("cpl1").run();
    model.result("pg3").run();
    model.result("pg3").feature().create("surf1", "Surface");
    model.result("pg3").feature("surf1").set("expr", "mfnc.normB");
    model.result("pg3").run();
    model.result("pg3").run();
    model.result("pg3").run();
    model.result("pg3").run();
    model.result("pg3").run();
    model.result("pg3").set("data", "cpl1");
    model.result("pg3").run();
    model.result("pg3").run();
    model.result("pg3").feature().remove("surf1");
    model.result("pg3").run();
    model.result("pg3").feature().create("con1", "Contour");
    model.result("pg3").feature("con1").set("expr", "mfnc.normB");
    model.result("pg3").run();
    model.result("pg3").run();
    model.result("pg3").feature().create("con2", "Contour");
    model.result("pg3").feature("con2").set("expr", "es.normE");
    model.result("pg3").run();

    model.view("view1").hideEntities().create("hide1");
    model.view("view1").hideEntities("hide1").geom(3);
    model.view("view1").hideEntities("hide1").add(new int[]{1});
    model.view("view1").hideEntities("hide1").add(new int[]{8});

    model.physics("es").feature("pot4").selection().set(new int[]{24, 25, 26, 30, 44, 45});
    model.physics("es").feature("pot4").set("V0", 1, "vr3");
    model.physics("es").feature().duplicate("pot5", "pot4");
    model.physics("es").feature("pot5").selection().set(new int[]{130, 131, 132, 136, 172, 173});
    model.physics("es").feature("pot5").set("V0", 1, "vr4");

    model.param().set("vr1", "1");
    model.param().set("vr2", "1");

    model.sol("sol1").study("std1");
    model.sol("sol1").feature().remove("s1");
    model.sol("sol1").feature().remove("v1");
    model.sol("sol1").feature().remove("st1");
    model.sol("sol1").feature().create("st1", "StudyStep");
    model.sol("sol1").feature("st1").set("study", "std1");
    model.sol("sol1").feature("st1").set("studystep", "stat");
    model.sol("sol1").feature().create("v1", "Variables");
    model.sol("sol1").feature("v1").set("control", "stat");
    model.sol("sol1").feature().create("s1", "Stationary");
    model.sol("sol1").feature("s1").feature().create("se1", "Segregated");
    model.sol("sol1").feature("s1").feature("se1").feature().remove("ssDef");
    model.sol("sol1").feature("s1").feature("se1").feature().create("ss1", "SegregatedStep");
    model.sol("sol1").feature("s1").feature("se1").feature("ss1").set("segvar", new String[]{"mod1_V"});
    model.sol("sol1").feature("s1").feature().create("i1", "Iterative");
    model.sol("sol1").feature("s1").feature("i1").set("prefuntype", "left");
    model.sol("sol1").feature("s1").feature("i1").set("maxlinit", 10000);
    model.sol("sol1").feature("s1").feature("i1").set("linsolver", "cg");
    model.sol("sol1").feature("s1").feature("i1").set("rhob", 400);
    model.sol("sol1").feature("s1").feature("se1").feature("ss1").set("linsolver", "i1");
    model.sol("sol1").feature("s1").feature("i1").feature().create("mg1", "Multigrid");
    model.sol("sol1").feature("s1").feature("i1").feature("mg1").set("amgauto", 3);
    model.sol("sol1").feature("s1").feature("i1").feature("mg1").set("scale", 2);
    model.sol("sol1").feature("s1").feature("i1").feature("mg1").set("gmglevels", 1);
    model.sol("sol1").feature("s1").feature("i1").feature("mg1").set("massem", true);
    model.sol("sol1").feature("s1").feature("i1").feature("mg1").set("rmethod", "longest");
    model.sol("sol1").feature("s1").feature("i1").feature("mg1").set("mkeep", false);
    model.sol("sol1").feature("s1").feature("i1").feature("mg1").set("mgcycle", "v");
    model.sol("sol1").feature("s1").feature("i1").feature("mg1").set("prefun", "amg");
    model.sol("sol1").feature("s1").feature("i1").feature("mg1").set("mcasegen", "any");
    model.sol("sol1").feature("s1").feature("i1").feature("mg1").set("mglevels", 5);
    model.sol("sol1").feature("s1").feature("i1").feature("mg1").set("iter", 2);
    model.sol("sol1").feature("s1").feature("i1").feature("mg1").set("maxcoarsedof", 5000);
    model.sol("sol1").feature("s1").feature("se1").feature().create("ss2", "SegregatedStep");
    model.sol("sol1").feature("s1").feature("se1").feature("ss2").set("segvar", new String[]{"mod1_Vm"});
    model.sol("sol1").feature("s1").feature().create("i2", "Iterative");
    model.sol("sol1").feature("s1").feature("i2").set("prefuntype", "left");
    model.sol("sol1").feature("s1").feature("i2").set("maxlinit", 10000);
    model.sol("sol1").feature("s1").feature("i2").set("linsolver", "cg");
    model.sol("sol1").feature("s1").feature("i2").set("rhob", 400);
    model.sol("sol1").feature("s1").feature("se1").feature("ss2").set("linsolver", "i2");
    model.sol("sol1").feature("s1").feature("i2").feature().create("mg1", "Multigrid");
    model.sol("sol1").feature("s1").feature("i2").feature("mg1").set("amgauto", 3);
    model.sol("sol1").feature("s1").feature("i2").feature("mg1").set("scale", 2);
    model.sol("sol1").feature("s1").feature("i2").feature("mg1").set("gmglevels", 1);
    model.sol("sol1").feature("s1").feature("i2").feature("mg1").set("massem", true);
    model.sol("sol1").feature("s1").feature("i2").feature("mg1").set("rmethod", "longest");
    model.sol("sol1").feature("s1").feature("i2").feature("mg1").set("mkeep", false);
    model.sol("sol1").feature("s1").feature("i2").feature("mg1").set("mgcycle", "v");
    model.sol("sol1").feature("s1").feature("i2").feature("mg1").set("prefun", "amg");
    model.sol("sol1").feature("s1").feature("i2").feature("mg1").set("mcasegen", "any");
    model.sol("sol1").feature("s1").feature("i2").feature("mg1").set("mglevels", 5);
    model.sol("sol1").feature("s1").feature("i2").feature("mg1").set("iter", 2);
    model.sol("sol1").feature("s1").feature("i2").feature("mg1").set("maxcoarsedof", 5000);
    model.sol("sol1").feature("s1").feature().remove("fcDef");
    model.sol("sol1").attach("std1");
    model.sol("sol1").runAll();

    model.result("pg1").run();

    model.view("view1").hideEntities().clear();

    model.result("pg3").run();
    model.result("pg1").run();
    model.result("pg2").run();
    model.result("pg3").run();
    model.result("pg3").run();
    model.result("pg3").run();
    model.result("pg3").run();

    model.geom("geom1").feature("blk1").active(false);
    model.geom("geom1").feature("blk2").active(false);
    model.geom("geom1").feature("blk3").active(false);
    model.geom("geom1").feature("blk4").active(false);
    model.geom("geom1").runAll();

    model.result("pg3").run();

    return model;
  }

  public static Model run9(Model model) {
    model.result("pg3").run();
    model.result("pg3").feature("con2").active(false);
    model.result("pg3").run();
    model.result("pg3").run();
    model.result("pg3").feature("con1").set("unit", "G");
    model.result("pg3").run();
    model.result("pg3").run();
    model.result("pg3").run();
    model.result("pg3").run();
    model.result("pg3").feature("con1").active(false);
    model.result("pg3").run();
    model.result("pg3").run();
    model.result("pg3").feature().create("surf1", "Surface");
    model.result("pg3").feature("surf1").set("expr", "mfnc.normB");
    model.result("pg3").run();
    model.result("pg3").feature("surf1").set("unit", "G");
    model.result("pg3").feature("surf1").set("rangecoloractive", "on");
    model.result("pg3").feature("surf1").set("rangecolormax", "9000");
    model.result("pg3").feature("surf1").set("titletype", "none");
    model.result("pg3").run();
    model.result("pg3").set("titletype", "custom");
    model.result("pg3").set("solutionintitle", "off");
    model.result("pg3").set("typeintitle", "off");
    model.result("pg3").set("descriptionintitle", "off");
    model.result("pg3").set("unitintitle", "off");
    model.result("pg3").set("prefixintitle", "Magnetic Field, YZ Plane");
    model.result("pg3").run();
    model.result("pg3").set("xlabelactive", "on");
    model.result("pg3").set("ylabelactive", "on");
    model.result("pg3").set("xlabel", "(mm)");
    model.result("pg3").set("ylabel", "(mm)");
    model.result("pg3").set("prefixintitle", "Magnetic Field (G), YZ Plane");
    model.result().dataset().create("cpl2", "CutPlane");
    model.result().dataset("cpl2").set("planetype", "general");
    model.result().dataset("cpl2").setIndex("genpoints", "1", 1, 1);
    model.result().dataset("cpl2").setIndex("genpoints", "1", 2, 2);
    model.result().dataset("cpl2").setIndex("genpoints", "1", 2, 0);
    model.result().dataset("cpl2").run();
    model.result("pg3").run();
    model.result("pg3").set("data", "cpl2");
    model.result("pg3").run();
    model.result().dataset("cpl1").run();
    model.result().dataset("cpl2").run();
    model.result("pg3").run();
    model.result("pg3").set("prefixintitle", "Magnetic Field (G), WZ Plane");
    model.result("pg3").run();
    model.result("pg3").set("data", "cpl1");
    model.result("pg3").run();
    model.result("pg3").set("data", "cpl2");
    model.result("pg3").run();
    model.result("pg3").set("data", "cpl1");
    model.result("pg3").run();
    model.result("pg3").set("data", "cpl2");
    model.result("pg3").run();
    model.result().dataset().create("cpl3", "CutPlane");
    model.result().dataset("cpl3").set("quickplane", "xy");
    model.result().dataset("cpl3").run();
    model.result("pg3").run();
    model.result("pg3").set("data", "cpl3");
    model.result("pg3").run();
    model.result("pg3").run();
    model.result("pg3").feature("surf1").set("expr", "es.normE");
    model.result("pg3").run();
    model.result("pg3").feature("surf1").set("rangecolormin", "174.136938733573");
    model.result("pg3").run();
    model.result("pg3").set("data", "cpl1");
    model.result("pg3").run();
    model.result("pg3").run();
    model.result("pg3").run();
    model.result("pg3").feature("surf1").set("rangecoloractive", "on");
    model.result("pg3").feature("surf1").set("rangecolormin", "0");
    model.result("pg3").feature("surf1").set("rangecolormax", "300");
    model.result("pg3").run();
    model.result("pg3").set("prefixintitle", "Electric Field (kV/cm, 1kV applied), YZ Plane");
    model.result("pg3").run();
    model.result("pg3").feature("surf1").set("expr", "es.normE*1000");
    model.result("pg3").feature("surf1").set("unit", "V/cm");
    model.result("pg3").feature("surf1").set("rangecoloractive", "off");
    model.result("pg3").feature("surf1").set("expr", "es.normE");
    model.result("pg3").run();
    model.result("pg3").feature("surf1").set("rangecoloractive", "on");
    model.result("pg3").feature("surf1").set("rangecolormax", "2.5");

    model.geom("geom1").run();

    model.physics("mfnc").active(false);

    model.geom("geom1").feature("blk1").active(true);
    model.geom("geom1").feature("blk2").active(true);
    model.geom("geom1").feature("blk3").active(true);
    model.geom("geom1").feature("blk4").active(true);

    model.param().set("vr3", "0");
    model.param().set("vr4", "0");
    model.param().set("vr1", "10");
    model.param().set("vr2", "10");
    model.param().set("vmag", "-10");
    model.param().set("vr3", "-10");
    model.param().set("vr4", "-10");

    model.sol("sol1").study("std1");
    model.sol("sol1").feature().remove("s1");
    model.sol("sol1").feature().remove("v1");
    model.sol("sol1").feature().remove("st1");
    model.sol("sol1").feature().create("st1", "StudyStep");
    model.sol("sol1").feature("st1").set("study", "std1");
    model.sol("sol1").feature("st1").set("studystep", "stat");
    model.sol("sol1").feature().create("v1", "Variables");
    model.sol("sol1").feature("v1").set("control", "stat");
    model.sol("sol1").feature().create("s1", "Stationary");
    model.sol("sol1").feature("s1").feature().create("fc1", "FullyCoupled");
    model.sol("sol1").feature("s1").feature().create("i1", "Iterative");
    model.sol("sol1").feature("s1").feature("i1").set("prefuntype", "left");
    model.sol("sol1").feature("s1").feature("i1").set("maxlinit", 10000);
    model.sol("sol1").feature("s1").feature("i1").set("linsolver", "cg");
    model.sol("sol1").feature("s1").feature("i1").set("rhob", 400);
    model.sol("sol1").feature("s1").feature("fc1").set("linsolver", "i1");
    model.sol("sol1").feature("s1").feature("i1").feature().create("mg1", "Multigrid");
    model.sol("sol1").feature("s1").feature("i1").feature("mg1").set("amgauto", 3);
    model.sol("sol1").feature("s1").feature("i1").feature("mg1").set("scale", 2);
    model.sol("sol1").feature("s1").feature("i1").feature("mg1").set("gmglevels", 1);
    model.sol("sol1").feature("s1").feature("i1").feature("mg1").set("massem", true);
    model.sol("sol1").feature("s1").feature("i1").feature("mg1").set("rmethod", "longest");
    model.sol("sol1").feature("s1").feature("i1").feature("mg1").set("mkeep", false);
    model.sol("sol1").feature("s1").feature("i1").feature("mg1").set("mgcycle", "v");
    model.sol("sol1").feature("s1").feature("i1").feature("mg1").set("prefun", "amg");
    model.sol("sol1").feature("s1").feature("i1").feature("mg1").set("mcasegen", "any");
    model.sol("sol1").feature("s1").feature("i1").feature("mg1").set("mglevels", 5);
    model.sol("sol1").feature("s1").feature("i1").feature("mg1").set("iter", 2);
    model.sol("sol1").feature("s1").feature("i1").feature("mg1").set("maxcoarsedof", 5000);
    model.sol("sol1").feature("s1").feature().remove("fcDef");
    model.sol("sol1").attach("std1");
    model.sol("sol1").runAll();

    model.result("pg3").run();
    model.result("pg3").feature("surf1").set("rangecolormax", "104.548059599012");
    model.result("pg3").run();
    model.result("pg3").set("prefixintitle", "Stopping Electric Field (kV/cm, +/-10kV applied), YZ Plane");
    model.result("pg3").run();

    model.param().set("vr3", "-1");
    model.param().set("vr4", "-1");
    model.param().set("vr1", "1");
    model.param().set("vr2", "1");
    model.param().set("vmag", "0");

    model.sol("sol1").study("std1");
    model.sol("sol1").feature().remove("s1");
    model.sol("sol1").feature().remove("v1");
    model.sol("sol1").feature().remove("st1");
    model.sol("sol1").feature().create("st1", "StudyStep");
    model.sol("sol1").feature("st1").set("study", "std1");
    model.sol("sol1").feature("st1").set("studystep", "stat");
    model.sol("sol1").feature().create("v1", "Variables");
    model.sol("sol1").feature("v1").set("control", "stat");
    model.sol("sol1").feature().create("s1", "Stationary");
    model.sol("sol1").feature("s1").feature().create("fc1", "FullyCoupled");
    model.sol("sol1").feature("s1").feature().create("i1", "Iterative");
    model.sol("sol1").feature("s1").feature("i1").set("prefuntype", "left");
    model.sol("sol1").feature("s1").feature("i1").set("maxlinit", 10000);
    model.sol("sol1").feature("s1").feature("i1").set("linsolver", "cg");
    model.sol("sol1").feature("s1").feature("i1").set("rhob", 400);
    model.sol("sol1").feature("s1").feature("fc1").set("linsolver", "i1");
    model.sol("sol1").feature("s1").feature("i1").feature().create("mg1", "Multigrid");
    model.sol("sol1").feature("s1").feature("i1").feature("mg1").set("amgauto", 3);
    model.sol("sol1").feature("s1").feature("i1").feature("mg1").set("scale", 2);
    model.sol("sol1").feature("s1").feature("i1").feature("mg1").set("gmglevels", 1);
    model.sol("sol1").feature("s1").feature("i1").feature("mg1").set("massem", true);
    model.sol("sol1").feature("s1").feature("i1").feature("mg1").set("rmethod", "longest");
    model.sol("sol1").feature("s1").feature("i1").feature("mg1").set("mkeep", false);
    model.sol("sol1").feature("s1").feature("i1").feature("mg1").set("mgcycle", "v");
    model.sol("sol1").feature("s1").feature("i1").feature("mg1").set("prefun", "amg");
    model.sol("sol1").feature("s1").feature("i1").feature("mg1").set("mcasegen", "any");
    model.sol("sol1").feature("s1").feature("i1").feature("mg1").set("mglevels", 5);
    model.sol("sol1").feature("s1").feature("i1").feature("mg1").set("iter", 2);
    model.sol("sol1").feature("s1").feature("i1").feature("mg1").set("maxcoarsedof", 5000);
    model.sol("sol1").feature("s1").feature().remove("fcDef");
    model.sol("sol1").attach("std1");
    model.sol("sol1").runAll();

    model.result("pg3").run();
    model.result("pg3").run();
    model.result("pg3").feature("surf1").set("rangecoloractive", "on");
    model.result("pg3").feature("surf1").set("rangecolormax", "3.5");

    model.physics("mfnc").active(true);

    model.sol("sol1").study("std1");
    model.sol("sol1").feature().remove("s1");
    model.sol("sol1").feature().remove("v1");
    model.sol("sol1").feature().remove("st1");
    model.sol("sol1").feature().create("st1", "StudyStep");
    model.sol("sol1").feature("st1").set("study", "std1");
    model.sol("sol1").feature("st1").set("studystep", "stat");
    model.sol("sol1").feature().create("v1", "Variables");
    model.sol("sol1").feature("v1").set("control", "stat");
    model.sol("sol1").feature().create("s1", "Stationary");
    model.sol("sol1").feature("s1").feature().create("se1", "Segregated");
    model.sol("sol1").feature("s1").feature("se1").feature().remove("ssDef");
    model.sol("sol1").feature("s1").feature("se1").feature().create("ss1", "SegregatedStep");
    model.sol("sol1").feature("s1").feature("se1").feature("ss1").set("segvar", new String[]{"mod1_V"});
    model.sol("sol1").feature("s1").feature().create("i1", "Iterative");
    model.sol("sol1").feature("s1").feature("i1").set("prefuntype", "left");
    model.sol("sol1").feature("s1").feature("i1").set("maxlinit", 10000);
    model.sol("sol1").feature("s1").feature("i1").set("linsolver", "cg");
    model.sol("sol1").feature("s1").feature("i1").set("rhob", 400);
    model.sol("sol1").feature("s1").feature("se1").feature("ss1").set("linsolver", "i1");
    model.sol("sol1").feature("s1").feature("i1").feature().create("mg1", "Multigrid");
    model.sol("sol1").feature("s1").feature("i1").feature("mg1").set("amgauto", 3);
    model.sol("sol1").feature("s1").feature("i1").feature("mg1").set("scale", 2);
    model.sol("sol1").feature("s1").feature("i1").feature("mg1").set("gmglevels", 1);
    model.sol("sol1").feature("s1").feature("i1").feature("mg1").set("massem", true);
    model.sol("sol1").feature("s1").feature("i1").feature("mg1").set("rmethod", "longest");
    model.sol("sol1").feature("s1").feature("i1").feature("mg1").set("mkeep", false);
    model.sol("sol1").feature("s1").feature("i1").feature("mg1").set("mgcycle", "v");
    model.sol("sol1").feature("s1").feature("i1").feature("mg1").set("prefun", "amg");
    model.sol("sol1").feature("s1").feature("i1").feature("mg1").set("mcasegen", "any");
    model.sol("sol1").feature("s1").feature("i1").feature("mg1").set("mglevels", 5);
    model.sol("sol1").feature("s1").feature("i1").feature("mg1").set("iter", 2);
    model.sol("sol1").feature("s1").feature("i1").feature("mg1").set("maxcoarsedof", 5000);
    model.sol("sol1").feature("s1").feature("se1").feature().create("ss2", "SegregatedStep");
    model.sol("sol1").feature("s1").feature("se1").feature("ss2").set("segvar", new String[]{"mod1_Vm"});
    model.sol("sol1").feature("s1").feature().create("i2", "Iterative");
    model.sol("sol1").feature("s1").feature("i2").set("prefuntype", "left");
    model.sol("sol1").feature("s1").feature("i2").set("maxlinit", 10000);
    model.sol("sol1").feature("s1").feature("i2").set("linsolver", "cg");
    model.sol("sol1").feature("s1").feature("i2").set("rhob", 400);
    model.sol("sol1").feature("s1").feature("se1").feature("ss2").set("linsolver", "i2");
    model.sol("sol1").feature("s1").feature("i2").feature().create("mg1", "Multigrid");
    model.sol("sol1").feature("s1").feature("i2").feature("mg1").set("amgauto", 3);
    model.sol("sol1").feature("s1").feature("i2").feature("mg1").set("scale", 2);
    model.sol("sol1").feature("s1").feature("i2").feature("mg1").set("gmglevels", 1);
    model.sol("sol1").feature("s1").feature("i2").feature("mg1").set("massem", true);
    model.sol("sol1").feature("s1").feature("i2").feature("mg1").set("rmethod", "longest");
    model.sol("sol1").feature("s1").feature("i2").feature("mg1").set("mkeep", false);
    model.sol("sol1").feature("s1").feature("i2").feature("mg1").set("mgcycle", "v");
    model.sol("sol1").feature("s1").feature("i2").feature("mg1").set("prefun", "amg");
    model.sol("sol1").feature("s1").feature("i2").feature("mg1").set("mcasegen", "any");
    model.sol("sol1").feature("s1").feature("i2").feature("mg1").set("mglevels", 5);
    model.sol("sol1").feature("s1").feature("i2").feature("mg1").set("iter", 2);
    model.sol("sol1").feature("s1").feature("i2").feature("mg1").set("maxcoarsedof", 5000);
    model.sol("sol1").feature("s1").feature().remove("fcDef");
    model.sol("sol1").attach("std1");
    model.sol("sol1").runAll();

    model.result("pg1").run();

    model.geom("geom1").feature("blk1").active(false);
    model.geom("geom1").feature("blk2").active(false);
    model.geom("geom1").feature("blk3").active(false);
    model.geom("geom1").feature("blk4").active(false);
    model.geom("geom1").feature().remove("wp1");
    model.geom("geom1").feature().remove("rev1");
    model.geom("geom1").run("blk4");
    model.geom("geom1").feature().create("cyl7", "Cylinder");
    model.geom("geom1").feature("cyl7").set("h", "tc");
    model.geom("geom1").feature("cyl7").setIndex("pos", "-tc/2", 2);
    model.geom("geom1").feature("cyl7").set("r", "OD/2");
    model.geom("geom1").run("cyl7");
    model.geom("geom1").run("cyl7");
    model.geom("geom1").feature().create("wp1", "WorkPlane");
    model.geom("geom1").feature("wp1").set("quickplane", "yz");
    model.geom("geom1").feature("wp1").geom().feature().create("sq1", "Square");
    model.geom("geom1").feature("wp1").geom().feature().remove("sq1");
    model.geom("geom1").feature("wp1").geom().feature().create("r1", "Rectangle");
    model.geom("geom1").feature("wp1").geom().feature("r1").setIndex("size", "tc", 0);
    model.geom("geom1").feature("wp1").geom().feature("r1").setIndex("size", "2", 1);
    model.geom("geom1").feature("wp1").geom().feature("r1").set("base", "center");
    model.geom("geom1").feature("wp1").geom().run("r1");
    model.geom("geom1").feature("wp1").geom().feature("r1").setIndex("size", "2", 0);
    model.geom("geom1").feature("wp1").geom().feature("r1").setIndex("size", "tc", 1);
    model.geom("geom1").feature("wp1").geom().run("r1");
    model.geom("geom1").feature("wp1").geom().run("r1");
    model.geom("geom1").feature("wp1").geom().feature().create("e1", "Ellipse");
    model.geom("geom1").feature("wp1").geom().feature("e1").set("angle", "180");
    model.geom("geom1").feature("wp1").geom().feature("e1").setIndex("semiaxes", "tc/2", 1);
    model.geom("geom1").feature("wp1").geom().run("e1");
    model.geom("geom1").feature("wp1").geom().feature("e1").set("rot", "90");
    model.geom("geom1").feature("wp1").geom().run("e1");
    model.geom("geom1").feature("wp1").geom().feature("e1").setIndex("semiaxes", "tc/2", 0);
    model.geom("geom1").feature("wp1").geom().feature("e1").setIndex("semiaxes", "1", 1);
    model.geom("geom1").feature("wp1").geom().run("e1");
    model.geom("geom1").feature("wp1").geom().feature("e1").setIndex("pos", "-1", 0);
    model.geom("geom1").feature("wp1").geom().run("e1");
    model.geom("geom1").feature("wp1").geom().feature("e1").setIndex("pos", "1", 0);
    model.geom("geom1").feature("wp1").geom().run("e1");
    model.geom("geom1").feature("wp1").geom().feature("e1").setIndex("semiaxes", ".5", 1);
    model.geom("geom1").feature("wp1").geom().run("e1");

    model.param().set("gwc", "1.5");
    model.param().set("gwo", "2.5");

    model.geom("geom1").feature("wp1").geom().feature("r1").setIndex("size", "gwo", 0);
    model.geom("geom1").feature("wp1").geom().feature("e1").setIndex("semiaxes", "(gwo-gwc)/2", 1);
    model.geom("geom1").feature("wp1").geom().feature("e1").setIndex("pos", "(gwc-gwo)/2", 0);
    model.geom("geom1").feature("wp1").geom().runAll();
    model.geom("geom1").feature("wp1").geom().feature("e1").setIndex("pos", "-(gwc-gwo)/2", 0);
    model.geom("geom1").feature("wp1").geom().run("e1");
    model.geom("geom1").feature("wp1").geom().feature("e1").setIndex("pos", "0", 0);
    model.geom("geom1").feature("wp1").geom().run("e1");
    model.geom("geom1").feature("wp1").geom().feature("e1").setIndex("pos", "-gwo/2", 0);
    model.geom("geom1").feature("wp1").geom().run("e1");
    model.geom("geom1").feature("wp1").geom().feature("e1").setIndex("pos", "gwo/2", 0);
    model.geom("geom1").feature("wp1").geom().run("e1");
    model.geom("geom1").feature("wp1").geom().run("e1");
    model.geom("geom1").feature("wp1").geom().feature().create("e2", "Ellipse");
    model.geom("geom1").feature("wp1").geom().feature().remove("e2");
    model.geom("geom1").feature("wp1").geom().feature().duplicate("e2", "e1");
    model.geom("geom1").feature("wp1").geom().feature("e2").set("rot", "-90");
    model.geom("geom1").feature("wp1").geom().feature("e2").setIndex("pos", "-gwo/2", 0);
    model.geom("geom1").feature("wp1").geom().run("e2");
    model.geom("geom1").feature("wp1").geom().run("e2");
    model.geom("geom1").feature("wp1").geom().feature().create("dif1", "Difference");
    model.geom("geom1").feature("wp1").geom().feature("dif1").selection("input").set(new String[]{"r1"});
    model.geom("geom1").feature("wp1").geom().feature("dif1").selection("input2").set(new String[]{"e1", "e2"});
    model.geom("geom1").feature("wp1").geom().run("dif1");
    model.geom("geom1").run("wp1");
    model.geom("geom1").feature().create("ext1", "Extrude");
    model.geom("geom1").feature("ext1").setIndex("distance", "OD/2", 0);
    model.geom("geom1").feature("ext1").set("reverse", "on");
    model.geom("geom1").run("ext1");
    model.geom("geom1").feature("wp1").set("quickx", "-OD/2");
    model.geom("geom1").feature("ext1").setIndex("distance", "OD", 0);
    model.geom("geom1").runAll();
    model.geom("geom1").feature("ext1").set("reverse", "off");
    model.geom("geom1").runAll();
    model.geom("geom1").run("ext1");
    model.geom("geom1").feature().create("dif1", "Difference");
    model.geom("geom1").feature("dif1").selection("input").set(new String[]{"cyl7"});
    model.geom("geom1").feature("dif1").selection("input2").set(new String[]{"ext1"});
    model.geom("geom1").run("dif1");
    model.geom("geom1").feature("cyl7").name("Magnet Overall Body");
    model.geom("geom1").feature("wp1").name("Rod-Like Magnet Slice Plane");
    model.geom("geom1").feature("ext1").name("Rod-Like Magnet Slice");
    model.geom("geom1").feature("dif1").name("Two Magnet Halves");
    model.geom("geom1").feature().move("blk4", 13);
    model.geom("geom1").feature().move("blk3", 12);
    model.geom("geom1").feature().move("blk2", 11);
    model.geom("geom1").feature().move("blk1", 10);
    model.geom("geom1").feature("blk1").active(true);
    model.geom("geom1").feature("blk2").active(true);
    model.geom("geom1").feature("blk3").active(true);
    model.geom("geom1").feature("blk4").active(true);
    model.geom("geom1").run("blk1");
    model.geom("geom1").runAll();
    model.geom("geom1").feature("blk1").set("rot", "45");
    model.geom("geom1").runAll();
    model.geom("geom1").feature("blk1").set("rot", "0");
    model.geom("geom1").run("blk1");
    model.geom("geom1").feature("blk1").set("axistype", "cartesian");
    model.geom("geom1").feature("blk1").setIndex("ax3", "1", 1);
    model.geom("geom1").run("blk1");
    model.geom("geom1").feature("blk1").setIndex("ax3", "0", 1);
    model.geom("geom1").run("blk1");
    model.geom("geom1").feature("blk1").setIndex("ax3", "1", 1);
    model.geom("geom1").feature("blk1").setIndex("ax3", "0", 2);
    model.geom("geom1").feature("blk1").setIndex("pos", "-tc/2", 1);
    model.geom("geom1").feature("blk1").setIndex("size", "tc", 1);
    model.geom("geom1").feature("blk1").setIndex("size", "(sqrt(OD^2-ID^2)-ID)/2", 2);
    model.geom("geom1").run("blk1");
    model.geom("geom1").feature("blk1").setIndex("pos", "ID/2", 2);
    model.geom("geom1").run("blk1");
    model.geom("geom1").feature("blk1").setIndex("size", "tc", 2);
    model.geom("geom1").feature("blk1").setIndex("size", "(sqrt(OD^2-ID^2)-ID)/2", 1);
    model.geom("geom1").run("blk1");
    model.geom("geom1").feature("blk1").setIndex("size", "ID", 1);
    model.geom("geom1").feature("blk1").setIndex("size", "(sqrt(OD^2-ID^2)-ID)/2", 0);
    model.geom("geom1").run("blk1");
    model.geom("geom1").run("blk1");
    model.geom("geom1").feature("blk1").setIndex("size", "(sqrt(OD^2-ID^2)-ID)/2", 1);
    model.geom("geom1").feature("blk1").setIndex("size", "ID", 0);
    model.geom("geom1").run("blk1");
    model.geom("geom1").feature("blk1").setIndex("size", "ID", 2);
    model.geom("geom1").feature("blk1").setIndex("size", "tc", 0);
    model.geom("geom1").run("blk1");
    model.geom("geom1").feature("blk1").setIndex("pos", "-tc/2", 0);
    model.geom("geom1").feature("blk1").setIndex("pos", "-ID/2", 1);
    model.geom("geom1").run("blk1");
    model.geom("geom1").feature("blk1").set("base", "center");
    model.geom("geom1").feature("blk1").setIndex("pos", "0", 0);
    model.geom("geom1").feature("blk1").setIndex("pos", "0", 1);
    model.geom("geom1").run("blk1");
    model.geom("geom1").feature("blk1").setIndex("pos", "0", 2);
    model.geom("geom1").feature("blk1").setIndex("pos", "OD/2", 1);
    model.geom("geom1").run("blk1");
    model.geom("geom1").feature("blk1").setIndex("pos", "0", 1);
    model.geom("geom1").feature("blk1").setIndex("pos", "OD/2", 0);
    model.geom("geom1").run("blk1");
    model.geom("geom1").feature("blk1").setIndex("pos", "(sqrt(OD^2-ID^2)-ID)/2", 0);
    model.geom("geom1").run("blk1");
    model.geom("geom1").feature("blk1").setIndex("pos", "(OD-ID)/2", 0);
    model.geom("geom1").run("blk1");
    model.geom("geom1").feature("blk1").setIndex("ax3", "1", 0);
    model.geom("geom1").run("blk1");
    model.geom("geom1").feature().remove("blk1");
    model.geom("geom1").run("blk2");
    model.geom("geom1").feature("blk2").active(false);
    model.geom("geom1").run("blk2");
    model.geom("geom1").feature().create("blk5", "Block");
    model.geom("geom1").feature("blk5").setIndex("pos", "-OD/2", 0);
    model.geom("geom1").feature("blk5").setIndex("pos", "0", 0);
    model.geom("geom1").feature("blk5").setIndex("pos", "-OD/2", 1);
    model.geom("geom1").feature("blk5").setIndex("pos", "-tc/2", 2);
    model.geom("geom1").feature("blk5").setIndex("size", "OD", 1);
    model.geom("geom1").feature("blk5").setIndex("size", "tc", 2);
    model.geom("geom1").feature("blk5").setIndex("size", "OD/2", 0);
    model.geom("geom1").run("blk5");
    model.geom("geom1").run("blk5");
    model.geom("geom1").feature().create("int1", "Intersection");
    model.geom("geom1").feature("int1").selection("input").set(new String[]{"blk5", "dif1"});
    model.geom("geom1").feature("int1").set("keep", "on");
    model.geom("geom1").run("int1");
    model.geom("geom1").run();

    model.view("view1").hideEntities().create("hide1");
    model.view("view1").hideEntities("hide1").geom(3);
    model.view("view1").hideEntities("hide1").add(new int[]{1});

    model.geom("geom1").feature().remove("blk3");
    model.geom("geom1").feature().remove("blk4");
    model.geom("geom1").run("int1");
    model.geom("geom1").feature().create("del1", "Delete");
    model.geom("geom1").feature("del1").selection("input").init(3);
    model.geom("geom1").feature("del1").selection("input").set("blk5", new int[]{1});
    model.geom("geom1").run("del1");
    model.geom("geom1").run();

    model.view("view1").hideEntities("hide1").add(new int[]{6});

    model.physics("mfnc").feature("mfc2").selection().set(new int[]{11, 12});
    model.physics("mfnc").feature("mfc2").set("Br", new String[]{"M/sqrt(2)", "M/sqrt(2)", "0"});
    model.physics("mfnc").feature("mfc3").selection().set(new int[]{2, 7});
    model.physics("mfnc").feature("mfc3").set("Br", new String[]{"-M/sqrt(2)", "-M/sqrt(2)", "0"});
    model.physics("mfnc").feature("mfc4").selection().set(new int[]{3, 8});
    model.physics("mfnc").feature("mfc4").set("Br", new String[]{"M/sqrt(2)", "-M/sqrt(2)", "0"});
    model.physics("mfnc").feature("mfc5").selection().set(new int[]{9, 10});
    model.physics("mfnc").feature("mfc5").set("Br", new String[]{"-M/sqrt(2)", "M/sqrt(2)", "0"});

    model.param().remove("vmag");
    model.param().set("vm1", "0");
    model.param().set("vm2", "0");
    model.param().descr("vm2", "0");
    model.param().descr("vm2", "");

    model.physics("es").feature("pot3").set("V0", 1, "vm1");

    model.view("view1").hideEntities("hide1").add(new int[]{5});
    model.view("view1").hideEntities("hide1").add(new int[]{4, 13, 14});

    model.physics("es").feature("pot3").selection()
         .set(new int[]{8, 9, 10, 13, 14, 30, 31, 32, 35, 36, 53, 54, 55, 56, 57, 59, 60, 61, 62, 63, 79, 80});
    model.physics("es").feature().duplicate("pot6", "pot3");
    model.physics("es").feature("pot6").selection()
         .set(new int[]{5, 6, 7, 11, 12, 27, 28, 29, 33, 34, 42, 43, 44, 45, 47, 48, 49, 50, 51, 52, 77, 78});
    model.physics("es").feature("pot6").set("V0", 1, "vm2");
    model.physics("es").feature("pot1").name("Rod 1");
    model.physics("es").feature("pot2").name("Rod 2");
    model.physics("es").feature("pot3").name("Mag 1");
    model.physics("es").feature("pot4").name("Rod 3");
    model.physics("es").feature("pot5").name("Rod 4");
    model.physics("es").feature("pot6").name("Mag 2");

    model.view("view1").hideEntities().clear();
    model.view("view1").hideEntities().create("hide1");
    model.view("view1").hideEntities("hide1").geom(2);
    model.view("view1").hideEntities("hide1").add(new int[]{3});

    model.param().set("vr3", "1");
    model.param().set("vr4", "1");
    model.param().set("vr2", "-1");
    model.param().set("vr4", "-1");

    model.sol("sol1").study("std1");
    model.sol("sol1").feature().remove("s1");
    model.sol("sol1").feature().remove("v1");
    model.sol("sol1").feature().remove("st1");
    model.sol("sol1").feature().create("st1", "StudyStep");
    model.sol("sol1").feature("st1").set("study", "std1");
    model.sol("sol1").feature("st1").set("studystep", "stat");
    model.sol("sol1").feature().create("v1", "Variables");
    model.sol("sol1").feature("v1").set("control", "stat");
    model.sol("sol1").feature().create("s1", "Stationary");
    model.sol("sol1").feature("s1").feature().create("se1", "Segregated");
    model.sol("sol1").feature("s1").feature("se1").feature().remove("ssDef");
    model.sol("sol1").feature("s1").feature("se1").feature().create("ss1", "SegregatedStep");
    model.sol("sol1").feature("s1").feature("se1").feature("ss1").set("segvar", new String[]{"mod1_V"});
    model.sol("sol1").feature("s1").feature().create("i1", "Iterative");
    model.sol("sol1").feature("s1").feature("i1").set("prefuntype", "left");
    model.sol("sol1").feature("s1").feature("i1").set("maxlinit", 10000);
    model.sol("sol1").feature("s1").feature("i1").set("linsolver", "cg");
    model.sol("sol1").feature("s1").feature("i1").set("rhob", 400);
    model.sol("sol1").feature("s1").feature("se1").feature("ss1").set("linsolver", "i1");
    model.sol("sol1").feature("s1").feature("i1").feature().create("mg1", "Multigrid");
    model.sol("sol1").feature("s1").feature("i1").feature("mg1").set("amgauto", 3);
    model.sol("sol1").feature("s1").feature("i1").feature("mg1").set("scale", 2);
    model.sol("sol1").feature("s1").feature("i1").feature("mg1").set("gmglevels", 1);
    model.sol("sol1").feature("s1").feature("i1").feature("mg1").set("massem", true);
    model.sol("sol1").feature("s1").feature("i1").feature("mg1").set("rmethod", "longest");
    model.sol("sol1").feature("s1").feature("i1").feature("mg1").set("mkeep", false);
    model.sol("sol1").feature("s1").feature("i1").feature("mg1").set("mgcycle", "v");
    model.sol("sol1").feature("s1").feature("i1").feature("mg1").set("prefun", "amg");
    model.sol("sol1").feature("s1").feature("i1").feature("mg1").set("mcasegen", "any");
    model.sol("sol1").feature("s1").feature("i1").feature("mg1").set("mglevels", 5);
    model.sol("sol1").feature("s1").feature("i1").feature("mg1").set("iter", 2);
    model.sol("sol1").feature("s1").feature("i1").feature("mg1").set("maxcoarsedof", 5000);
    model.sol("sol1").feature("s1").feature("se1").feature().create("ss2", "SegregatedStep");
    model.sol("sol1").feature("s1").feature("se1").feature("ss2").set("segvar", new String[]{"mod1_Vm"});
    model.sol("sol1").feature("s1").feature().create("i2", "Iterative");
    model.sol("sol1").feature("s1").feature("i2").set("prefuntype", "left");
    model.sol("sol1").feature("s1").feature("i2").set("maxlinit", 10000);
    model.sol("sol1").feature("s1").feature("i2").set("linsolver", "cg");
    model.sol("sol1").feature("s1").feature("i2").set("rhob", 400);
    model.sol("sol1").feature("s1").feature("se1").feature("ss2").set("linsolver", "i2");
    model.sol("sol1").feature("s1").feature("i2").feature().create("mg1", "Multigrid");
    model.sol("sol1").feature("s1").feature("i2").feature("mg1").set("amgauto", 3);
    model.sol("sol1").feature("s1").feature("i2").feature("mg1").set("scale", 2);
    model.sol("sol1").feature("s1").feature("i2").feature("mg1").set("gmglevels", 1);
    model.sol("sol1").feature("s1").feature("i2").feature("mg1").set("massem", true);
    model.sol("sol1").feature("s1").feature("i2").feature("mg1").set("rmethod", "longest");
    model.sol("sol1").feature("s1").feature("i2").feature("mg1").set("mkeep", false);
    model.sol("sol1").feature("s1").feature("i2").feature("mg1").set("mgcycle", "v");
    model.sol("sol1").feature("s1").feature("i2").feature("mg1").set("prefun", "amg");
    model.sol("sol1").feature("s1").feature("i2").feature("mg1").set("mcasegen", "any");
    model.sol("sol1").feature("s1").feature("i2").feature("mg1").set("mglevels", 5);
    model.sol("sol1").feature("s1").feature("i2").feature("mg1").set("iter", 2);

    return model;
  }

  public static Model run10(Model model) {
    model.sol("sol1").feature("s1").feature("i2").feature("mg1").set("maxcoarsedof", 5000);
    model.sol("sol1").feature("s1").feature().remove("fcDef");
    model.sol("sol1").attach("std1");
    model.sol("sol1").runAll();

    model.result("pg1").run();
    model.result("pg3").run();
    model.result("pg3").run();
    model.result("pg3").feature("surf1").set("expr", "mfnc.normB");
    model.result("pg3").run();
    model.result("pg3").run();
    model.result("pg3").run();
    model.result("pg3").feature("surf1").set("rangecolormax", "0.9");
    model.result("pg3").feature("surf1").set("unit", "G");
    model.result("pg3").set("allowtableupdate", true);
    model.result("pg3").set("renderdatacached", true);
    model.result().table("evl2").addRow(new double[]{0.5227737426757812, 0, 5795.720233926627});
    model.result().table("evl2").addRow(new double[]{0.5122125148773193, 0, 5681.15568303691});
    model.result().table("evl2").addRow(new double[]{0.4805295467376709, -0.010560989379882812, 5306.161608874173});
    model.result().table("evl2").addRow(new double[]{0.4805295467376709, -0.010560989379882812, 5306.161608874173});
    model.result().table("evl2").addRow(new double[]{0.4805295467376709, -0.010560989379882812, 5306.161608874173});
    model.result().table("evl2").addRow(new double[]{0.4910902976989746, -0.010560989379882812, 5420.720987199118});
    model.result().table("evl2").addRow(new double[]{0.5016515254974365, -0.010560989379882812, 5535.285538088837});
    model.result().table("evl2").addRow(new double[]{0.5016515254974365, -0.010560989379882812, 5535.285538088837});
    model.result().dataset("cpl1").name("YZ");
    model.result().dataset("cpl2").name("WZ");
    model.result().dataset("cpl3").name("XY");
    model.result().dataset().duplicate("cpl4", "cpl1");
    model.result().dataset("cpl4").name("XZ");
    model.result().dataset("cpl4").set("quickplane", "zx");
    model.result("pg3").run();
    model.result("pg3").feature().move("surf1", 0);
    model.result("pg3").run();
    model.result("pg3").set("data", "cpl4");
    model.result("pg3").run();
    model.result("pg3").set("allowtableupdate", true);
    model.result("pg3").set("renderdatacached", true);
    model.result().table("evl2").addRow(new double[]{0.05574321746826172, 0.012387275695800781, 311.1370334411502});
    model.result().table("evl2").addRow(new double[]{0.05574321746826172, 0.012387275695800781, 311.1370334411502});
    model.result().table("evl2").addRow(new double[]{0.030968427658081055, -0.4707207679748535, 2899.551330931254});
    model.result().table("evl2").addRow(new double[]{-0.018581151962280273, -0.6069819927215576, 3434.676601382904});
    model.result().table("evl2").addRow(new double[]{-0.018581151962280273, -0.507882833480835, 3055.96965500983});
    model.result().table("evl2").addRow(new double[]{0.04335594177246094, -0.45833325386047363, 2848.611553737108});
    model.result().table("evl2").addRow(new double[]{0.05574321746826172, -0.4954955577850342, 2987.026230151332});
    model.result().table("evl2").addRow(new double[]{0.08051824569702148, -0.4954955577850342, 2979.824323471726});
    model.result().table("evl2").addRow(new double[]{0.08051824569702148, -0.4954955577850342, 2979.824323471726});
    model.result().table("evl2").addRow(new double[]{0.08051824569702148, -0.507882833480835, 3027.1622362106505});
    model.result("pg3").set("data", "cpl3");
    model.result("pg3").run();

    model.param().set("vr2", "1");
    model.param().set("vr4", "1");
    model.param().set("vr1", "12.5e3");
    model.param().set("vr2", "12.5e3");
    model.param().set("vr3", "12.5e3");
    model.param().set("vr4", "12.5e3");
    model.param().set("M", "1.24");
    model.param().set("vm1", "7e3");
    model.param().set("vm2", "-7e3");
    model.param().set("vr3", "0");
    model.param().set("vr4", "0");
    model.param().set("vr2", "0");
    model.param().set("vr1", "0");

    model.sol("sol1").study("std1");
    model.sol("sol1").feature().remove("s1");
    model.sol("sol1").feature().remove("v1");
    model.sol("sol1").feature().remove("st1");
    model.sol("sol1").feature().create("st1", "StudyStep");
    model.sol("sol1").feature("st1").set("study", "std1");
    model.sol("sol1").feature("st1").set("studystep", "stat");
    model.sol("sol1").feature().create("v1", "Variables");
    model.sol("sol1").feature("v1").set("control", "stat");
    model.sol("sol1").feature().create("s1", "Stationary");
    model.sol("sol1").feature("s1").feature().create("se1", "Segregated");
    model.sol("sol1").feature("s1").feature("se1").feature().remove("ssDef");
    model.sol("sol1").feature("s1").feature("se1").feature().create("ss1", "SegregatedStep");
    model.sol("sol1").feature("s1").feature("se1").feature("ss1").set("segvar", new String[]{"mod1_V"});
    model.sol("sol1").feature("s1").feature().create("i1", "Iterative");
    model.sol("sol1").feature("s1").feature("i1").set("prefuntype", "left");
    model.sol("sol1").feature("s1").feature("i1").set("maxlinit", 10000);
    model.sol("sol1").feature("s1").feature("i1").set("linsolver", "cg");
    model.sol("sol1").feature("s1").feature("i1").set("rhob", 400);
    model.sol("sol1").feature("s1").feature("se1").feature("ss1").set("linsolver", "i1");
    model.sol("sol1").feature("s1").feature("i1").feature().create("mg1", "Multigrid");
    model.sol("sol1").feature("s1").feature("i1").feature("mg1").set("amgauto", 3);
    model.sol("sol1").feature("s1").feature("i1").feature("mg1").set("scale", 2);
    model.sol("sol1").feature("s1").feature("i1").feature("mg1").set("gmglevels", 1);
    model.sol("sol1").feature("s1").feature("i1").feature("mg1").set("massem", true);
    model.sol("sol1").feature("s1").feature("i1").feature("mg1").set("rmethod", "longest");
    model.sol("sol1").feature("s1").feature("i1").feature("mg1").set("mkeep", false);
    model.sol("sol1").feature("s1").feature("i1").feature("mg1").set("mgcycle", "v");
    model.sol("sol1").feature("s1").feature("i1").feature("mg1").set("prefun", "amg");
    model.sol("sol1").feature("s1").feature("i1").feature("mg1").set("mcasegen", "any");
    model.sol("sol1").feature("s1").feature("i1").feature("mg1").set("mglevels", 5);
    model.sol("sol1").feature("s1").feature("i1").feature("mg1").set("iter", 2);
    model.sol("sol1").feature("s1").feature("i1").feature("mg1").set("maxcoarsedof", 5000);
    model.sol("sol1").feature("s1").feature("se1").feature().create("ss2", "SegregatedStep");
    model.sol("sol1").feature("s1").feature("se1").feature("ss2").set("segvar", new String[]{"mod1_Vm"});
    model.sol("sol1").feature("s1").feature().create("i2", "Iterative");
    model.sol("sol1").feature("s1").feature("i2").set("prefuntype", "left");
    model.sol("sol1").feature("s1").feature("i2").set("maxlinit", 10000);
    model.sol("sol1").feature("s1").feature("i2").set("linsolver", "cg");
    model.sol("sol1").feature("s1").feature("i2").set("rhob", 400);
    model.sol("sol1").feature("s1").feature("se1").feature("ss2").set("linsolver", "i2");
    model.sol("sol1").feature("s1").feature("i2").feature().create("mg1", "Multigrid");
    model.sol("sol1").feature("s1").feature("i2").feature("mg1").set("amgauto", 3);
    model.sol("sol1").feature("s1").feature("i2").feature("mg1").set("scale", 2);
    model.sol("sol1").feature("s1").feature("i2").feature("mg1").set("gmglevels", 1);
    model.sol("sol1").feature("s1").feature("i2").feature("mg1").set("massem", true);
    model.sol("sol1").feature("s1").feature("i2").feature("mg1").set("rmethod", "longest");
    model.sol("sol1").feature("s1").feature("i2").feature("mg1").set("mkeep", false);
    model.sol("sol1").feature("s1").feature("i2").feature("mg1").set("mgcycle", "v");
    model.sol("sol1").feature("s1").feature("i2").feature("mg1").set("prefun", "amg");
    model.sol("sol1").feature("s1").feature("i2").feature("mg1").set("mcasegen", "any");
    model.sol("sol1").feature("s1").feature("i2").feature("mg1").set("mglevels", 5);
    model.sol("sol1").feature("s1").feature("i2").feature("mg1").set("iter", 2);
    model.sol("sol1").feature("s1").feature("i2").feature("mg1").set("maxcoarsedof", 5000);
    model.sol("sol1").feature("s1").feature().remove("fcDef");
    model.sol("sol1").attach("std1");
    model.sol("sol1").runAll();

    model.result("pg1").run();
    model.result("pg3").run();
    model.result("pg3").run();
    model.result("pg3").feature("surf1").set("expr", "es.normE");
    model.result("pg3").feature("surf1").set("unit", "kV/cm");
    model.result("pg3").run();
    model.result("pg3").feature("surf1").set("rangecoloractive", "on");
    model.result("pg3").feature("surf1").set("rangecolormax", "123.037543358524");
    model.result("pg3").feature("surf1").set("data", "cpl1");
    model.result("pg3").run();
    model.result("pg3").feature("surf1").set("data", "cpl4");
    model.result("pg3").run();
    model.result("pg3").feature("surf1").set("data", "cpl3");
    model.result("pg3").run();
    model.result("pg3").feature("surf1").set("data", "cpl2");
    model.result("pg3").run();

    model.param().set("mir", "2");
    model.param().set("mang", "30");

    model.geom("geom1").run("del1");
    model.geom("geom1").feature().create("cyl8", "Cylinder");
    model.geom("geom1").feature("cyl8").set("axistype", "cartesian");
    model.geom("geom1").feature("cyl8").setIndex("ax3", "0", 2);
    model.geom("geom1").feature("cyl8").setIndex("ax3", "sin(mang)", 0);
    model.geom("geom1").feature("cyl8").setIndex("ax3", "cos(mang)", 1);
    model.geom("geom1").feature("cyl8").set("r", "tc/2");
    model.geom("geom1").feature("cyl8").set("h", "OD/2-mir");
    model.geom("geom1").run("cyl8");
    model.geom("geom1").feature("cyl8").setIndex("pos", "sin(mir)", 0);
    model.geom("geom1").feature("cyl8").setIndex("pos", "cos(mir)", 1);
    model.geom("geom1").run("cyl8");
    model.geom("geom1").feature("cyl8").setIndex("pos", "-sin(mir)", 0);
    model.geom("geom1").feature("cyl8").setIndex("pos", "-cos(mir)", 1);
    model.geom("geom1").run("cyl8");
    model.geom("geom1").feature("cyl8").setIndex("pos", "-sin(mang)", 0);
    model.geom("geom1").feature("cyl8").setIndex("pos", "-cos(mang)", 1);
    model.geom("geom1").run("cyl8");
    model.geom("geom1").feature("cyl8").setIndex("pos", "sin(mang)", 0);
    model.geom("geom1").feature("cyl8").setIndex("pos", "cos(mang)", 1);
    model.geom("geom1").run("cyl8");
    model.geom("geom1").feature("cyl8").setIndex("pos", "sin(mang)*mir", 0);
    model.geom("geom1").feature("cyl8").setIndex("pos", "cos(mang)*mir", 1);
    model.geom("geom1").run("cyl8");

    model.param().set("mang", "pi/6");

    model.geom("geom1").runAll();

    model.view("view1").hideObjects("hide1").add("dif1", new int[]{2});
    model.view("view1").hideObjects("hide1").add("int1", new int[]{2});

    model.geom("geom1").feature().duplicate("cyl9", "cyl8");
    model.geom("geom1").feature("cyl9").setIndex("ax3", "-sin(mang)", 0);
    model.geom("geom1").feature("cyl9").setIndex("pos", "-sin(mang)*mir", 0);
    model.geom("geom1").run("cyl9");

    model.param().set("mang", "35*pi/180");

    model.geom("geom1").runAll();

    model.view("view1").hideObjects().clear();
    model.view("view1").hideObjects().create("hide1");
    model.view("view1").hideObjects("hide1").init(3);
    model.view("view1").hideObjects("hide1").add("cyl4", new int[]{1});
    model.view("view1").hideObjects("hide1").add("cyl3", new int[]{1});

    model.param().set("mir", "2.1");

    model.geom("geom1").runAll();
    model.geom("geom1").feature("cyl8").set("h", "sqrt(OD^2-tc^2)/2-mir");
    model.geom("geom1").runAll();
    model.geom("geom1").feature("cyl9").set("h", "sqrt(OD^2-tc^2)/2-mir");
    model.geom("geom1").runAll();

    model.view("view1").hideObjects("hide1").add("dif1", new int[]{2});

    model.param().set("mr", "2.9");

    model.geom("geom1").feature("cyl8").set("r", "md/2");
    model.geom("geom1").feature("cyl9").set("r", "md/2");
    model.geom("geom1").feature("cyl9").set("h", "sqrt(OD^2-md^2)/2-mir");
    model.geom("geom1").feature("cyl8").set("h", "sqrt(OD^2-md^2)/2-mir");

    model.param().remove("mr");
    model.param().set("md", "2.9");

    model.geom("geom1").runAll();
    model.geom("geom1").feature().duplicate("cyl10", "cyl8");
    model.geom("geom1").feature().duplicate("cyl11", "cyl9");
    model.geom("geom1").feature("cyl10").setIndex("pos", "-cos(mang)*mir", 1);
    model.geom("geom1").feature("cyl10").setIndex("ax3", "-cos(mang)", 1);
    model.geom("geom1").run("cyl10");
    model.geom("geom1").feature("cyl11").setIndex("pos", "-cos(mang)*mir", 1);
    model.geom("geom1").feature("cyl11").setIndex("ax3", "-cos(mang)", 1);
    model.geom("geom1").runAll();

    model.view("view1").hideObjects().clear();

    model.geom("geom1").run();

    model.view("view1").hideEntities().create("hide2");
    model.view("view1").hideEntities("hide2").geom(3);
    model.view("view1").hideEntities("hide2").add(new int[]{1});
    model.view("view1").hideEntities("hide2").add(new int[]{8});

    model.physics("mfnc").feature("mfc2").selection().set(new int[]{20});

    model.view("view1").hideEntities("hide2").add(new int[]{16});
    model.view("view1").hideEntities("hide2").add(new int[]{15});

    model.physics("mfnc").feature("mfc2").selection().set(new int[]{18, 20});
    model.physics("mfnc").feature("mfc3").selection().set(new int[]{4, 11});
    model.physics("mfnc").feature("mfc4").selection().set(new int[]{});

    model.view("view1").hideEntities("hide2").add(new int[]{3, 10});

    model.physics("mfnc").feature("mfc4").selection().set(new int[]{5, 10});

    model.view("view1").hideEntities("hide2").add(new int[]{13, 14});

    model.physics("mfnc").feature("mfc5").selection().set(new int[]{17, 19});

    model.view("view1").hideEntities("hide2").add(new int[]{2});
    model.view("view1").hideEntities("hide2").add(new int[]{9});

    model.physics("mfnc").feature("mfc2").set("Br", new String[]{"M*sin(mang)", "M*cos(mang)", "0"});
    model.physics("mfnc").feature("mfc3").set("Br", new String[]{"-M*sin(mang)", "-M*cos(mang)", "0"});
    model.physics("mfnc").feature("mfc4").set("Br", new String[]{"M*sin(mang)", "-M*cos(mang)", "0"});
    model.physics("mfnc").feature("mfc5").set("Br", new String[]{"-M*sin(mang)", "M*cos(mang)", "0"});

    model.view("view1").hideEntities().clear();

    model.sol("sol1").study("std1");
    model.sol("sol1").feature().remove("s1");
    model.sol("sol1").feature().remove("v1");
    model.sol("sol1").feature().remove("st1");
    model.sol("sol1").feature().create("st1", "StudyStep");
    model.sol("sol1").feature("st1").set("study", "std1");
    model.sol("sol1").feature("st1").set("studystep", "stat");
    model.sol("sol1").feature().create("v1", "Variables");
    model.sol("sol1").feature("v1").set("control", "stat");
    model.sol("sol1").feature().create("s1", "Stationary");
    model.sol("sol1").feature("s1").feature().create("se1", "Segregated");
    model.sol("sol1").feature("s1").feature("se1").feature().remove("ssDef");
    model.sol("sol1").feature("s1").feature("se1").feature().create("ss1", "SegregatedStep");
    model.sol("sol1").feature("s1").feature("se1").feature("ss1").set("segvar", new String[]{"mod1_V"});
    model.sol("sol1").feature("s1").feature().create("i1", "Iterative");
    model.sol("sol1").feature("s1").feature("i1").set("prefuntype", "left");
    model.sol("sol1").feature("s1").feature("i1").set("maxlinit", 10000);
    model.sol("sol1").feature("s1").feature("i1").set("linsolver", "cg");
    model.sol("sol1").feature("s1").feature("i1").set("rhob", 400);
    model.sol("sol1").feature("s1").feature("se1").feature("ss1").set("linsolver", "i1");
    model.sol("sol1").feature("s1").feature("i1").feature().create("mg1", "Multigrid");
    model.sol("sol1").feature("s1").feature("i1").feature("mg1").set("amgauto", 3);
    model.sol("sol1").feature("s1").feature("i1").feature("mg1").set("scale", 2);
    model.sol("sol1").feature("s1").feature("i1").feature("mg1").set("gmglevels", 1);
    model.sol("sol1").feature("s1").feature("i1").feature("mg1").set("massem", true);
    model.sol("sol1").feature("s1").feature("i1").feature("mg1").set("rmethod", "longest");
    model.sol("sol1").feature("s1").feature("i1").feature("mg1").set("mkeep", false);
    model.sol("sol1").feature("s1").feature("i1").feature("mg1").set("mgcycle", "v");
    model.sol("sol1").feature("s1").feature("i1").feature("mg1").set("prefun", "amg");
    model.sol("sol1").feature("s1").feature("i1").feature("mg1").set("mcasegen", "any");
    model.sol("sol1").feature("s1").feature("i1").feature("mg1").set("mglevels", 5);
    model.sol("sol1").feature("s1").feature("i1").feature("mg1").set("iter", 2);
    model.sol("sol1").feature("s1").feature("i1").feature("mg1").set("maxcoarsedof", 5000);
    model.sol("sol1").feature("s1").feature("se1").feature().create("ss2", "SegregatedStep");
    model.sol("sol1").feature("s1").feature("se1").feature("ss2").set("segvar", new String[]{"mod1_Vm"});
    model.sol("sol1").feature("s1").feature().create("i2", "Iterative");
    model.sol("sol1").feature("s1").feature("i2").set("prefuntype", "left");
    model.sol("sol1").feature("s1").feature("i2").set("maxlinit", 10000);
    model.sol("sol1").feature("s1").feature("i2").set("linsolver", "cg");
    model.sol("sol1").feature("s1").feature("i2").set("rhob", 400);
    model.sol("sol1").feature("s1").feature("se1").feature("ss2").set("linsolver", "i2");
    model.sol("sol1").feature("s1").feature("i2").feature().create("mg1", "Multigrid");
    model.sol("sol1").feature("s1").feature("i2").feature("mg1").set("amgauto", 3);
    model.sol("sol1").feature("s1").feature("i2").feature("mg1").set("scale", 2);
    model.sol("sol1").feature("s1").feature("i2").feature("mg1").set("gmglevels", 1);
    model.sol("sol1").feature("s1").feature("i2").feature("mg1").set("massem", true);
    model.sol("sol1").feature("s1").feature("i2").feature("mg1").set("rmethod", "longest");
    model.sol("sol1").feature("s1").feature("i2").feature("mg1").set("mkeep", false);
    model.sol("sol1").feature("s1").feature("i2").feature("mg1").set("mgcycle", "v");
    model.sol("sol1").feature("s1").feature("i2").feature("mg1").set("prefun", "amg");
    model.sol("sol1").feature("s1").feature("i2").feature("mg1").set("mcasegen", "any");
    model.sol("sol1").feature("s1").feature("i2").feature("mg1").set("mglevels", 5);
    model.sol("sol1").feature("s1").feature("i2").feature("mg1").set("iter", 2);
    model.sol("sol1").feature("s1").feature("i2").feature("mg1").set("maxcoarsedof", 5000);
    model.sol("sol1").feature("s1").feature().remove("fcDef");
    model.sol("sol1").attach("std1");
    model.sol("sol1").runAll();

    model.result("pg1").run();
    model.result("pg3").run();
    model.result("pg1").run();

    model.view("view1").hideEntities().create("hide1");
    model.view("view1").hideEntities("hide1").geom(3);
    model.view("view1").hideEntities("hide1").add(new int[]{1});
    model.view("view1").hideEntities("hide1").add(new int[]{2, 3, 7, 8, 13, 16, 22});
    model.view("view1").hideEntities("hide1").add(new int[]{9, 10, 14, 15});

    model.result("pg1").run();

    model.physics("mfnc").feature("mfc4").selection().set(new int[]{5, 12});

    model.view("view1").hideEntities().clear();

    model.sol("sol1").study("std1");
    model.sol("sol1").feature().remove("s1");
    model.sol("sol1").feature().remove("v1");
    model.sol("sol1").feature().remove("st1");
    model.sol("sol1").feature().create("st1", "StudyStep");
    model.sol("sol1").feature("st1").set("study", "std1");
    model.sol("sol1").feature("st1").set("studystep", "stat");
    model.sol("sol1").feature().create("v1", "Variables");
    model.sol("sol1").feature("v1").set("control", "stat");
    model.sol("sol1").feature().create("s1", "Stationary");
    model.sol("sol1").feature("s1").feature().create("se1", "Segregated");
    model.sol("sol1").feature("s1").feature("se1").feature().remove("ssDef");
    model.sol("sol1").feature("s1").feature("se1").feature().create("ss1", "SegregatedStep");
    model.sol("sol1").feature("s1").feature("se1").feature("ss1").set("segvar", new String[]{"mod1_V"});
    model.sol("sol1").feature("s1").feature().create("i1", "Iterative");
    model.sol("sol1").feature("s1").feature("i1").set("prefuntype", "left");
    model.sol("sol1").feature("s1").feature("i1").set("maxlinit", 10000);
    model.sol("sol1").feature("s1").feature("i1").set("linsolver", "cg");
    model.sol("sol1").feature("s1").feature("i1").set("rhob", 400);
    model.sol("sol1").feature("s1").feature("se1").feature("ss1").set("linsolver", "i1");
    model.sol("sol1").feature("s1").feature("i1").feature().create("mg1", "Multigrid");
    model.sol("sol1").feature("s1").feature("i1").feature("mg1").set("amgauto", 3);
    model.sol("sol1").feature("s1").feature("i1").feature("mg1").set("scale", 2);
    model.sol("sol1").feature("s1").feature("i1").feature("mg1").set("gmglevels", 1);
    model.sol("sol1").feature("s1").feature("i1").feature("mg1").set("massem", true);
    model.sol("sol1").feature("s1").feature("i1").feature("mg1").set("rmethod", "longest");
    model.sol("sol1").feature("s1").feature("i1").feature("mg1").set("mkeep", false);
    model.sol("sol1").feature("s1").feature("i1").feature("mg1").set("mgcycle", "v");
    model.sol("sol1").feature("s1").feature("i1").feature("mg1").set("prefun", "amg");
    model.sol("sol1").feature("s1").feature("i1").feature("mg1").set("mcasegen", "any");
    model.sol("sol1").feature("s1").feature("i1").feature("mg1").set("mglevels", 5);
    model.sol("sol1").feature("s1").feature("i1").feature("mg1").set("iter", 2);
    model.sol("sol1").feature("s1").feature("i1").feature("mg1").set("maxcoarsedof", 5000);
    model.sol("sol1").feature("s1").feature("se1").feature().create("ss2", "SegregatedStep");
    model.sol("sol1").feature("s1").feature("se1").feature("ss2").set("segvar", new String[]{"mod1_Vm"});
    model.sol("sol1").feature("s1").feature().create("i2", "Iterative");
    model.sol("sol1").feature("s1").feature("i2").set("prefuntype", "left");
    model.sol("sol1").feature("s1").feature("i2").set("maxlinit", 10000);
    model.sol("sol1").feature("s1").feature("i2").set("linsolver", "cg");
    model.sol("sol1").feature("s1").feature("i2").set("rhob", 400);
    model.sol("sol1").feature("s1").feature("se1").feature("ss2").set("linsolver", "i2");
    model.sol("sol1").feature("s1").feature("i2").feature().create("mg1", "Multigrid");
    model.sol("sol1").feature("s1").feature("i2").feature("mg1").set("amgauto", 3);
    model.sol("sol1").feature("s1").feature("i2").feature("mg1").set("scale", 2);
    model.sol("sol1").feature("s1").feature("i2").feature("mg1").set("gmglevels", 1);
    model.sol("sol1").feature("s1").feature("i2").feature("mg1").set("massem", true);
    model.sol("sol1").feature("s1").feature("i2").feature("mg1").set("rmethod", "longest");
    model.sol("sol1").feature("s1").feature("i2").feature("mg1").set("mkeep", false);
    model.sol("sol1").feature("s1").feature("i2").feature("mg1").set("mgcycle", "v");
    model.sol("sol1").feature("s1").feature("i2").feature("mg1").set("prefun", "amg");
    model.sol("sol1").feature("s1").feature("i2").feature("mg1").set("mcasegen", "any");
    model.sol("sol1").feature("s1").feature("i2").feature("mg1").set("mglevels", 5);
    model.sol("sol1").feature("s1").feature("i2").feature("mg1").set("iter", 2);
    model.sol("sol1").feature("s1").feature("i2").feature("mg1").set("maxcoarsedof", 5000);
    model.sol("sol1").feature("s1").feature().remove("fcDef");
    model.sol("sol1").attach("std1");
    model.sol("sol1").runAll();

    model.result("pg1").run();
    model.result("pg3").run();
    model.result("pg3").run();
    model.result("pg3").feature("surf1").set("expr", "mfnc.normB");
    model.result("pg3").feature("surf1").set("unit", "G");
    model.result("pg3").run();
    model.result("pg3").run();
    model.result("pg3").feature("surf1").set("rangecoloractive", "on");
    model.result("pg3").feature("surf1").set("rangecolormax", "5000");
    model.result("pg3").set("allowtableupdate", true);
    model.result("pg3").set("renderdatacached", true);
    model.result().table("evl2").addRow(new double[]{0.9764561653137207, -0.053873538970947266, 2229.988554316766});
    model.result().table("evl2").addRow(new double[]{0.9764561653137207, -0.053873538970947266, 2229.988554316766});
    model.result().table("evl2").addRow(new double[]{0.989924430847168, -0.053873538970947266, 2261.282581041449});
    model.result().table("evl2").addRow(new double[]{1.0168614387512207, -0.0404052734375, 2327.2318825336097});
    model.result("pg3").feature("surf1").set("data", "cpl1");
    model.result("pg3").run();
    model.result("pg3").set("allowtableupdate", true);
    model.result("pg3").set("renderdatacached", true);
    model.result().table("evl2").addRow(new double[]{1.0033926963806152, -0.013468265533447266, 2388.9217794401266});
    model.result().table("evl2").addRow(new double[]{1.0033926963806152, -0.013468265533447266, 2388.9217794401266});
    model.result().table("evl2").addRow(new double[]{1.0033926963806152, -0.013468265533447266, 2388.9217794401266});
    model.result().table("evl2").addRow(new double[]{1.0033926963806152, -0.013468265533447266, 2388.9217794401266});
    model.result("pg3").feature("surf1").set("data", "cpl4");
    model.result("pg3").run();
    model.result("pg3").set("allowtableupdate", true);
    model.result("pg3").set("renderdatacached", true);
    model.result().table("evl2")
         .addRow(new double[]{-0.006734132766723633, -1.0235955715179443, 2044.8552124904636});
    model.result().table("evl2")
         .addRow(new double[]{-0.006734132766723633, -1.0235955715179443, 2044.8552124904636});
    model.result().table("evl2").addRow(new double[]{0.006734371185302734, -0.7272915840148926, 1506.5153813896893});
    model.result().table("evl2")
         .addRow(new double[]{-0.006734132766723633, -0.7272915840148926, 1503.6128060438973});
    model.result("pg3").feature("surf1").set("data", "cpl1");
    model.result("pg3").run();
    model.result("pg3").run();
    model.result("pg3").run();
    model.result("pg3").feature("surf1").set("data", "parent");
    model.result("pg3").run();
    model.result("pg3").set("allowtableupdate", true);
    model.result("pg3").set("renderdatacached", true);
    model.result().table("evl2").addRow(new double[]{-1.9596467018127441, 0.026936769485473633, 2780.4603875210464});
    model.result().table("evl2").addRow(new double[]{1.8923048973083496, 0.053873538970947266, 2877.943227648927});
    model.result().table("evl2").addRow(new double[]{1.865368366241455, 0.026936769485473633, 2861.197011303931});
    model.result().table("evl2").addRow(new double[]{1.7576212882995605, 0.013468265533447266, 2848.318083935237});
    model.result().table("evl2").addRow(new double[]{-0.0606074333190918, 2.3839004039764404, 11004.035327531958});

    model.geom("geom1").run("cyl11");
    model.geom("geom1").feature().create("cone1", "Cone");
    model.geom("geom1").feature().move("cone1", 15);
    model.geom("geom1").feature("cone1").set("r", "md/2");
    model.geom("geom1").feature("cone1").set("axistype", "cartesian");
    model.geom("geom1").feature("cone1").setIndex("ax3", "sin(mang)", 0);
    model.geom("geom1").feature("cone1").setIndex("ax3", "cos(mang)", 1);
    model.geom("geom1").feature("cone1").setIndex("ax3", "0", 2);
    model.geom("geom1").feature("cone1").setIndex("pos", "sin(mang)*mir", 0);
    model.geom("geom1").feature("cone1").setIndex("pos", "sin(mang)*mir", 1);
    model.geom("geom1").feature("cone1").setIndex("pos", "cos(mang)*mir", 1);
    model.geom("geom1").run("cone1");

    model.view("view1").hideObjects().create("hide1");
    model.view("view1").hideObjects("hide1").init(3);
    model.view("view1").hideObjects("hide1").add("cyl4", new int[]{1});
    model.view("view1").hideObjects("hide1").add("dif1", new int[]{1, 2});
    model.view("view1").hideObjects("hide1").add("int1", new int[]{1, 2});
    model.view("view1").hideObjects("hide1").add("cyl3", new int[]{1});

    model.geom("geom1").feature("cone1").set("h", "1");
    model.geom("geom1").feature("cone1").set("rot", "180");
    model.geom("geom1").run("cone1");
    model.geom("geom1").runAll();
    model.geom("geom1").feature("cone1").set("h", "100");
    model.geom("geom1").run("cyl8");
    model.geom("geom1").feature("cone1").set("specifytop", "radius");
    model.geom("geom1").run("cone1");
    model.geom("geom1").feature("cone1").set("h", "1");
    model.geom("geom1").run("cone1");
    model.geom("geom1").feature("cone1").set("rot", "0");
    model.geom("geom1").run("cone1");
    model.geom("geom1").feature("cone1").setIndex("ax3", "-sin(mang)", 0);
    model.geom("geom1").feature("cone1").setIndex("ax3", "-cos(mang)", 1);
    model.geom("geom1").run("cone1");
    model.geom("geom1").runAll();

    model.view("view1").hideObjects().clear();
    model.view("view1").hideObjects().create("hide1");
    model.view("view1").hideObjects("hide1").init(3);
    model.view("view1").hideObjects("hide1").add("cyl4", new int[]{1});
    model.view("view1").hideObjects("hide1").add("cyl3", new int[]{1});

    model.geom("geom1").feature("cone1").set("rtop", "0");
    model.geom("geom1").runAll();

    model.view("view1").hideObjects("hide1").add("int1", new int[]{2});
    model.view("view1").hideObjects("hide1").add("dif1", new int[]{2});
    model.view("view1").hideObjects("hide1").add("dif1", new int[]{1});
    model.view("view1").hideObjects("hide1").add("int1", new int[]{1});

    model.geom("geom1").feature("cone1").set("h", "1.2");
    model.geom("geom1").run("cone1");
    model.geom("geom1").runAll();
    model.geom("geom1").feature("cone1").set("h", "mhc");

    model.param().set("mhc", "1.1");

    model.geom("geom1").runAll();
    model.geom("geom1").feature().duplicate("cone2", "cone1");
    model.geom("geom1").feature().move("cone2", 17);
    model.geom("geom1").feature("cone2").setIndex("pos", "-sin(mang)*mir", 0);
    model.geom("geom1").feature("cone2").setIndex("ax3", "sin(mang)", 0);
    model.geom("geom1").run("cone2");
    model.geom("geom1").feature().duplicate("cone3", "cone2");
    model.geom("geom1").feature("cone3").setIndex("ax3", "cos(mang)", 1);
    model.geom("geom1").feature("cone3").setIndex("pos", "-cos(mang)*mir", 1);
    model.geom("geom1").run("cone3");
    model.geom("geom1").feature().duplicate("cone4", "cone3");
    model.geom("geom1").feature("cone4").setIndex("pos", "sin(mang)*mir", 0);
    model.geom("geom1").feature("cone4").setIndex("ax3", "-sin(mang)", 0);
    model.geom("geom1").run("cone4");
    model.geom("geom1").runAll();
    model.geom("geom1").run();

    model.view("view1").hideEntities().create("hide1");
    model.view("view1").hideEntities("hide1").geom(3);
    model.view("view1").hideEntities("hide1").add(new int[]{1});
    model.view("view1").hideEntities("hide1").add(new int[]{18});
    model.view("view1").hideEntities("hide1").add(new int[]{15});
    model.view("view1").hideEntities("hide1").add(new int[]{3});
    model.view("view1").hideEntities("hide1").add(new int[]{2});
    model.view("view1").hideEntities("hide1").add(new int[]{8});
    model.view("view1").hideEntities("hide1").add(new int[]{9, 10, 16, 17});

    model.physics("mfnc").feature("mfc2").selection().set(new int[]{21, 22, 24});
    model.physics("mfnc").feature("mfc4").selection().set(new int[]{5, 12, 14});

    return model;
  }

  public static Model run11(Model model) {

    model.sol("sol1").study("std1");
    model.sol("sol1").feature().remove("s1");
    model.sol("sol1").feature().remove("v1");
    model.sol("sol1").feature().remove("st1");
    model.sol("sol1").feature().create("st1", "StudyStep");
    model.sol("sol1").feature("st1").set("study", "std1");
    model.sol("sol1").feature("st1").set("studystep", "stat");
    model.sol("sol1").feature().create("v1", "Variables");
    model.sol("sol1").feature("v1").set("control", "stat");
    model.sol("sol1").feature().create("s1", "Stationary");
    model.sol("sol1").feature("s1").feature().create("se1", "Segregated");
    model.sol("sol1").feature("s1").feature("se1").feature().remove("ssDef");
    model.sol("sol1").feature("s1").feature("se1").feature().create("ss1", "SegregatedStep");
    model.sol("sol1").feature("s1").feature("se1").feature("ss1").set("segvar", new String[]{"mod1_V"});
    model.sol("sol1").feature("s1").feature().create("i1", "Iterative");
    model.sol("sol1").feature("s1").feature("i1").set("prefuntype", "left");
    model.sol("sol1").feature("s1").feature("i1").set("maxlinit", 10000);
    model.sol("sol1").feature("s1").feature("i1").set("linsolver", "cg");
    model.sol("sol1").feature("s1").feature("i1").set("rhob", 400);
    model.sol("sol1").feature("s1").feature("se1").feature("ss1").set("linsolver", "i1");
    model.sol("sol1").feature("s1").feature("i1").feature().create("mg1", "Multigrid");
    model.sol("sol1").feature("s1").feature("i1").feature("mg1").set("amgauto", 3);
    model.sol("sol1").feature("s1").feature("i1").feature("mg1").set("scale", 2);
    model.sol("sol1").feature("s1").feature("i1").feature("mg1").set("gmglevels", 1);
    model.sol("sol1").feature("s1").feature("i1").feature("mg1").set("massem", true);
    model.sol("sol1").feature("s1").feature("i1").feature("mg1").set("rmethod", "longest");
    model.sol("sol1").feature("s1").feature("i1").feature("mg1").set("mkeep", false);
    model.sol("sol1").feature("s1").feature("i1").feature("mg1").set("mgcycle", "v");
    model.sol("sol1").feature("s1").feature("i1").feature("mg1").set("prefun", "amg");
    model.sol("sol1").feature("s1").feature("i1").feature("mg1").set("mcasegen", "any");
    model.sol("sol1").feature("s1").feature("i1").feature("mg1").set("mglevels", 5);
    model.sol("sol1").feature("s1").feature("i1").feature("mg1").set("iter", 2);
    model.sol("sol1").feature("s1").feature("i1").feature("mg1").set("maxcoarsedof", 5000);
    model.sol("sol1").feature("s1").feature("se1").feature().create("ss2", "SegregatedStep");
    model.sol("sol1").feature("s1").feature("se1").feature("ss2").set("segvar", new String[]{"mod1_Vm"});
    model.sol("sol1").feature("s1").feature().create("i2", "Iterative");
    model.sol("sol1").feature("s1").feature("i2").set("prefuntype", "left");
    model.sol("sol1").feature("s1").feature("i2").set("maxlinit", 10000);
    model.sol("sol1").feature("s1").feature("i2").set("linsolver", "cg");
    model.sol("sol1").feature("s1").feature("i2").set("rhob", 400);
    model.sol("sol1").feature("s1").feature("se1").feature("ss2").set("linsolver", "i2");
    model.sol("sol1").feature("s1").feature("i2").feature().create("mg1", "Multigrid");
    model.sol("sol1").feature("s1").feature("i2").feature("mg1").set("amgauto", 3);
    model.sol("sol1").feature("s1").feature("i2").feature("mg1").set("scale", 2);
    model.sol("sol1").feature("s1").feature("i2").feature("mg1").set("gmglevels", 1);
    model.sol("sol1").feature("s1").feature("i2").feature("mg1").set("massem", true);
    model.sol("sol1").feature("s1").feature("i2").feature("mg1").set("rmethod", "longest");
    model.sol("sol1").feature("s1").feature("i2").feature("mg1").set("mkeep", false);
    model.sol("sol1").feature("s1").feature("i2").feature("mg1").set("mgcycle", "v");
    model.sol("sol1").feature("s1").feature("i2").feature("mg1").set("prefun", "amg");
    model.sol("sol1").feature("s1").feature("i2").feature("mg1").set("mcasegen", "any");
    model.sol("sol1").feature("s1").feature("i2").feature("mg1").set("mglevels", 5);
    model.sol("sol1").feature("s1").feature("i2").feature("mg1").set("iter", 2);
    model.sol("sol1").feature("s1").feature("i2").feature("mg1").set("maxcoarsedof", 5000);
    model.sol("sol1").feature("s1").feature().remove("fcDef");
    model.sol("sol1").attach("std1");
    model.sol("sol1").runAll();

    model.result("pg1").run();

    model.view("view1").hideEntities().clear();

    model.result("pg3").run();
    model.result("pg3").set("allowtableupdate", true);
    model.result("pg3").set("renderdatacached", true);
    model.result().table("evl2").addRow(new double[]{1.4074440002441406, 0, 3899.286540611418});
    model.result().table("evl2").addRow(new double[]{1.380506992340088, 0.013468265533447266, 3931.8469010329327});
    model.result().table("evl2")
         .addRow(new double[]{-0.006734132766723633, -0.7138233184814453, 3806.9724902434946});
    model.result().table("evl2")
         .addRow(new double[]{-0.006734132766723633, -0.7138233184814453, 3806.9724902434946});
    model.result("pg3").run();
    model.result("pg3").set("data", "cpl4");
    model.result("pg3").run();
    model.result("pg3").set("allowtableupdate", true);
    model.result("pg3").set("renderdatacached", true);
    model.result().table("evl2").addRow(new double[]{-0.04645276069641113, -0.4831081032752991, 2051.7234660796566});
    model.result().table("evl2").addRow(new double[]{-0.05264639854431152, -0.4831081032752991, 2050.650050040999});
    model.result().table("evl2").addRow(new double[]{-0.05264639854431152, -0.4954954981803894, 2099.439216506355});
    model.result().table("evl2").addRow(new double[]{-0.05264639854431152, -0.4954954981803894, 2099.439216506355});
    model.result("pg3").set("data", "cpl1");
    model.result("pg3").run();
    model.result("pg3").set("data", "cpl4");
    model.result("pg3").run();
    model.result("pg3").run();
    model.result("pg3").run();
    model.result("pg3").feature().create("con3", "Contour");
    model.result("pg3").feature("con3").set("expr", "es.normE");
    model.result("pg3").feature("con3").set("unit", "kV/cm");
    model.result("pg3").run();
    model.result("pg3").run();
    model.result("pg3").set("data", "cpl1");
    model.result("pg3").run();

    model.param().set("vm1", "0");
    model.param().set("vm2", "0");
    model.param().set("vr1", "12.5e3");
    model.param().set("vr2", "12.5e3");
    model.param().set("vr3", "12.5e3");
    model.param().set("vr4", "12.5e3");

    model.sol("sol1").study("std1");
    model.sol("sol1").feature().remove("s1");
    model.sol("sol1").feature().remove("v1");
    model.sol("sol1").feature().remove("st1");
    model.sol("sol1").feature().create("st1", "StudyStep");
    model.sol("sol1").feature("st1").set("study", "std1");
    model.sol("sol1").feature("st1").set("studystep", "stat");
    model.sol("sol1").feature().create("v1", "Variables");
    model.sol("sol1").feature("v1").set("control", "stat");
    model.sol("sol1").feature().create("s1", "Stationary");
    model.sol("sol1").feature("s1").feature().create("se1", "Segregated");
    model.sol("sol1").feature("s1").feature("se1").feature().remove("ssDef");
    model.sol("sol1").feature("s1").feature("se1").feature().create("ss1", "SegregatedStep");
    model.sol("sol1").feature("s1").feature("se1").feature("ss1").set("segvar", new String[]{"mod1_V"});
    model.sol("sol1").feature("s1").feature().create("i1", "Iterative");
    model.sol("sol1").feature("s1").feature("i1").set("prefuntype", "left");
    model.sol("sol1").feature("s1").feature("i1").set("maxlinit", 10000);
    model.sol("sol1").feature("s1").feature("i1").set("linsolver", "cg");
    model.sol("sol1").feature("s1").feature("i1").set("rhob", 400);
    model.sol("sol1").feature("s1").feature("se1").feature("ss1").set("linsolver", "i1");
    model.sol("sol1").feature("s1").feature("i1").feature().create("mg1", "Multigrid");
    model.sol("sol1").feature("s1").feature("i1").feature("mg1").set("amgauto", 3);
    model.sol("sol1").feature("s1").feature("i1").feature("mg1").set("scale", 2);
    model.sol("sol1").feature("s1").feature("i1").feature("mg1").set("gmglevels", 1);
    model.sol("sol1").feature("s1").feature("i1").feature("mg1").set("massem", true);
    model.sol("sol1").feature("s1").feature("i1").feature("mg1").set("rmethod", "longest");
    model.sol("sol1").feature("s1").feature("i1").feature("mg1").set("mkeep", false);
    model.sol("sol1").feature("s1").feature("i1").feature("mg1").set("mgcycle", "v");
    model.sol("sol1").feature("s1").feature("i1").feature("mg1").set("prefun", "amg");
    model.sol("sol1").feature("s1").feature("i1").feature("mg1").set("mcasegen", "any");
    model.sol("sol1").feature("s1").feature("i1").feature("mg1").set("mglevels", 5);
    model.sol("sol1").feature("s1").feature("i1").feature("mg1").set("iter", 2);
    model.sol("sol1").feature("s1").feature("i1").feature("mg1").set("maxcoarsedof", 5000);
    model.sol("sol1").feature("s1").feature("se1").feature().create("ss2", "SegregatedStep");
    model.sol("sol1").feature("s1").feature("se1").feature("ss2").set("segvar", new String[]{"mod1_Vm"});
    model.sol("sol1").feature("s1").feature().create("i2", "Iterative");
    model.sol("sol1").feature("s1").feature("i2").set("prefuntype", "left");
    model.sol("sol1").feature("s1").feature("i2").set("maxlinit", 10000);
    model.sol("sol1").feature("s1").feature("i2").set("linsolver", "cg");
    model.sol("sol1").feature("s1").feature("i2").set("rhob", 400);
    model.sol("sol1").feature("s1").feature("se1").feature("ss2").set("linsolver", "i2");
    model.sol("sol1").feature("s1").feature("i2").feature().create("mg1", "Multigrid");
    model.sol("sol1").feature("s1").feature("i2").feature("mg1").set("amgauto", 3);
    model.sol("sol1").feature("s1").feature("i2").feature("mg1").set("scale", 2);
    model.sol("sol1").feature("s1").feature("i2").feature("mg1").set("gmglevels", 1);
    model.sol("sol1").feature("s1").feature("i2").feature("mg1").set("massem", true);
    model.sol("sol1").feature("s1").feature("i2").feature("mg1").set("rmethod", "longest");
    model.sol("sol1").feature("s1").feature("i2").feature("mg1").set("mkeep", false);
    model.sol("sol1").feature("s1").feature("i2").feature("mg1").set("mgcycle", "v");
    model.sol("sol1").feature("s1").feature("i2").feature("mg1").set("prefun", "amg");
    model.sol("sol1").feature("s1").feature("i2").feature("mg1").set("mcasegen", "any");
    model.sol("sol1").feature("s1").feature("i2").feature("mg1").set("mglevels", 5);
    model.sol("sol1").feature("s1").feature("i2").feature("mg1").set("iter", 2);
    model.sol("sol1").feature("s1").feature("i2").feature("mg1").set("maxcoarsedof", 5000);
    model.sol("sol1").feature("s1").feature().remove("fcDef");
    model.sol("sol1").attach("std1");
    model.sol("sol1").runAll();

    model.result("pg1").run();
    model.result("pg3").run();
    model.result("pg3").set("data", "cpl4");
    model.result("pg3").run();

    model.view("view1").hideObjects().clear();
    model.view("view1").hideObjects().create("hide1");
    model.view("view1").hideObjects("hide1").init(3);
    model.view("view1").hideObjects("hide1").add("cyl4", new int[]{1});
    model.view("view1").hideObjects("hide1").add("cyl3", new int[]{1});
    model.view("view1").hideObjects("hide1").add("dif1", new int[]{1});
    model.view("view1").hideObjects("hide1").add("int1", new int[]{1});
    model.view("view1").hideObjects("hide1").add("dif1", new int[]{2});
    model.view("view1").hideObjects("hide1").add("int1", new int[]{2});
    model.view("view1").hideObjects().clear();
    model.view("view1").hideObjects().create("hide1");
    model.view("view1").hideObjects("hide1").init(3);
    model.view("view1").hideObjects("hide1").add("cyl4", new int[]{1});
    model.view("view1").hideObjects("hide1").add("cyl3", new int[]{1});

    model.result("pg3").run();
    model.result("pg3").set("data", "cpl1");
    model.result("pg3").run();
    model.result("pg3").run();
    model.result("pg3").run();
    model.result("pg3").run();

    model.view("view1").hideObjects("hide1").add("dif1", new int[]{2});
    model.view("view1").hideObjects("hide1").add("cyl2", new int[]{1});
    model.view("view1").hideObjects("hide1").add("cyl1", new int[]{1});

    model.param().set("gwc", "1");
    model.param().set("gwo", "2");

    model.geom("geom1").runAll();

    model.view("view1").hideObjects().clear();
    model.view("view1").hideObjects().create("hide1");
    model.view("view1").hideObjects("hide1").init(3);
    model.view("view1").hideObjects("hide1").add("cyl4", new int[]{1});
    model.view("view1").hideObjects("hide1").add("cyl3", new int[]{1});
    model.view("view1").hideObjects("hide1").add("cyl2", new int[]{1});
    model.view("view1").hideObjects("hide1").add("cyl1", new int[]{1});
    model.view("view1").hideObjects("hide1").add("dif1", new int[]{1});

    model.param().set("mhc", "1.3");

    model.geom("geom1").runAll();

    model.param().set("mang", "40*pi/180");

    model.geom("geom1").runAll();

    model.param().set("mir", "2");

    model.geom("geom1").runAll();

    model.param().set("mir", "1.8");

    model.geom("geom1").runAll();

    model.param().set("mir", "1.9");

    model.geom("geom1").runAll();

    model.param().set("mhc", "1.2");

    model.geom("geom1").runAll();

    model.view("view1").hideObjects().clear();

    model.sol("sol1").study("std1");
    model.sol("sol1").feature().remove("s1");
    model.sol("sol1").feature().remove("v1");
    model.sol("sol1").feature().remove("st1");
    model.sol("sol1").feature().create("st1", "StudyStep");
    model.sol("sol1").feature("st1").set("study", "std1");
    model.sol("sol1").feature("st1").set("studystep", "stat");
    model.sol("sol1").feature().create("v1", "Variables");
    model.sol("sol1").feature("v1").set("control", "stat");
    model.sol("sol1").feature().create("s1", "Stationary");
    model.sol("sol1").feature("s1").feature().create("se1", "Segregated");
    model.sol("sol1").feature("s1").feature("se1").feature().remove("ssDef");
    model.sol("sol1").feature("s1").feature("se1").feature().create("ss1", "SegregatedStep");
    model.sol("sol1").feature("s1").feature("se1").feature("ss1").set("segvar", new String[]{"mod1_V"});
    model.sol("sol1").feature("s1").feature().create("i1", "Iterative");
    model.sol("sol1").feature("s1").feature("i1").set("prefuntype", "left");
    model.sol("sol1").feature("s1").feature("i1").set("maxlinit", 10000);
    model.sol("sol1").feature("s1").feature("i1").set("linsolver", "cg");
    model.sol("sol1").feature("s1").feature("i1").set("rhob", 400);
    model.sol("sol1").feature("s1").feature("se1").feature("ss1").set("linsolver", "i1");
    model.sol("sol1").feature("s1").feature("i1").feature().create("mg1", "Multigrid");
    model.sol("sol1").feature("s1").feature("i1").feature("mg1").set("amgauto", 3);
    model.sol("sol1").feature("s1").feature("i1").feature("mg1").set("scale", 2);
    model.sol("sol1").feature("s1").feature("i1").feature("mg1").set("gmglevels", 1);
    model.sol("sol1").feature("s1").feature("i1").feature("mg1").set("massem", true);
    model.sol("sol1").feature("s1").feature("i1").feature("mg1").set("rmethod", "longest");
    model.sol("sol1").feature("s1").feature("i1").feature("mg1").set("mkeep", false);
    model.sol("sol1").feature("s1").feature("i1").feature("mg1").set("mgcycle", "v");
    model.sol("sol1").feature("s1").feature("i1").feature("mg1").set("prefun", "amg");
    model.sol("sol1").feature("s1").feature("i1").feature("mg1").set("mcasegen", "any");
    model.sol("sol1").feature("s1").feature("i1").feature("mg1").set("mglevels", 5);
    model.sol("sol1").feature("s1").feature("i1").feature("mg1").set("iter", 2);
    model.sol("sol1").feature("s1").feature("i1").feature("mg1").set("maxcoarsedof", 5000);
    model.sol("sol1").feature("s1").feature("se1").feature().create("ss2", "SegregatedStep");
    model.sol("sol1").feature("s1").feature("se1").feature("ss2").set("segvar", new String[]{"mod1_Vm"});
    model.sol("sol1").feature("s1").feature().create("i2", "Iterative");
    model.sol("sol1").feature("s1").feature("i2").set("prefuntype", "left");
    model.sol("sol1").feature("s1").feature("i2").set("maxlinit", 10000);
    model.sol("sol1").feature("s1").feature("i2").set("linsolver", "cg");
    model.sol("sol1").feature("s1").feature("i2").set("rhob", 400);
    model.sol("sol1").feature("s1").feature("se1").feature("ss2").set("linsolver", "i2");
    model.sol("sol1").feature("s1").feature("i2").feature().create("mg1", "Multigrid");
    model.sol("sol1").feature("s1").feature("i2").feature("mg1").set("amgauto", 3);
    model.sol("sol1").feature("s1").feature("i2").feature("mg1").set("scale", 2);
    model.sol("sol1").feature("s1").feature("i2").feature("mg1").set("gmglevels", 1);
    model.sol("sol1").feature("s1").feature("i2").feature("mg1").set("massem", true);
    model.sol("sol1").feature("s1").feature("i2").feature("mg1").set("rmethod", "longest");
    model.sol("sol1").feature("s1").feature("i2").feature("mg1").set("mkeep", false);
    model.sol("sol1").feature("s1").feature("i2").feature("mg1").set("mgcycle", "v");
    model.sol("sol1").feature("s1").feature("i2").feature("mg1").set("prefun", "amg");
    model.sol("sol1").feature("s1").feature("i2").feature("mg1").set("mcasegen", "any");
    model.sol("sol1").feature("s1").feature("i2").feature("mg1").set("mglevels", 5);
    model.sol("sol1").feature("s1").feature("i2").feature("mg1").set("iter", 2);
    model.sol("sol1").feature("s1").feature("i2").feature("mg1").set("maxcoarsedof", 5000);
    model.sol("sol1").feature("s1").feature().remove("fcDef");
    model.sol("sol1").attach("std1");
    model.sol("sol1").runAll();

    model.result("pg1").run();
    model.result("pg3").run();
    model.result("pg3").set("allowtableupdate", true);
    model.result("pg3").set("renderdatacached", true);
    model.result().table("evl2").addRow(new double[]{0.48505234718322754, 0.013109683990478516, 3945.5420217486367});
    model.result().table("evl2").addRow(new double[]{0.48505234718322754, 0.026218891143798828, 3935.293606970639});
    model.result("pg3").set("data", "cpl4");
    model.result("pg3").run();
    model.result("pg3").set("allowtableupdate", true);
    model.result("pg3").set("renderdatacached", true);
    model.result().table("evl2")
         .addRow(new double[]{-0.007688164710998535, -0.49204862117767334, 3617.4414127852197});
    model.result().table("evl2")
         .addRow(new double[]{-0.007688164710998535, -0.49204862117767334, 3617.4414127852197});
    model.result().table("evl2")
         .addRow(new double[]{-0.007688164710998535, -0.49204862117767334, 3617.4414127852197});
    model.result().table("evl2").addRow(new double[]{-0.046129465103149414, -0.4843602180480957, 3599.88485171692});
    model.result().table("evl2").addRow(new double[]{-0.046129465103149414, -0.515113353729248, 3782.8714749383107});
    model.result().table("evl2").addRow(new double[]{-0.06150615215301514, -0.515113353729248, 3794.1479189501624});
    model.result().table("evl2").addRow(new double[]{-0.06150615215301514, -0.4843602180480957, 3611.1612957287725});
    model.result().table("evl2").addRow(new double[]{-0.06150615215301514, -0.4997369050979614, 3702.655316655928});
    model.result("pg3").set("data", "cpl3");
    model.result("pg3").run();
    model.result("pg3").set("allowtableupdate", true);
    model.result("pg3").set("renderdatacached", true);
    model.result().table("evl2").addRow(new double[]{0, -0.4931910037994385, 3953.9924154177456});
    model.result().table("evl2").addRow(new double[]{0, -0.4931910037994385, 3953.9924154177456});
    model.result().table("evl2").addRow(new double[]{-0.004179537296295166, 0.4973706007003784, 3986.95408740674});
    model.result().table("evl2").addRow(new double[]{-0.004179537296295166, 0.4973706007003784, 3986.95408740674});
    model.result("pg3").run();
    model.result("pg3").feature("surf1").set("rangecoloractive", "on");
    model.result("pg3").feature("surf1").set("rangecolormax", "9000");

    model.view("view1").hideObjects().create("hide1");
    model.view("view1").hideObjects("hide1").init(3);
    model.view("view1").hideObjects("hide1").add("cyl4", new int[]{1});
    model.view("view1").hideObjects("hide1").add("cyl3", new int[]{1});

    model.result("pg3").run();
    model.result("pg3").run();
    model.result("pg3").set("data", "cpl1");
    model.result("pg3").run();
    model.result("pg3").run();
    model.result("pg3").feature("con3").set("coloring", "uniform");
    model.result("pg3").run();
    model.result("pg3").run();
    model.result("pg3").feature("surf1").set("expr", "es.normE");
    model.result("pg3").run();

    model.param().set("vr1", "0");
    model.param().set("vr2", "0");
    model.param().set("vm1", "6000");
    model.param().set("vm2", "-6000");
    model.param().set("vr3", "0");
    model.param().set("vr4", "0");

    model.sol("sol1").study("std1");
    model.sol("sol1").feature().remove("s1");
    model.sol("sol1").feature().remove("v1");
    model.sol("sol1").feature().remove("st1");
    model.sol("sol1").feature().create("st1", "StudyStep");
    model.sol("sol1").feature("st1").set("study", "std1");
    model.sol("sol1").feature("st1").set("studystep", "stat");
    model.sol("sol1").feature().create("v1", "Variables");
    model.sol("sol1").feature("v1").set("control", "stat");
    model.sol("sol1").feature().create("s1", "Stationary");
    model.sol("sol1").feature("s1").feature().create("se1", "Segregated");
    model.sol("sol1").feature("s1").feature("se1").feature().remove("ssDef");
    model.sol("sol1").feature("s1").feature("se1").feature().create("ss1", "SegregatedStep");
    model.sol("sol1").feature("s1").feature("se1").feature("ss1").set("segvar", new String[]{"mod1_V"});
    model.sol("sol1").feature("s1").feature().create("i1", "Iterative");
    model.sol("sol1").feature("s1").feature("i1").set("prefuntype", "left");
    model.sol("sol1").feature("s1").feature("i1").set("maxlinit", 10000);
    model.sol("sol1").feature("s1").feature("i1").set("linsolver", "cg");
    model.sol("sol1").feature("s1").feature("i1").set("rhob", 400);
    model.sol("sol1").feature("s1").feature("se1").feature("ss1").set("linsolver", "i1");
    model.sol("sol1").feature("s1").feature("i1").feature().create("mg1", "Multigrid");
    model.sol("sol1").feature("s1").feature("i1").feature("mg1").set("amgauto", 3);
    model.sol("sol1").feature("s1").feature("i1").feature("mg1").set("scale", 2);
    model.sol("sol1").feature("s1").feature("i1").feature("mg1").set("gmglevels", 1);
    model.sol("sol1").feature("s1").feature("i1").feature("mg1").set("massem", true);
    model.sol("sol1").feature("s1").feature("i1").feature("mg1").set("rmethod", "longest");
    model.sol("sol1").feature("s1").feature("i1").feature("mg1").set("mkeep", false);
    model.sol("sol1").feature("s1").feature("i1").feature("mg1").set("mgcycle", "v");
    model.sol("sol1").feature("s1").feature("i1").feature("mg1").set("prefun", "amg");
    model.sol("sol1").feature("s1").feature("i1").feature("mg1").set("mcasegen", "any");
    model.sol("sol1").feature("s1").feature("i1").feature("mg1").set("mglevels", 5);
    model.sol("sol1").feature("s1").feature("i1").feature("mg1").set("iter", 2);
    model.sol("sol1").feature("s1").feature("i1").feature("mg1").set("maxcoarsedof", 5000);
    model.sol("sol1").feature("s1").feature("se1").feature().create("ss2", "SegregatedStep");
    model.sol("sol1").feature("s1").feature("se1").feature("ss2").set("segvar", new String[]{"mod1_Vm"});
    model.sol("sol1").feature("s1").feature().create("i2", "Iterative");
    model.sol("sol1").feature("s1").feature("i2").set("prefuntype", "left");
    model.sol("sol1").feature("s1").feature("i2").set("maxlinit", 10000);
    model.sol("sol1").feature("s1").feature("i2").set("linsolver", "cg");
    model.sol("sol1").feature("s1").feature("i2").set("rhob", 400);
    model.sol("sol1").feature("s1").feature("se1").feature("ss2").set("linsolver", "i2");
    model.sol("sol1").feature("s1").feature("i2").feature().create("mg1", "Multigrid");
    model.sol("sol1").feature("s1").feature("i2").feature("mg1").set("amgauto", 3);
    model.sol("sol1").feature("s1").feature("i2").feature("mg1").set("scale", 2);
    model.sol("sol1").feature("s1").feature("i2").feature("mg1").set("gmglevels", 1);
    model.sol("sol1").feature("s1").feature("i2").feature("mg1").set("massem", true);
    model.sol("sol1").feature("s1").feature("i2").feature("mg1").set("rmethod", "longest");
    model.sol("sol1").feature("s1").feature("i2").feature("mg1").set("mkeep", false);
    model.sol("sol1").feature("s1").feature("i2").feature("mg1").set("mgcycle", "v");
    model.sol("sol1").feature("s1").feature("i2").feature("mg1").set("prefun", "amg");
    model.sol("sol1").feature("s1").feature("i2").feature("mg1").set("mcasegen", "any");
    model.sol("sol1").feature("s1").feature("i2").feature("mg1").set("mglevels", 5);
    model.sol("sol1").feature("s1").feature("i2").feature("mg1").set("iter", 2);
    model.sol("sol1").feature("s1").feature("i2").feature("mg1").set("maxcoarsedof", 5000);
    model.sol("sol1").feature("s1").feature().remove("fcDef");
    model.sol("sol1").attach("std1");
    model.sol("sol1").runAll();

    model.result("pg1").run();
    model.result("pg3").run();
    model.result("pg3").run();
    model.result("pg3").feature("surf1").set("rangecoloractive", "on");
    model.result("pg3").feature("surf1").set("rangecolormax", "1.24498889632321E7");
    model.result("pg3").run();
    model.result("pg3").feature("con3").active(false);
    model.result("pg3").run();
    model.result("pg3").run();
    model.result("pg3").run();
    model.result("pg3").set("prefixintitle", "Stopping Electric Field (kV/cm, +/-6kV applied), YZ Plane");
    model.result("pg3").run();

    model.param().set("vr2", "-12500");
    model.param().set("vr1", "12500");
    model.param().set("vr2", "12500");
    model.param().set("vm1", "0");
    model.param().set("vm2", "0");
    model.param().set("vr3", "12500");
    model.param().set("vr4", "12500");

    model.sol("sol1").study("std1");
    model.sol("sol1").feature().remove("s1");
    model.sol("sol1").feature().remove("v1");
    model.sol("sol1").feature().remove("st1");
    model.sol("sol1").feature().create("st1", "StudyStep");
    model.sol("sol1").feature("st1").set("study", "std1");
    model.sol("sol1").feature("st1").set("studystep", "stat");
    model.sol("sol1").feature().create("v1", "Variables");
    model.sol("sol1").feature("v1").set("control", "stat");
    model.sol("sol1").feature().create("s1", "Stationary");
    model.sol("sol1").feature("s1").feature().create("se1", "Segregated");
    model.sol("sol1").feature("s1").feature("se1").feature().remove("ssDef");
    model.sol("sol1").feature("s1").feature("se1").feature().create("ss1", "SegregatedStep");
    model.sol("sol1").feature("s1").feature("se1").feature("ss1").set("segvar", new String[]{"mod1_V"});
    model.sol("sol1").feature("s1").feature().create("i1", "Iterative");
    model.sol("sol1").feature("s1").feature("i1").set("prefuntype", "left");
    model.sol("sol1").feature("s1").feature("i1").set("maxlinit", 10000);
    model.sol("sol1").feature("s1").feature("i1").set("linsolver", "cg");
    model.sol("sol1").feature("s1").feature("i1").set("rhob", 400);
    model.sol("sol1").feature("s1").feature("se1").feature("ss1").set("linsolver", "i1");
    model.sol("sol1").feature("s1").feature("i1").feature().create("mg1", "Multigrid");
    model.sol("sol1").feature("s1").feature("i1").feature("mg1").set("amgauto", 3);
    model.sol("sol1").feature("s1").feature("i1").feature("mg1").set("scale", 2);
    model.sol("sol1").feature("s1").feature("i1").feature("mg1").set("gmglevels", 1);
    model.sol("sol1").feature("s1").feature("i1").feature("mg1").set("massem", true);
    model.sol("sol1").feature("s1").feature("i1").feature("mg1").set("rmethod", "longest");
    model.sol("sol1").feature("s1").feature("i1").feature("mg1").set("mkeep", false);
    model.sol("sol1").feature("s1").feature("i1").feature("mg1").set("mgcycle", "v");
    model.sol("sol1").feature("s1").feature("i1").feature("mg1").set("prefun", "amg");
    model.sol("sol1").feature("s1").feature("i1").feature("mg1").set("mcasegen", "any");
    model.sol("sol1").feature("s1").feature("i1").feature("mg1").set("mglevels", 5);
    model.sol("sol1").feature("s1").feature("i1").feature("mg1").set("iter", 2);
    model.sol("sol1").feature("s1").feature("i1").feature("mg1").set("maxcoarsedof", 5000);
    model.sol("sol1").feature("s1").feature("se1").feature().create("ss2", "SegregatedStep");
    model.sol("sol1").feature("s1").feature("se1").feature("ss2").set("segvar", new String[]{"mod1_Vm"});
    model.sol("sol1").feature("s1").feature().create("i2", "Iterative");
    model.sol("sol1").feature("s1").feature("i2").set("prefuntype", "left");
    model.sol("sol1").feature("s1").feature("i2").set("maxlinit", 10000);
    model.sol("sol1").feature("s1").feature("i2").set("linsolver", "cg");
    model.sol("sol1").feature("s1").feature("i2").set("rhob", 400);
    model.sol("sol1").feature("s1").feature("se1").feature("ss2").set("linsolver", "i2");
    model.sol("sol1").feature("s1").feature("i2").feature().create("mg1", "Multigrid");
    model.sol("sol1").feature("s1").feature("i2").feature("mg1").set("amgauto", 3);
    model.sol("sol1").feature("s1").feature("i2").feature("mg1").set("scale", 2);
    model.sol("sol1").feature("s1").feature("i2").feature("mg1").set("gmglevels", 1);
    model.sol("sol1").feature("s1").feature("i2").feature("mg1").set("massem", true);
    model.sol("sol1").feature("s1").feature("i2").feature("mg1").set("rmethod", "longest");
    model.sol("sol1").feature("s1").feature("i2").feature("mg1").set("mkeep", false);
    model.sol("sol1").feature("s1").feature("i2").feature("mg1").set("mgcycle", "v");
    model.sol("sol1").feature("s1").feature("i2").feature("mg1").set("prefun", "amg");
    model.sol("sol1").feature("s1").feature("i2").feature("mg1").set("mcasegen", "any");
    model.sol("sol1").feature("s1").feature("i2").feature("mg1").set("mglevels", 5);
    model.sol("sol1").feature("s1").feature("i2").feature("mg1").set("iter", 2);
    model.sol("sol1").feature("s1").feature("i2").feature("mg1").set("maxcoarsedof", 5000);
    model.sol("sol1").feature("s1").feature().remove("fcDef");
    model.sol("sol1").attach("std1");
    model.sol("sol1").runAll();

    model.result("pg1").run();
    model.result("pg3").run();
    model.result("pg3").run();
    model.result("pg3").feature("surf1").set("unit", "kV/cm");
    model.result("pg3").run();
    model.result("pg3").feature("con3").active(true);
    model.result("pg3").run();
    model.result("pg1").run();
    model.result("pg3").run();
    model.result("pg3").run();
    model.result("pg3").run();
    model.result("pg3").feature("surf1").set("expr", "mfnc.normB");
    model.result("pg3").feature("surf1").set("unit", "G");
    model.result("pg3").run();
    model.result("pg3").feature("surf1").set("rangecoloractive", "on");
    model.result("pg3").feature("surf1").set("rangecolormax", "8500");
    model.result("pg3").run();
    model.result("pg3").set("prefixintitle", "Trapping Fields (12.5kV applied), YZ Plane");
    model.result("pg3").run();
    model.result("pg3").feature("con3").set("levelmethod", "levels");
    model.result("pg3").feature("con3").set("levels", "range(0,5,50)");

    return model;
  }

  public static Model run12(Model model) {
    model.result("pg3").run();
    model.result("pg3").feature("con3").set("levels", "range(0,2.5,50)");
    model.result("pg3").run();

    model.param().set("vr3", "-12500");
    model.param().set("vr4", "-12500");

    model.sol("sol1").study("std1");
    model.sol("sol1").feature().remove("s1");
    model.sol("sol1").feature().remove("v1");
    model.sol("sol1").feature().remove("st1");
    model.sol("sol1").feature().create("st1", "StudyStep");
    model.sol("sol1").feature("st1").set("study", "std1");
    model.sol("sol1").feature("st1").set("studystep", "stat");
    model.sol("sol1").feature().create("v1", "Variables");
    model.sol("sol1").feature("v1").set("control", "stat");
    model.sol("sol1").feature().create("s1", "Stationary");
    model.sol("sol1").feature("s1").feature().create("se1", "Segregated");
    model.sol("sol1").feature("s1").feature("se1").feature().remove("ssDef");
    model.sol("sol1").feature("s1").feature("se1").feature().create("ss1", "SegregatedStep");
    model.sol("sol1").feature("s1").feature("se1").feature("ss1").set("segvar", new String[]{"mod1_V"});
    model.sol("sol1").feature("s1").feature().create("i1", "Iterative");
    model.sol("sol1").feature("s1").feature("i1").set("prefuntype", "left");
    model.sol("sol1").feature("s1").feature("i1").set("maxlinit", 10000);
    model.sol("sol1").feature("s1").feature("i1").set("linsolver", "cg");
    model.sol("sol1").feature("s1").feature("i1").set("rhob", 400);
    model.sol("sol1").feature("s1").feature("se1").feature("ss1").set("linsolver", "i1");
    model.sol("sol1").feature("s1").feature("i1").feature().create("mg1", "Multigrid");
    model.sol("sol1").feature("s1").feature("i1").feature("mg1").set("amgauto", 3);
    model.sol("sol1").feature("s1").feature("i1").feature("mg1").set("scale", 2);
    model.sol("sol1").feature("s1").feature("i1").feature("mg1").set("gmglevels", 1);
    model.sol("sol1").feature("s1").feature("i1").feature("mg1").set("massem", true);
    model.sol("sol1").feature("s1").feature("i1").feature("mg1").set("rmethod", "longest");
    model.sol("sol1").feature("s1").feature("i1").feature("mg1").set("mkeep", false);
    model.sol("sol1").feature("s1").feature("i1").feature("mg1").set("mgcycle", "v");
    model.sol("sol1").feature("s1").feature("i1").feature("mg1").set("prefun", "amg");
    model.sol("sol1").feature("s1").feature("i1").feature("mg1").set("mcasegen", "any");
    model.sol("sol1").feature("s1").feature("i1").feature("mg1").set("mglevels", 5);
    model.sol("sol1").feature("s1").feature("i1").feature("mg1").set("iter", 2);
    model.sol("sol1").feature("s1").feature("i1").feature("mg1").set("maxcoarsedof", 5000);
    model.sol("sol1").feature("s1").feature("se1").feature().create("ss2", "SegregatedStep");
    model.sol("sol1").feature("s1").feature("se1").feature("ss2").set("segvar", new String[]{"mod1_Vm"});
    model.sol("sol1").feature("s1").feature().create("i2", "Iterative");
    model.sol("sol1").feature("s1").feature("i2").set("prefuntype", "left");
    model.sol("sol1").feature("s1").feature("i2").set("maxlinit", 10000);
    model.sol("sol1").feature("s1").feature("i2").set("linsolver", "cg");
    model.sol("sol1").feature("s1").feature("i2").set("rhob", 400);
    model.sol("sol1").feature("s1").feature("se1").feature("ss2").set("linsolver", "i2");
    model.sol("sol1").feature("s1").feature("i2").feature().create("mg1", "Multigrid");
    model.sol("sol1").feature("s1").feature("i2").feature("mg1").set("amgauto", 3);
    model.sol("sol1").feature("s1").feature("i2").feature("mg1").set("scale", 2);
    model.sol("sol1").feature("s1").feature("i2").feature("mg1").set("gmglevels", 1);
    model.sol("sol1").feature("s1").feature("i2").feature("mg1").set("massem", true);
    model.sol("sol1").feature("s1").feature("i2").feature("mg1").set("rmethod", "longest");
    model.sol("sol1").feature("s1").feature("i2").feature("mg1").set("mkeep", false);
    model.sol("sol1").feature("s1").feature("i2").feature("mg1").set("mgcycle", "v");
    model.sol("sol1").feature("s1").feature("i2").feature("mg1").set("prefun", "amg");
    model.sol("sol1").feature("s1").feature("i2").feature("mg1").set("mcasegen", "any");
    model.sol("sol1").feature("s1").feature("i2").feature("mg1").set("mglevels", 5);
    model.sol("sol1").feature("s1").feature("i2").feature("mg1").set("iter", 2);
    model.sol("sol1").feature("s1").feature("i2").feature("mg1").set("maxcoarsedof", 5000);
    model.sol("sol1").feature("s1").feature().remove("fcDef");
    model.sol("sol1").attach("std1");
    model.sol("sol1").runAll();

    model.result("pg1").run();
    model.result("pg3").run();
    model.result("pg3").run();
    model.result("pg3").run();
    model.result("pg3").feature("con3").set("expr", "V");
    model.result("pg3").run();
    model.result("pg3").feature("con3").set("unit", "kV");
    model.result("pg3").run();
    model.result("pg3").feature("con3").set("levels", "range(-10,2.5,10)");
    model.result("pg3").run();
    model.result("pg3").feature("con3").set("levels", "range(0,2.5,50)");

    model.param().set("vr3", "0");
    model.param().set("vr4", "0");
    model.param().set("vm1", "1000");
    model.param().set("vm2", "-1000");
    model.param().set("vm1", "1000");

    model.sol("sol1").study("std1");
    model.sol("sol1").feature().remove("s1");
    model.sol("sol1").feature().remove("v1");
    model.sol("sol1").feature().remove("st1");
    model.sol("sol1").feature().create("st1", "StudyStep");
    model.sol("sol1").feature("st1").set("study", "std1");
    model.sol("sol1").feature("st1").set("studystep", "stat");
    model.sol("sol1").feature().create("v1", "Variables");
    model.sol("sol1").feature("v1").set("control", "stat");
    model.sol("sol1").feature().create("s1", "Stationary");
    model.sol("sol1").feature("s1").feature().create("se1", "Segregated");
    model.sol("sol1").feature("s1").feature("se1").feature().remove("ssDef");
    model.sol("sol1").feature("s1").feature("se1").feature().create("ss1", "SegregatedStep");
    model.sol("sol1").feature("s1").feature("se1").feature("ss1").set("segvar", new String[]{"mod1_V"});
    model.sol("sol1").feature("s1").feature().create("i1", "Iterative");
    model.sol("sol1").feature("s1").feature("i1").set("prefuntype", "left");
    model.sol("sol1").feature("s1").feature("i1").set("maxlinit", 10000);
    model.sol("sol1").feature("s1").feature("i1").set("linsolver", "cg");
    model.sol("sol1").feature("s1").feature("i1").set("rhob", 400);
    model.sol("sol1").feature("s1").feature("se1").feature("ss1").set("linsolver", "i1");
    model.sol("sol1").feature("s1").feature("i1").feature().create("mg1", "Multigrid");
    model.sol("sol1").feature("s1").feature("i1").feature("mg1").set("amgauto", 3);
    model.sol("sol1").feature("s1").feature("i1").feature("mg1").set("scale", 2);
    model.sol("sol1").feature("s1").feature("i1").feature("mg1").set("gmglevels", 1);
    model.sol("sol1").feature("s1").feature("i1").feature("mg1").set("massem", true);
    model.sol("sol1").feature("s1").feature("i1").feature("mg1").set("rmethod", "longest");
    model.sol("sol1").feature("s1").feature("i1").feature("mg1").set("mkeep", false);
    model.sol("sol1").feature("s1").feature("i1").feature("mg1").set("mgcycle", "v");
    model.sol("sol1").feature("s1").feature("i1").feature("mg1").set("prefun", "amg");
    model.sol("sol1").feature("s1").feature("i1").feature("mg1").set("mcasegen", "any");
    model.sol("sol1").feature("s1").feature("i1").feature("mg1").set("mglevels", 5);
    model.sol("sol1").feature("s1").feature("i1").feature("mg1").set("iter", 2);
    model.sol("sol1").feature("s1").feature("i1").feature("mg1").set("maxcoarsedof", 5000);
    model.sol("sol1").feature("s1").feature("se1").feature().create("ss2", "SegregatedStep");
    model.sol("sol1").feature("s1").feature("se1").feature("ss2").set("segvar", new String[]{"mod1_Vm"});
    model.sol("sol1").feature("s1").feature().create("i2", "Iterative");
    model.sol("sol1").feature("s1").feature("i2").set("prefuntype", "left");
    model.sol("sol1").feature("s1").feature("i2").set("maxlinit", 10000);
    model.sol("sol1").feature("s1").feature("i2").set("linsolver", "cg");
    model.sol("sol1").feature("s1").feature("i2").set("rhob", 400);
    model.sol("sol1").feature("s1").feature("se1").feature("ss2").set("linsolver", "i2");
    model.sol("sol1").feature("s1").feature("i2").feature().create("mg1", "Multigrid");
    model.sol("sol1").feature("s1").feature("i2").feature("mg1").set("amgauto", 3);
    model.sol("sol1").feature("s1").feature("i2").feature("mg1").set("scale", 2);
    model.sol("sol1").feature("s1").feature("i2").feature("mg1").set("gmglevels", 1);
    model.sol("sol1").feature("s1").feature("i2").feature("mg1").set("massem", true);
    model.sol("sol1").feature("s1").feature("i2").feature("mg1").set("rmethod", "longest");
    model.sol("sol1").feature("s1").feature("i2").feature("mg1").set("mkeep", false);
    model.sol("sol1").feature("s1").feature("i2").feature("mg1").set("mgcycle", "v");
    model.sol("sol1").feature("s1").feature("i2").feature("mg1").set("prefun", "amg");
    model.sol("sol1").feature("s1").feature("i2").feature("mg1").set("mcasegen", "any");
    model.sol("sol1").feature("s1").feature("i2").feature("mg1").set("mglevels", 5);
    model.sol("sol1").feature("s1").feature("i2").feature("mg1").set("iter", 2);
    model.sol("sol1").feature("s1").feature("i2").feature("mg1").set("maxcoarsedof", 5000);
    model.sol("sol1").feature("s1").feature().remove("fcDef");
    model.sol("sol1").attach("std1");
    model.sol("sol1").runAll();

    model.result("pg1").run();
    model.result("pg3").run();
    model.result("pg3").run();
    model.result("pg3").feature("con3").set("expr", "es.normE");
    model.result("pg3").run();
    model.result("pg3").feature("con3").set("unit", "kV/cm");
    model.result("pg3").run();

    model.param().set("vr2", "-12500");

    model.sol("sol1").study("std1");
    model.sol("sol1").feature().remove("s1");
    model.sol("sol1").feature().remove("v1");
    model.sol("sol1").feature().remove("st1");
    model.sol("sol1").feature().create("st1", "StudyStep");
    model.sol("sol1").feature("st1").set("study", "std1");
    model.sol("sol1").feature("st1").set("studystep", "stat");
    model.sol("sol1").feature().create("v1", "Variables");
    model.sol("sol1").feature("v1").set("control", "stat");
    model.sol("sol1").feature().create("s1", "Stationary");
    model.sol("sol1").feature("s1").feature().create("se1", "Segregated");
    model.sol("sol1").feature("s1").feature("se1").feature().remove("ssDef");
    model.sol("sol1").feature("s1").feature("se1").feature().create("ss1", "SegregatedStep");
    model.sol("sol1").feature("s1").feature("se1").feature("ss1").set("segvar", new String[]{"mod1_V"});
    model.sol("sol1").feature("s1").feature().create("i1", "Iterative");
    model.sol("sol1").feature("s1").feature("i1").set("prefuntype", "left");
    model.sol("sol1").feature("s1").feature("i1").set("maxlinit", 10000);
    model.sol("sol1").feature("s1").feature("i1").set("linsolver", "cg");
    model.sol("sol1").feature("s1").feature("i1").set("rhob", 400);
    model.sol("sol1").feature("s1").feature("se1").feature("ss1").set("linsolver", "i1");
    model.sol("sol1").feature("s1").feature("i1").feature().create("mg1", "Multigrid");
    model.sol("sol1").feature("s1").feature("i1").feature("mg1").set("amgauto", 3);
    model.sol("sol1").feature("s1").feature("i1").feature("mg1").set("scale", 2);
    model.sol("sol1").feature("s1").feature("i1").feature("mg1").set("gmglevels", 1);
    model.sol("sol1").feature("s1").feature("i1").feature("mg1").set("massem", true);
    model.sol("sol1").feature("s1").feature("i1").feature("mg1").set("rmethod", "longest");
    model.sol("sol1").feature("s1").feature("i1").feature("mg1").set("mkeep", false);
    model.sol("sol1").feature("s1").feature("i1").feature("mg1").set("mgcycle", "v");
    model.sol("sol1").feature("s1").feature("i1").feature("mg1").set("prefun", "amg");
    model.sol("sol1").feature("s1").feature("i1").feature("mg1").set("mcasegen", "any");
    model.sol("sol1").feature("s1").feature("i1").feature("mg1").set("mglevels", 5);
    model.sol("sol1").feature("s1").feature("i1").feature("mg1").set("iter", 2);
    model.sol("sol1").feature("s1").feature("i1").feature("mg1").set("maxcoarsedof", 5000);
    model.sol("sol1").feature("s1").feature("se1").feature().create("ss2", "SegregatedStep");
    model.sol("sol1").feature("s1").feature("se1").feature("ss2").set("segvar", new String[]{"mod1_Vm"});
    model.sol("sol1").feature("s1").feature().create("i2", "Iterative");
    model.sol("sol1").feature("s1").feature("i2").set("prefuntype", "left");
    model.sol("sol1").feature("s1").feature("i2").set("maxlinit", 10000);
    model.sol("sol1").feature("s1").feature("i2").set("linsolver", "cg");
    model.sol("sol1").feature("s1").feature("i2").set("rhob", 400);
    model.sol("sol1").feature("s1").feature("se1").feature("ss2").set("linsolver", "i2");
    model.sol("sol1").feature("s1").feature("i2").feature().create("mg1", "Multigrid");
    model.sol("sol1").feature("s1").feature("i2").feature("mg1").set("amgauto", 3);
    model.sol("sol1").feature("s1").feature("i2").feature("mg1").set("scale", 2);
    model.sol("sol1").feature("s1").feature("i2").feature("mg1").set("gmglevels", 1);
    model.sol("sol1").feature("s1").feature("i2").feature("mg1").set("massem", true);
    model.sol("sol1").feature("s1").feature("i2").feature("mg1").set("rmethod", "longest");
    model.sol("sol1").feature("s1").feature("i2").feature("mg1").set("mkeep", false);
    model.sol("sol1").feature("s1").feature("i2").feature("mg1").set("mgcycle", "v");
    model.sol("sol1").feature("s1").feature("i2").feature("mg1").set("prefun", "amg");
    model.sol("sol1").feature("s1").feature("i2").feature("mg1").set("mcasegen", "any");
    model.sol("sol1").feature("s1").feature("i2").feature("mg1").set("mglevels", 5);
    model.sol("sol1").feature("s1").feature("i2").feature("mg1").set("iter", 2);
    model.sol("sol1").feature("s1").feature("i2").feature("mg1").set("maxcoarsedof", 5000);
    model.sol("sol1").feature("s1").feature().remove("fcDef");
    model.sol("sol1").attach("std1");
    model.sol("sol1").runAll();

    model.result("pg1").run();
    model.result("pg3").run();
    model.result("pg3").run();
    model.result("pg3").feature("con3").set("coloring", "colortable");
    model.result("pg3").run();
    model.result("pg3").feature("surf1").active(false);
    model.result("pg3").run();

    model.param().set("vm1", "500");
    model.param().set("vm2", "-500");

    model.physics("mfnc").active(false);

    model.sol("sol1").study("std1");
    model.sol("sol1").feature().remove("s1");
    model.sol("sol1").feature().remove("v1");
    model.sol("sol1").feature().remove("st1");
    model.sol("sol1").feature().create("st1", "StudyStep");
    model.sol("sol1").feature("st1").set("study", "std1");
    model.sol("sol1").feature("st1").set("studystep", "stat");
    model.sol("sol1").feature().create("v1", "Variables");
    model.sol("sol1").feature("v1").set("control", "stat");
    model.sol("sol1").feature().create("s1", "Stationary");
    model.sol("sol1").feature("s1").feature().create("fc1", "FullyCoupled");
    model.sol("sol1").feature("s1").feature().create("i1", "Iterative");
    model.sol("sol1").feature("s1").feature("i1").set("prefuntype", "left");
    model.sol("sol1").feature("s1").feature("i1").set("maxlinit", 10000);
    model.sol("sol1").feature("s1").feature("i1").set("linsolver", "cg");
    model.sol("sol1").feature("s1").feature("i1").set("rhob", 400);
    model.sol("sol1").feature("s1").feature("fc1").set("linsolver", "i1");
    model.sol("sol1").feature("s1").feature("i1").feature().create("mg1", "Multigrid");
    model.sol("sol1").feature("s1").feature("i1").feature("mg1").set("amgauto", 3);
    model.sol("sol1").feature("s1").feature("i1").feature("mg1").set("scale", 2);
    model.sol("sol1").feature("s1").feature("i1").feature("mg1").set("gmglevels", 1);
    model.sol("sol1").feature("s1").feature("i1").feature("mg1").set("massem", true);
    model.sol("sol1").feature("s1").feature("i1").feature("mg1").set("rmethod", "longest");
    model.sol("sol1").feature("s1").feature("i1").feature("mg1").set("mkeep", false);
    model.sol("sol1").feature("s1").feature("i1").feature("mg1").set("mgcycle", "v");
    model.sol("sol1").feature("s1").feature("i1").feature("mg1").set("prefun", "amg");
    model.sol("sol1").feature("s1").feature("i1").feature("mg1").set("mcasegen", "any");
    model.sol("sol1").feature("s1").feature("i1").feature("mg1").set("mglevels", 5);
    model.sol("sol1").feature("s1").feature("i1").feature("mg1").set("iter", 2);
    model.sol("sol1").feature("s1").feature("i1").feature("mg1").set("maxcoarsedof", 5000);
    model.sol("sol1").feature("s1").feature().remove("fcDef");
    model.sol("sol1").attach("std1");
    model.sol("sol1").runAll();

    model.result().remove("pg1");
    model.result().remove("pg2");
    model.result("pg3").run();
    model.result("pg3").run();
    model.result("pg3").run();
    model.result("pg3").feature().create("surf2", "Surface");
    model.result("pg3").run();
    model.result("pg3").feature("con3").set("levels", "range(0,1,20)");
    model.result("pg3").run();
    model.result("pg3").run();
    model.result("pg3").feature("surf2").active(false);
    model.result("pg3").run();
    model.result("pg3").run();

    model.param().set("vm1", "250");
    model.param().set("vm2", "-250");

    model.sol("sol1").study("std1");
    model.sol("sol1").feature().remove("s1");
    model.sol("sol1").feature().remove("v1");
    model.sol("sol1").feature().remove("st1");
    model.sol("sol1").feature().create("st1", "StudyStep");
    model.sol("sol1").feature("st1").set("study", "std1");
    model.sol("sol1").feature("st1").set("studystep", "stat");
    model.sol("sol1").feature().create("v1", "Variables");
    model.sol("sol1").feature("v1").set("control", "stat");
    model.sol("sol1").feature().create("s1", "Stationary");
    model.sol("sol1").feature("s1").feature().create("fc1", "FullyCoupled");
    model.sol("sol1").feature("s1").feature().create("i1", "Iterative");
    model.sol("sol1").feature("s1").feature("i1").set("prefuntype", "left");
    model.sol("sol1").feature("s1").feature("i1").set("maxlinit", 10000);
    model.sol("sol1").feature("s1").feature("i1").set("linsolver", "cg");
    model.sol("sol1").feature("s1").feature("i1").set("rhob", 400);
    model.sol("sol1").feature("s1").feature("fc1").set("linsolver", "i1");
    model.sol("sol1").feature("s1").feature("i1").feature().create("mg1", "Multigrid");
    model.sol("sol1").feature("s1").feature("i1").feature("mg1").set("amgauto", 3);
    model.sol("sol1").feature("s1").feature("i1").feature("mg1").set("scale", 2);
    model.sol("sol1").feature("s1").feature("i1").feature("mg1").set("gmglevels", 1);
    model.sol("sol1").feature("s1").feature("i1").feature("mg1").set("massem", true);
    model.sol("sol1").feature("s1").feature("i1").feature("mg1").set("rmethod", "longest");
    model.sol("sol1").feature("s1").feature("i1").feature("mg1").set("mkeep", false);
    model.sol("sol1").feature("s1").feature("i1").feature("mg1").set("mgcycle", "v");
    model.sol("sol1").feature("s1").feature("i1").feature("mg1").set("prefun", "amg");
    model.sol("sol1").feature("s1").feature("i1").feature("mg1").set("mcasegen", "any");
    model.sol("sol1").feature("s1").feature("i1").feature("mg1").set("mglevels", 5);
    model.sol("sol1").feature("s1").feature("i1").feature("mg1").set("iter", 2);
    model.sol("sol1").feature("s1").feature("i1").feature("mg1").set("maxcoarsedof", 5000);
    model.sol("sol1").feature("s1").feature().remove("fcDef");
    model.sol("sol1").attach("std1");
    model.sol("sol1").runAll();

    model.result("pg3").run();

    model.param().set("vm1", "150");
    model.param().set("vm2", "-150");

    model.sol("sol1").study("std1");
    model.sol("sol1").feature().remove("s1");
    model.sol("sol1").feature().remove("v1");
    model.sol("sol1").feature().remove("st1");
    model.sol("sol1").feature().create("st1", "StudyStep");
    model.sol("sol1").feature("st1").set("study", "std1");
    model.sol("sol1").feature("st1").set("studystep", "stat");
    model.sol("sol1").feature().create("v1", "Variables");
    model.sol("sol1").feature("v1").set("control", "stat");
    model.sol("sol1").feature().create("s1", "Stationary");
    model.sol("sol1").feature("s1").feature().create("fc1", "FullyCoupled");
    model.sol("sol1").feature("s1").feature().create("i1", "Iterative");
    model.sol("sol1").feature("s1").feature("i1").set("prefuntype", "left");
    model.sol("sol1").feature("s1").feature("i1").set("maxlinit", 10000);
    model.sol("sol1").feature("s1").feature("i1").set("linsolver", "cg");
    model.sol("sol1").feature("s1").feature("i1").set("rhob", 400);
    model.sol("sol1").feature("s1").feature("fc1").set("linsolver", "i1");
    model.sol("sol1").feature("s1").feature("i1").feature().create("mg1", "Multigrid");
    model.sol("sol1").feature("s1").feature("i1").feature("mg1").set("amgauto", 3);
    model.sol("sol1").feature("s1").feature("i1").feature("mg1").set("scale", 2);
    model.sol("sol1").feature("s1").feature("i1").feature("mg1").set("gmglevels", 1);
    model.sol("sol1").feature("s1").feature("i1").feature("mg1").set("massem", true);
    model.sol("sol1").feature("s1").feature("i1").feature("mg1").set("rmethod", "longest");
    model.sol("sol1").feature("s1").feature("i1").feature("mg1").set("mkeep", false);
    model.sol("sol1").feature("s1").feature("i1").feature("mg1").set("mgcycle", "v");
    model.sol("sol1").feature("s1").feature("i1").feature("mg1").set("prefun", "amg");
    model.sol("sol1").feature("s1").feature("i1").feature("mg1").set("mcasegen", "any");
    model.sol("sol1").feature("s1").feature("i1").feature("mg1").set("mglevels", 5);
    model.sol("sol1").feature("s1").feature("i1").feature("mg1").set("iter", 2);
    model.sol("sol1").feature("s1").feature("i1").feature("mg1").set("maxcoarsedof", 5000);
    model.sol("sol1").feature("s1").feature().remove("fcDef");
    model.sol("sol1").attach("std1");
    model.sol("sol1").runAll();

    model.result("pg3").run();
    model.result("pg3").run();
    model.result("pg3").feature("con3").set("levels", "range(0,.1,2)");
    model.result("pg3").run();
    model.result("pg3").feature("con3").set("levels", "range(0,.1,5)");
    model.result("pg3").run();

    model.param().set("vm1", "0");
    model.param().set("vm2", "0");

    model.sol("sol1").study("std1");
    model.sol("sol1").feature().remove("s1");
    model.sol("sol1").feature().remove("v1");
    model.sol("sol1").feature().remove("st1");
    model.sol("sol1").feature().create("st1", "StudyStep");
    model.sol("sol1").feature("st1").set("study", "std1");
    model.sol("sol1").feature("st1").set("studystep", "stat");
    model.sol("sol1").feature().create("v1", "Variables");
    model.sol("sol1").feature("v1").set("control", "stat");
    model.sol("sol1").feature().create("s1", "Stationary");
    model.sol("sol1").feature("s1").feature().create("fc1", "FullyCoupled");
    model.sol("sol1").feature("s1").feature().create("i1", "Iterative");
    model.sol("sol1").feature("s1").feature("i1").set("prefuntype", "left");
    model.sol("sol1").feature("s1").feature("i1").set("maxlinit", 10000);
    model.sol("sol1").feature("s1").feature("i1").set("linsolver", "cg");
    model.sol("sol1").feature("s1").feature("i1").set("rhob", 400);
    model.sol("sol1").feature("s1").feature("fc1").set("linsolver", "i1");
    model.sol("sol1").feature("s1").feature("i1").feature().create("mg1", "Multigrid");
    model.sol("sol1").feature("s1").feature("i1").feature("mg1").set("amgauto", 3);
    model.sol("sol1").feature("s1").feature("i1").feature("mg1").set("scale", 2);
    model.sol("sol1").feature("s1").feature("i1").feature("mg1").set("gmglevels", 1);
    model.sol("sol1").feature("s1").feature("i1").feature("mg1").set("massem", true);
    model.sol("sol1").feature("s1").feature("i1").feature("mg1").set("rmethod", "longest");
    model.sol("sol1").feature("s1").feature("i1").feature("mg1").set("mkeep", false);
    model.sol("sol1").feature("s1").feature("i1").feature("mg1").set("mgcycle", "v");
    model.sol("sol1").feature("s1").feature("i1").feature("mg1").set("prefun", "amg");
    model.sol("sol1").feature("s1").feature("i1").feature("mg1").set("mcasegen", "any");
    model.sol("sol1").feature("s1").feature("i1").feature("mg1").set("mglevels", 5);
    model.sol("sol1").feature("s1").feature("i1").feature("mg1").set("iter", 2);
    model.sol("sol1").feature("s1").feature("i1").feature("mg1").set("maxcoarsedof", 5000);
    model.sol("sol1").feature("s1").feature().remove("fcDef");
    model.sol("sol1").attach("std1");
    model.sol("sol1").runAll();

    model.result("pg3").run();

    model.param().set("vr2", "12500");

    model.sol("sol1").study("std1");
    model.sol("sol1").feature().remove("s1");
    model.sol("sol1").feature().remove("v1");
    model.sol("sol1").feature().remove("st1");
    model.sol("sol1").feature().create("st1", "StudyStep");
    model.sol("sol1").feature("st1").set("study", "std1");
    model.sol("sol1").feature("st1").set("studystep", "stat");
    model.sol("sol1").feature().create("v1", "Variables");
    model.sol("sol1").feature("v1").set("control", "stat");
    model.sol("sol1").feature().create("s1", "Stationary");
    model.sol("sol1").feature("s1").feature().create("fc1", "FullyCoupled");
    model.sol("sol1").feature("s1").feature().create("i1", "Iterative");
    model.sol("sol1").feature("s1").feature("i1").set("prefuntype", "left");
    model.sol("sol1").feature("s1").feature("i1").set("maxlinit", 10000);
    model.sol("sol1").feature("s1").feature("i1").set("linsolver", "cg");
    model.sol("sol1").feature("s1").feature("i1").set("rhob", 400);
    model.sol("sol1").feature("s1").feature("fc1").set("linsolver", "i1");
    model.sol("sol1").feature("s1").feature("i1").feature().create("mg1", "Multigrid");
    model.sol("sol1").feature("s1").feature("i1").feature("mg1").set("amgauto", 3);
    model.sol("sol1").feature("s1").feature("i1").feature("mg1").set("scale", 2);
    model.sol("sol1").feature("s1").feature("i1").feature("mg1").set("gmglevels", 1);
    model.sol("sol1").feature("s1").feature("i1").feature("mg1").set("massem", true);
    model.sol("sol1").feature("s1").feature("i1").feature("mg1").set("rmethod", "longest");
    model.sol("sol1").feature("s1").feature("i1").feature("mg1").set("mkeep", false);
    model.sol("sol1").feature("s1").feature("i1").feature("mg1").set("mgcycle", "v");
    model.sol("sol1").feature("s1").feature("i1").feature("mg1").set("prefun", "amg");
    model.sol("sol1").feature("s1").feature("i1").feature("mg1").set("mcasegen", "any");
    model.sol("sol1").feature("s1").feature("i1").feature("mg1").set("mglevels", 5);
    model.sol("sol1").feature("s1").feature("i1").feature("mg1").set("iter", 2);
    model.sol("sol1").feature("s1").feature("i1").feature("mg1").set("maxcoarsedof", 5000);
    model.sol("sol1").feature("s1").feature().remove("fcDef");
    model.sol("sol1").attach("std1");
    model.sol("sol1").runAll();

    model.result("pg3").run();
    model.result("pg3").run();
    model.result("pg3").feature("surf2").set("expr", "es.normE");
    model.result("pg3").feature("surf2").set("unit", "kV/cm");
    model.result("pg3").feature("surf2").active(true);
    model.result("pg3").run();
    model.result("pg3").run();
    model.result("pg3").feature("con3").active(false);
    model.result("pg3").run();
    model.result("pg3").run();
    model.result("pg3").feature("surf2").set("rangecoloractive", "on");
    model.result("pg3").feature("surf2").set("rangecolormax", "45");
    model.result("pg3").set("allowtableupdate", true);
    model.result("pg3").set("renderdatacached", true);
    model.result().table("evl2").addRow(new double[]{0.7144689559936523, 0.10487627983093262, 0});

    model.param().set("vr1", "0");
    model.param().set("vr2", "0");
    model.param().set("vm1", "1000");
    model.param().set("vm2", "-1000");

    model.sol("sol1").study("std1");
    model.sol("sol1").feature().remove("s1");
    model.sol("sol1").feature().remove("v1");
    model.sol("sol1").feature().remove("st1");
    model.sol("sol1").feature().create("st1", "StudyStep");
    model.sol("sol1").feature("st1").set("study", "std1");
    model.sol("sol1").feature("st1").set("studystep", "stat");
    model.sol("sol1").feature().create("v1", "Variables");
    model.sol("sol1").feature("v1").set("control", "stat");
    model.sol("sol1").feature().create("s1", "Stationary");
    model.sol("sol1").feature("s1").feature().create("fc1", "FullyCoupled");
    model.sol("sol1").feature("s1").feature().create("i1", "Iterative");
    model.sol("sol1").feature("s1").feature("i1").set("prefuntype", "left");
    model.sol("sol1").feature("s1").feature("i1").set("maxlinit", 10000);
    model.sol("sol1").feature("s1").feature("i1").set("linsolver", "cg");
    model.sol("sol1").feature("s1").feature("i1").set("rhob", 400);
    model.sol("sol1").feature("s1").feature("fc1").set("linsolver", "i1");
    model.sol("sol1").feature("s1").feature("i1").feature().create("mg1", "Multigrid");
    model.sol("sol1").feature("s1").feature("i1").feature("mg1").set("amgauto", 3);
    model.sol("sol1").feature("s1").feature("i1").feature("mg1").set("scale", 2);
    model.sol("sol1").feature("s1").feature("i1").feature("mg1").set("gmglevels", 1);
    model.sol("sol1").feature("s1").feature("i1").feature("mg1").set("massem", true);
    model.sol("sol1").feature("s1").feature("i1").feature("mg1").set("rmethod", "longest");
    model.sol("sol1").feature("s1").feature("i1").feature("mg1").set("mkeep", false);
    model.sol("sol1").feature("s1").feature("i1").feature("mg1").set("mgcycle", "v");
    model.sol("sol1").feature("s1").feature("i1").feature("mg1").set("prefun", "amg");
    model.sol("sol1").feature("s1").feature("i1").feature("mg1").set("mcasegen", "any");
    model.sol("sol1").feature("s1").feature("i1").feature("mg1").set("mglevels", 5);
    model.sol("sol1").feature("s1").feature("i1").feature("mg1").set("iter", 2);
    model.sol("sol1").feature("s1").feature("i1").feature("mg1").set("maxcoarsedof", 5000);
    model.sol("sol1").feature("s1").feature().remove("fcDef");
    model.sol("sol1").attach("std1");
    model.sol("sol1").runAll();

    model.result("pg3").run();
    model.result("pg3").run();
    model.result("pg3").feature("surf2").set("rangecolormax", "20.7497664797066");
    model.result("pg3").feature("surf2").active(false);
    model.result("pg3").run();
    model.result("pg3").run();
    model.result("pg3").feature("surf1").active(true);

    model.physics("mfnc").active(true);
    model.physics("es").active(false);
    model.physics("es").active(true);

    model.sol("sol1").study("std1");
    model.sol("sol1").feature().remove("s1");
    model.sol("sol1").feature().remove("v1");
    model.sol("sol1").feature().remove("st1");
    model.sol("sol1").feature().create("st1", "StudyStep");
    model.sol("sol1").feature("st1").set("study", "std1");
    model.sol("sol1").feature("st1").set("studystep", "stat");
    model.sol("sol1").feature().create("v1", "Variables");
    model.sol("sol1").feature("v1").set("control", "stat");

    return model;
  }

  public static Model run13(Model model) {
    model.sol("sol1").feature().create("s1", "Stationary");
    model.sol("sol1").feature("s1").feature().create("se1", "Segregated");
    model.sol("sol1").feature("s1").feature("se1").feature().remove("ssDef");
    model.sol("sol1").feature("s1").feature("se1").feature().create("ss1", "SegregatedStep");
    model.sol("sol1").feature("s1").feature("se1").feature("ss1").set("segvar", new String[]{"mod1_V"});
    model.sol("sol1").feature("s1").feature().create("i1", "Iterative");
    model.sol("sol1").feature("s1").feature("i1").set("prefuntype", "left");
    model.sol("sol1").feature("s1").feature("i1").set("maxlinit", 10000);
    model.sol("sol1").feature("s1").feature("i1").set("linsolver", "cg");
    model.sol("sol1").feature("s1").feature("i1").set("rhob", 400);
    model.sol("sol1").feature("s1").feature("se1").feature("ss1").set("linsolver", "i1");
    model.sol("sol1").feature("s1").feature("i1").feature().create("mg1", "Multigrid");
    model.sol("sol1").feature("s1").feature("i1").feature("mg1").set("amgauto", 3);
    model.sol("sol1").feature("s1").feature("i1").feature("mg1").set("scale", 2);
    model.sol("sol1").feature("s1").feature("i1").feature("mg1").set("gmglevels", 1);
    model.sol("sol1").feature("s1").feature("i1").feature("mg1").set("massem", true);
    model.sol("sol1").feature("s1").feature("i1").feature("mg1").set("rmethod", "longest");
    model.sol("sol1").feature("s1").feature("i1").feature("mg1").set("mkeep", false);
    model.sol("sol1").feature("s1").feature("i1").feature("mg1").set("mgcycle", "v");
    model.sol("sol1").feature("s1").feature("i1").feature("mg1").set("prefun", "amg");
    model.sol("sol1").feature("s1").feature("i1").feature("mg1").set("mcasegen", "any");
    model.sol("sol1").feature("s1").feature("i1").feature("mg1").set("mglevels", 5);
    model.sol("sol1").feature("s1").feature("i1").feature("mg1").set("iter", 2);
    model.sol("sol1").feature("s1").feature("i1").feature("mg1").set("maxcoarsedof", 5000);
    model.sol("sol1").feature("s1").feature("se1").feature().create("ss2", "SegregatedStep");
    model.sol("sol1").feature("s1").feature("se1").feature("ss2").set("segvar", new String[]{"mod1_Vm"});
    model.sol("sol1").feature("s1").feature().create("i2", "Iterative");
    model.sol("sol1").feature("s1").feature("i2").set("prefuntype", "left");
    model.sol("sol1").feature("s1").feature("i2").set("maxlinit", 10000);
    model.sol("sol1").feature("s1").feature("i2").set("linsolver", "cg");
    model.sol("sol1").feature("s1").feature("i2").set("rhob", 400);
    model.sol("sol1").feature("s1").feature("se1").feature("ss2").set("linsolver", "i2");
    model.sol("sol1").feature("s1").feature("i2").feature().create("mg1", "Multigrid");
    model.sol("sol1").feature("s1").feature("i2").feature("mg1").set("amgauto", 3);
    model.sol("sol1").feature("s1").feature("i2").feature("mg1").set("scale", 2);
    model.sol("sol1").feature("s1").feature("i2").feature("mg1").set("gmglevels", 1);
    model.sol("sol1").feature("s1").feature("i2").feature("mg1").set("massem", true);
    model.sol("sol1").feature("s1").feature("i2").feature("mg1").set("rmethod", "longest");
    model.sol("sol1").feature("s1").feature("i2").feature("mg1").set("mkeep", false);
    model.sol("sol1").feature("s1").feature("i2").feature("mg1").set("mgcycle", "v");
    model.sol("sol1").feature("s1").feature("i2").feature("mg1").set("prefun", "amg");
    model.sol("sol1").feature("s1").feature("i2").feature("mg1").set("mcasegen", "any");
    model.sol("sol1").feature("s1").feature("i2").feature("mg1").set("mglevels", 5);
    model.sol("sol1").feature("s1").feature("i2").feature("mg1").set("iter", 2);
    model.sol("sol1").feature("s1").feature("i2").feature("mg1").set("maxcoarsedof", 5000);
    model.sol("sol1").feature("s1").feature().remove("fcDef");
    model.sol("sol1").attach("std1");
    model.sol("sol1").runAll();

    model.result("pg3").run();
    model.result("pg3").run();
    model.result("pg3").feature("surf1").set("unit", "G");
    model.result("pg3").run();

    model.view("view1").hideObjects("hide1").add("int1", new int[]{1});
    model.view("view1").hideObjects("hide1").add("dif1", new int[]{1});
    model.view("view1").hideObjects("hide1").add("int1", new int[]{2});
    model.view("view1").hideObjects("hide1").add("dif1", new int[]{2});
    model.view("view1").hideEntities().create("hide1");
    model.view("view1").hideEntities("hide1").geom(3);
    model.view("view1").hideEntities("hide1").add(new int[]{1});
    model.view("view1").hideEntities("hide1").add(new int[]{8});
    model.view("view1").set("drawhidestatus", "hide");
    model.view("view1").hideObjects().clear();
    model.view("view1").hideObjects().create("hide1");
    model.view("view1").hideObjects("hide1").init(3);
    model.view("view1").hideObjects("hide1").add("cyl4", new int[]{1});
    model.view("view1").hideObjects("hide1").add("cyl3", new int[]{1});
    model.view("view1").hideObjects("hide1").add("dif1", new int[]{1});
    model.view("view1").hideObjects("hide1").add("dif1", new int[]{2});
    model.view("view1").hideObjects("hide1").add("int1", new int[]{1});
    model.view("view1").hideObjects().clear();
    model.view("view1").hideObjects().create("hide1");
    model.view("view1").hideObjects("hide1").init(3);
    model.view("view1").hideObjects("hide1").add("cyl4", new int[]{1});
    model.view("view1").hideObjects("hide1").add("cyl3", new int[]{1});
    model.view("view1").hideObjects("hide1").add("cyl2", new int[]{1});
    model.view("view1").hideObjects("hide1").add("cyl1", new int[]{1});
    model.view("view1").hideObjects("hide1").add("dif1", new int[]{1});
    model.view("view1").hideObjects("hide1").add("dif1", new int[]{2});
    model.view("view1").hideObjects().clear();
    model.view("view1").hideObjects().create("hide1");
    model.view("view1").hideObjects("hide1").init(3);
    model.view("view1").hideObjects("hide1").add("cyl4", new int[]{1});
    model.view("view1").hideObjects("hide1").add("cyl3", new int[]{1});
    model.view("view1").hideObjects("hide1").add("dif1", new int[]{1, 2});

    model.result("pg3").run();
    model.result("pg3").feature("surf1").set("expr", "es.normE");
    model.result("pg3").run();

    model.view("view1").hideEntities().clear();

    model.result("pg3").run();
    model.result("pg3").run();
    model.result("pg3").feature("surf1").set("rangecolormax", "2074981.49387201");
    model.result("pg3").set("allowtableupdate", true);
    model.result("pg3").set("renderdatacached", true);
    model.result().table("evl2")
         .addRow(new double[]{-0.019664525985717773, -0.06554770469665527, 1963107.0703983852});
    model.result().table("evl2")
         .addRow(new double[]{-0.019664525985717773, -0.06554770469665527, 1963107.0703983852});
    model.result().table("evl2")
         .addRow(new double[]{-0.019664525985717773, -1.3109523057937622, 1303552.1300168491});
    model.result().table("evl2")
         .addRow(new double[]{-0.019664525985717773, -1.3109523057937622, 1303552.1300168491});

    model.param().set("vr1", "1e4");
    model.param().set("vr2", "1e4");
    model.param().set("vm1", "0");
    model.param().set("vm2", "0");
    model.param().set("vr3", "1e4");
    model.param().set("vr4", "1e4");

    model.sol("sol1").study("std1");
    model.sol("sol1").feature().remove("s1");
    model.sol("sol1").feature().remove("v1");
    model.sol("sol1").feature().remove("st1");
    model.sol("sol1").feature().create("st1", "StudyStep");
    model.sol("sol1").feature("st1").set("study", "std1");
    model.sol("sol1").feature("st1").set("studystep", "stat");
    model.sol("sol1").feature().create("v1", "Variables");
    model.sol("sol1").feature("v1").set("control", "stat");
    model.sol("sol1").feature().create("s1", "Stationary");
    model.sol("sol1").feature("s1").feature().create("se1", "Segregated");
    model.sol("sol1").feature("s1").feature("se1").feature().remove("ssDef");
    model.sol("sol1").feature("s1").feature("se1").feature().create("ss1", "SegregatedStep");
    model.sol("sol1").feature("s1").feature("se1").feature("ss1").set("segvar", new String[]{"mod1_V"});
    model.sol("sol1").feature("s1").feature().create("i1", "Iterative");
    model.sol("sol1").feature("s1").feature("i1").set("prefuntype", "left");
    model.sol("sol1").feature("s1").feature("i1").set("maxlinit", 10000);
    model.sol("sol1").feature("s1").feature("i1").set("linsolver", "cg");
    model.sol("sol1").feature("s1").feature("i1").set("rhob", 400);
    model.sol("sol1").feature("s1").feature("se1").feature("ss1").set("linsolver", "i1");
    model.sol("sol1").feature("s1").feature("i1").feature().create("mg1", "Multigrid");
    model.sol("sol1").feature("s1").feature("i1").feature("mg1").set("amgauto", 3);
    model.sol("sol1").feature("s1").feature("i1").feature("mg1").set("scale", 2);
    model.sol("sol1").feature("s1").feature("i1").feature("mg1").set("gmglevels", 1);
    model.sol("sol1").feature("s1").feature("i1").feature("mg1").set("massem", true);
    model.sol("sol1").feature("s1").feature("i1").feature("mg1").set("rmethod", "longest");
    model.sol("sol1").feature("s1").feature("i1").feature("mg1").set("mkeep", false);
    model.sol("sol1").feature("s1").feature("i1").feature("mg1").set("mgcycle", "v");
    model.sol("sol1").feature("s1").feature("i1").feature("mg1").set("prefun", "amg");
    model.sol("sol1").feature("s1").feature("i1").feature("mg1").set("mcasegen", "any");
    model.sol("sol1").feature("s1").feature("i1").feature("mg1").set("mglevels", 5);
    model.sol("sol1").feature("s1").feature("i1").feature("mg1").set("iter", 2);
    model.sol("sol1").feature("s1").feature("i1").feature("mg1").set("maxcoarsedof", 5000);
    model.sol("sol1").feature("s1").feature("se1").feature().create("ss2", "SegregatedStep");
    model.sol("sol1").feature("s1").feature("se1").feature("ss2").set("segvar", new String[]{"mod1_Vm"});
    model.sol("sol1").feature("s1").feature().create("i2", "Iterative");
    model.sol("sol1").feature("s1").feature("i2").set("prefuntype", "left");
    model.sol("sol1").feature("s1").feature("i2").set("maxlinit", 10000);
    model.sol("sol1").feature("s1").feature("i2").set("linsolver", "cg");
    model.sol("sol1").feature("s1").feature("i2").set("rhob", 400);
    model.sol("sol1").feature("s1").feature("se1").feature("ss2").set("linsolver", "i2");
    model.sol("sol1").feature("s1").feature("i2").feature().create("mg1", "Multigrid");
    model.sol("sol1").feature("s1").feature("i2").feature("mg1").set("amgauto", 3);
    model.sol("sol1").feature("s1").feature("i2").feature("mg1").set("scale", 2);
    model.sol("sol1").feature("s1").feature("i2").feature("mg1").set("gmglevels", 1);
    model.sol("sol1").feature("s1").feature("i2").feature("mg1").set("massem", true);
    model.sol("sol1").feature("s1").feature("i2").feature("mg1").set("rmethod", "longest");
    model.sol("sol1").feature("s1").feature("i2").feature("mg1").set("mkeep", false);
    model.sol("sol1").feature("s1").feature("i2").feature("mg1").set("mgcycle", "v");
    model.sol("sol1").feature("s1").feature("i2").feature("mg1").set("prefun", "amg");
    model.sol("sol1").feature("s1").feature("i2").feature("mg1").set("mcasegen", "any");
    model.sol("sol1").feature("s1").feature("i2").feature("mg1").set("mglevels", 5);
    model.sol("sol1").feature("s1").feature("i2").feature("mg1").set("iter", 2);
    model.sol("sol1").feature("s1").feature("i2").feature("mg1").set("maxcoarsedof", 5000);
    model.sol("sol1").feature("s1").feature().remove("fcDef");
    model.sol("sol1").attach("std1");
    model.sol("sol1").runAll();

    model.result("pg3").run();
    model.result().dataset().create("cln1", "CutLine2D");
    model.result().dataset("cln1").set("bounded", "off");
    model.result().dataset("cln1").run();
    model.result().create("pg4", "PlotGroup1D");
    model.result("pg4").run();
    model.result("pg4").set("data", "cln1");
    model.result("pg4").feature().create("lngr1", "LineGraph");
    model.result("pg4").feature("lngr1").set("expr", "es.normE");
    model.result("pg4").feature("lngr1").set("unit", "kV/cm");
    model.result("pg4").run();
    model.result("pg4").feature("lngr1").set("xdata", "expr");
    model.result().dataset("cln1").setIndex("spacevars", "cx", 0);
    model.result("pg4").run();
    model.result("pg4").feature("lngr1").set("xdataexpr", "cx");
    model.result("pg4").run();
    model.result("pg4").run();
    model.result().dataset("cln1").setIndex("genpoints", "0", 1, 0);
    model.result().dataset("cln1").setIndex("genpoints", "1", 1, 1);
    model.result().dataset("cln1").run();
    model.result("pg4").run();
    model.result("pg4").run();
    model.result().dataset("cln1").setIndex("spacevars", "Zaxis", 0);
    model.result("pg3").run();
    model.result("pg4").feature("lngr1").set("xdataexpr", "Zaxis");
    model.result("pg4").run();
    model.result("pg4").run();
    model.result("pg4").set("titletype", "none");
    model.result("pg4").run();
    model.result("pg4").feature("lngr1").set("titletype", "custom");
    model.result("pg4").run();
    model.result("pg4").feature("lngr1").set("prefixintitle", "Trapping Electric Field along Z-axis");
    model.result("pg4").run();
    model.result("pg4").run();
    model.result("pg4").feature("lngr1").set("titletype", "manual");
    model.result("pg4").feature("lngr1").set("title", "Trapping Electric");
    model.result("pg4").run();
    model.result("pg4").run();
    model.result("pg4").set("titletype", "manual");
    model.result("pg4").set("title", "Tr");
    model.result("pg4").run();
    model.result("pg4").set("title", "Trapping Electric Field");
    model.result("pg4").run();
    model.result().dataset().create("cln2", "CutLine3D");
    model.result().dataset("cln2").set("bndsnap", "off");
    model.result().dataset("cln2").set("bounded", "off");
    model.result().dataset("cln2").setIndex("spacevars", "Xaxis", 0);
    model.result().dataset().duplicate("cln3", "cln2");
    model.result().dataset("cln3").setIndex("genpoints", "1", 1, 1);
    model.result().dataset("cln3").setIndex("genpoints", "0", 1, 0);
    model.result().dataset("cln3").setIndex("spacevars", "Yaxis", 0);
    model.result().dataset("cln3").run();
    model.result().dataset("cln1").name("Z-axis");
    model.result().dataset("cln2").name("X-axis");
    model.result().dataset("cln3").name("Y-axis");
    model.result().dataset().duplicate("cln4", "cln3");
    model.result().dataset("cln4").name("W-axis");
    model.result().dataset("cln4").setIndex("genpoints", "1", 1, 0);
    model.result().dataset("cln4").setIndex("spacevars", "Waxis", 0);
    model.result().dataset().duplicate("cln5", "cln4");
    model.result().dataset("cln5").name("V-axis");
    model.result().dataset("cln5").setIndex("spacevars", "Vaxis", 0);
    model.result().dataset("cln5").setIndex("genpoints", "-1", 1, 1);
    model.result().dataset("cln5").run();
    model.result().dataset().duplicate("cln6", "cln5");
    model.result().dataset("cln6").name("M-axis");
    model.result().dataset("cln6").setIndex("genpoints", "sin(mang)", 1, 0);
    model.result().dataset("cln6").setIndex("genpoints", "cos(mang)", 1, 1);
    model.result().dataset("cln6").run();
    model.result("pg4").run();
    model.result("pg4").run();
    model.result().duplicate("pg5", "pg4");
    model.result("pg5").run();
    model.result("pg4").run();
    model.result("pg4").name("Ztrap");
    model.result("pg5").run();
    model.result("pg5").feature().create("lngr2", "LineGraph");
    model.result("pg5").run();
    model.result("pg5").run();
    model.result("pg5").run();
    model.result("pg5").run();
    model.result("pg5").feature("lngr2").set("xdata", "expr");
    model.result("pg5").run();
    model.result("pg5").run();
    model.result("pg5").run();
    model.result("pg5").feature("lngr1").set("data", "cln1");
    model.result("pg5").run();
    model.result("pg5").run();
    model.result("pg5").run();
    model.result("pg5").feature("lngr2").set("expr", "mfnc.normB");
    model.result("pg5").feature("lngr2").set("unit", "G");
    model.result("pg5").feature("lngr2").set("xdataexpr", "Zaxis");
    model.result("pg5").run();
    model.result("pg5").feature("lngr2").set("unit", "T");
    model.result("pg5").run();
    model.result("pg5").feature("lngr2").set("unit", "kG");
    model.result("pg5").run();
    model.result("pg5").run();
    model.result("pg5").set("title", "Trapping Fields along Z");
    model.result("pg5").set("xlabelactive", "on");
    model.result("pg5").set("ylabelactive", "on");
    model.result("pg5").set("ylabel", "Field Norms (kG or kV/cm)");
    model.result("pg5").run();
    model.result("pg5").feature("lngr1").set("legend", "on");
    model.result("pg5").feature("lngr1").set("legendmethod", "manual");
    model.result("pg5").feature("lngr1").setIndex("legends", "Electric Field, 12.5kV applied to rods", 0);
    model.result("pg5").run();
    model.result("pg5").feature("lngr2").set("legend", "on");
    model.result("pg5").feature("lngr2").set("legendmethod", "manual");
    model.result("pg5").feature("lngr2").setIndex("legends", "Magnetic Field, no lifting applied", 0);
    model.result("pg5").run();
    model.result("pg4").run();
    model.result().remove("pg4");
    model.result("pg5").run();
    model.result("pg5").name("Zaxis");
    model.result().duplicate("pg6", "pg5");
    model.result("pg6").run();
    model.result("pg6").name("Xaxis");
    model.result("pg6").set("data", "cln2");
    model.result("pg6").set("title", "Trapping Fields along X");
    model.result("pg6").set("xlabel", "Xaxis (mm)");
    model.result("pg6").run();
    model.result("pg6").feature("lngr1").set("xdataexpr", "Xaxis");
    model.result("pg6").feature("lngr2").set("xdataexpr", "Xaxis");
    model.result("pg6").feature("lngr1").set("data", "parent");
    model.result("pg6").run();
    model.result("pg6").run();
    model.result("pg6").feature().duplicate("lngr3", "lngr2");
    model.result("pg6").run();
    model.result("pg6").feature("lngr3").set("data", "cln3");
    model.result("pg6").feature("lngr3").set("xdataexpr", "Yaxis");
    model.result("pg6").run();
    model.result("pg6").feature("lngr3").set("data", "cln3");
    model.result("pg6").run();
    model.result("pg6").set("title", "Trapping Fields in XY Plane");
    model.result("pg6").run();
    model.result("pg6").run();
    model.result("pg6").feature("lngr2").setIndex("legends", "Magnetic Field along X", 0);
    model.result("pg6").run();
    model.result("pg6").feature("lngr3").setIndex("legends", "Magnetic Field along Y", 0);
    model.result("pg6").run();
    model.result("pg6").run();
    model.result("pg6").run();
    model.result("pg6").feature().duplicate("lngr4", "lngr3");
    model.result("pg6").run();
    model.result("pg6").feature("lngr4").setIndex("legends", "Magnetic Field along Magnet Axis", 0);
    model.result("pg6").feature("lngr4").set("data", "cln6");
    model.result("pg6").feature("lngr4").set("xdataexpr", "Maxis");
    model.result().dataset("cln6").setIndex("spacevars", "Maxis", 0);
    model.result("pg6").run();
    model.result("pg6").run();
    model.result("pg6").run();
    model.result("pg6").run();
    model.result("pg6").run();
    model.result("pg6").feature("lngr4").set("xdataunit", "mm");
    model.result("pg6").run();
    model.result("pg6").run();
    model.result("pg6").run();
    model.result("pg6").run();
    model.result("pg6").name("XYplane");
    model.result("pg6").set("legendpos", "lowerleft");
    model.result("pg6").run();
    model.result("pg6").feature("lngr2").setIndex("legends", "Magnetic Field X", 0);
    model.result("pg6").run();
    model.result("pg6").feature("lngr3").setIndex("legends", "Magnetic Field Y", 0);
    model.result("pg6").run();
    model.result("pg6").feature("lngr4").setIndex("legends", "Magnetic Field, Magnet Axis", 0);
    model.result("pg6").run();
    model.result("pg6").feature("lngr1").setIndex("legends", "Electric Field, 12.5kV Applied", 0);
    model.result("pg6").run();
    model.result("pg6").run();
    model.result("pg6").set("xlabel", "Distance to Trap Center, Various Axes (mm)");
    model.result("pg6").run();
    model.result("pg6").run();
    model.result("pg6").run();
    model.result("pg6").run();
    model.result("pg6").feature("lngr1").set("linewidth", "2");
    model.result("pg6").run();
    model.result("pg6").feature("lngr2").set("linewidth", "2");
    model.result("pg6").run();
    model.result("pg6").feature("lngr3").set("linewidth", "2");
    model.result("pg6").run();
    model.result("pg6").feature("lngr4").set("linewidth", "2");
    model.result("pg5").run();
    model.result("pg6").run();
    model.result("pg5").run();
    model.result("pg5").run();
    model.result("pg6").feature().copy("lngr5", "pg5/lngr1");
    model.result("pg5").feature().remove("lngr1");
    model.result("pg6").feature().copy("lngr6", "pg5/lngr2");
    model.result("pg5").feature().remove("lngr2");
    model.result("pg6").feature("lngr5").set("linewidth", "2");
    model.result("pg6").run();
    model.result("pg6").feature("lngr6").set("linewidth", "2");
    model.result("pg6").feature("lngr6").setIndex("legends", "Magnetic Field Z", 0);
    model.result("pg6").feature("lngr6").set("data", "cln1");
    model.result("pg6").run();
    model.result("pg6").run();
    model.result("pg6").feature("lngr5").setIndex("legends", "Electric Field Z", 0);
    model.result("pg6").run();
    model.result("pg6").feature("lngr1").setIndex("legends", "Electric Field X", 0);
    model.result("pg6").feature().move("lngr6", 1);
    model.result("pg6").run();
    model.result("pg6").feature().move("lngr6", 5);
    model.result("pg6").feature().move("lngr5", 1);
    model.result("pg6").run();
    model.result("pg6").feature().move("lngr5", 0);
    model.result("pg6").run();
    model.result("pg6").feature("lngr5").setIndex("legends", "E-field Z", 0);
    model.result("pg6").run();
    model.result("pg6").feature("lngr1").setIndex("legends", "E-field X", 0);
    model.result("pg6").run();
    model.result("pg6").feature("lngr2").setIndex("legends", "B-field X", 0);
    model.result("pg6").run();
    model.result("pg6").feature("lngr3").setIndex("legends", "B-field Y", 0);
    model.result("pg6").run();
    model.result("pg6").feature("lngr4").setIndex("legends", "B-field, Through Mag", 0);
    model.result("pg6").feature("lngr4").setIndex("legends", "B-field, Mag-axis", 0);
    model.result("pg6").run();
    model.result("pg6").feature("lngr6").setIndex("legends", "B-field Z", 0);
    model.result("pg6").run();
    model.result("pg6").feature().move("lngr1", 4);
    model.result("pg6").run();
    model.result("pg3").run();
    model.result("pg6").run();

    model.mesh("mesh1").feature("ref1").set("numrefine", "3");

    model.sol("sol1").study("std1");
    model.sol("sol1").feature().remove("s1");
    model.sol("sol1").feature().remove("v1");
    model.sol("sol1").feature().remove("st1");
    model.sol("sol1").feature().create("st1", "StudyStep");
    model.sol("sol1").feature("st1").set("study", "std1");
    model.sol("sol1").feature("st1").set("studystep", "stat");
    model.sol("sol1").feature().create("v1", "Variables");
    model.sol("sol1").feature("v1").set("control", "stat");
    model.sol("sol1").feature().create("s1", "Stationary");
    model.sol("sol1").feature("s1").feature().create("se1", "Segregated");
    model.sol("sol1").feature("s1").feature("se1").feature().remove("ssDef");
    model.sol("sol1").feature("s1").feature("se1").feature().create("ss1", "SegregatedStep");
    model.sol("sol1").feature("s1").feature("se1").feature("ss1").set("segvar", new String[]{"mod1_V"});
    model.sol("sol1").feature("s1").feature().create("i1", "Iterative");
    model.sol("sol1").feature("s1").feature("i1").set("prefuntype", "left");
    model.sol("sol1").feature("s1").feature("i1").set("maxlinit", 10000);
    model.sol("sol1").feature("s1").feature("i1").set("linsolver", "cg");
    model.sol("sol1").feature("s1").feature("i1").set("rhob", 400);
    model.sol("sol1").feature("s1").feature("se1").feature("ss1").set("linsolver", "i1");
    model.sol("sol1").feature("s1").feature("i1").feature().create("mg1", "Multigrid");
    model.sol("sol1").feature("s1").feature("i1").feature("mg1").set("amgauto", 3);
    model.sol("sol1").feature("s1").feature("i1").feature("mg1").set("scale", 2);
    model.sol("sol1").feature("s1").feature("i1").feature("mg1").set("gmglevels", 1);
    model.sol("sol1").feature("s1").feature("i1").feature("mg1").set("massem", true);
    model.sol("sol1").feature("s1").feature("i1").feature("mg1").set("rmethod", "longest");
    model.sol("sol1").feature("s1").feature("i1").feature("mg1").set("mkeep", false);
    model.sol("sol1").feature("s1").feature("i1").feature("mg1").set("mgcycle", "v");
    model.sol("sol1").feature("s1").feature("i1").feature("mg1").set("prefun", "amg");
    model.sol("sol1").feature("s1").feature("i1").feature("mg1").set("mcasegen", "any");
    model.sol("sol1").feature("s1").feature("i1").feature("mg1").set("mglevels", 5);
    model.sol("sol1").feature("s1").feature("i1").feature("mg1").set("iter", 2);
    model.sol("sol1").feature("s1").feature("i1").feature("mg1").set("maxcoarsedof", 5000);
    model.sol("sol1").feature("s1").feature("se1").feature().create("ss2", "SegregatedStep");
    model.sol("sol1").feature("s1").feature("se1").feature("ss2").set("segvar", new String[]{"mod1_Vm"});
    model.sol("sol1").feature("s1").feature().create("i2", "Iterative");
    model.sol("sol1").feature("s1").feature("i2").set("prefuntype", "left");
    model.sol("sol1").feature("s1").feature("i2").set("maxlinit", 10000);
    model.sol("sol1").feature("s1").feature("i2").set("linsolver", "cg");
    model.sol("sol1").feature("s1").feature("i2").set("rhob", 400);
    model.sol("sol1").feature("s1").feature("se1").feature("ss2").set("linsolver", "i2");
    model.sol("sol1").feature("s1").feature("i2").feature().create("mg1", "Multigrid");
    model.sol("sol1").feature("s1").feature("i2").feature("mg1").set("amgauto", 3);
    model.sol("sol1").feature("s1").feature("i2").feature("mg1").set("scale", 2);
    model.sol("sol1").feature("s1").feature("i2").feature("mg1").set("gmglevels", 1);
    model.sol("sol1").feature("s1").feature("i2").feature("mg1").set("massem", true);
    model.sol("sol1").feature("s1").feature("i2").feature("mg1").set("rmethod", "longest");
    model.sol("sol1").feature("s1").feature("i2").feature("mg1").set("mkeep", false);
    model.sol("sol1").feature("s1").feature("i2").feature("mg1").set("mgcycle", "v");
    model.sol("sol1").feature("s1").feature("i2").feature("mg1").set("prefun", "amg");
    model.sol("sol1").feature("s1").feature("i2").feature("mg1").set("mcasegen", "any");
    model.sol("sol1").feature("s1").feature("i2").feature("mg1").set("mglevels", 5);
    model.sol("sol1").feature("s1").feature("i2").feature("mg1").set("iter", 2);
    model.sol("sol1").feature("s1").feature("i2").feature("mg1").set("maxcoarsedof", 5000);
    model.sol("sol1").feature("s1").feature().remove("fcDef");
    model.sol("sol1").attach("std1");
    model.sol("sol1").runAll();

    model.result("pg3").run();
    model.result("pg6").run();

    model.view("view1").hideEntities().create("hide1");
    model.view("view1").hideEntities("hide1").geom(3);
    model.view("view1").hideEntities("hide1").add(new int[]{1});

    model.mesh("mesh1").feature("ref1").selection().set(new int[]{8, 16, 17, 21});

    model.view("view1").hideEntities("hide1").add(new int[]{8});

    model.mesh("mesh1").feature("ref1").set("numrefine", "2");

    model.sol("sol1").study("std1");
    model.sol("sol1").feature().remove("s1");
    model.sol("sol1").feature().remove("v1");
    model.sol("sol1").feature().remove("st1");
    model.sol("sol1").feature().create("st1", "StudyStep");
    model.sol("sol1").feature("st1").set("study", "std1");
    model.sol("sol1").feature("st1").set("studystep", "stat");
    model.sol("sol1").feature().create("v1", "Variables");
    model.sol("sol1").feature("v1").set("control", "stat");
    model.sol("sol1").feature().create("s1", "Stationary");
    model.sol("sol1").feature("s1").feature().create("se1", "Segregated");
    model.sol("sol1").feature("s1").feature("se1").feature().remove("ssDef");
    model.sol("sol1").feature("s1").feature("se1").feature().create("ss1", "SegregatedStep");
    model.sol("sol1").feature("s1").feature("se1").feature("ss1").set("segvar", new String[]{"mod1_V"});
    model.sol("sol1").feature("s1").feature().create("i1", "Iterative");
    model.sol("sol1").feature("s1").feature("i1").set("prefuntype", "left");
    model.sol("sol1").feature("s1").feature("i1").set("maxlinit", 10000);
    model.sol("sol1").feature("s1").feature("i1").set("linsolver", "cg");
    model.sol("sol1").feature("s1").feature("i1").set("rhob", 400);
    model.sol("sol1").feature("s1").feature("se1").feature("ss1").set("linsolver", "i1");
    model.sol("sol1").feature("s1").feature("i1").feature().create("mg1", "Multigrid");
    model.sol("sol1").feature("s1").feature("i1").feature("mg1").set("amgauto", 3);
    model.sol("sol1").feature("s1").feature("i1").feature("mg1").set("scale", 2);
    model.sol("sol1").feature("s1").feature("i1").feature("mg1").set("gmglevels", 1);
    model.sol("sol1").feature("s1").feature("i1").feature("mg1").set("massem", true);
    model.sol("sol1").feature("s1").feature("i1").feature("mg1").set("rmethod", "longest");
    model.sol("sol1").feature("s1").feature("i1").feature("mg1").set("mkeep", false);
    model.sol("sol1").feature("s1").feature("i1").feature("mg1").set("mgcycle", "v");
    model.sol("sol1").feature("s1").feature("i1").feature("mg1").set("prefun", "amg");
    model.sol("sol1").feature("s1").feature("i1").feature("mg1").set("mcasegen", "any");
    model.sol("sol1").feature("s1").feature("i1").feature("mg1").set("mglevels", 5);
    model.sol("sol1").feature("s1").feature("i1").feature("mg1").set("iter", 2);
    model.sol("sol1").feature("s1").feature("i1").feature("mg1").set("maxcoarsedof", 5000);
    model.sol("sol1").feature("s1").feature("se1").feature().create("ss2", "SegregatedStep");
    model.sol("sol1").feature("s1").feature("se1").feature("ss2").set("segvar", new String[]{"mod1_Vm"});
    model.sol("sol1").feature("s1").feature().create("i2", "Iterative");
    model.sol("sol1").feature("s1").feature("i2").set("prefuntype", "left");
    model.sol("sol1").feature("s1").feature("i2").set("maxlinit", 10000);
    model.sol("sol1").feature("s1").feature("i2").set("linsolver", "cg");
    model.sol("sol1").feature("s1").feature("i2").set("rhob", 400);
    model.sol("sol1").feature("s1").feature("se1").feature("ss2").set("linsolver", "i2");
    model.sol("sol1").feature("s1").feature("i2").feature().create("mg1", "Multigrid");
    model.sol("sol1").feature("s1").feature("i2").feature("mg1").set("amgauto", 3);
    model.sol("sol1").feature("s1").feature("i2").feature("mg1").set("scale", 2);
    model.sol("sol1").feature("s1").feature("i2").feature("mg1").set("gmglevels", 1);
    model.sol("sol1").feature("s1").feature("i2").feature("mg1").set("massem", true);
    model.sol("sol1").feature("s1").feature("i2").feature("mg1").set("rmethod", "longest");
    model.sol("sol1").feature("s1").feature("i2").feature("mg1").set("mkeep", false);
    model.sol("sol1").feature("s1").feature("i2").feature("mg1").set("mgcycle", "v");
    model.sol("sol1").feature("s1").feature("i2").feature("mg1").set("prefun", "amg");

    return model;
  }

  public static Model run14(Model model) {
    model.sol("sol1").feature("s1").feature("i2").feature("mg1").set("mcasegen", "any");
    model.sol("sol1").feature("s1").feature("i2").feature("mg1").set("mglevels", 5);
    model.sol("sol1").feature("s1").feature("i2").feature("mg1").set("iter", 2);
    model.sol("sol1").feature("s1").feature("i2").feature("mg1").set("maxcoarsedof", 5000);
    model.sol("sol1").feature("s1").feature().remove("fcDef");
    model.sol("sol1").attach("std1");
    model.sol("sol1").runAll();

    model.result("pg3").run();

    model.view("view1").hideEntities().clear();

    model.result("pg6").run();

    model.mesh("mesh1").feature("ref1").set("numrefine", "3");

    model.sol("sol1").study("std1");
    model.sol("sol1").feature().remove("s1");
    model.sol("sol1").feature().remove("v1");
    model.sol("sol1").feature().remove("st1");
    model.sol("sol1").feature().create("st1", "StudyStep");
    model.sol("sol1").feature("st1").set("study", "std1");
    model.sol("sol1").feature("st1").set("studystep", "stat");
    model.sol("sol1").feature().create("v1", "Variables");
    model.sol("sol1").feature("v1").set("control", "stat");
    model.sol("sol1").feature().create("s1", "Stationary");
    model.sol("sol1").feature("s1").feature().create("se1", "Segregated");
    model.sol("sol1").feature("s1").feature("se1").feature().remove("ssDef");
    model.sol("sol1").feature("s1").feature("se1").feature().create("ss1", "SegregatedStep");
    model.sol("sol1").feature("s1").feature("se1").feature("ss1").set("segvar", new String[]{"mod1_V"});
    model.sol("sol1").feature("s1").feature().create("i1", "Iterative");
    model.sol("sol1").feature("s1").feature("i1").set("prefuntype", "left");
    model.sol("sol1").feature("s1").feature("i1").set("maxlinit", 10000);
    model.sol("sol1").feature("s1").feature("i1").set("linsolver", "cg");
    model.sol("sol1").feature("s1").feature("i1").set("rhob", 400);
    model.sol("sol1").feature("s1").feature("se1").feature("ss1").set("linsolver", "i1");
    model.sol("sol1").feature("s1").feature("i1").feature().create("mg1", "Multigrid");
    model.sol("sol1").feature("s1").feature("i1").feature("mg1").set("amgauto", 3);
    model.sol("sol1").feature("s1").feature("i1").feature("mg1").set("scale", 2);
    model.sol("sol1").feature("s1").feature("i1").feature("mg1").set("gmglevels", 1);
    model.sol("sol1").feature("s1").feature("i1").feature("mg1").set("massem", true);
    model.sol("sol1").feature("s1").feature("i1").feature("mg1").set("rmethod", "longest");
    model.sol("sol1").feature("s1").feature("i1").feature("mg1").set("mkeep", false);
    model.sol("sol1").feature("s1").feature("i1").feature("mg1").set("mgcycle", "v");
    model.sol("sol1").feature("s1").feature("i1").feature("mg1").set("prefun", "amg");
    model.sol("sol1").feature("s1").feature("i1").feature("mg1").set("mcasegen", "any");
    model.sol("sol1").feature("s1").feature("i1").feature("mg1").set("mglevels", 5);
    model.sol("sol1").feature("s1").feature("i1").feature("mg1").set("iter", 2);
    model.sol("sol1").feature("s1").feature("i1").feature("mg1").set("maxcoarsedof", 5000);
    model.sol("sol1").feature("s1").feature("se1").feature().create("ss2", "SegregatedStep");
    model.sol("sol1").feature("s1").feature("se1").feature("ss2").set("segvar", new String[]{"mod1_Vm"});
    model.sol("sol1").feature("s1").feature().create("i2", "Iterative");
    model.sol("sol1").feature("s1").feature("i2").set("prefuntype", "left");
    model.sol("sol1").feature("s1").feature("i2").set("maxlinit", 10000);
    model.sol("sol1").feature("s1").feature("i2").set("linsolver", "cg");
    model.sol("sol1").feature("s1").feature("i2").set("rhob", 400);
    model.sol("sol1").feature("s1").feature("se1").feature("ss2").set("linsolver", "i2");
    model.sol("sol1").feature("s1").feature("i2").feature().create("mg1", "Multigrid");
    model.sol("sol1").feature("s1").feature("i2").feature("mg1").set("amgauto", 3);
    model.sol("sol1").feature("s1").feature("i2").feature("mg1").set("scale", 2);
    model.sol("sol1").feature("s1").feature("i2").feature("mg1").set("gmglevels", 1);
    model.sol("sol1").feature("s1").feature("i2").feature("mg1").set("massem", true);
    model.sol("sol1").feature("s1").feature("i2").feature("mg1").set("rmethod", "longest");
    model.sol("sol1").feature("s1").feature("i2").feature("mg1").set("mkeep", false);
    model.sol("sol1").feature("s1").feature("i2").feature("mg1").set("mgcycle", "v");
    model.sol("sol1").feature("s1").feature("i2").feature("mg1").set("prefun", "amg");
    model.sol("sol1").feature("s1").feature("i2").feature("mg1").set("mcasegen", "any");
    model.sol("sol1").feature("s1").feature("i2").feature("mg1").set("mglevels", 5);
    model.sol("sol1").feature("s1").feature("i2").feature("mg1").set("iter", 2);
    model.sol("sol1").feature("s1").feature("i2").feature("mg1").set("maxcoarsedof", 5000);
    model.sol("sol1").feature("s1").feature().remove("fcDef");
    model.sol("sol1").attach("std1");
    model.sol("sol1").runAll();

    model.result("pg3").run();
    model.result("pg6").run();

    model.view("view1").hideEntities().create("hide1");
    model.view("view1").hideEntities("hide1").geom(3);
    model.view("view1").hideEntities("hide1").add(new int[]{1});
    model.view("view1").hideEntities("hide1").add(new int[]{8});
    model.view("view1").hideEntities("hide1").add(new int[]{15});
    model.view("view1").hideEntities("hide1").add(new int[]{18});
    model.view("view1").hideEntities("hide1").add(new int[]{24});

    model.mesh("mesh1").feature("ref1").selection().set(new int[]{8, 16, 17, 21, 22});

    model.view("view1").hideEntities("hide1").add(new int[]{23});

    model.mesh("mesh1").feature("ref1").selection().set(new int[]{8, 16, 17, 20, 21, 22});

    model.view("view1").hideEntities("hide1").add(new int[]{3});
    model.view("view1").hideEntities("hide1").add(new int[]{5});

    model.mesh("mesh1").feature("ref1").selection().set(new int[]{8, 10, 12, 16, 17, 20, 21, 22});

    model.view("view1").hideEntities("hide1").add(new int[]{2});
    model.view("view1").hideEntities("hide1").add(new int[]{4});

    model.mesh("mesh1").feature("ref1").selection().set(new int[]{8, 9, 10, 11, 12, 16, 17, 20, 21, 22});

    model.view("view1").hideEntities("hide1").add(new int[]{22});
    model.view("view1").hideEntities("hide1").add(new int[]{12});

    model.mesh("mesh1").feature("ref1").selection().set(new int[]{8, 9, 10, 11, 12, 14, 16, 17, 20, 21, 22});

    model.view("view1").hideEntities("hide1").add(new int[]{11});

    model.mesh("mesh1").feature("ref1").selection().set(new int[]{8, 9, 10, 11, 12, 13, 14, 16, 17, 20, 21, 22});

    model.view("view1").hideEntities("hide1").add(new int[]{20});

    model.mesh("mesh1").feature("ref1").selection().set(new int[]{8, 9, 10, 11, 12, 13, 14, 16, 17, 19, 20, 21, 22});
    model.mesh("mesh1").run();

    model.sol("sol1").study("std1");
    model.sol("sol1").feature().remove("s1");
    model.sol("sol1").feature().remove("v1");
    model.sol("sol1").feature().remove("st1");
    model.sol("sol1").feature().create("st1", "StudyStep");
    model.sol("sol1").feature("st1").set("study", "std1");
    model.sol("sol1").feature("st1").set("studystep", "stat");
    model.sol("sol1").feature().create("v1", "Variables");
    model.sol("sol1").feature("v1").set("control", "stat");
    model.sol("sol1").feature().create("s1", "Stationary");
    model.sol("sol1").feature("s1").feature().create("se1", "Segregated");
    model.sol("sol1").feature("s1").feature("se1").feature().remove("ssDef");
    model.sol("sol1").feature("s1").feature("se1").feature().create("ss1", "SegregatedStep");
    model.sol("sol1").feature("s1").feature("se1").feature("ss1").set("segvar", new String[]{"mod1_V"});
    model.sol("sol1").feature("s1").feature().create("i1", "Iterative");
    model.sol("sol1").feature("s1").feature("i1").set("prefuntype", "left");
    model.sol("sol1").feature("s1").feature("i1").set("maxlinit", 10000);
    model.sol("sol1").feature("s1").feature("i1").set("linsolver", "cg");
    model.sol("sol1").feature("s1").feature("i1").set("rhob", 400);
    model.sol("sol1").feature("s1").feature("se1").feature("ss1").set("linsolver", "i1");
    model.sol("sol1").feature("s1").feature("i1").feature().create("mg1", "Multigrid");
    model.sol("sol1").feature("s1").feature("i1").feature("mg1").set("amgauto", 3);
    model.sol("sol1").feature("s1").feature("i1").feature("mg1").set("scale", 2);
    model.sol("sol1").feature("s1").feature("i1").feature("mg1").set("gmglevels", 1);
    model.sol("sol1").feature("s1").feature("i1").feature("mg1").set("massem", true);
    model.sol("sol1").feature("s1").feature("i1").feature("mg1").set("rmethod", "longest");
    model.sol("sol1").feature("s1").feature("i1").feature("mg1").set("mkeep", false);
    model.sol("sol1").feature("s1").feature("i1").feature("mg1").set("mgcycle", "v");
    model.sol("sol1").feature("s1").feature("i1").feature("mg1").set("prefun", "amg");
    model.sol("sol1").feature("s1").feature("i1").feature("mg1").set("mcasegen", "any");
    model.sol("sol1").feature("s1").feature("i1").feature("mg1").set("mglevels", 5);
    model.sol("sol1").feature("s1").feature("i1").feature("mg1").set("iter", 2);
    model.sol("sol1").feature("s1").feature("i1").feature("mg1").set("maxcoarsedof", 5000);
    model.sol("sol1").feature("s1").feature("se1").feature().create("ss2", "SegregatedStep");
    model.sol("sol1").feature("s1").feature("se1").feature("ss2").set("segvar", new String[]{"mod1_Vm"});
    model.sol("sol1").feature("s1").feature().create("i2", "Iterative");
    model.sol("sol1").feature("s1").feature("i2").set("prefuntype", "left");
    model.sol("sol1").feature("s1").feature("i2").set("maxlinit", 10000);
    model.sol("sol1").feature("s1").feature("i2").set("linsolver", "cg");
    model.sol("sol1").feature("s1").feature("i2").set("rhob", 400);
    model.sol("sol1").feature("s1").feature("se1").feature("ss2").set("linsolver", "i2");
    model.sol("sol1").feature("s1").feature("i2").feature().create("mg1", "Multigrid");
    model.sol("sol1").feature("s1").feature("i2").feature("mg1").set("amgauto", 3);
    model.sol("sol1").feature("s1").feature("i2").feature("mg1").set("scale", 2);
    model.sol("sol1").feature("s1").feature("i2").feature("mg1").set("gmglevels", 1);
    model.sol("sol1").feature("s1").feature("i2").feature("mg1").set("massem", true);
    model.sol("sol1").feature("s1").feature("i2").feature("mg1").set("rmethod", "longest");
    model.sol("sol1").feature("s1").feature("i2").feature("mg1").set("mkeep", false);
    model.sol("sol1").feature("s1").feature("i2").feature("mg1").set("mgcycle", "v");
    model.sol("sol1").feature("s1").feature("i2").feature("mg1").set("prefun", "amg");
    model.sol("sol1").feature("s1").feature("i2").feature("mg1").set("mcasegen", "any");
    model.sol("sol1").feature("s1").feature("i2").feature("mg1").set("mglevels", 5);
    model.sol("sol1").feature("s1").feature("i2").feature("mg1").set("iter", 2);
    model.sol("sol1").feature("s1").feature("i2").feature("mg1").set("maxcoarsedof", 5000);
    model.sol("sol1").feature("s1").feature().remove("fcDef");
    model.sol("sol1").attach("std1");
    model.sol("sol1").runAll();

    model.result("pg3").run();

    model.view("view1").hideEntities().clear();

    model.result("pg6").run();

    model.view("view1").hideEntities().create("hide1");
    model.view("view1").hideEntities("hide1").geom(3);
    model.view("view1").hideEntities("hide1").add(new int[]{1});
    model.view("view1").hideEntities("hide1").add(new int[]{8});
    model.view("view1").hideEntities("hide1").add(new int[]{3});

    model.name("me_rodlike2.mph");

    model.geom("geom1").run("cyl11");
    model.geom("geom1").feature().create("blk6", "Block");
    model.geom("geom1").feature().move("blk6", 6);
    model.geom("geom1").feature("blk6").setIndex("pos", "-tc/2", 2);
    model.geom("geom1").feature("blk6").setIndex("size", "tc", 2);
    model.geom("geom1").feature("blk6").setIndex("size", "OD", 0);
    model.geom("geom1").feature("blk6").setIndex("size", "OD", 1);
    model.geom("geom1").runAll();
    model.geom("geom1").feature("blk6").set("base", "center");
    model.geom("geom1").feature("blk6").setIndex("pos", "0", 2);
    model.geom("geom1").runAll();
    model.geom("geom1").runPre("ext1");
    model.geom("geom1").runPre("dif1");
    model.geom("geom1").feature("dif1").selection("input").set(new String[]{"blk6"});
    model.geom("geom1").runAll();

    model.param().set("gwo", "7");

    model.geom("geom1").run("wp1");

    model.param().set("gwo", "4");

    model.geom("geom1").feature("wp1").geom().runAll();
    model.geom("geom1").runAll();
    model.geom("geom1").feature().remove("cyl8");
    model.geom("geom1").feature().remove("cone1");
    model.geom("geom1").feature().remove("cyl9");
    model.geom("geom1").feature().remove("cone2");
    model.geom("geom1").feature().remove("cone3");
    model.geom("geom1").feature().remove("cone4");
    model.geom("geom1").feature().remove("cyl10");
    model.geom("geom1").feature().remove("cyl11");
    model.geom("geom1").run();

    model.view("view1").hideEntities().clear();

    model.geom("geom1").feature("cyl4").set("r", "12");
    model.geom("geom1").runAll();
    model.geom("geom1").run();

    model.view("view1").hideEntities().create("hide1");
    model.view("view1").hideEntities("hide1").geom(3);
    model.view("view1").hideEntities("hide1").add(new int[]{1});

    model.geom("geom1").feature().remove("cyl7");
    model.geom("geom1").feature("blk6").name("Magnet Overall Body");
    model.geom("geom1").run();

    model.view("view1").hideEntities("hide1").add(new int[]{6});

    model.physics("mfnc").feature("mfc2").selection().set(new int[]{3, 8});
    model.physics("mfnc").feature("mfc3").selection().set(new int[]{9, 10});
    model.physics("mfnc").feature("mfc2").selection().set(new int[]{11, 12});
    model.physics("mfnc").feature("mfc3").selection().set(new int[]{2, 7});
    model.physics("mfnc").feature("mfc4").selection().set(new int[]{3, 8});
    model.physics("mfnc").feature("mfc5").selection().set(new int[]{9, 10});
    model.physics("es").feature("pot3").selection()
         .set(new int[]{11, 12, 13, 14, 15, 16, 32, 33, 34, 41, 42, 55, 56, 57, 58, 59, 61, 62, 63, 64, 65, 77, 78, 84});
    model.physics("es").feature("pot6").selection()
         .set(new int[]{5, 6, 7, 8, 9, 10, 29, 30, 31, 39, 40, 44, 45, 46, 47, 49, 50, 51, 52, 53, 54, 75, 76, 83});

    model.mesh("mesh1").feature("ref1").set("numrefine", "2");

    model.view("view1").hideEntities().clear();
    model.view("view1").hideEntities().create("hide1");
    model.view("view1").hideEntities("hide1").geom(3);
    model.view("view1").hideEntities("hide1").add(new int[]{1});
    model.view("view1").hideEntities("hide1").add(new int[]{6});

    model.sol("sol1").study("std1");
    model.sol("sol1").feature().remove("s1");
    model.sol("sol1").feature().remove("v1");
    model.sol("sol1").feature().remove("st1");
    model.sol("sol1").feature().create("st1", "StudyStep");
    model.sol("sol1").feature("st1").set("study", "std1");
    model.sol("sol1").feature("st1").set("studystep", "stat");
    model.sol("sol1").feature().create("v1", "Variables");
    model.sol("sol1").feature("v1").set("control", "stat");
    model.sol("sol1").feature().create("s1", "Stationary");
    model.sol("sol1").feature("s1").feature().create("se1", "Segregated");
    model.sol("sol1").feature("s1").feature("se1").feature().remove("ssDef");
    model.sol("sol1").feature("s1").feature("se1").feature().create("ss1", "SegregatedStep");
    model.sol("sol1").feature("s1").feature("se1").feature("ss1").set("segvar", new String[]{"mod1_V"});
    model.sol("sol1").feature("s1").feature().create("i1", "Iterative");
    model.sol("sol1").feature("s1").feature("i1").set("prefuntype", "left");
    model.sol("sol1").feature("s1").feature("i1").set("maxlinit", 10000);
    model.sol("sol1").feature("s1").feature("i1").set("linsolver", "cg");
    model.sol("sol1").feature("s1").feature("i1").set("rhob", 400);
    model.sol("sol1").feature("s1").feature("se1").feature("ss1").set("linsolver", "i1");
    model.sol("sol1").feature("s1").feature("i1").feature().create("mg1", "Multigrid");
    model.sol("sol1").feature("s1").feature("i1").feature("mg1").set("amgauto", 3);
    model.sol("sol1").feature("s1").feature("i1").feature("mg1").set("scale", 2);
    model.sol("sol1").feature("s1").feature("i1").feature("mg1").set("gmglevels", 1);
    model.sol("sol1").feature("s1").feature("i1").feature("mg1").set("massem", true);
    model.sol("sol1").feature("s1").feature("i1").feature("mg1").set("rmethod", "longest");
    model.sol("sol1").feature("s1").feature("i1").feature("mg1").set("mkeep", false);
    model.sol("sol1").feature("s1").feature("i1").feature("mg1").set("mgcycle", "v");
    model.sol("sol1").feature("s1").feature("i1").feature("mg1").set("prefun", "amg");
    model.sol("sol1").feature("s1").feature("i1").feature("mg1").set("mcasegen", "any");
    model.sol("sol1").feature("s1").feature("i1").feature("mg1").set("mglevels", 5);
    model.sol("sol1").feature("s1").feature("i1").feature("mg1").set("iter", 2);
    model.sol("sol1").feature("s1").feature("i1").feature("mg1").set("maxcoarsedof", 5000);
    model.sol("sol1").feature("s1").feature("se1").feature().create("ss2", "SegregatedStep");
    model.sol("sol1").feature("s1").feature("se1").feature("ss2").set("segvar", new String[]{"mod1_Vm"});
    model.sol("sol1").feature("s1").feature().create("i2", "Iterative");
    model.sol("sol1").feature("s1").feature("i2").set("prefuntype", "left");
    model.sol("sol1").feature("s1").feature("i2").set("maxlinit", 10000);
    model.sol("sol1").feature("s1").feature("i2").set("linsolver", "cg");
    model.sol("sol1").feature("s1").feature("i2").set("rhob", 400);
    model.sol("sol1").feature("s1").feature("se1").feature("ss2").set("linsolver", "i2");
    model.sol("sol1").feature("s1").feature("i2").feature().create("mg1", "Multigrid");
    model.sol("sol1").feature("s1").feature("i2").feature("mg1").set("amgauto", 3);
    model.sol("sol1").feature("s1").feature("i2").feature("mg1").set("scale", 2);
    model.sol("sol1").feature("s1").feature("i2").feature("mg1").set("gmglevels", 1);
    model.sol("sol1").feature("s1").feature("i2").feature("mg1").set("massem", true);
    model.sol("sol1").feature("s1").feature("i2").feature("mg1").set("rmethod", "longest");
    model.sol("sol1").feature("s1").feature("i2").feature("mg1").set("mkeep", false);
    model.sol("sol1").feature("s1").feature("i2").feature("mg1").set("mgcycle", "v");
    model.sol("sol1").feature("s1").feature("i2").feature("mg1").set("prefun", "amg");
    model.sol("sol1").feature("s1").feature("i2").feature("mg1").set("mcasegen", "any");
    model.sol("sol1").feature("s1").feature("i2").feature("mg1").set("mglevels", 5);
    model.sol("sol1").feature("s1").feature("i2").feature("mg1").set("iter", 2);
    model.sol("sol1").feature("s1").feature("i2").feature("mg1").set("maxcoarsedof", 5000);
    model.sol("sol1").feature("s1").feature().remove("fcDef");
    model.sol("sol1").attach("std1");
    model.sol("sol1").study("std1");
    model.sol("sol1").feature().remove("s1");
    model.sol("sol1").feature().remove("v1");
    model.sol("sol1").feature().remove("st1");
    model.sol("sol1").feature().create("st1", "StudyStep");
    model.sol("sol1").feature("st1").set("study", "std1");
    model.sol("sol1").feature("st1").set("studystep", "stat");
    model.sol("sol1").feature().create("v1", "Variables");
    model.sol("sol1").feature("v1").set("control", "stat");
    model.sol("sol1").feature().create("s1", "Stationary");
    model.sol("sol1").feature("s1").feature().create("se1", "Segregated");
    model.sol("sol1").feature("s1").feature("se1").feature().remove("ssDef");
    model.sol("sol1").feature("s1").feature("se1").feature().create("ss1", "SegregatedStep");
    model.sol("sol1").feature("s1").feature("se1").feature("ss1").set("segvar", new String[]{"mod1_V"});
    model.sol("sol1").feature("s1").feature().create("i1", "Iterative");
    model.sol("sol1").feature("s1").feature("i1").set("prefuntype", "left");
    model.sol("sol1").feature("s1").feature("i1").set("maxlinit", 10000);
    model.sol("sol1").feature("s1").feature("i1").set("linsolver", "cg");
    model.sol("sol1").feature("s1").feature("i1").set("rhob", 400);
    model.sol("sol1").feature("s1").feature("se1").feature("ss1").set("linsolver", "i1");
    model.sol("sol1").feature("s1").feature("i1").feature().create("mg1", "Multigrid");
    model.sol("sol1").feature("s1").feature("i1").feature("mg1").set("amgauto", 3);
    model.sol("sol1").feature("s1").feature("i1").feature("mg1").set("scale", 2);
    model.sol("sol1").feature("s1").feature("i1").feature("mg1").set("gmglevels", 1);
    model.sol("sol1").feature("s1").feature("i1").feature("mg1").set("massem", true);
    model.sol("sol1").feature("s1").feature("i1").feature("mg1").set("rmethod", "longest");
    model.sol("sol1").feature("s1").feature("i1").feature("mg1").set("mkeep", false);
    model.sol("sol1").feature("s1").feature("i1").feature("mg1").set("mgcycle", "v");
    model.sol("sol1").feature("s1").feature("i1").feature("mg1").set("prefun", "amg");
    model.sol("sol1").feature("s1").feature("i1").feature("mg1").set("mcasegen", "any");
    model.sol("sol1").feature("s1").feature("i1").feature("mg1").set("mglevels", 5);
    model.sol("sol1").feature("s1").feature("i1").feature("mg1").set("iter", 2);
    model.sol("sol1").feature("s1").feature("i1").feature("mg1").set("maxcoarsedof", 5000);
    model.sol("sol1").feature("s1").feature("se1").feature().create("ss2", "SegregatedStep");
    model.sol("sol1").feature("s1").feature("se1").feature("ss2").set("segvar", new String[]{"mod1_Vm"});
    model.sol("sol1").feature("s1").feature().create("i2", "Iterative");
    model.sol("sol1").feature("s1").feature("i2").set("prefuntype", "left");
    model.sol("sol1").feature("s1").feature("i2").set("maxlinit", 10000);
    model.sol("sol1").feature("s1").feature("i2").set("linsolver", "cg");
    model.sol("sol1").feature("s1").feature("i2").set("rhob", 400);
    model.sol("sol1").feature("s1").feature("se1").feature("ss2").set("linsolver", "i2");
    model.sol("sol1").feature("s1").feature("i2").feature().create("mg1", "Multigrid");
    model.sol("sol1").feature("s1").feature("i2").feature("mg1").set("amgauto", 3);
    model.sol("sol1").feature("s1").feature("i2").feature("mg1").set("scale", 2);
    model.sol("sol1").feature("s1").feature("i2").feature("mg1").set("gmglevels", 1);
    model.sol("sol1").feature("s1").feature("i2").feature("mg1").set("massem", true);
    model.sol("sol1").feature("s1").feature("i2").feature("mg1").set("rmethod", "longest");
    model.sol("sol1").feature("s1").feature("i2").feature("mg1").set("mkeep", false);
    model.sol("sol1").feature("s1").feature("i2").feature("mg1").set("mgcycle", "v");
    model.sol("sol1").feature("s1").feature("i2").feature("mg1").set("prefun", "amg");
    model.sol("sol1").feature("s1").feature("i2").feature("mg1").set("mcasegen", "any");
    model.sol("sol1").feature("s1").feature("i2").feature("mg1").set("mglevels", 5);
    model.sol("sol1").feature("s1").feature("i2").feature("mg1").set("iter", 2);
    model.sol("sol1").feature("s1").feature("i2").feature("mg1").set("maxcoarsedof", 5000);
    model.sol("sol1").feature("s1").feature().remove("fcDef");
    model.sol("sol1").attach("std1");
    model.sol("sol1").runAll();

    model.result("pg3").run();
    model.result("pg3").run();
    model.result("pg3").feature("surf1").set("expr", "mfnc.normB");
    model.result("pg3").run();
    model.result("pg3").feature("surf1").set("rangecolormax", "0.4");
    model.result("pg3").feature("surf1").set("data", "cpl2");
    model.result("pg3").run();
    model.result("pg3").feature("surf1").set("data", "cpl4");
    model.result("pg3").run();
    model.result("pg3").feature("surf1").set("data", "cpl1");
    model.result("pg3").run();
    model.result("pg3").feature("surf1").set("rangecolormax", "0.6");
    model.result("pg3").feature("surf1").set("data", "cpl4");
    model.result("pg3").run();
    model.result("pg3").run();
    model.result("pg3").set("data", "none");
    model.result("pg3").run();

    model.view("view1").hideEntities().clear();

    model.result("pg3").run();
    model.result("pg3").set("allowtableupdate", true);
    model.result("pg3").set("renderdatacached", true);
    model.result().table("evl2").addRow(new double[]{-0.01806044578552246, -0.9969351887702942, 0.5739256180269152});
    model.result("pg3").run();
    model.result("pg3").run();
    model.result("pg3").feature("con2").active(true);
    model.result("pg3").run();
    model.result("pg3").run();
    model.result("pg3").feature("surf1").set("data", "parent");
    model.result("pg3").run();
    model.result("pg3").set("data", "cpl4");
    model.result("pg3").run();
    model.result("pg3").set("data", "cpl1");
    model.result("pg3").run();
    model.result("pg3").run();
    model.result("pg3").feature("con2").set("unit", "kV/cm");
    model.result("pg3").run();
    model.result("pg3").set("allowtableupdate", true);
    model.result("pg3").set("renderdatacached", true);
    model.result().table("evl2").addRow(new double[]{0.4475051164627075, 0, 0.6670878576954138});
    model.result().table("evl2").addRow(new double[]{0.4475051164627075, 0, 0.6670878576954138});
    model.result().table("evl2").addRow(new double[]{0.45564138889312744, 0, 0.6821979560785519});
    model.result().table("evl2").addRow(new double[]{0.48818719387054443, 0, 0.7426396779324771});
    model.result().table("evl2").addRow(new double[]{0.48818719387054443, 0, 0.7426396779324771});
    model.result().table("evl2").addRow(new double[]{0.5044602155685425, 0, 1.7877074611125752});
    model.result().table("evl2").addRow(new double[]{0.48818719387054443, 0.016272902488708496, 0.7431303686523638});
    model.result().table("evl2")
         .addRow(new double[]{0.31732165813446045, -0.016272902488708496, 0.41586831321882306});
    model.result().table("evl2")
         .addRow(new double[]{0.31732165813446045, -0.016272902488708496, 0.41586831321882306});
    model.result().table("evl2").addRow(new double[]{0.3335946798324585, -0.016272902488708496, 0.446089395532681});
    model.result("pg3").run();
    model.result("pg3").run();
    model.result("pg3").set("data", "cpl3");
    model.result("pg3").run();
    model.result("pg3").set("allowtableupdate", true);
    model.result("pg3").set("renderdatacached", true);
    model.result().table("evl2").addRow(new double[]{0.3907911777496338, 0.006269365549087524, 0.37119589430788164});
    model.result().table("evl2")
         .addRow(new double[]{0.3907911777496338, -0.0020897984504699707, 0.37146385170906254});
    model.result().table("evl2")
         .addRow(new double[]{0.3907911777496338, -0.0020897984504699707, 0.37146385170906254});
    model.result().table("evl2").addRow(new double[]{0.004179596900939941, -0.3051096796989441, 0.3825985954573121});
    model.result().table("evl2")
         .addRow(new double[]{0.004179596900939941, -0.2967504858970642, 0.37142231912515117});
    model.result().table("evl2")
         .addRow(new double[]{0.004179596900939941, -0.2988402843475342, 0.37421638820819136});
    model.result().table("evl2").addRow(new double[]{0.006269365549087524, -0.2988402843475342, 0.3733254376311968});
    model.result().table("evl2")
         .addRow(new double[]{0.008359163999557495, -0.3030198812484741, 0.37802261251438035});

    model.param().set("gwc", "2");
    model.param().set("gwo", "5");

    model.sol("sol1").study("std1");
    model.sol("sol1").feature().remove("s1");
    model.sol("sol1").feature().remove("v1");
    model.sol("sol1").feature().remove("st1");
    model.sol("sol1").feature().create("st1", "StudyStep");
    model.sol("sol1").feature("st1").set("study", "std1");
    model.sol("sol1").feature("st1").set("studystep", "stat");
    model.sol("sol1").feature().create("v1", "Variables");
    model.sol("sol1").feature("v1").set("control", "stat");
    model.sol("sol1").feature().create("s1", "Stationary");
    model.sol("sol1").feature("s1").feature().create("se1", "Segregated");
    model.sol("sol1").feature("s1").feature("se1").feature().remove("ssDef");
    model.sol("sol1").feature("s1").feature("se1").feature().create("ss1", "SegregatedStep");
    model.sol("sol1").feature("s1").feature("se1").feature("ss1").set("segvar", new String[]{"mod1_V"});
    model.sol("sol1").feature("s1").feature().create("i1", "Iterative");
    model.sol("sol1").feature("s1").feature("i1").set("prefuntype", "left");
    model.sol("sol1").feature("s1").feature("i1").set("maxlinit", 10000);
    model.sol("sol1").feature("s1").feature("i1").set("linsolver", "cg");
    model.sol("sol1").feature("s1").feature("i1").set("rhob", 400);
    model.sol("sol1").feature("s1").feature("se1").feature("ss1").set("linsolver", "i1");
    model.sol("sol1").feature("s1").feature("i1").feature().create("mg1", "Multigrid");
    model.sol("sol1").feature("s1").feature("i1").feature("mg1").set("amgauto", 3);
    model.sol("sol1").feature("s1").feature("i1").feature("mg1").set("scale", 2);
    model.sol("sol1").feature("s1").feature("i1").feature("mg1").set("gmglevels", 1);
    model.sol("sol1").feature("s1").feature("i1").feature("mg1").set("massem", true);
    model.sol("sol1").feature("s1").feature("i1").feature("mg1").set("rmethod", "longest");
    model.sol("sol1").feature("s1").feature("i1").feature("mg1").set("mkeep", false);
    model.sol("sol1").feature("s1").feature("i1").feature("mg1").set("mgcycle", "v");
    model.sol("sol1").feature("s1").feature("i1").feature("mg1").set("prefun", "amg");
    model.sol("sol1").feature("s1").feature("i1").feature("mg1").set("mcasegen", "any");
    model.sol("sol1").feature("s1").feature("i1").feature("mg1").set("mglevels", 5);
    model.sol("sol1").feature("s1").feature("i1").feature("mg1").set("iter", 2);
    model.sol("sol1").feature("s1").feature("i1").feature("mg1").set("maxcoarsedof", 5000);
    model.sol("sol1").feature("s1").feature("se1").feature().create("ss2", "SegregatedStep");
    model.sol("sol1").feature("s1").feature("se1").feature("ss2").set("segvar", new String[]{"mod1_Vm"});
    model.sol("sol1").feature("s1").feature().create("i2", "Iterative");
    model.sol("sol1").feature("s1").feature("i2").set("prefuntype", "left");
    model.sol("sol1").feature("s1").feature("i2").set("maxlinit", 10000);
    model.sol("sol1").feature("s1").feature("i2").set("linsolver", "cg");
    model.sol("sol1").feature("s1").feature("i2").set("rhob", 400);
    model.sol("sol1").feature("s1").feature("se1").feature("ss2").set("linsolver", "i2");
    model.sol("sol1").feature("s1").feature("i2").feature().create("mg1", "Multigrid");
    model.sol("sol1").feature("s1").feature("i2").feature("mg1").set("amgauto", 3);
    model.sol("sol1").feature("s1").feature("i2").feature("mg1").set("scale", 2);
    model.sol("sol1").feature("s1").feature("i2").feature("mg1").set("gmglevels", 1);
    model.sol("sol1").feature("s1").feature("i2").feature("mg1").set("massem", true);
    model.sol("sol1").feature("s1").feature("i2").feature("mg1").set("rmethod", "longest");
    model.sol("sol1").feature("s1").feature("i2").feature("mg1").set("mkeep", false);
    model.sol("sol1").feature("s1").feature("i2").feature("mg1").set("mgcycle", "v");
    model.sol("sol1").feature("s1").feature("i2").feature("mg1").set("prefun", "amg");

    return model;
  }

  public static Model run15(Model model) {
    model.sol("sol1").feature("s1").feature("i2").feature("mg1").set("mcasegen", "any");
    model.sol("sol1").feature("s1").feature("i2").feature("mg1").set("mglevels", 5);
    model.sol("sol1").feature("s1").feature("i2").feature("mg1").set("iter", 2);
    model.sol("sol1").feature("s1").feature("i2").feature("mg1").set("maxcoarsedof", 5000);
    model.sol("sol1").feature("s1").feature().remove("fcDef");
    model.sol("sol1").attach("std1");
    model.sol("sol1").runAll();

    model.result("pg3").run();
    model.result("pg3").set("allowtableupdate", true);
    model.result("pg3").set("renderdatacached", true);
    model.result().table("evl2")
         .addRow(new double[]{1.3458261489868164, -0.025077462196350098, 0.37448760160740746});
    model.result().table("evl2")
         .addRow(new double[]{-0.016718268394470215, -0.6603744029998779, 0.3639255697745661});
    model.result().table("evl2")
         .addRow(new double[]{-0.016718268394470215, -0.6603744029998779, 0.3639255697745661});
    model.result().table("evl2")
         .addRow(new double[]{-0.016718268394470215, -0.6603744029998779, 0.3639255697745661});
    model.result().table("evl2").addRow(new double[]{1.3374669551849365, -0.008359193801879883, 0.374072298910196});
    model.result().table("evl2").addRow(new double[]{1.3291077613830566, 0.016718268394470215, 0.37531753638020804});
    model.result("pg3").set("data", "cpl1");
    model.result("pg3").run();

    model.param().set("vr1", "12500");
    model.param().set("vr2", "-12500");
    model.param().set("vr3", "12500");
    model.param().set("vr4", "-12500");

    model.sol("sol1").study("std1");
    model.sol("sol1").feature().remove("s1");
    model.sol("sol1").feature().remove("v1");
    model.sol("sol1").feature().remove("st1");
    model.sol("sol1").feature().create("st1", "StudyStep");
    model.sol("sol1").feature("st1").set("study", "std1");
    model.sol("sol1").feature("st1").set("studystep", "stat");
    model.sol("sol1").feature().create("v1", "Variables");
    model.sol("sol1").feature("v1").set("control", "stat");
    model.sol("sol1").feature().create("s1", "Stationary");
    model.sol("sol1").feature("s1").feature().create("se1", "Segregated");
    model.sol("sol1").feature("s1").feature("se1").feature().remove("ssDef");
    model.sol("sol1").feature("s1").feature("se1").feature().create("ss1", "SegregatedStep");
    model.sol("sol1").feature("s1").feature("se1").feature("ss1").set("segvar", new String[]{"mod1_V"});
    model.sol("sol1").feature("s1").feature().create("i1", "Iterative");
    model.sol("sol1").feature("s1").feature("i1").set("prefuntype", "left");
    model.sol("sol1").feature("s1").feature("i1").set("maxlinit", 10000);
    model.sol("sol1").feature("s1").feature("i1").set("linsolver", "cg");
    model.sol("sol1").feature("s1").feature("i1").set("rhob", 400);
    model.sol("sol1").feature("s1").feature("se1").feature("ss1").set("linsolver", "i1");
    model.sol("sol1").feature("s1").feature("i1").feature().create("mg1", "Multigrid");
    model.sol("sol1").feature("s1").feature("i1").feature("mg1").set("amgauto", 3);
    model.sol("sol1").feature("s1").feature("i1").feature("mg1").set("scale", 2);
    model.sol("sol1").feature("s1").feature("i1").feature("mg1").set("gmglevels", 1);
    model.sol("sol1").feature("s1").feature("i1").feature("mg1").set("massem", true);
    model.sol("sol1").feature("s1").feature("i1").feature("mg1").set("rmethod", "longest");
    model.sol("sol1").feature("s1").feature("i1").feature("mg1").set("mkeep", false);
    model.sol("sol1").feature("s1").feature("i1").feature("mg1").set("mgcycle", "v");
    model.sol("sol1").feature("s1").feature("i1").feature("mg1").set("prefun", "amg");
    model.sol("sol1").feature("s1").feature("i1").feature("mg1").set("mcasegen", "any");
    model.sol("sol1").feature("s1").feature("i1").feature("mg1").set("mglevels", 5);
    model.sol("sol1").feature("s1").feature("i1").feature("mg1").set("iter", 2);
    model.sol("sol1").feature("s1").feature("i1").feature("mg1").set("maxcoarsedof", 5000);
    model.sol("sol1").feature("s1").feature("se1").feature().create("ss2", "SegregatedStep");
    model.sol("sol1").feature("s1").feature("se1").feature("ss2").set("segvar", new String[]{"mod1_Vm"});
    model.sol("sol1").feature("s1").feature().create("i2", "Iterative");
    model.sol("sol1").feature("s1").feature("i2").set("prefuntype", "left");
    model.sol("sol1").feature("s1").feature("i2").set("maxlinit", 10000);
    model.sol("sol1").feature("s1").feature("i2").set("linsolver", "cg");
    model.sol("sol1").feature("s1").feature("i2").set("rhob", 400);
    model.sol("sol1").feature("s1").feature("se1").feature("ss2").set("linsolver", "i2");
    model.sol("sol1").feature("s1").feature("i2").feature().create("mg1", "Multigrid");
    model.sol("sol1").feature("s1").feature("i2").feature("mg1").set("amgauto", 3);
    model.sol("sol1").feature("s1").feature("i2").feature("mg1").set("scale", 2);
    model.sol("sol1").feature("s1").feature("i2").feature("mg1").set("gmglevels", 1);
    model.sol("sol1").feature("s1").feature("i2").feature("mg1").set("massem", true);
    model.sol("sol1").feature("s1").feature("i2").feature("mg1").set("rmethod", "longest");
    model.sol("sol1").feature("s1").feature("i2").feature("mg1").set("mkeep", false);
    model.sol("sol1").feature("s1").feature("i2").feature("mg1").set("mgcycle", "v");
    model.sol("sol1").feature("s1").feature("i2").feature("mg1").set("prefun", "amg");
    model.sol("sol1").feature("s1").feature("i2").feature("mg1").set("mcasegen", "any");
    model.sol("sol1").feature("s1").feature("i2").feature("mg1").set("mglevels", 5);
    model.sol("sol1").feature("s1").feature("i2").feature("mg1").set("iter", 2);
    model.sol("sol1").feature("s1").feature("i2").feature("mg1").set("maxcoarsedof", 5000);
    model.sol("sol1").feature("s1").feature().remove("fcDef");
    model.sol("sol1").attach("std1");
    model.sol("sol1").runAll();

    model.result("pg3").run();

    model.param().set("vr2", "12500");
    model.param().set("vr3", "-12500");

    model.sol("sol1").study("std1");
    model.sol("sol1").feature().remove("s1");
    model.sol("sol1").feature().remove("v1");
    model.sol("sol1").feature().remove("st1");
    model.sol("sol1").feature().create("st1", "StudyStep");
    model.sol("sol1").feature("st1").set("study", "std1");
    model.sol("sol1").feature("st1").set("studystep", "stat");
    model.sol("sol1").feature().create("v1", "Variables");
    model.sol("sol1").feature("v1").set("control", "stat");
    model.sol("sol1").feature().create("s1", "Stationary");
    model.sol("sol1").feature("s1").feature().create("se1", "Segregated");
    model.sol("sol1").feature("s1").feature("se1").feature().remove("ssDef");
    model.sol("sol1").feature("s1").feature("se1").feature().create("ss1", "SegregatedStep");
    model.sol("sol1").feature("s1").feature("se1").feature("ss1").set("segvar", new String[]{"mod1_V"});
    model.sol("sol1").feature("s1").feature().create("i1", "Iterative");
    model.sol("sol1").feature("s1").feature("i1").set("prefuntype", "left");
    model.sol("sol1").feature("s1").feature("i1").set("maxlinit", 10000);
    model.sol("sol1").feature("s1").feature("i1").set("linsolver", "cg");
    model.sol("sol1").feature("s1").feature("i1").set("rhob", 400);
    model.sol("sol1").feature("s1").feature("se1").feature("ss1").set("linsolver", "i1");
    model.sol("sol1").feature("s1").feature("i1").feature().create("mg1", "Multigrid");
    model.sol("sol1").feature("s1").feature("i1").feature("mg1").set("amgauto", 3);
    model.sol("sol1").feature("s1").feature("i1").feature("mg1").set("scale", 2);
    model.sol("sol1").feature("s1").feature("i1").feature("mg1").set("gmglevels", 1);
    model.sol("sol1").feature("s1").feature("i1").feature("mg1").set("massem", true);
    model.sol("sol1").feature("s1").feature("i1").feature("mg1").set("rmethod", "longest");
    model.sol("sol1").feature("s1").feature("i1").feature("mg1").set("mkeep", false);
    model.sol("sol1").feature("s1").feature("i1").feature("mg1").set("mgcycle", "v");
    model.sol("sol1").feature("s1").feature("i1").feature("mg1").set("prefun", "amg");
    model.sol("sol1").feature("s1").feature("i1").feature("mg1").set("mcasegen", "any");
    model.sol("sol1").feature("s1").feature("i1").feature("mg1").set("mglevels", 5);
    model.sol("sol1").feature("s1").feature("i1").feature("mg1").set("iter", 2);
    model.sol("sol1").feature("s1").feature("i1").feature("mg1").set("maxcoarsedof", 5000);
    model.sol("sol1").feature("s1").feature("se1").feature().create("ss2", "SegregatedStep");
    model.sol("sol1").feature("s1").feature("se1").feature("ss2").set("segvar", new String[]{"mod1_Vm"});
    model.sol("sol1").feature("s1").feature().create("i2", "Iterative");
    model.sol("sol1").feature("s1").feature("i2").set("prefuntype", "left");
    model.sol("sol1").feature("s1").feature("i2").set("maxlinit", 10000);
    model.sol("sol1").feature("s1").feature("i2").set("linsolver", "cg");
    model.sol("sol1").feature("s1").feature("i2").set("rhob", 400);
    model.sol("sol1").feature("s1").feature("se1").feature("ss2").set("linsolver", "i2");
    model.sol("sol1").feature("s1").feature("i2").feature().create("mg1", "Multigrid");
    model.sol("sol1").feature("s1").feature("i2").feature("mg1").set("amgauto", 3);
    model.sol("sol1").feature("s1").feature("i2").feature("mg1").set("scale", 2);
    model.sol("sol1").feature("s1").feature("i2").feature("mg1").set("gmglevels", 1);
    model.sol("sol1").feature("s1").feature("i2").feature("mg1").set("massem", true);
    model.sol("sol1").feature("s1").feature("i2").feature("mg1").set("rmethod", "longest");
    model.sol("sol1").feature("s1").feature("i2").feature("mg1").set("mkeep", false);
    model.sol("sol1").feature("s1").feature("i2").feature("mg1").set("mgcycle", "v");
    model.sol("sol1").feature("s1").feature("i2").feature("mg1").set("prefun", "amg");
    model.sol("sol1").feature("s1").feature("i2").feature("mg1").set("mcasegen", "any");
    model.sol("sol1").feature("s1").feature("i2").feature("mg1").set("mglevels", 5);
    model.sol("sol1").feature("s1").feature("i2").feature("mg1").set("iter", 2);
    model.sol("sol1").feature("s1").feature("i2").feature("mg1").set("maxcoarsedof", 5000);
    model.sol("sol1").feature("s1").feature().remove("fcDef");
    model.sol("sol1").attach("std1");
    model.sol("sol1").runAll();

    model.result("pg3").run();

    model.param().set("vr3", "12500");
    model.param().set("vr4", "12500");

    model.sol("sol1").study("std1");
    model.sol("sol1").feature().remove("s1");
    model.sol("sol1").feature().remove("v1");
    model.sol("sol1").feature().remove("st1");
    model.sol("sol1").feature().create("st1", "StudyStep");
    model.sol("sol1").feature("st1").set("study", "std1");
    model.sol("sol1").feature("st1").set("studystep", "stat");
    model.sol("sol1").feature().create("v1", "Variables");
    model.sol("sol1").feature("v1").set("control", "stat");
    model.sol("sol1").feature().create("s1", "Stationary");
    model.sol("sol1").feature("s1").feature().create("se1", "Segregated");
    model.sol("sol1").feature("s1").feature("se1").feature().remove("ssDef");
    model.sol("sol1").feature("s1").feature("se1").feature().create("ss1", "SegregatedStep");
    model.sol("sol1").feature("s1").feature("se1").feature("ss1").set("segvar", new String[]{"mod1_V"});
    model.sol("sol1").feature("s1").feature().create("i1", "Iterative");
    model.sol("sol1").feature("s1").feature("i1").set("prefuntype", "left");
    model.sol("sol1").feature("s1").feature("i1").set("maxlinit", 10000);
    model.sol("sol1").feature("s1").feature("i1").set("linsolver", "cg");
    model.sol("sol1").feature("s1").feature("i1").set("rhob", 400);
    model.sol("sol1").feature("s1").feature("se1").feature("ss1").set("linsolver", "i1");
    model.sol("sol1").feature("s1").feature("i1").feature().create("mg1", "Multigrid");
    model.sol("sol1").feature("s1").feature("i1").feature("mg1").set("amgauto", 3);
    model.sol("sol1").feature("s1").feature("i1").feature("mg1").set("scale", 2);
    model.sol("sol1").feature("s1").feature("i1").feature("mg1").set("gmglevels", 1);
    model.sol("sol1").feature("s1").feature("i1").feature("mg1").set("massem", true);
    model.sol("sol1").feature("s1").feature("i1").feature("mg1").set("rmethod", "longest");
    model.sol("sol1").feature("s1").feature("i1").feature("mg1").set("mkeep", false);
    model.sol("sol1").feature("s1").feature("i1").feature("mg1").set("mgcycle", "v");
    model.sol("sol1").feature("s1").feature("i1").feature("mg1").set("prefun", "amg");
    model.sol("sol1").feature("s1").feature("i1").feature("mg1").set("mcasegen", "any");
    model.sol("sol1").feature("s1").feature("i1").feature("mg1").set("mglevels", 5);
    model.sol("sol1").feature("s1").feature("i1").feature("mg1").set("iter", 2);
    model.sol("sol1").feature("s1").feature("i1").feature("mg1").set("maxcoarsedof", 5000);
    model.sol("sol1").feature("s1").feature("se1").feature().create("ss2", "SegregatedStep");
    model.sol("sol1").feature("s1").feature("se1").feature("ss2").set("segvar", new String[]{"mod1_Vm"});
    model.sol("sol1").feature("s1").feature().create("i2", "Iterative");
    model.sol("sol1").feature("s1").feature("i2").set("prefuntype", "left");
    model.sol("sol1").feature("s1").feature("i2").set("maxlinit", 10000);
    model.sol("sol1").feature("s1").feature("i2").set("linsolver", "cg");
    model.sol("sol1").feature("s1").feature("i2").set("rhob", 400);
    model.sol("sol1").feature("s1").feature("se1").feature("ss2").set("linsolver", "i2");
    model.sol("sol1").feature("s1").feature("i2").feature().create("mg1", "Multigrid");
    model.sol("sol1").feature("s1").feature("i2").feature("mg1").set("amgauto", 3);
    model.sol("sol1").feature("s1").feature("i2").feature("mg1").set("scale", 2);
    model.sol("sol1").feature("s1").feature("i2").feature("mg1").set("gmglevels", 1);
    model.sol("sol1").feature("s1").feature("i2").feature("mg1").set("massem", true);
    model.sol("sol1").feature("s1").feature("i2").feature("mg1").set("rmethod", "longest");
    model.sol("sol1").feature("s1").feature("i2").feature("mg1").set("mkeep", false);
    model.sol("sol1").feature("s1").feature("i2").feature("mg1").set("mgcycle", "v");
    model.sol("sol1").feature("s1").feature("i2").feature("mg1").set("prefun", "amg");
    model.sol("sol1").feature("s1").feature("i2").feature("mg1").set("mcasegen", "any");
    model.sol("sol1").feature("s1").feature("i2").feature("mg1").set("mglevels", 5);
    model.sol("sol1").feature("s1").feature("i2").feature("mg1").set("iter", 2);
    model.sol("sol1").feature("s1").feature("i2").feature("mg1").set("maxcoarsedof", 5000);
    model.sol("sol1").feature("s1").feature().remove("fcDef");
    model.sol("sol1").attach("std1");
    model.sol("sol1").runAll();

    model.result("pg3").run();

    model.param().set("vr1", "0");
    model.param().set("vr2", "0");
    model.param().set("vr3", "0");
    model.param().set("vr4", "0");
    model.param().set("vm1", "-12500");
    model.param().set("vm2", "12500");

    model.sol("sol1").study("std1");
    model.sol("sol1").feature().remove("s1");
    model.sol("sol1").feature().remove("v1");
    model.sol("sol1").feature().remove("st1");
    model.sol("sol1").feature().create("st1", "StudyStep");
    model.sol("sol1").feature("st1").set("study", "std1");
    model.sol("sol1").feature("st1").set("studystep", "stat");
    model.sol("sol1").feature().create("v1", "Variables");
    model.sol("sol1").feature("v1").set("control", "stat");
    model.sol("sol1").feature().create("s1", "Stationary");
    model.sol("sol1").feature("s1").feature().create("se1", "Segregated");
    model.sol("sol1").feature("s1").feature("se1").feature().remove("ssDef");
    model.sol("sol1").feature("s1").feature("se1").feature().create("ss1", "SegregatedStep");
    model.sol("sol1").feature("s1").feature("se1").feature("ss1").set("segvar", new String[]{"mod1_V"});
    model.sol("sol1").feature("s1").feature().create("i1", "Iterative");
    model.sol("sol1").feature("s1").feature("i1").set("prefuntype", "left");
    model.sol("sol1").feature("s1").feature("i1").set("maxlinit", 10000);
    model.sol("sol1").feature("s1").feature("i1").set("linsolver", "cg");
    model.sol("sol1").feature("s1").feature("i1").set("rhob", 400);
    model.sol("sol1").feature("s1").feature("se1").feature("ss1").set("linsolver", "i1");
    model.sol("sol1").feature("s1").feature("i1").feature().create("mg1", "Multigrid");
    model.sol("sol1").feature("s1").feature("i1").feature("mg1").set("amgauto", 3);
    model.sol("sol1").feature("s1").feature("i1").feature("mg1").set("scale", 2);
    model.sol("sol1").feature("s1").feature("i1").feature("mg1").set("gmglevels", 1);
    model.sol("sol1").feature("s1").feature("i1").feature("mg1").set("massem", true);
    model.sol("sol1").feature("s1").feature("i1").feature("mg1").set("rmethod", "longest");
    model.sol("sol1").feature("s1").feature("i1").feature("mg1").set("mkeep", false);
    model.sol("sol1").feature("s1").feature("i1").feature("mg1").set("mgcycle", "v");
    model.sol("sol1").feature("s1").feature("i1").feature("mg1").set("prefun", "amg");
    model.sol("sol1").feature("s1").feature("i1").feature("mg1").set("mcasegen", "any");
    model.sol("sol1").feature("s1").feature("i1").feature("mg1").set("mglevels", 5);
    model.sol("sol1").feature("s1").feature("i1").feature("mg1").set("iter", 2);
    model.sol("sol1").feature("s1").feature("i1").feature("mg1").set("maxcoarsedof", 5000);
    model.sol("sol1").feature("s1").feature("se1").feature().create("ss2", "SegregatedStep");
    model.sol("sol1").feature("s1").feature("se1").feature("ss2").set("segvar", new String[]{"mod1_Vm"});
    model.sol("sol1").feature("s1").feature().create("i2", "Iterative");
    model.sol("sol1").feature("s1").feature("i2").set("prefuntype", "left");
    model.sol("sol1").feature("s1").feature("i2").set("maxlinit", 10000);
    model.sol("sol1").feature("s1").feature("i2").set("linsolver", "cg");
    model.sol("sol1").feature("s1").feature("i2").set("rhob", 400);
    model.sol("sol1").feature("s1").feature("se1").feature("ss2").set("linsolver", "i2");
    model.sol("sol1").feature("s1").feature("i2").feature().create("mg1", "Multigrid");
    model.sol("sol1").feature("s1").feature("i2").feature("mg1").set("amgauto", 3);
    model.sol("sol1").feature("s1").feature("i2").feature("mg1").set("scale", 2);
    model.sol("sol1").feature("s1").feature("i2").feature("mg1").set("gmglevels", 1);
    model.sol("sol1").feature("s1").feature("i2").feature("mg1").set("massem", true);
    model.sol("sol1").feature("s1").feature("i2").feature("mg1").set("rmethod", "longest");
    model.sol("sol1").feature("s1").feature("i2").feature("mg1").set("mkeep", false);
    model.sol("sol1").feature("s1").feature("i2").feature("mg1").set("mgcycle", "v");
    model.sol("sol1").feature("s1").feature("i2").feature("mg1").set("prefun", "amg");
    model.sol("sol1").feature("s1").feature("i2").feature("mg1").set("mcasegen", "any");
    model.sol("sol1").feature("s1").feature("i2").feature("mg1").set("mglevels", 5);
    model.sol("sol1").feature("s1").feature("i2").feature("mg1").set("iter", 2);
    model.sol("sol1").feature("s1").feature("i2").feature("mg1").set("maxcoarsedof", 5000);
    model.sol("sol1").feature("s1").feature().remove("fcDef");
    model.sol("sol1").attach("std1");
    model.sol("sol1").runAll();

    model.result("pg3").run();
    model.result("pg3").run();
    model.result("pg3").run();
    model.result("pg3").run();
    model.result("pg3").set("allowtableupdate", true);
    model.result("pg3").set("renderdatacached", true);
    model.result().table("evl2").addRow(new double[]{0.9438287019729614, -0.008136391639709473, 0.7448400737000102});
    model.result().table("evl2").addRow(new double[]{0.9438287019729614, -0.008136391639709473, 0.7448400737000102});
    model.result().table("evl2").addRow(new double[]{0.9601017236709595, -0.008136391639709473, 0.7689996750491005});
    model.result().table("evl2").addRow(new double[]{0.9682382345199585, -0.008136391639709473, 0.7813937635799179});
    model.result().table("evl2").addRow(new double[]{0.9926475286483765, -0.016272902488708496, 0.8239057944931365});
    model.result().table("evl2").addRow(new double[]{0.42309558391571045, 0, 0.20989555172506066});
    model.result().table("evl2").addRow(new double[]{0.4312320947647095, 0, 0.21461483800003522});
    model.result().table("evl2").addRow(new double[]{0.4800509214401245, 0, 0.24088521468550583});
    model.result().table("evl2").addRow(new double[]{0.5207332372665405, 0, 0.26189257010307804});
    model.result().table("evl2")
         .addRow(new double[]{0.5044602155685425, -0.016272902488708496, 0.25493517883509587});

    model.label("me_rodlike_sphere.mph");

    model.comments("Me rodlike sphere\n\n");

    model.result("pg3").run();

    model.sol("sol1").runAll();

    model.result("pg3").run();
    model.result("pg3").run();
    model.result("pg3").run();
    model.result("pg3").run();
    model.result("pg3").feature("surf1").set("rangecolormax", "0.96");
    model.result("pg3").set("allowtableupdate", false);
    model.result("pg3").set("title", "Trapping Fields (12.5kV applied), YZ Plane");
    model.result("pg3").set("hasbeenplotted", true);
    model.result("pg3").feature("surf1").set("rangeunit", "T");
    model.result("pg3").feature("surf1").set("rangedatamin", 0.9318553610599738);
    model.result("pg3").feature("surf1").set("rangedatamax", 1.2753950645660943);
    model.result("pg3").feature("surf1").set("rangedataactive", "off");
    model.result("pg3").feature("surf1")
         .set("rangeactualminmax", new double[]{0.9318553610599738, 1.2753950645660943});
    model.result("pg3").feature("surf1").set("hasbeenplotted", true);
    model.result("pg3").feature("con2").set("hasbeenplotted", true);
    model.result("pg3").set("renderdatacached", false);
    model.result("pg3").set("allowtableupdate", true);
    model.result("pg3").set("renderdatacached", true);
    model.result("pg3").run();
    model.result("pg3").run();
    model.result("pg3").run();
    model.result("pg3").run();
    model.result("pg3").run();
    model.result("pg3").run();
    model.result("pg3").run();
    model.result("pg3").run();
    model.result("pg3").run();
    model.result("pg3").run();
    model.result("pg3").run();
    model.result("pg3").run();
    model.result("pg3").run();
    model.result("pg3").run();
    model.result("pg3").run();
    model.result("pg3").run();
    model.result("pg3").run();
    model.result("pg3").run();
    model.result("pg5").run();
    model.result("pg5").run();
    model.result("pg5").run();
    model.result("pg5").run();
    model.result("pg5").run();
    model.result("pg5").run();
    model.result("pg5").run();
    model.result("pg5").run();
    model.result("pg5").run();
    model.result("pg5").run();
    model.result("pg5").run();
    model.result("pg5").run();
    model.result("pg5").run();
    model.result("pg5").run();
    model.result("pg5").run();
    model.result("pg5").run();
    model.result("pg5").run();
    model.result("pg5").run();
    model.result("pg5").run();
    model.result("pg5").run();
    model.result("pg5").run();
    model.result("pg5").run();
    model.result("pg5").run();
    model.result("pg5").run();
    model.result("pg5").run();
    model.result("pg5").run();
    model.result("pg5").run();
    model.result("pg5").run();
    model.result("pg5").run();
    model.result("pg5").run();
    model.result("pg5").run();
    model.result("pg5").run();
    model.result("pg5").run();
    model.result("pg5").run();
    model.result("pg5").run();
    model.result("pg5").run();
    model.result("pg5").run();
    model.result("pg5").run();
    model.result("pg5").run();
    model.result("pg5").run();
    model.result("pg5").run();
    model.result("pg5").run();
    model.result("pg6").run();
    model.result("pg3").run();
    model.result("pg3").run();
    model.result("pg3").feature("surf1").set("rangecolormax", "1.27539506456609");
    model.result("pg3").run();
    model.result("pg3").active(false);
    model.result("pg3").run();
    model.result().create("pg7", "PlotGroup2D");
    model.result("pg7").run();
    model.result("pg7").create("surf1", "Surface");
    model.result("pg7").run();
    model.result("pg7").run();
    model.result("pg7").set("allowtableupdate", false);
    model.result("pg7").set("title", "Surface: Magnetic scalar potential (A)");
    model.result("pg7").set("xlabel", "");
    model.result("pg7").set("ylabel", "");
    model.result("pg7").set("hasbeenplotted", true);
    model.result("pg7").feature("surf1").set("rangeunit", "A");
    model.result("pg7").feature("surf1").set("rangecolormin", -15.195632017372802);
    model.result("pg7").feature("surf1").set("rangecolormax", -0.027990074985863617);
    model.result("pg7").feature("surf1").set("rangecoloractive", "off");
    model.result("pg7").feature("surf1").set("rangedatamin", -15.195632017372802);
    model.result("pg7").feature("surf1").set("rangedatamax", -0.027990074985863617);
    model.result("pg7").feature("surf1").set("rangedataactive", "off");
    model.result("pg7").feature("surf1")
         .set("rangeactualminmax", new double[]{-15.195632017372802, -0.027990074985863617});
    model.result("pg7").feature("surf1").set("hasbeenplotted", true);
    model.result("pg7").set("renderdatacached", false);
    model.result("pg7").set("allowtableupdate", true);
    model.result("pg7").set("renderdatacached", true);

    model.view("view1").hideObjects().clear();
    model.view("view1").hideEntities().clear();

    model.result("pg7").run();
    model.result().remove("pg7");
    model.result("pg3").run();
    model.result("pg3").active(true);
    model.result("pg3").run();
    model.result("pg3").run();
    model.result("pg3").run();
    model.result("pg3").set("data", "cpl4");
    model.result("pg3").run();
    model.result("pg3").set("allowtableupdate", false);
    model.result("pg3").set("title", "Trapping Fields (12.5kV applied), YZ Plane");
    model.result("pg3").set("hasbeenplotted", true);
    model.result("pg3").feature("surf1").set("rangeunit", "T");
    model.result("pg3").feature("surf1").set("rangedatamin", 1.5105656853543206E-4);
    model.result("pg3").feature("surf1").set("rangedatamax", 0.44465658327295354);
    model.result("pg3").feature("surf1").set("rangedataactive", "off");
    model.result("pg3").feature("surf1")
         .set("rangeactualminmax", new double[]{1.5105656853543206E-4, 0.44465658327295354});
    model.result("pg3").feature("surf1").set("hasbeenplotted", true);
    model.result("pg3").feature("con2").set("hasbeenplotted", true);
    model.result("pg3").set("renderdatacached", false);
    model.result("pg3").set("allowtableupdate", true);
    model.result("pg3").set("renderdatacached", true);
    model.result().table("evl2").addRow(new double[]{0.07345569133758545, 0.36957430839538574, 0.1522773582734324});
    model.result().table("evl2")
         .addRow(new double[]{-0.0045909881591796875, 0.3787562847137451, 0.15609234783228138});
    model.result().table("evl2")
         .addRow(new double[]{0.013772964477539062, 0.37416529655456543, 0.15453452478034446});
    model.result().table("evl2")
         .addRow(new double[]{0.0045909881591796875, 0.39712023735046387, 0.1624204159894723});
    model.result().table("evl2")
         .addRow(new double[]{0.0045909881591796875, 0.4476209878921509, 0.17973805894430264});
    model.result().table("evl2")
         .addRow(new double[]{-0.0045909881591796875, 0.5164858102798462, 0.20332235377294636});
    model.result().table("evl2").addRow(new double[]{0.01836395263671875, 0.33743739128112793, 0.14162458346058088});
    model.result().table("evl2").addRow(new double[]{0.01836395263671875, 0.32366442680358887, 0.13643151319602945});
    model.result().table("evl2").addRow(new double[]{0.027545928955078125, 0.277754545211792, 0.11849824414364948});
    model.result().table("evl2").addRow(new double[]{0.027545928955078125, 0.1813439130783081, 0.07855142372533733});
    model.result().table("evl2").addRow(new double[]{0.04131889343261719, 0.21348083019256592, 0.09153149050886274});
    model.result().table("evl2")
         .addRow(new double[]{0.027545928955078125, 0.19970786571502686, 0.08619148888987349});
    model.result().table("evl2").addRow(new double[]{0.022954940795898438, 0.2502087354660034, 0.10730675653198075});
    model.result().table("evl2").addRow(new double[]{0.022954940795898438, 0.2547997236251831, 0.10918790125099724});
    model.result().table("evl2").addRow(new double[]{0.03213691711425781, 0.2502087354660034, 0.10707165234087704});
    model.result().table("evl2").addRow(new double[]{0.03213691711425781, 0.24561774730682373, 0.10516163604974299});
    model.result().table("evl2").addRow(new double[]{0.03213691711425781, 0.2502087354660034, 0.10707165234087704});
    model.result().table("evl2").addRow(new double[]{0.03213691711425781, 0.2502087354660034, 0.10707165234087704});
    model.result("pg3").set("data", "cpl3");
    model.result("pg3").run();
    model.result("pg3").set("allowtableupdate", false);
    model.result("pg3").set("title", "Trapping Fields (12.5kV applied), YZ Plane");
    model.result("pg3").set("hasbeenplotted", true);
    model.result("pg3").feature("surf1").set("rangeunit", "T");
    model.result("pg3").feature("surf1").set("rangedatamin", 0.012329509744932288);
    model.result("pg3").feature("surf1").set("rangedatamax", 1.9338136786938829);
    model.result("pg3").feature("surf1").set("rangedataactive", "off");
    model.result("pg3").feature("surf1")
         .set("rangeactualminmax", new double[]{0.012329509744932288, 1.9338136786938829});
    model.result("pg3").feature("surf1").set("hasbeenplotted", true);
    model.result("pg3").feature("con2").set("hasbeenplotted", true);
    model.result("pg3").set("renderdatacached", false);
    model.result("pg3").set("allowtableupdate", true);
    model.result("pg3").set("renderdatacached", true);
    model.result().table("evl2").addRow(new double[]{1.8650295734405518, 0.058863162994384766, 0.41555505045025526});
    model.result().table("evl2").addRow(new double[]{1.8650295734405518, -0.00929403305053711, 0.41372918655684465});
    model.result().table("evl2").addRow(new double[]{1.8650295734405518, 0.015490293502807617, 0.4145932465544292});
    model.result().table("evl2").addRow(new double[]{1.8650295734405518, 0.015490293502807617, 0.4145932465544292});
    model.result().table("evl2").addRow(new double[]{1.883617877960205, 0.015490293502807617, 0.41528429169649383});
    model.result().table("evl2").addRow(new double[]{2.8626036643981934, -0.006196022033691406, 0.4383662471462554});
    model.result().table("evl2")
         .addRow(new double[]{2.7386817932128906, -0.030980587005615234, 0.43845110172169477});
    model.result().table("evl2").addRow(new double[]{-2.701504707336426, 0.05576515197753906, 0.44027708416785544});
    model.result().table("evl2").addRow(new double[]{0, -0.9851818084716797, 0.866207292580526});
    model.result().table("evl2").addRow(new double[]{0, -0.9851818084716797, 0.866207292580526});
    model.result("pg3").set("data", "cpl1");

    model.param().set("vm1", "0");
    model.param().set("vm2", "0");
    model.param().set("vr1", "12500");
    model.param().set("vr2", "12500");
    model.param().set("vr3", "12500");
    model.param().set("vr4", "12500");

    return model;
  }

  public static Model run16(Model model) {

    model.sol("sol1").runAll();

    model.result("pg3").run();
    model.result("pg3").run();
    model.result("pg3").run();
    model.result("pg3").run();
    model.result("pg3").feature("con2").set("coloring", "uniform");
    model.result("pg3").run();
    model.result("pg3").run();
    model.result("pg3").feature("surf1").set("rangecolormax", "0.2");
    model.result().export().create("plot1", "Plot");
    model.result("pg3").feature("con1").active(false);
    model.result("pg3").feature("con2").active(false);
    model.result("pg3").feature("con3").active(false);
    model.result("pg3").feature("surf2").active(false);
    model.result("pg3").set("window", "graphics");
    model.result("pg3").run();
    model.result("pg3").set("window", "graphics");
    model.result("pg3").set("windowtitle", "");
    model.result("pg3").feature("con1").active(false);
    model.result("pg3").feature("con2").active(true);
    model.result("pg3").feature("con3").active(false);
    model.result("pg3").feature("surf2").active(false);
    model.result().export("plot1").set("struct", "spreadsheet");
    model.result().export().create("data1", "Data");
    model.result("pg3").feature("con1").active(false);
    model.result("pg3").feature("con2").active(false);
    model.result("pg3").feature("con3").active(false);
    model.result("pg3").feature("surf2").active(false);
    model.result("pg3").set("window", "graphics");
    model.result("pg3").run();
    model.result("pg3").set("window", "graphics");
    model.result("pg3").set("windowtitle", "");
    model.result("pg3").feature("con1").active(false);
    model.result("pg3").feature("con2").active(true);
    model.result("pg3").feature("con3").active(false);
    model.result("pg3").feature("surf2").active(false);
    model.result().export().remove("plot1");
    model.result().export("data1").setIndex("expr", "mfnc.normB", 0);
    model.result().export("data1").setIndex("expr", "es.normE", 1);
    model.result("pg3").run();
    model.result("pg3").feature("surf1")
         .set("expr", "acos((mfnc.Bx*es.Ex + mfnc.By*es.Ey + mfnc.Bz*es.Ez)/(mfnc.normB*es.normE))");
    model.result("pg3").run();
    model.result("pg3").feature("surf1").set("rangecoloractive", "on");
    model.result("pg3").feature("surf1").set("rangecolormax", "2.47519917613316");
    model.result("pg3").feature("surf1").set("rangecoloractive", "off");
    model.result("pg3").run();
    model.result("pg3").set("data", "cpl4");
    model.result("pg3").run();
    model.result("pg3").set("data", "cpl3");
    model.result("pg3").run();
    model.result("pg3").run();
    model.result("pg3").feature().remove("con1");
    model.result("pg3").feature().remove("con2");
    model.result("pg3").feature().remove("con3");
    model.result("pg3").feature().remove("surf2");
    model.result("pg3").run();
    model.result("pg3").create("arws1", "ArrowSurface");
    model.result("pg3").run();
    model.result("pg3").feature("arws1").set("xnumber", "201");
    model.result("pg3").feature("arws1").set("ynumber", "201");
    model.result("pg3").run();
    model.result("pg3").feature("arws1").set("color", "black");
    model.result("pg3").feature("arws1").set("arrowlength", "logarithmic");
    model.result("pg3").run();
    model.result("pg3").run();
    model.result("pg3").create("arws2", "ArrowSurface");
    model.result("pg3").feature("arws2").set("expr", new String[]{"es.Ex", "es.Ey"});
    model.result("pg3").feature("arws2").set("xnumber", "201");
    model.result("pg3").feature("arws2").set("ynumber", "201");
    model.result("pg3").run();
    model.result("pg3").feature("arws2").set("arrowlength", "logarithmic");
    model.result("pg3").feature("arws2").set("color", "white");
    model.result("pg3").run();
    model.result("pg3").set("prefixintitle", "EB Angle in Trap, XY Plane");
    model.result("pg3").run();
    model.result("pg3").set("data", "cpl1");
    model.result("pg3").run();

    model.physics("mfnc").feature("mfc2").selection().set(new int[]{11, 12});

    model.view("view1").hideEntities().create("hide1");
    model.view("view1").hideEntities("hide1").geom(3);
    model.view("view1").hideEntities("hide1").add(new int[]{1});
    model.view("view1").hideEntities("hide1").add(new int[]{6});

    model.result("pg3").run();
    model.result("pg3").run();
    model.result("pg3").run();

    model.view("view1").hideObjects().clear();
    model.view("view1").hideEntities().clear();

    model.result("pg3").run();
    model.result("pg3").run();
    model.result("pg3").run();
    model.result("pg3").feature("arws1").set("expr", new String[]{"mfnc.By", "mfnc.Bz"});
    model.result("pg3").run();
    model.result("pg3").feature("arws2").set("expr", new String[]{"es.Ey", "es.Ez"});
    model.result("pg3").run();
    model.result("pg3").run();
    model.result("pg3").run();
    model.result("pg3").feature("arws1").set("logrange", "1000");
    model.result("pg3").run();
    model.result("pg3").feature("arws1").set("logrange", "10000");
    model.result("pg3").run();
    model.result("pg3").feature("arws1").set("logrange", "100000");
    model.result("pg3").run();
    model.result("pg3").feature("arws1").set("logrange", "100");
    model.result("pg3").run();
    model.result("pg3").run();
    model.result("pg3").set("data", "cpl4");
    model.result("pg3").run();
    model.result("pg3").run();
    model.result("pg3").feature("arws1").set("expr", new String[]{"mfnc.Bx", "mfnc.Bz"});
    model.result("pg3").run();
    model.result("pg3").feature("arws2").set("expr", new String[]{"es.Ex", "es.Ez"});
    model.result("pg3").run();
    model.result("pg3").run();
    model.result("pg3").run();
    model.result("pg3").run();
    model.result("pg3").set("data", "cpl2");
    model.result("pg3").run();
    model.result("pg3").run();
    model.result("pg3").run();
    model.result("pg3").run();
    model.result("pg3").run();
    model.result("pg3").feature("arws1").set("expr", new String[]{"(mfnc.Bx+mfnc.By)/sqrt(2)", "mfnc.Bz"});
    model.result("pg3").run();
    model.result("pg3").feature("arws2").set("expr", new String[]{"(es.Ex+es.Ey)/sqrt(2)", "es.Ez"});
    model.result("pg3").run();
    model.result("pg3").set("allowtableupdate", false);
    model.result("pg3").set("title", "EB Angle in Trap, XY Plane");
    model.result("pg3").set("hasbeenplotted", true);
    model.result("pg3").feature("surf1").set("rangeunit", "1");
    model.result("pg3").feature("surf1").set("rangecolormin", 0.1689631842554882);
    model.result("pg3").feature("surf1").set("rangecolormax", 3.01242046846567);
    model.result("pg3").feature("surf1").set("rangecoloractive", "off");
    model.result("pg3").feature("surf1").set("rangedatamin", 0.1689631842554882);
    model.result("pg3").feature("surf1").set("rangedatamax", 3.01242046846567);
    model.result("pg3").feature("surf1").set("rangedataactive", "off");
    model.result("pg3").feature("surf1")
         .set("rangeactualminmax", new double[]{0.1689631842554882, 3.01242046846567});
    model.result("pg3").feature("surf1").set("hasbeenplotted", true);
    model.result("pg3").feature("arws1").set("scale", 0.058081898565589825);
    model.result("pg3").feature("arws1").set("scaleactive", false);
    model.result("pg3").feature("arws1").set("hasbeenplotted", true);
    model.result("pg3").feature("arws2").set("scale", 1.3636265895498997E-8);
    model.result("pg3").feature("arws2").set("scaleactive", false);
    model.result("pg3").feature("arws2").set("hasbeenplotted", true);
    model.result("pg3").set("renderdatacached", false);
    model.result("pg3").set("allowtableupdate", true);
    model.result("pg3").set("renderdatacached", true);
    model.result().table("evl2")
         .addRow(new double[]{-0.7907971739768982, -0.0011477470397949219, 0.5467146853974078});
    model.result().table("evl2")
         .addRow(new double[]{-0.793092668056488, -0.0011477470397949219, 0.5450707767889046});
    model.result().table("evl2")
         .addRow(new double[]{-0.793092668056488, -0.0011477470397949219, 0.5450707767889046});
    model.result("pg3").run();
    model.result("pg3").set("data", "cpl3");
    model.result("pg3").run();
    model.result("pg3").run();
    model.result("pg3").feature("arws1").set("expr", new String[]{"(mfnc.Bx)", "mfnc.Bz"});
    model.result("pg3").run();
    model.result("pg3").feature("arws2").set("expr", new String[]{"(es.Ex)", "es.Ey"});
    model.result("pg3").run();
    model.result("pg3").feature("arws1").set("expr", new String[]{"(mfnc.Bx)", "mfnc.By"});
    model.result("pg3").run();
    model.result("pg3").run();
    model.result().export("data1")
         .setIndex("expr", "acos((mfnc.Bx*es.Ex + mfnc.By*es.Ey + mfnc.Bz*es.Ez)/(mfnc.normB*es.normE))", 2);
    model.result().export("data1").setIndex("descr", "EB Angle", 2);
    model.result("pg3").run();
    model.result().create("pg7", "PlotGroup2D");
    model.result("pg7").run();
    model.result("pg7").create("surf1", "Surface");
    model.result("pg7").feature("surf1").set("expr", "dom");
    model.result("pg7").run();
    model.result("pg7").set("allowtableupdate", false);
    model.result("pg7").set("title", "Surface: Entity index");
    model.result("pg7").set("xlabel", "");
    model.result("pg7").set("ylabel", "");
    model.result("pg7").set("hasbeenplotted", true);
    model.result("pg7").feature("surf1").set("rangeunit", "");
    model.result("pg7").feature("surf1").set("rangecolormin", 1);
    model.result("pg7").feature("surf1").set("rangecolormax", 12);
    model.result("pg7").feature("surf1").set("rangecoloractive", "off");
    model.result("pg7").feature("surf1").set("rangedatamin", 1);
    model.result("pg7").feature("surf1").set("rangedatamax", 12);
    model.result("pg7").feature("surf1").set("rangedataactive", "off");
    model.result("pg7").feature("surf1").set("rangeactualminmax", new double[]{1, 12});
    model.result("pg7").feature("surf1").set("hasbeenplotted", true);
    model.result("pg7").set("renderdatacached", false);
    model.result("pg7").set("allowtableupdate", true);
    model.result("pg7").set("renderdatacached", true);
    model.result().table("evl2").addRow(new double[]{-0.11729168891906738, 0.8257336616516113, 6});
    model.result().table("evl2").addRow(new double[]{-0.11729168891906738, 0.8257336616516113, 6});
    model.result().table("evl2").addRow(new double[]{-2.012725830078125, 2.083101272583008, 6});
    model.result().table("evl2").addRow(new double[]{-2.012725830078125, 2.083101272583008, 6});
    model.result().table("evl2").addRow(new double[]{-3.2325599193573, 2.242617607116699, 1});
    model.result().table("evl2").addRow(new double[]{-3.2325599193573, 2.242617607116699, 1});
    model.result("pg7").feature("surf1").set("expr", "dom==1 || dom==6");
    model.result("pg7").run();
    model.result("pg7").feature("surf1").set("expr", "dom >2 && dom != 6");
    model.result("pg7").run();
    model.result().export("data1").setIndex("expr", "dom >2 && dom != 6", 3);
    model.result().export("data1").setIndex("descr", "Solids", 3);
    model.result().export("data1")
         .set("filename", "R:\\COMSOL files\\Magnetoelectrostatic Cloverleaf\\ToMatlab.txt");
    model.result().export("data1").set("location", "grid");
    model.result().export("data1").set("gridx3", "range(-1,0.01,1)");
    model.result().export("data1").set("gridy3", "range(-1,0.01,1)");
    model.result().export("data1").set("gridz3", "range(-1,0.01,1)");
    model.result().export("data1").setIndex("descr", "Electric field norm,", 1);
    model.result().export("data1").setIndex("descr", "Electric field norm, +12.5kV", 1);
    model.result().export("data1").setIndex("descr", "Electric field norm, +12.5kV Applied", 1);
    model.result().export("data1").setIndex("descr", "Electric field, +12.5kV Applied", 1);
    model.result().export("data1").setIndex("descr", "Magnetic field", 0);
    model.result().export("data1").set("fullprec", "off");
    model.result().export("data1").setIndex("unit", "G", 0);
    model.result().export("data1").setIndex("unit", "T", 0);
    model.result().export("data1").set("fullprec", "on");
    model.result().export("data1").run();
    model.result().export("data1").set("gridx3", "range(-1,0.1,1)");
    model.result().export("data1").set("gridy3", "range(-1,0.1,1)");
    model.result().export("data1").set("gridz3", "range(-1,0.1,1)");
    model.result().export("data1").run();
    model.result().export("data1").run();
    model.result("pg7").run();
    model.result("pg3").run();

    model.view("view1").hideEntities().create("hide1");
    model.view("view1").hideEntities("hide1").geom(3);
    model.view("view1").hideEntities("hide1").add(new int[]{1});
    model.view("view1").hideEntities("hide1").add(new int[]{6});
    model.view("view1").hideEntities("hide1").add(new int[]{13});
    model.view("view1").hideEntities("hide1").add(new int[]{4});
    model.view("view1").hideEntities("hide1").add(new int[]{14});
    model.view("view1").hideEntities("hide1").add(new int[]{5});

    model.result("pg3").run();
    model.result("pg3").feature("surf1")
         .set("expr", "acos((mfnc.Bx*es.Ex + mfnc.By*es.Ey + mfnc.Bz*es.Ez)/(mfnc.normB*es.normE+1e-10))");
    model.result("pg3").run();

    model.view("view1").hideObjects().clear();
    model.view("view1").hideEntities().clear();

    model.result("pg3").run();
    model.result("pg7").run();
    model.result("pg7").run();
    model.result("pg7").feature("surf1").set("expr", "mfnc.normB");
    model.result("pg7").run();
    model.result("pg7").run();
    model.result("pg7").set("data", "cpl4");
    model.result("pg7").run();
    model.result("pg7").set("data", "cpl3");
    model.result("pg7").run();

    model.param().set("mang", "30*pi/180");

    model.sol("sol1").runAll();

    model.result("pg3").run();
    model.result("pg7").run();
    model.result().move("pg7", 0);
    model.result("pg7").set("allowtableupdate", false);
    model.result("pg7").set("title", "Surface: Magnetic flux density norm (T)");
    model.result("pg7").set("xlabel", "");
    model.result("pg7").set("ylabel", "");
    model.result("pg7").set("hasbeenplotted", true);
    model.result("pg7").feature("surf1").set("rangeunit", "T");
    model.result("pg7").feature("surf1").set("rangecolormin", 0.021948528736888663);
    model.result("pg7").feature("surf1").set("rangecolormax", 1.9455219461718976);
    model.result("pg7").feature("surf1").set("rangecoloractive", "off");
    model.result("pg7").feature("surf1").set("rangedatamin", 0.021948528736888663);
    model.result("pg7").feature("surf1").set("rangedatamax", 1.9455219461718976);
    model.result("pg7").feature("surf1").set("rangedataactive", "off");
    model.result("pg7").feature("surf1")
         .set("rangeactualminmax", new double[]{0.021948528736888663, 1.9455219461718976});
    model.result("pg7").feature("surf1").set("hasbeenplotted", true);
    model.result("pg7").set("renderdatacached", false);
    model.result("pg7").set("allowtableupdate", true);
    model.result("pg7").set("renderdatacached", true);
    model.result().table("evl2").addRow(new double[]{2.958332061767578, 0.07230138778686523, 0.5109929833156214});
    model.result().table("evl2").addRow(new double[]{2.958332061767578, 0.07230138778686523, 0.5109929833156214});
    model.result().table("evl2").addRow(new double[]{2.958332061767578, 0.07230138778686523, 0.5109929833156214});

    model.param().set("mang", "60*pi/180");

    model.sol("sol1").runAll();

    model.result("pg7").run();
    model.result("pg7").set("allowtableupdate", false);
    model.result("pg7").set("title", "Surface: Magnetic flux density norm (T)");
    model.result("pg7").set("xlabel", "");
    model.result("pg7").set("ylabel", "");
    model.result("pg7").set("hasbeenplotted", true);
    model.result("pg7").feature("surf1").set("rangeunit", "T");
    model.result("pg7").feature("surf1").set("rangecolormin", 0.012271808838934712);
    model.result("pg7").feature("surf1").set("rangecolormax", 1.7638037553305927);
    model.result("pg7").feature("surf1").set("rangecoloractive", "off");
    model.result("pg7").feature("surf1").set("rangedatamin", 0.012271808838934712);
    model.result("pg7").feature("surf1").set("rangedatamax", 1.7638037553305927);
    model.result("pg7").feature("surf1").set("rangedataactive", "off");
    model.result("pg7").feature("surf1")
         .set("rangeactualminmax", new double[]{0.012271808838934712, 1.7638037553305927});
    model.result("pg7").feature("surf1").set("hasbeenplotted", true);
    model.result("pg7").set("renderdatacached", false);
    model.result("pg7").set("allowtableupdate", true);
    model.result("pg7").set("renderdatacached", true);
    model.result().table("evl2").addRow(new double[]{2.946281909942627, -0.012050390243530273, 0.2602511934148254});
    model.result().table("evl2").addRow(new double[]{2.946281909942627, -0.012050390243530273, 0.2602511934148254});
    model.result().table("evl2").addRow(new double[]{2.9342312812805176, 2.384185791015625E-7, 0.2609100481317533});

    model.param().set("mang", "20*pi/180");

    model.sol("sol1").runAll();

    model.result("pg7").run();
    model.result("pg7").set("allowtableupdate", false);
    model.result("pg7").set("title", "Surface: Magnetic flux density norm (T)");
    model.result("pg7").set("xlabel", "");
    model.result("pg7").set("ylabel", "");
    model.result("pg7").set("hasbeenplotted", true);
    model.result("pg7").feature("surf1").set("rangeunit", "T");
    model.result("pg7").feature("surf1").set("rangecolormin", 0.018179893369998833);
    model.result("pg7").feature("surf1").set("rangecolormax", 1.9069000770464832);
    model.result("pg7").feature("surf1").set("rangecoloractive", "off");
    model.result("pg7").feature("surf1").set("rangedatamin", 0.018179893369998833);
    model.result("pg7").feature("surf1").set("rangedatamax", 1.9069000770464832);
    model.result("pg7").feature("surf1").set("rangedataactive", "off");
    model.result("pg7").feature("surf1")
         .set("rangeactualminmax", new double[]{0.018179893369998833, 1.9069000770464832});
    model.result("pg7").feature("surf1").set("hasbeenplotted", true);
    model.result("pg7").set("renderdatacached", false);
    model.result("pg7").set("allowtableupdate", true);
    model.result("pg7").set("renderdatacached", true);
    model.result().table("evl2").addRow(new double[]{2.946281909942627, 0.09640169143676758, 0.5680146988118713});
    model.result().table("evl2").addRow(new double[]{2.946281909942627, 0.0843515396118164, 0.5666980182489592});
    model.result().table("evl2").addRow(new double[]{2.958332061767578, 0.03615093231201172, 0.5617907358995057});
    model.result().table("evl2")
         .addRow(new double[]{-0.01807546615600586, -0.024100303649902344, 0.039031853297517446});
    model.result().table("evl2")
         .addRow(new double[]{0.0060253143310546875, -0.9037673473358154, 0.8838793203381169});
    model.result().table("evl2").addRow(new double[]{0.0421757698059082, -0.9399182796478271, 0.9768810360755189});
    model.result().table("evl2").addRow(new double[]{-0.01807546615600586, 0.939918041229248, 0.9423251520161022});
    model.result("pg3").run();
    model.result("pg7").run();

    model.param().set("mang", "0*pi/180");

    model.sol("sol1").runAll();

    model.result("pg7").run();
    model.result("pg7").set("allowtableupdate", false);
    model.result("pg7").set("title", "Surface: Magnetic flux density norm (T)");
    model.result("pg7").set("xlabel", "");
    model.result("pg7").set("ylabel", "");
    model.result("pg7").set("hasbeenplotted", true);
    model.result("pg7").feature("surf1").set("rangeunit", "T");
    model.result("pg7").feature("surf1").set("rangecolormin", 0.006716396938629757);
    model.result("pg7").feature("surf1").set("rangecolormax", 1.7680544453801095);
    model.result("pg7").feature("surf1").set("rangecoloractive", "off");
    model.result("pg7").feature("surf1").set("rangedatamin", 0.006716396938629757);
    model.result("pg7").feature("surf1").set("rangedatamax", 1.7680544453801095);
    model.result("pg7").feature("surf1").set("rangedataactive", "off");
    model.result("pg7").feature("surf1")
         .set("rangeactualminmax", new double[]{0.006716396938629757, 1.7680544453801095});
    model.result("pg7").feature("surf1").set("hasbeenplotted", true);
    model.result("pg7").set("renderdatacached", false);
    model.result("pg7").set("allowtableupdate", true);
    model.result("pg7").set("renderdatacached", true);
    model.result().table("evl2").addRow(new double[]{-0.002678394317626953, 0, 0.039512886832895985});
    model.result().table("evl2")
         .addRow(new double[]{0.0026786327362060547, -0.021428585052490234, 0.0456384402666081});
    model.result().table("evl2")
         .addRow(new double[]{0.04553580284118652, 0.005357146263122559, 0.05033162644702627});
    model.result().table("evl2")
         .addRow(new double[]{0.0026786327362060547, -0.005357146263122559, 0.04200198096133007});
    model.result("pg6").run();
    model.result("pg6").run();
    model.result("pg6").run();
    model.result("pg6").run();
    model.result("pg6").run();
    model.result("pg6").run();
    model.result("pg6").run();
    model.result("pg6").run();
    model.result("pg6").feature("lngr1").active(false);
    model.result("pg6").run();
    model.result("pg6").run();
    model.result("pg6").feature("lngr6").active(false);
    model.result("pg6").run();
    model.result("pg6").run();
    model.result("pg6").feature("lngr3").set("linecolor", "black");
    model.result("pg6").run();
    model.result("pg6").feature("lngr3").set("linecolor", "cycle");
    model.result("pg6").run();
    model.result("pg6").run();
    model.result("pg6").feature("lngr5").active(false);
    model.result("pg6").run();
    model.result("pg6").run();
    model.result("pg6").run();
    model.result("pg6").feature("lngr3").set("data", "cln4");
    model.result("pg6").feature("lngr3").set("xdataexpr", "Waxis");
    model.result("pg6").run();
    model.result("pg6").feature("lngr3").set("data", "cln3");
    model.result("pg6").feature("lngr3").set("xdataexpr", "Yaxis");
    model.result("pg6").run();
    model.result("pg6").run();
    model.result("pg6").feature("lngr4").active(false);
    model.result("pg6").run();
    model.result("pg6").run();
    model.result().move("pg6", 0);

    model.param().set("mang", "20*pi/180");

    model.sol("sol1").runAll();

    model.result("pg6").run();
    model.result("pg7").run();
    model.result("pg6").run();

    model.param().set("mang", "40*pi/180");

    model.sol("sol1").runAll();

    model.result("pg6").run();

    model.param().set("mang", "0*pi/180");

    model.sol("sol1").runAll();

    model.result("pg6").run();

    model.param().set("mang", "-20*pi/180");

    model.sol("sol1").runAll();

    model.result("pg6").run();

    model.param().set("mang", "-45*pi/180");

    model.sol("sol1").runAll();

    model.result("pg6").run();
    model.result("pg7").run();
    model.result("pg3").run();
    model.result("pg6").run();

    model.param().set("mang", "45*pi/180");

    model.sol("sol1").runAll();

    model.result("pg6").run();

    model.param().set("mang", "0*pi/180");

    model.sol("sol1").runAll();

    model.result("pg6").run();
    model.result("pg7").run();
    model.result("pg7").set("data", "cpl1");
    model.result("pg7").run();
    model.result("pg7").run();
    model.result("pg7").feature("surf1").set("rangecoloractive", "on");
    model.result("pg7").feature("surf1").set("rangecolormax", "0.4");
    model.result("pg7").set("allowtableupdate", false);
    model.result("pg7").set("title", "Surface: Magnetic flux density norm (T)");
    model.result("pg7").set("xlabel", "");
    model.result("pg7").set("ylabel", "");
    model.result("pg7").set("hasbeenplotted", true);
    model.result("pg7").feature("surf1").set("rangeunit", "T");
    model.result("pg7").feature("surf1").set("rangedatamin", 2.0444810803539907E-4);
    model.result("pg7").feature("surf1").set("rangedatamax", 1.8926388705737645);
    model.result("pg7").feature("surf1").set("rangedataactive", "off");
    model.result("pg7").feature("surf1")
         .set("rangeactualminmax", new double[]{2.0444810803539907E-4, 1.8926388705737645});
    model.result("pg7").feature("surf1").set("hasbeenplotted", true);
    model.result("pg7").set("renderdatacached", false);
    model.result("pg7").set("allowtableupdate", true);
    model.result("pg7").set("renderdatacached", true);
    model.result().table("evl2").addRow(new double[]{0.4480544328689575, 0.03284168243408203, 0.29454530270509366});
    model.result().table("evl2").addRow(new double[]{0.47151267528533936, 0.028150081634521484, 0.3117939809028047});
    model.result().table("evl2")
         .addRow(new double[]{0.47151267528533936, 0.014075040817260742, 0.31233575893187737});
    model.result().table("evl2").addRow(new double[]{0.5137377977371216, 0.014075040817260742, 0.3430585265431155});
    model.result().table("evl2").addRow(new double[]{0.5043545961380005, -0.004691600799560547, 0.337596841725738});
    model.result().table("evl2").addRow(new double[]{0.5043545961380005, 0.014075040817260742, 0.3362313604997634});
    model.result().table("evl2").addRow(new double[]{0.5043545961380005, 0, 0.33677313852883606});

    model.study().create("std2");
    model.study("std2").create("stat", "Stationary");
    model.study("std2").feature("stat").activate("mfnc", true);
    model.study("std2").feature("stat").activate("es", true);
    model.study().remove("std2");

    model.geom("geom1").feature("blk6").set("size", new String[]{"OD", "OD/2", "tc"});
    model.geom("geom1").runPre("fin");

    model.result("pg7").run();
    model.result("pg6").run();
    model.result("pg6").run();
    model.result("pg6").feature("lngr5").active(true);
    model.result("pg6").run();
    model.result("pg6").run();
    model.result("pg6").run();
    model.result("pg6").run();
    model.result("pg6").feature("lngr5").active(false);
    model.result("pg6").run();

    model.sol("sol1").runAll();

    model.result("pg6").run();

    model.view("view1").hideObjects().clear();
    model.view("view1").hideObjects().clear();
    model.view("view1").set("drawhidestatus", "hide");
    model.view("view1").hideObjects().clear();
    model.view("view1").set("drawhidestatus", "hide");
    model.view("view1").hideObjects().clear();
    model.view("view1").hideObjects().clear();
    model.view("view1").hideObjects().clear();
    model.view("view1").hideObjects().clear();
    model.view("view1").hideObjects().clear();

    model.geom("geom1").run("blk5");
    model.geom("geom1").run("fin");
    model.geom("geom1").feature().remove("blk2");

    model.view("view1").hideObjects().create("hide1");
    model.view("view1").hideObjects("hide1").init();
    model.view("view1").hideObjects("hide1").add(new String[]{"fin"});
    model.view("view1").hideObjects().clear();
    model.view("view1").hideObjects().create("hide1");
    model.view("view1").hideObjects("hide1").init(3);
    model.view("view1").hideObjects("hide1").add("fin", new int[]{1});
    model.view("view1").hideObjects("hide1").add("fin", new int[]{6});

    model.geom("geom1").feature("wp1").geom().feature("r1").set("size", new String[]{"gwo*2", "tc"});
    model.geom("geom1").feature("wp1").geom().run("dif1");
    model.geom("geom1").feature("wp1").geom().feature("e1").set("angle", "360");
    model.geom("geom1").feature("wp1").geom().feature("e2").set("angle", "360");
    model.geom("geom1").feature("wp1").geom().run("dif1");
    model.geom("geom1").run("fin");
    model.geom("geom1").feature("blk6").set("size", new String[]{"OD", "OD", "tc"});
    model.geom("geom1").feature("wp1").geom().feature("r1").set("size", new String[]{"gwo*6", "tc"});
    model.geom("geom1").run("fin");

    model.view("view1").hideObjects().clear();
    model.view("view1").hideEntities().clear();
    model.view("view1").hideEntities().create("hide1");
    model.view("view1").hideEntities("hide1").geom(3);
    model.view("view1").hideEntities("hide1").add(new int[]{1});
    model.view("view1").hideEntities("hide1").add(new int[]{6});

    model.result("pg6").run();

    model.sol("sol1").runAll();

    model.result("pg6").run();

    model.view("view1").hideObjects().clear();
    model.view("view1").hideObjects().clear();
    model.view("view1").hideObjects().clear();
    model.view("view1").hideObjects().clear();
    model.view("view1").hideObjects().clear();
    model.view("view1").hideObjects().clear();
    model.view("view1").hideObjects().clear();
    model.view("view1").hideObjects().clear();
    model.view("view1").hideObjects().clear();
    model.view("view1").hideObjects().clear();
    model.view("view1").hideObjects().clear();
    model.view("view1").hideObjects().clear();
    model.view("view1").hideObjects().clear();
    model.view("view1").hideObjects().clear();
    model.view("view1").set("drawhidestatus", "hide");
    model.view("view1").hideObjects().clear();
    model.view("view1").hideObjects().clear();
    model.view("view1").hideObjects().clear();
    model.view("view1").hideObjects().clear();
    model.view("view1").hideObjects().clear();
    model.view("view1").hideObjects().clear();
    model.view("view1").hideObjects().clear();
    model.view("view1").hideObjects().clear();
    model.view("view1").hideObjects().clear();
    model.view("view1").hideObjects().clear();
    model.view("view1").hideObjects().clear();
    model.view("view1").hideObjects().clear();
    model.view("view1").hideObjects().clear();
    model.view("view1").hideEntities().clear();

    model.result("pg7").run();
    model.result("pg6").run();
    model.result().export("data1")
         .set("filename", "R:\\COMSOL files\\Magnetoelectrostatic Cloverleaf\\PureRods.txt");
    model.result().export("data1").run();
    model.result().export("data1").run();

    model.view("view1").hideEntities().create("hide1");
    model.view("view1").hideEntities("hide1").geom(3);
    model.view("view1").hideEntities("hide1").add(new int[]{1});
    model.view("view1").hideEntities("hide1").add(new int[]{6});
    model.view("view1").hideEntities().create("hide2");
    model.view("view1").hideEntities("hide2").geom(2);
    model.view("view1").hideEntities("hide2").add(new int[]{73});
    model.view("view1").hideObjects().clear();
    model.view("view1").hideEntities().clear();
    model.view("view1").hideEntities().create("hide1");
    model.view("view1").hideEntities("hide1").geom(2);
    model.view("view1").hideEntities("hide1").add(new int[]{41});
    model.view("view1").hideObjects().clear();
    model.view("view1").hideEntities().clear();
    model.view("view1").hideEntities().create("hide1");
    model.view("view1").hideEntities("hide1").geom(3);
    model.view("view1").hideEntities("hide1").add(new int[]{1});
    model.view("view1").hideEntities("hide1").add(new int[]{6});
    model.view("view1").hideEntities("hide1").add(new int[]{14});
    model.view("view1").hideEntities("hide1").add(new int[]{5});
    model.view("view1").hideEntities().create("hide2");
    model.view("view1").hideEntities("hide2").geom(2);
    model.view("view1").hideEntities("hide2").add(new int[]{10});
    model.view("view1").hideEntities("hide2").add(new int[]{11});
    model.view("view1").hideEntities("hide2").add(new int[]{12});
    model.view("view1").hideEntities("hide2").add(new int[]{13});
    model.view("view1").hideEntities("hide2").add(new int[]{14});
    model.view("view1").hideEntities("hide2").add(new int[]{30});
    model.view("view1").hideEntities("hide2").add(new int[]{31});

    return model;
  }

  public static Model run17(Model model) {
    model.view("view1").hideEntities("hide2").add(new int[]{32});
    model.view("view1").hideEntities("hide2").add(new int[]{39});
    model.view("view1").hideEntities("hide2").add(new int[]{40});
    model.view("view1").hideEntities("hide2").add(new int[]{52});
    model.view("view1").hideEntities("hide2").add(new int[]{53});
    model.view("view1").hideEntities("hide2").add(new int[]{54});
    model.view("view1").hideEntities("hide2").add(new int[]{55});
    model.view("view1").hideEntities("hide2").add(new int[]{56});
    model.view("view1").hideEntities("hide2").add(new int[]{58});
    model.view("view1").hideEntities("hide2").add(new int[]{59});
    model.view("view1").hideEntities("hide2").add(new int[]{60});
    model.view("view1").hideEntities("hide2").add(new int[]{61});
    model.view("view1").hideEntities("hide2").add(new int[]{73});
    model.view("view1").hideEntities("hide2").add(new int[]{74});
    model.view("view1").hideEntities("hide2").add(new int[]{80});
    model.view("view1").hideObjects().clear();
    model.view("view1").hideEntities().clear();
    model.view("view1").hideEntities().create("hide1");
    model.view("view1").hideEntities("hide1").geom(3);
    model.view("view1").hideEntities("hide1").add(new int[]{1});
    model.view("view1").hideEntities("hide1").add(new int[]{14});
    model.view("view1").hideEntities("hide1").add(new int[]{5});
    model.view("view1").hideEntities("hide1").add(new int[]{6});

    model.physics("es").feature("pot3").selection()
         .set(new int[]{10, 11, 12, 13, 14, 30, 31, 32, 39, 40, 52, 53, 54, 55, 56, 58, 59, 60, 61, 73, 74, 80});
    model.physics("es").feature("pot6").selection()
         .set(new int[]{5, 6, 7, 8, 9, 27, 28, 29, 37, 38, 42, 43, 44, 46, 47, 48, 49, 50, 51, 71, 72, 79});

    model.view("view1").hideEntities("hide1").add(new int[]{12});
    model.view("view1").hideEntities("hide1").add(new int[]{11});
    model.view("view1").hideEntities("hide1").add(new int[]{3});
    model.view("view1").hideEntities("hide1").add(new int[]{8});
    model.view("view1").hideEntities("hide1").add(new int[]{13});
    model.view("view1").hideEntities("hide1").add(new int[]{4});
    model.view("view1").hideObjects().clear();
    model.view("view1").hideEntities().clear();
    model.view("view1").hideEntities().create("hide1");
    model.view("view1").hideEntities("hide1").geom(2);
    model.view("view1").hideEntities("hide1").add(new int[]{3});
    model.view("view1").hideEntities("hide1").add(new int[]{62});
    model.view("view1").hideEntities("hide1").add(new int[]{41});
    model.view("view1").hideEntities().create("hide2");
    model.view("view1").hideEntities("hide2").geom(3);
    model.view("view1").hideEntities("hide2").add(new int[]{1});
    model.view("view1").hideEntities("hide2").add(new int[]{6});

    model.sol("sol1").runAll();

    model.result("pg6").run();
    model.result().export("data1").run();
    model.result().export("data1").run();

    model.view("view1").hideObjects().clear();
    model.view("view1").hideObjects().clear();
    model.view("view1").hideObjects().clear();
    model.view("view1").hideObjects().clear();
    model.view("view1").hideObjects().clear();
    model.view("view1").hideObjects().clear();
    model.view("view1").hideEntities().clear();
    model.view("view1").hideEntities().create("hide1");
    model.view("view1").hideEntities("hide1").geom(3);
    model.view("view1").hideEntities("hide1").add(new int[]{1});
    model.view("view1").hideEntities("hide1").add(new int[]{6});

    model.result("pg6").run();
    model.result("pg6").run();
    model.result("pg6").run();
    model.result("pg6").feature("lngr5").active(true);
    model.result("pg6").feature("lngr2").active(true);
    model.result("pg6").feature("lngr3").active(true);
    model.result("pg6").feature("lngr4").active(true);
    model.result("pg6").feature("lngr1").active(true);
    model.result("pg6").feature("lngr6").active(true);
    model.result("pg6").run();

    model.label("me_rodlike_sphere.mph");

    model.result("pg6").run();

    model.view("view1").hideObjects().create("hide1");
    model.view("view1").hideObjects("hide1").init(3);
    model.view("view1").hideObjects("hide1").add("fin", new int[]{1});
    model.view("view1").hideObjects("hide1").add("fin", new int[]{6});

    model.physics("mfnc").feature("mfc2")
         .set("Br", new String[]{"M*sin(mang)*cos(tw)", "M*cos(mang)*cos(tw)", "M*sin(tw)"});
    model.physics("mfnc").feature("mfc4")
         .set("Br", new String[]{"M*sin(mang)*cos(tw)", "-M*cos(mang)*cos(tw)", "-M*sin(tw)"});

    model.result("pg7").run();
    model.result("pg3").run();

    model.view("view1").hideObjects().clear();
    model.view("view1").hideEntities().clear();

    model.result("pg3").run();
    model.result("pg3").run();
    model.result().create("pg8", "PlotGroup2D");
    model.result("pg8").run();
    model.result("pg8").create("surf1", "Surface");
    model.result("pg8").feature("surf1").set("expr", "mfnc.Bz");
    model.result("pg8").run();
    model.result("pg8").set("allowtableupdate", false);
    model.result("pg8").set("title", "Surface: Magnetic flux density, z component (T)");
    model.result("pg8").set("xlabel", "");
    model.result("pg8").set("ylabel", "");
    model.result("pg8").set("hasbeenplotted", true);
    model.result("pg8").feature("surf1").set("rangeunit", "T");
    model.result("pg8").feature("surf1").set("rangecolormin", -0.09120377346108104);
    model.result("pg8").feature("surf1").set("rangecolormax", 0.14973793184069722);
    model.result("pg8").feature("surf1").set("rangecoloractive", "off");
    model.result("pg8").feature("surf1").set("rangedatamin", -0.09120377346108104);
    model.result("pg8").feature("surf1").set("rangedatamax", 0.14973793184069722);
    model.result("pg8").feature("surf1").set("rangedataactive", "off");
    model.result("pg8").feature("surf1")
         .set("rangeactualminmax", new double[]{-0.09120377346108104, 0.14973793184069722});
    model.result("pg8").feature("surf1").set("hasbeenplotted", true);
    model.result("pg8").set("renderdatacached", false);
    model.result("pg8").set("allowtableupdate", true);
    model.result("pg8").set("renderdatacached", true);
    model.result().table("evl2")
         .addRow(new double[]{-0.0023459196090698242, -0.03753340244293213, -5.053994508209403E-4});

    model.param().set("tw", "5*pi/180");

    model.sol("sol1").runAll();

    model.result("pg6").run();
    model.result("pg8").run();
    model.result("pg8").run();
    model.result("pg8").set("allowtableupdate", false);
    model.result("pg8").set("title", "Surface: Magnetic flux density, z component (T)");
    model.result("pg8").set("xlabel", "");
    model.result("pg8").set("ylabel", "");
    model.result("pg8").set("hasbeenplotted", true);
    model.result("pg8").feature("surf1").set("rangeunit", "T");
    model.result("pg8").feature("surf1").set("rangecolormin", -0.141228789757269);
    model.result("pg8").feature("surf1").set("rangecolormax", 0.14969059731092801);
    model.result("pg8").feature("surf1").set("rangecoloractive", "off");
    model.result("pg8").feature("surf1").set("rangedatamin", -0.141228789757269);
    model.result("pg8").feature("surf1").set("rangedatamax", 0.14969059731092801);
    model.result("pg8").feature("surf1").set("rangedataactive", "off");
    model.result("pg8").feature("surf1")
         .set("rangeactualminmax", new double[]{-0.141228789757269, 0.14969059731092801});
    model.result("pg8").feature("surf1").set("hasbeenplotted", true);
    model.result("pg8").set("renderdatacached", false);
    model.result("pg8").set("allowtableupdate", true);
    model.result("pg8").set("renderdatacached", true);
    model.result().table("evl2")
         .addRow(new double[]{-0.07766389846801758, 0.03765523433685303, -8.367712005744312E-4});
    model.result().table("evl2")
         .addRow(new double[]{-0.021181106567382812, -0.042362093925476074, -6.740066184840809E-4});
    model.result().table("evl2")
         .addRow(new double[]{-0.007060408592224121, -0.20710372924804688, -1.2141001022845959E-4});
    model.result().table("evl2")
         .addRow(new double[]{0.030594944953918457, -0.16003477573394775, -9.325755214212323E-4});
    model.result().table("evl2")
         .addRow(new double[]{0.035301804542541504, 0.056482791900634766, -6.268257024827463E-4});
    model.result().table("evl2")
         .addRow(new double[]{0.05412948131561279, 0.4565696716308594, 1.0487654166618055E-4});
    model.result().table("evl2")
         .addRow(new double[]{0.0023534297943115234, 0.4330350160598755, -2.254433197227398E-4});
    model.result().table("evl2")
         .addRow(new double[]{-0.035301804542541504, 0.5224661827087402, 4.282904690827363E-6});
    model.result().table("evl2")
         .addRow(new double[]{0.04471564292907715, 0.5883626937866211, -1.958839361979104E-4});
    model.result().table("evl2")
         .addRow(new double[]{-0.030594944953918457, 0.23534512519836426, 0.0014504871936132447});
    model.result().table("evl2")
         .addRow(new double[]{-0.021181106567382812, -0.2447589635848999, 7.820175481511803E-4});

    model.physics("mfnc").feature("mfc2")
         .set("Br", new String[]{"M*sin(mang)*cos(tw)", "M*cos(mang)*cos(tw)", "M*sin(tw)"});

    model.result("pg8").run();

    model.param().set("tw2", "0");

    model.physics("mfnc").feature("mfc2")
         .set("Br", new String[]{"M*sin(mang)*cos(tw2)", "M*cos(mang)*cos(tw2)", "M*sin(tw2)"});

    model.sol("sol1").runAll();

    model.result("pg6").run();
    model.result("pg8").run();
    model.result("pg8").run();
    model.result("pg8").run();
    model.result("pg8").set("allowtableupdate", false);
    model.result("pg8").set("title", "Surface: Magnetic flux density, z component (T)");
    model.result("pg8").set("xlabel", "");
    model.result("pg8").set("ylabel", "");
    model.result("pg8").set("hasbeenplotted", true);
    model.result("pg8").feature("surf1").set("rangeunit", "T");
    model.result("pg8").feature("surf1").set("rangecolormin", -0.11218958503257358);
    model.result("pg8").feature("surf1").set("rangecolormax", 0.15318114868565735);
    model.result("pg8").feature("surf1").set("rangecoloractive", "off");
    model.result("pg8").feature("surf1").set("rangedatamin", -0.11218958503257358);
    model.result("pg8").feature("surf1").set("rangedatamax", 0.15318114868565735);
    model.result("pg8").feature("surf1").set("rangedataactive", "off");
    model.result("pg8").feature("surf1")
         .set("rangeactualminmax", new double[]{-0.11218958503257358, 0.15318114868565735});
    model.result("pg8").feature("surf1").set("hasbeenplotted", true);
    model.result("pg8").set("renderdatacached", false);
    model.result("pg8").set("allowtableupdate", true);
    model.result("pg8").set("renderdatacached", true);
    model.result().table("evl2")
         .addRow(new double[]{0.030594944953918457, -0.254172682762146, 0.010034926653885367});
    model.result().table("evl2")
         .addRow(new double[]{-0.0023535490036010742, -0.49422478675842285, 0.009024555045102056});
    model.result().table("evl2")
         .addRow(new double[]{0.0023534297943115234, -0.6589664220809937, 0.008510730993854486});
    model.result().table("evl2").addRow(new double[]{0.0400087833404541, -0.7813458442687988, 0.007499514258359559});
    model.result().table("evl2")
         .addRow(new double[]{0.0023534297943115234, -1.0684670209884644, 0.003654627752882166});
    model.result().table("evl2")
         .addRow(new double[]{0.0023534297943115234, -1.1767257452011108, 0.00544017232308476});
    model.result().table("evl2")
         .addRow(new double[]{-0.0023535490036010742, -1.374415636062622, 0.0038760767795513575});
    model.result().table("evl2")
         .addRow(new double[]{-0.0023535490036010742, -1.374415636062622, 0.0038760767795513575});
    model.result().table("evl2")
         .addRow(new double[]{-0.0023535490036010742, -1.374415636062622, 0.0038760767795513575});
    model.result().table("evl2")
         .addRow(new double[]{-0.011767268180847168, -1.1202428340911865, 0.00417761652964755});
    model.result().table("evl2")
         .addRow(new double[]{-0.0023535490036010742, -0.8331218361854553, 0.008370331630005355});
    model.result().table("evl2")
         .addRow(new double[]{-0.049422502517700195, -0.45186275243759155, 0.009006226048560108});
    model.result().table("evl2")
         .addRow(new double[]{-0.016474246978759766, 0.11296570301055908, 0.009140214930010156});
    model.result().table("evl2")
         .addRow(new double[]{0.016474127769470215, 0.4330350160598755, 0.008781562998440344});
    model.result().table("evl2").addRow(new double[]{0.030594944953918457, 0.8001735210418701, 0.00697936924503026});
    model.result().table("evl2")
         .addRow(new double[]{0.035301804542541504, 0.9555013179779053, 0.005547032159875901});
    model.result().table("evl2").addRow(new double[]{0.0400087833404541, 1.1673119068145752, 0.005572979522336611});
    model.result().table("evl2").addRow(new double[]{0.02118098735809326, 1.3555879592895508, 0.002580505666237581});
    model.result().table("evl2")
         .addRow(new double[]{0.00706028938293457, 1.4120709896087646, 0.0013340811252501195});
    model.result().table("evl2").addRow(new double[]{0.011767148971557617, 1.3508810997009277, 0.00273655025237236});
    model.result().table("evl2").addRow(new double[]{0.011767148971557617, 1.3508810997009277, 0.00273655025237236});
    model.result().table("evl2")
         .addRow(new double[]{0.04471564292907715, 1.1108291149139404, 0.0057174710215637525});
    model.result().table("evl2")
         .addRow(new double[]{-0.021181106567382812, 1.0449326038360596, 0.006474953455789112});
    model.result().table("evl2")
         .addRow(new double[]{0.011767148971557617, 0.8566563129425049, 0.005334204829618517});
    model.result().table("evl2").addRow(new double[]{0.011767148971557617, 0.8472423553466797, 0.00563940293115364});
    model.result().table("evl2").addRow(new double[]{0.011767148971557617, 0.6966214179992676, 0.00842749490603659});
    model.result().table("evl2")
         .addRow(new double[]{0.0023534297943115234, 0.3718453645706177, 0.008982935839383541});
    model.result().table("evl2")
         .addRow(new double[]{0.030594944953918457, 0.2259312868118286, 0.010812620099746071});
    model.result().table("evl2")
         .addRow(new double[]{-0.011767268180847168, 0.2259312868118286, 0.010490908008567177});
    model.result().table("evl2")
         .addRow(new double[]{-0.016474246978759766, 0.2259312868118286, 0.010468361617292945});
    model.result().table("evl2")
         .addRow(new double[]{-0.011767268180847168, 0.2259312868118286, 0.010490908008567177});
    model.result().table("evl2")
         .addRow(new double[]{-0.011767268180847168, 0.2259312868118286, 0.010490908008567177});
    model.result().table("evl2")
         .addRow(new double[]{-0.0023535490036010742, 0.13179326057434082, 0.009416105143900927});
    model.result().table("evl2")
         .addRow(new double[]{-0.0023535490036010742, 0.13179326057434082, 0.009416105143900927});
    model.result().table("evl2").addRow(new double[]{0.016474127769470215, 0.2400519847869873, 0.01054319515656972});
    model.result().table("evl2")
         .addRow(new double[]{0.0023534297943115234, 0.3483107089996338, 0.009424500046544333});
    model.result().table("evl2")
         .addRow(new double[]{0.0023534297943115234, 0.3483107089996338, 0.009424500046544333});
    model.result().table("evl2").addRow(new double[]{0.02588808536529541, 0.5836560726165771, 0.008088402210610917});
    model.result().table("evl2").addRow(new double[]{0.16238808631896973, 0.4895179271697998, 0.009577623917594695});
    model.result().table("evl2")
         .addRow(new double[]{0.035301804542541504, 0.5083454847335815, 0.007814239327014937});
    model.result().table("evl2")
         .addRow(new double[]{-0.0023535490036010742, 0.4989316463470459, 0.008009147930495921});
    model.result().table("evl2")
         .addRow(new double[]{0.09649157524108887, 0.05177593231201172, 0.010133586611940824});
    model.result().table("evl2")
         .addRow(new double[]{0.15768122673034668, -0.1788623332977295, 0.010998980714776521});
    model.result().table("evl2")
         .addRow(new double[]{0.11061215400695801, -0.32006943225860596, 0.010150135587089184});
    model.result().table("evl2").addRow(new double[]{0.11531925201416016, -0.395379900932312, 0.010050325594744816});
    model.result().table("evl2")
         .addRow(new double[]{0.07766389846801758, -0.41420745849609375, 0.010064571609775556});
    model.result().table("evl2")
         .addRow(new double[]{0.02588808536529541, -0.4330350160598755, 0.009625899776387071});
    model.result().table("evl2")
         .addRow(new double[]{0.0023534297943115234, -0.44244885444641113, 0.009326144335075455});
    model.result().table("evl2")
         .addRow(new double[]{0.0023534297943115234, -0.44715583324432373, 0.009304858381473866});
    model.result().table("evl2")
         .addRow(new double[]{0.016474127769470215, -0.9790358543395996, 0.004167391827649625});
    model.result().table("evl2")
         .addRow(new double[]{0.0023534297943115234, -0.9790358543395996, 0.004052145616968829});
    model.result().table("evl2")
         .addRow(new double[]{0.035301804542541504, -1.0402255058288574, 0.00452194164500529});
    model.result().table("evl2")
         .addRow(new double[]{-0.049422502517700195, -0.4753972291946411, 0.008889905234725604});
    model.result().table("evl2")
         .addRow(new double[]{-0.2753537893295288, -0.4047936201095581, 0.008419995136867489});
    model.result().table("evl2")
         .addRow(new double[]{-0.05412948131561279, 0.25887954235076904, 0.010076813463325625});
    model.result().table("evl2")
         .addRow(new double[]{0.37419891357421875, 0.12708640098571777, 0.015351668475158214});
    model.result().table("evl2")
         .addRow(new double[]{0.5106990337371826, -0.20239675045013428, 0.017823564489688845});
    model.result().table("evl2")
         .addRow(new double[]{-0.13414669036865234, -0.291827917098999, 0.009959369171624627});
    model.result().table("evl2")
         .addRow(new double[]{0.1388535499572754, -0.009413838386535645, 0.011057297219401876});
    model.result().table("evl2")
         .addRow(new double[]{0.42597484588623047, 0.08943116664886475, 0.014408510177694444});
    model.result().table("evl2").addRow(new double[]{0.22357797622680664, 0.4612765312194824, 0.010437526824806524});
    model.result().table("evl2")
         .addRow(new double[]{-0.2235778570175171, 0.3765522241592407, 0.0066655215651995475});
    model.result().table("evl2")
         .addRow(new double[]{-0.049422502517700195, 0.7531044483184814, 0.007133738018629681});
    model.result().table("evl2")
         .addRow(new double[]{0.035301804542541504, 1.0261046886444092, 0.006048997815035072});
    model.result().table("evl2").addRow(new double[]{2.0686841011047363, -0.2447589635848999, -0.08074978877843497});

    model.param().set("tw", "1*pi/180");

    model.sol("sol1").runAll();

    model.result("pg6").run();
    model.result("pg8").run();
    model.result("pg8").run();
    model.result("pg8").run();
    model.result("pg8").set("allowtableupdate", false);
    model.result("pg8").set("title", "Surface: Magnetic flux density, z component (T)");
    model.result("pg8").set("xlabel", "");
    model.result("pg8").set("ylabel", "");
    model.result("pg8").set("hasbeenplotted", true);
    model.result("pg8").feature("surf1").set("rangeunit", "T");
    model.result("pg8").feature("surf1").set("rangecolormin", -0.08857823976173013);
    model.result("pg8").feature("surf1").set("rangecolormax", 0.15041335636096947);
    model.result("pg8").feature("surf1").set("rangecoloractive", "off");
    model.result("pg8").feature("surf1").set("rangedatamin", -0.08857823976173013);
    model.result("pg8").feature("surf1").set("rangedatamax", 0.15041335636096947);
    model.result("pg8").feature("surf1").set("rangedataactive", "off");
    model.result("pg8").feature("surf1")
         .set("rangeactualminmax", new double[]{-0.08857823976173013, 0.15041335636096947});
    model.result("pg8").feature("surf1").set("hasbeenplotted", true);
    model.result("pg8").set("renderdatacached", false);
    model.result("pg8").set("allowtableupdate", true);
    model.result("pg8").set("renderdatacached", true);
    model.result().table("evl2")
         .addRow(new double[]{-0.09649157524108887, -0.5083455443382263, 0.001956390884550776});
    model.result().table("evl2")
         .addRow(new double[]{0.02588808536529541, 0.03294837474822998, 0.001376966947641453});
    model.result().table("evl2").addRow(new double[]{0.02588808536529541, 0.2777073383331299, 0.002489181678988313});
    model.result().table("evl2")
         .addRow(new double[]{0.16238808631896973, 0.4518625736236572, 0.0022020488407628186});
    model.result().table("evl2")
         .addRow(new double[]{0.14356064796447754, 0.07060360908508301, 0.0021511270929120167});
    model.result().table("evl2")
         .addRow(new double[]{0.10590529441833496, -0.13179326057434082, 0.0018588716244104994});
    model.result().table("evl2")
         .addRow(new double[]{0.02118098735809326, -0.16474151611328125, 8.691859425876311E-4});
    model.result().table("evl2").addRow(new double[]{0.2282848358154297, -0.254172682762146, 0.0025447238570064285});
    model.result().table("evl2")
         .addRow(new double[]{0.17180204391479492, -0.324776291847229, 0.0020810599236440763});
    model.result().table("evl2")
         .addRow(new double[]{0.05412948131561279, -0.32006943225860596, 0.0018085835138630644});

    model.param().set("tw", "0*pi/180");

    model.geom("geom1").run("del1");
    model.geom("geom1").create("blk7", "Block");
    model.geom("geom1").feature("blk7").label("Domain Gap");
    model.geom("geom1").feature("blk7").set("size", new String[]{".5", "10", "5"});
    model.geom("geom1").run("blk7");
    model.geom("geom1").feature("blk7").set("base", "center");
    model.geom("geom1").run("blk7");

    model.view("view1").hideObjects().create("hide1");
    model.view("view1").hideObjects("hide1").init(3);
    model.view("view1").hideObjects("hide1").add("cyl4", new int[]{1});
    model.view("view1").hideObjects("hide1").add("cyl3", new int[]{1});

    model.geom("geom1").run("fin");

    model.physics("mfnc").feature("mfc2").selection().set(new int[]{22, 23});
    model.physics("mfnc").feature("mfc3").selection().set(new int[]{2, 7});
    model.physics("mfnc").feature("mfc4").selection().set(new int[]{3, 8});
    model.physics("mfnc").feature("mfc5").selection().set(new int[]{20, 21});

    model.view("view1").hideObjects().clear();
    model.view("view1").hideEntities().clear();
    model.view("view1").hideEntities().create("hide1");
    model.view("view1").hideEntities("hide1").geom(3);
    model.view("view1").hideEntities("hide1").add(new int[]{1});
    model.view("view1").hideEntities("hide1").add(new int[]{6});
    model.view("view1").hideEntities("hide1").add(new int[]{11});
    model.view("view1").hideEntities("hide1").add(new int[]{14});
    model.view("view1").hideEntities("hide1").add(new int[]{9});

    model.geom("geom1").feature("blk7").set("size", new String[]{"dg", "10", "5"});

    model.param().set("dg", ".5");
    model.param().descr("dg", "gap between magnet domains");
    model.param().descr("tw", "tweak magnetization direction");
    model.param().descr("tw2", "second tweak");
    model.param().descr("mang", "magnetization cloverleaf angle");
    model.param().remove("md");
    model.param().remove("mhc");
    model.param().remove("mir");
    model.param().descr("gwc", "magnet rod spacing");
    model.param().descr("gwo", "magnet rod outer spacing at end of curve");
    model.param().descr("rd", "rod diameter");
    model.param().descr("rs", "rod spacing");
    model.param().descr("rg", "rod inter-stage  gap");
    model.param().descr("rl", "rod length");
    model.param().descr("vr1", "voltage");
    model.param().descr("vr1", "voltage rod 1");
    model.param().descr("vr2", "voltage rod 1");
    model.param().descr("vr3", "voltage rod 1");
    model.param().descr("vr4", "voltage rod 1");
    model.param().descr("vr3", "voltage rod 3");
    model.param().descr("vr4", "voltage rod 4");
    model.param().descr("vr2", "voltage rod 2");
    model.param().descr("vm1", "voltage magnet 1");
    model.param().descr("vm2", "voltage magnet 2");
    model.param().descr("M", "magnetization");

    model.view("view1").hideObjects().create("hide1");
    model.view("view1").hideObjects("hide1").init(3);
    model.view("view1").hideObjects("hide1").add("fin", new int[]{1});

    model.param().set("rd", "3.175");
    model.param().set("rg", "5.461 - 3.175");

    model.geom("geom1").feature("wp1").geom().feature("r1").set("size", new String[]{"gwo*6", "rd"});
    model.geom("geom1").feature("wp1").geom().feature("e1").setIndex("semiaxes", "rd/2", 0);
    model.geom("geom1").feature("wp1").geom().feature("e2").setIndex("semiaxes", "rd/2", 0);
    model.geom("geom1").feature("wp1").geom().run("dif1");
    model.geom("geom1").feature().remove("blk6");
    model.geom("geom1").feature().remove("wp1");
    model.geom("geom1").feature().remove("ext1");
    model.geom("geom1").feature().remove("dif1");
    model.geom("geom1").feature().remove("blk5");
    model.geom("geom1").feature().remove("int1");
    model.geom("geom1").feature().remove("del1");
    model.geom("geom1").run("blk7");
    model.geom("geom1").create("cyl7", "Cylinder");
    model.geom("geom1").run("cyl7");
    model.geom("geom1").create("cyl8", "Cylinder");
    model.geom("geom1").feature("cyl7").label("Magnet Rod");
    model.geom("geom1").feature("cyl8").label("Magnet Rod 2");
    model.geom("geom1").feature("cyl7").set("r", "rd");
    model.geom("geom1").feature("cyl7").set("h", "rl");
    model.geom("geom1").feature("cyl7").set("pos", new String[]{"0", "-(rg+rd)/2", "0"});
    model.geom("geom1").feature("cyl8").set("pos", new String[]{"0", "(rg+rd)/2", "0"});
    model.geom("geom1").feature("cyl8").set("r", "rd");
    model.geom("geom1").feature("cyl8").set("h", "rl");
    model.geom("geom1").runPre("fin");
    model.geom("geom1").feature("cyl7").set("r", "rd/2");
    model.geom("geom1").feature("cyl8").set("r", "rd/2");
    model.geom("geom1").feature("cyl8").set("axistype", "x");
    model.geom("geom1").feature("cyl7").set("axistype", "x");
    model.geom("geom1").runPre("fin");
    model.geom("geom1").feature("cyl7").setIndex("pos", "-rl/2", 0);
    model.geom("geom1").runPre("fin");
    model.geom("geom1").feature("cyl8").set("pos", new String[]{"-rl/2", "(rg+rd)/2", "0"});
    model.geom("geom1").runPre("fin");
    model.geom("geom1").run();

    model.view("view1").hideObjects().clear();
    model.view("view1").hideEntities().clear();
    model.view("view1").hideEntities().create("hide1");
    model.view("view1").hideEntities("hide1").geom(3);
    model.view("view1").hideEntities("hide1").add(new int[]{1});
    model.view("view1").hideEntities("hide1").add(new int[]{7});
    model.view("view1").hideEntities("hide1").add(new int[]{13});
    model.view("view1").hideEntities("hide1").add(new int[]{16});
    model.view("view1").hideEntities("hide1").add(new int[]{11});
    model.view("view1").hideEntities("hide1").add(new int[]{3});
    model.view("view1").hideObjects().clear();
    model.view("view1").hideEntities().clear();
    model.view("view1").hideEntities().create("hide1");
    model.view("view1").hideEntities("hide1").geom(3);
    model.view("view1").hideEntities("hide1").add(new int[]{1});
    model.view("view1").hideEntities("hide1").add(new int[]{7});
    model.view("view1").hideEntities("hide1").add(new int[]{16});
    model.view("view1").hideEntities("hide1").add(new int[]{13});
    model.view("view1").hideEntities("hide1").add(new int[]{11});

    model.physics("mfnc").feature("mfc2").selection().set(new int[]{3, 10});
    model.physics("mfnc").feature("mfc5").selection().set(new int[]{2, 9});
    model.physics("mfnc").feature("mfc2").selection().set(new int[]{});
    model.physics("mfnc").feature("mfc5").selection().set(new int[]{});
    model.physics("mfnc").feature("mfc2").selection().set(new int[]{2, 9});
    model.physics("mfnc").feature("mfc3").selection().set(new int[]{20, 21});
    model.physics("mfnc").feature("mfc4").selection().set(new int[]{18, 19});
    model.physics("mfnc").feature("mfc5").selection().set(new int[]{3, 10});

    model.view("view1").hideEntities("hide1").add(new int[]{4});
    model.view("view1").hideEntities("hide1").add(new int[]{22});
    model.view("view1").hideEntities("hide1").add(new int[]{6});
    model.view("view1").hideEntities("hide1").add(new int[]{24});

    model.geom("geom1").feature("cyl3").set("r", "rg+rd");
    model.geom("geom1").feature("cyl3").set("h", "rd+2*rg");
    model.geom("geom1").feature("cyl3").set("r", "rs+rd");
    model.geom("geom1").runPre("fin");

    model.view("view1").hideObjects().create("hide1");
    model.view("view1").hideObjects("hide1").init(3);
    model.view("view1").hideObjects("hide1").add("cyl4", new int[]{1});

    model.geom("geom1").feature("cyl1").setIndex("pos", "rd+rg", 2);
    model.geom("geom1").feature("cyl2").setIndex("pos", "rd+rg", 2);
    model.geom("geom1").feature("cyl5").setIndex("pos", "-rd-rg", 2);
    model.geom("geom1").feature("cyl6").setIndex("pos", "-rd-rg", 2);
    model.geom("geom1").feature("cyl3").set("r", "(rs+rd)/2");
    model.geom("geom1").feature("cyl3").set("pos", new String[]{"0", "0", "-rd/2-rg"});
    model.geom("geom1").runPre("fin");
    model.geom("geom1").feature("cyl3").set("h", "rd+rg");
    model.geom("geom1").feature("cyl3").set("pos", new String[]{"0", "0", "-(rd+rg)/2"});
    model.geom("geom1").runPre("fin");
    model.geom("geom1").feature("blk7").set("size", new String[]{"dg", "rs+2*rd+1", "rd*1.1"});
    model.geom("geom1").runPre("fin");
    model.geom("geom1").run();

    model.view("view1").hideObjects().clear();
    model.view("view1").hideEntities().clear();
    model.view("view1").hideEntities().create("hide1");
    model.view("view1").hideEntities("hide1").geom(3);
    model.view("view1").hideEntities("hide1").add(new int[]{1});

    model.physics("es").feature("pot3").selection().set(new int[]{});

    model.view("view1").hideEntities("hide1").add(new int[]{6});
    model.view("view1").hideEntities("hide1").add(new int[]{14});
    model.view("view1").hideEntities("hide1").add(new int[]{11});
    model.view("view1").hideEntities("hide1").add(new int[]{9});

    model.physics("es").feature("pot3").selection()
         .set(new int[]{5, 6, 7, 8, 9, 31, 32, 33, 41, 42, 43, 44, 45, 49, 50, 51, 53, 73, 81, 82, 83, 84, 85, 87, 88, 89, 90, 113});
    model.physics("es").feature("pot6").selection()
         .set(new int[]{10, 11, 12, 13, 14, 34, 35, 36, 55, 56, 57, 61, 62, 63, 65, 67, 68, 77, 91, 92, 93, 95, 96, 97, 98, 99, 100, 114});

    model.param().remove("ID");
    model.param().remove("OD");
    model.param().remove("tc");

    model.view("view1").hideObjects().clear();
    model.view("view1").hideEntities().clear();

    model.sol("sol1").runAll();

    model.result("pg6").run();
    model.result("pg7").run();

    model.view("view1").hideEntities().create("hide1");
    model.view("view1").hideEntities("hide1").geom(3);
    model.view("view1").hideEntities("hide1").add(new int[]{1});
    model.view("view1").hideEntities("hide1").add(new int[]{6});
    model.view("view1").hideEntities("hide1").add(new int[]{11});
    model.view("view1").hideEntities("hide1").add(new int[]{17});
    model.view("view1").hideEntities("hide1").add(new int[]{12});
    model.view("view1").hideEntities("hide1").add(new int[]{13});
    model.view("view1").hideEntities("hide1").add(new int[]{7});
    model.view("view1").hideEntities("hide1").add(new int[]{8});
    model.view("view1").hideEntities("hide1").add(new int[]{18});

    model.mesh("mesh1").feature("ref1").selection().set(new int[]{});

    model.view("view1").hideObjects().clear();
    model.view("view1").hideEntities().clear();
    model.view("view1").hideEntities().create("hide1");
    model.view("view1").hideEntities("hide1").geom(3);

    return model;
  }

  public static Model run18(Model model) {
    model.view("view1").hideEntities("hide1").add(new int[]{1});
    model.view("view1").hideEntities("hide1").add(new int[]{21});
    model.view("view1").hideEntities("hide1").add(new int[]{5});
    model.view("view1").hideEntities("hide1").add(new int[]{19});
    model.view("view1").hideEntities("hide1").add(new int[]{15});
    model.view("view1").hideEntities("hide1").add(new int[]{14});
    model.view("view1").hideEntities("hide1").add(new int[]{3});
    model.view("view1").hideEntities("hide1").add(new int[]{16});
    model.view("view1").hideEntities("hide1").add(new int[]{9});
    model.view("view1").hideEntities("hide1").add(new int[]{10});
    model.view("view1").hideEntities("hide1").add(new int[]{2});
    model.view("view1").hideEntities("hide1").add(new int[]{4});
    model.view("view1").hideEntities("hide1").add(new int[]{20});

    model.mesh("mesh1").feature("ref1").selection().set(new int[]{6, 7, 8, 11, 12, 13, 17, 18});

    model.sol("sol1").runAll();

    model.result("pg6").run();
    model.result("pg7").run();
    model.result("pg7").set("showhiddenobjects", "on");
    model.result("pg7").run();

    model.view("view1").hideObjects().clear();
    model.view("view1").hideEntities().clear();
    model.view("view1").hideEntities().create("hide1");
    model.view("view1").hideEntities("hide1").geom(3);
    model.view("view1").hideEntities("hide1").add(new int[]{1});

    model.geom("geom1").feature().duplicate("cyl9", "cyl3");
    model.geom("geom1").feature().move("cyl9", 3);
    model.geom("geom1").feature("cyl9").label("Finer Mesh 2");
    model.geom("geom1").feature("cyl9").set("r", "rs/2");
    model.geom("geom1").feature("cyl9").set("h", "rd");
    model.geom("geom1").feature("cyl9").set("pos", new String[]{"0", "0", "-rd/2"});
    model.geom("geom1").runPre("fin");

    model.view("view1").hideObjects().create("hide1");
    model.view("view1").hideObjects("hide1").init(3);
    model.view("view1").hideObjects("hide1").add("cyl4", new int[]{1});
    model.view("view1").hideObjects("hide1").add("cyl5", new int[]{1});
    model.view("view1").hideObjects("hide1").add("cyl6", new int[]{1});
    model.view("view1").hideObjects("hide1").add("cyl1", new int[]{1});
    model.view("view1").hideObjects("hide1").add("cyl2", new int[]{1});
    model.view("view1").hideObjects("hide1").add("cyl3", new int[]{1});
    model.view("view1").hideObjects("hide1").add("blk7", new int[]{1});

    model.geom("geom1").feature("cyl7").set("pos", new String[]{"-rl/2", "-(rs+rd)/2", "0"});
    model.geom("geom1").feature("cyl8").set("pos", new String[]{"-rl/2", "(rs+rd)/2", "0"});
    model.geom("geom1").runPre("fin");
    model.geom("geom1").feature("cyl9").set("r", "rs/4");
    model.geom("geom1").runPre("fin");
    model.geom("geom1").run();

    model.view("view1").hideObjects().clear();
    model.view("view1").hideEntities().clear();
    model.view("view1").hideEntities().create("hide1");
    model.view("view1").hideEntities("hide1").geom(3);
    model.view("view1").hideEntities("hide1").add(new int[]{1});
    model.view("view1").hideEntities("hide1").add(new int[]{4});
    model.view("view1").hideEntities("hide1").add(new int[]{23});
    model.view("view1").hideEntities("hide1").add(new int[]{24});
    model.view("view1").hideEntities("hide1").add(new int[]{5});
    model.view("view1").hideEntities("hide1").add(new int[]{6});
    model.view("view1").hideEntities("hide1").add(new int[]{16});
    model.view("view1").hideEntities("hide1").add(new int[]{12});
    model.view("view1").hideEntities("hide1").add(new int[]{10});
    model.view("view1").hideEntities("hide1").add(new int[]{19});
    model.view("view1").set("geomhidestatus", "hide");
    model.view("view1").hideObjects().clear();
    model.view("view1").hideEntities().clear();
    model.view("view1").hideEntities().create("hide1");
    model.view("view1").hideEntities("hide1").geom(3);
    model.view("view1").hideEntities("hide1").add(new int[]{1});
    model.view("view1").hideEntities("hide1").add(new int[]{23});
    model.view("view1").hideEntities("hide1").add(new int[]{4});
    model.view("view1").hideEntities("hide1").add(new int[]{5});
    model.view("view1").hideEntities("hide1").add(new int[]{24});
    model.view("view1").hideEntities("hide1").add(new int[]{6});
    model.view("view1").hideEntities("hide1").add(new int[]{10});
    model.view("view1").hideEntities("hide1").add(new int[]{12});
    model.view("view1").hideEntities("hide1").add(new int[]{16});
    model.view("view1").hideEntities("hide1").add(new int[]{14});
    model.view("view1").hideEntities("hide1").add(new int[]{9});
    model.view("view1").hideEntities("hide1").add(new int[]{20});

    model.physics("mfnc").feature("mfc2").selection().set(new int[]{2, 7});
    model.physics("mfnc").feature("mfc4").selection().set(new int[]{18, 19});
    model.physics("mfnc").feature("mfc5").selection().set(new int[]{3, 8});
    model.physics("mfnc").feature("mfc3").selection().set(new int[]{21, 22});

    model.view("view1").hideObjects().create("hide1");
    model.view("view1").hideObjects("hide1").init(3);
    model.view("view1").hideObjects("hide1").add("cyl4", new int[]{1});
    model.view("view1").hideObjects("hide1").add("cyl6", new int[]{1});
    model.view("view1").hideObjects("hide1").add("cyl5", new int[]{1});
    model.view("view1").hideObjects("hide1").add("cyl2", new int[]{1});
    model.view("view1").hideObjects("hide1").add("cyl1", new int[]{1});
    model.view("view1").hideObjects("hide1").add("cyl8", new int[]{1});
    model.view("view1").hideObjects("hide1").add("cyl7", new int[]{1});
    model.view("view1").hideObjects("hide1").add("blk7", new int[]{1});
    model.view("view1").hideObjects().clear();
    model.view("view1").hideEntities().clear();
    model.view("view1").hideEntities().create("hide1");
    model.view("view1").hideEntities("hide1").geom(3);
    model.view("view1").hideEntities("hide1").add(new int[]{1});
    model.view("view1").hideEntities("hide1").add(new int[]{4});
    model.view("view1").hideEntities("hide1").add(new int[]{23});
    model.view("view1").hideEntities("hide1").add(new int[]{5});
    model.view("view1").hideEntities("hide1").add(new int[]{24});
    model.view("view1").hideEntities("hide1").add(new int[]{22});
    model.view("view1").hideEntities("hide1").add(new int[]{3});
    model.view("view1").hideEntities("hide1").add(new int[]{2});
    model.view("view1").hideEntities("hide1").add(new int[]{18});
    model.view("view1").hideEntities("hide1").add(new int[]{16});
    model.view("view1").hideEntities("hide1").add(new int[]{17});
    model.view("view1").hideEntities("hide1").add(new int[]{10});
    model.view("view1").hideEntities("hide1").add(new int[]{11});
    model.view("view1").hideEntities("hide1").add(new int[]{1});
    model.view("view1").hideEntities("hide1").add(new int[]{2});
    model.view("view1").hideEntities("hide1").add(new int[]{3});
    model.view("view1").hideEntities("hide1").add(new int[]{6});
    model.view("view1").hideEntities("hide1").add(new int[]{7});
    model.view("view1").hideEntities("hide1").add(new int[]{8});
    model.view("view1").hideEntities("hide1").add(new int[]{9});
    model.view("view1").hideEntities("hide1").add(new int[]{10});
    model.view("view1").hideEntities("hide1").add(new int[]{11});
    model.view("view1").hideEntities("hide1").add(new int[]{12});
    model.view("view1").hideEntities("hide1").add(new int[]{13});
    model.view("view1").hideEntities("hide1").add(new int[]{14});
    model.view("view1").hideEntities("hide1").add(new int[]{15});
    model.view("view1").hideEntities("hide1").add(new int[]{18});
    model.view("view1").hideEntities("hide1").add(new int[]{21});
    model.view("view1").hideObjects().clear();
    model.view("view1").hideEntities().clear();
    model.view("view1").hideEntities().create("hide1");
    model.view("view1").hideEntities("hide1").geom(3);
    model.view("view1").hideEntities("hide1").add(new int[]{1});
    model.view("view1").hideEntities("hide1").add(new int[]{4});
    model.view("view1").hideEntities("hide1").add(new int[]{23});
    model.view("view1").hideEntities("hide1").add(new int[]{24});
    model.view("view1").hideEntities("hide1").add(new int[]{5});
    model.view("view1").hideEntities("hide1").add(new int[]{2});
    model.view("view1").hideEntities("hide1").add(new int[]{3});
    model.view("view1").hideEntities("hide1").add(new int[]{18});
    model.view("view1").hideEntities("hide1").add(new int[]{22});
    model.view("view1").hideEntities("hide1").add(new int[]{10});
    model.view("view1").hideEntities("hide1").add(new int[]{11});
    model.view("view1").hideEntities("hide1").add(new int[]{16});
    model.view("view1").hideEntities("hide1").add(new int[]{17});

    model.mesh("mesh1").feature("ref1").selection().set(new int[]{6, 7, 8, 9, 12, 13, 14, 15, 19, 21});

    model.view("view1").hideEntities("hide1").add(new int[]{6});

    model.mesh("mesh1").feature("ref1").selection().set(new int[]{6, 7, 8, 9, 12, 13, 14, 15, 19, 20, 21});
    model.mesh("mesh1").create("ref2", "Refine");

    model.view("view1").hideEntities("hide1").add(new int[]{21});
    model.view("view1").hideEntities("hide1").add(new int[]{12});
    model.view("view1").hideEntities("hide1").add(new int[]{15});
    model.view("view1").hideEntities("hide1").add(new int[]{8});
    model.view("view1").hideEntities("hide1").add(new int[]{7});
    model.view("view1").hideEntities("hide1").add(new int[]{13});
    model.view("view1").hideEntities("hide1").add(new int[]{19});

    model.mesh("mesh1").feature("ref2").selection().geom("geom1", 3);

    model.view("view1").hideEntities("hide1").add(new int[]{9});
    model.view("view1").hideObjects().clear();
    model.view("view1").hideEntities().clear();
    model.view("view1").hideEntities().create("hide1");
    model.view("view1").hideEntities("hide1").geom(3);
    model.view("view1").hideEntities("hide1").add(new int[]{1});
    model.view("view1").hideEntities("hide1").add(new int[]{5});
    model.view("view1").hideEntities("hide1").add(new int[]{24});
    model.view("view1").hideEntities("hide1").add(new int[]{22});
    model.view("view1").hideEntities("hide1").add(new int[]{18});
    model.view("view1").hideEntities("hide1").add(new int[]{23});
    model.view("view1").hideEntities("hide1").add(new int[]{4});
    model.view("view1").hideEntities("hide1").add(new int[]{2});
    model.view("view1").hideEntities("hide1").add(new int[]{3});
    model.view("view1").hideEntities("hide1").add(new int[]{10});
    model.view("view1").hideEntities("hide1").add(new int[]{16});
    model.view("view1").hideEntities("hide1").add(new int[]{6});
    model.view("view1").hideEntities("hide1").add(new int[]{11});
    model.view("view1").hideEntities("hide1").add(new int[]{7});
    model.view("view1").hideEntities("hide1").add(new int[]{13});
    model.view("view1").hideEntities("hide1").add(new int[]{12});
    model.view("view1").hideEntities("hide1").add(new int[]{19});
    model.view("view1").hideEntities("hide1").add(new int[]{21});
    model.view("view1").hideEntities("hide1").add(new int[]{15});
    model.view("view1").hideEntities("hide1").add(new int[]{8});
    model.view("view1").hideEntities("hide1").add(new int[]{17});

    model.mesh("mesh1").feature("ref2").selection().set(new int[]{9, 14, 20});
    model.mesh("mesh1").feature("ref2").set("numrefine", "2");
    model.mesh("mesh1").run();

    model.view("view1").hideObjects().clear();
    model.view("view1").hideEntities().clear();

    model.sol("sol1").runAll();

    model.result("pg6").run();
    model.result("pg7").run();
    model.result("pg3").run();
    model.result("pg8").run();
    model.result("pg8").run();
    model.result("pg5").run();
    model.result("pg6").run();
    model.result().export("data1").set("gridx3", "range(-1,0.05,1)");
    model.result().export("data1").set("gridy3", "range(-1,0.05,1)");
    model.result().export("data1").set("gridz3", "range(-1,0.05,1)");
    model.result().export("data1")
         .set("filename", "R:\\COMSOL files\\Magnetoelectrostatic Cloverleaf\\PureRod2.txt");
    model.result().export("data1").run();
    model.result("pg6").run();
    model.result("pg6").feature("lngr4").active(false);
    model.result("pg6").run();
    model.result("pg6").run();
    model.result("pg6").set("title", "Trapping Fields along Axes");
    model.result("pg6").run();
    model.result("pg6").feature("lngr5").set("expr", "es.normE*.43");
    model.result("pg6").run();
    model.result("pg6").feature("lngr1").set("expr", "es.normE*.43");
    model.result("pg6").run();
    model.result("pg6").run();
    model.result("pg6").set("ylabel", "Field Norms (kG)");
    model.result("pg6").run();
    model.result("pg6").feature("lngr5").setIndex("legends", "E-field Z (scaled by uB/uE)", 0);
    model.result("pg6").run();
    model.result("pg6").feature("lngr1").setIndex("legends", "E-field X (", 0);
    model.result("pg6").run();
    model.result("pg6").feature("lngr5").setIndex("legends", "E-field Z", 0);
    model.result("pg6").run();
    model.result("pg6").feature("lngr1").setIndex("legends", "E-field X", 0);
    model.result("pg6").run();
    model.result("pg6").set("ylabel", "Field Norms (kG, E*uE/uB)");
    model.result("pg6").run();
    model.result("pg6").set("title", "Trapping Fields along Axes, 0.5mm Domain Gap");
    model.result("pg6").run();
    model.result("pg6").run();
    model.result("pg6").feature("lngr4").set("expr", "es.normE");
    model.result("pg6").feature("lngr4").set("data", "cln3");
    model.result("pg6").feature("lngr4").active(true);
    model.result("pg6").feature("lngr4").set("xdataexpr", "Yaxis");
    model.result("pg6").run();
    model.result("pg6").feature("lngr4").set("unit", "kV/cm");
    model.result("pg6").run();
    model.result("pg6").feature("lngr4").set("expr", "es.normE*.43");
    model.result("pg6").run();
    model.result("pg6").feature("lngr4").setIndex("legends", "E-field Y", 0);
    model.result("pg6").run();
    model.result("pg6").run();
    model.result("pg6").feature().move("lngr2", 0);
    model.result("pg6").run();
    model.result("pg6").feature().move("lngr3", 1);
    model.result("pg6").run();
    model.result("pg6").feature().move("lngr6", 2);
    model.result("pg6").run();
    model.result("pg6").run();
    model.result("pg6").run();
    model.result("pg6").feature().move("lngr1", 4);
    model.result("pg6").run();
    model.result("pg6").feature().move("lngr5", 5);
    model.result("pg6").run();
    model.result("pg6").run();
    model.result("pg6").run();
    model.result("pg6").set("title", "Trapping Fields along Axes, 0.5mm Domain Gap, 12.5kV Applied");
    model.result("pg6").run();
    model.result().export("data1").set("gridx3", "range(-1,0.02,1)");
    model.result().export("data1").set("gridy3", "range(-1,0.02,1)");
    model.result().export("data1").set("gridz3", "range(-1,0.02,1)");
    model.result().export("data1")
         .set("filename", "R:\\COMSOL files\\Magnetoelectrostatic Cloverleaf\\PureRod3.txt");
    model.result().export("data1").run();
    model.result().dataset().create("surf1", "Surface");
    model.result().dataset().remove("surf1");
    model.result().dataset().create("cpl5", "CutPlane");
    model.result().dataset("cpl5").label("Near Rod XZ PLane");
    model.result().dataset("cpl5").set("planetype", "general");
    model.result().dataset("cpl5").setIndex("genpoints", "1", 1, 1);
    model.result().dataset("cpl5").setIndex("genpoints", "1", 0, 1);
    model.result().dataset("cpl5").setIndex("genpoints", "1", 2, 2);
    model.result("pg8").run();
    model.result("pg8").run();
    model.result("pg8").feature("surf1").set("expr", "es.normE");
    model.result("pg8").feature("surf1").set("unit", "kV/cm");
    model.result("pg8").run();
    model.result("pg8").set("data", "cpl5");
    model.result("pg8").run();
    model.result("pg8").run();
    model.result("pg8").set("allowtableupdate", false);
    model.result("pg8").set("title", "Surface: Electric field norm (kV/cm)");
    model.result("pg8").set("xlabel", "");
    model.result("pg8").set("ylabel", "");
    model.result("pg8").set("hasbeenplotted", true);
    model.result("pg8").feature("surf1").set("rangeunit", "kV/cm");
    model.result("pg8").feature("surf1").set("rangecolormin", 2.2741515763174108E-12);
    model.result("pg8").feature("surf1").set("rangecolormax", 67.041171767548);
    model.result("pg8").feature("surf1").set("rangecoloractive", "off");
    model.result("pg8").feature("surf1").set("rangedatamin", 2.2741515763174108E-12);
    model.result("pg8").feature("surf1").set("rangedatamax", 67.041171767548);
    model.result("pg8").feature("surf1").set("rangedataactive", "off");
    model.result("pg8").feature("surf1")
         .set("rangeactualminmax", new double[]{2.2741515763174108E-12, 67.041171767548});
    model.result("pg8").feature("surf1").set("hasbeenplotted", true);
    model.result("pg8").set("renderdatacached", false);
    model.result("pg8").set("allowtableupdate", true);
    model.result("pg8").set("renderdatacached", true);
    model.result().table("evl2")
         .addRow(new double[]{-0.006674766540527344, -0.013349533081054688, 15.663139212744438});
    model.result().table("evl2")
         .addRow(new double[]{-0.006674766540527344, -0.013349533081054688, 15.663139212744438});
    model.result().table("evl2")
         .addRow(new double[]{0.028923869132995605, -0.15574431419372559, 16.337279045684713});
    model.result().table("evl2").addRow(new double[]{0.03337383270263672, -0.29813921451568604, 17.192632951451962});
    model.result().table("evl2").addRow(new double[]{-0.028923869132995605, -0.8810679912567139, 25.09503384537431});
    model.result().table("evl2").addRow(new double[]{-0.006674766540527344, -0.8944174647331238, 25.26395403604553});
    model.result().table("evl2").addRow(new double[]{0.042273521423339844, -0.5651294589042664, 20.585623430156062});
    model.result().table("evl2").addRow(new double[]{-0.05117321014404297, -0.9745146036148071, 26.383359821287094});
    model.result().table("evl2").addRow(new double[]{-0.011124610900878906, -0.516181230545044, 19.906579037316344});
    model.result().table("evl2").addRow(new double[]{0.024474024772644043, -0.26254045963287354, 16.92435098304055});
    model.result().table("evl2")
         .addRow(new double[]{0.05117321014404297, -0.022249221801757812, 15.705604231553036});
    model.result().table("evl2").addRow(new double[]{0.0645226240158081, -0.013349533081054688, 15.66264000931226});
    model.result().table("evl2").addRow(new double[]{0.024474024772644043, -1.0679612159729004, 27.475425312755554});

    model.label("me_rodliteral.mph");

    model.view("view1").hideObjects().create("hide1");
    model.view("view1").hideObjects("hide1").init(3);
    model.view("view1").hideObjects("hide1").add("cyl4", new int[]{1});

    model.label("me_rodliteral.mph");

    model.study("std1").create("param", "Parametric");
    model.study("std1").feature("param").setIndex("pname", "rd", 0);
    model.study("std1").feature("param").setIndex("plistarr", "", 0);
    model.study("std1").feature("param").setIndex("punit", "", 0);
    model.study("std1").feature("param").setIndex("pname", "rd", 0);
    model.study("std1").feature("param").setIndex("plistarr", "", 0);
    model.study("std1").feature("param").setIndex("punit", "", 0);

    model.param().set("xrs", "1");
    model.param().descr("xrs", "xtra gap on last pin pair");

    model.study("std1").feature("param").setIndex("pname", "xrs", 0);
    model.study("std1").feature("param").setIndex("plistarr", "range(0,0.5,2)", 0);
    model.study("std1").feature("param").setIndex("punit", "mm", 0);

    model.geom("geom1").feature("cyl5").setIndex("pos", "rs/2+rd/2+xrs/2", 0);
    model.geom("geom1").feature("cyl6").setIndex("pos", "-rs/2-rd/2-xrs/2", 0);
    model.geom("geom1").run("fin");

    model.mesh("mesh1").run();

    model.batch().create("p1", "Parametric");
    model.batch("p1").study("std1");
    model.batch("p1").create("so1", "Solutionseq");
    model.batch("p1").feature("so1").set("seq", "sol1");
    model.batch("p1").feature("so1").set("store", "on");
    model.batch("p1").feature("so1").set("clear", "on");
    model.batch("p1").feature("so1").set("psol", "none");
    model.batch("p1").set("pname", new String[]{"xrs"});
    model.batch("p1").set("plistarr", new String[]{"range(0,0.5,2)"});
    model.batch("p1").set("sweeptype", "sparse");
    model.batch("p1").set("probesel", "all");
    model.batch("p1").set("probes", new String[]{});
    model.batch("p1").set("plot", "off");
    model.batch("p1").set("err", "on");
    model.batch("p1").set("pdistrib", "off");
    model.batch("p1").attach("std1");
    model.batch("p1").set("control", "param");

    model.sol().create("sol2");
    model.sol("sol2").study("std1");
    model.sol("sol2").label("Parametric Solutions 1");

    model.batch("p1").feature("so1").set("psol", "sol2");

    model.result().create("pg9", "PlotGroup3D");
    model.result("pg9").label("Magnetic Flux Density Norm (mfnc)");
    model.result("pg9").set("data", "dset2");
    model.result("pg9").set("oldanalysistype", "noneavailable");
    model.result("pg9").set("data", "dset2");
    model.result("pg9").feature().create("mslc1", "Multislice");
    model.result("pg9").feature("mslc1").set("oldanalysistype", "noneavailable");
    model.result("pg9").feature("mslc1").set("expr", "mfnc.normB");
    model.result("pg9").feature("mslc1").set("data", "parent");
    model.result().create("pg10", "PlotGroup3D");
    model.result("pg10").label("Electric Potential (es)");
    model.result("pg10").set("data", "dset2");
    model.result("pg10").set("oldanalysistype", "noneavailable");
    model.result("pg10").set("frametype", "spatial");
    model.result("pg10").set("data", "dset2");
    model.result("pg10").feature().create("mslc1", "Multislice");
    model.result("pg10").feature("mslc1").set("oldanalysistype", "noneavailable");
    model.result("pg10").feature("mslc1").set("expr", "V");
    model.result("pg10").feature("mslc1").set("data", "parent");

    model.batch("p1").run();

    model.result("pg9").run();
    model.result("pg6").run();
    model.result().dataset("cln2").set("data", "dset2");
    model.result("pg6").run();
    model.result("pg6").setIndex("looplevelinput", "first", 0);
    model.result("pg6").run();
    model.result("pg6").setIndex("looplevelinput", "last", 0);
    model.result("pg6").run();
    model.result("pg6").setIndex("looplevelinput", "manual", 0);
    model.result("pg6").setIndex("looplevel", "2", 0);
    model.result("pg6").setIndex("looplevel", "1", 0);
    model.result("pg6").run();
    model.result("pg6").run();
    model.result("pg6").run();
    model.result("pg6").run();
    model.result("pg6").run();
    model.result().dataset("cln3").set("data", "dset2");
    model.result().dataset("cln4").set("data", "dset2");
    model.result().dataset("cln5").set("data", "dset2");
    model.result().dataset("cln6").set("data", "dset2");
    model.result().dataset("cpl5").set("data", "dset2");
    model.result().dataset("cpl1").set("data", "dset2");
    model.result().dataset("cpl2").set("data", "dset2");
    model.result().dataset("cpl3").set("data", "dset2");
    model.result().dataset("cpl4").set("data", "dset2");
    model.result("pg6").run();
    model.result("pg6").setIndex("looplevelinput", "all", 0);
    model.result("pg6").run();
    model.result("pg6").run();
    model.result("pg6").run();
    model.result("pg6").run();
    model.result("pg6").run();
    model.result("pg6").run();
    model.result("pg6").run();
    model.result("pg6").run();
    model.result("pg6").run();
    model.result("pg6").run();
    model.result("pg6").run();
    model.result("pg6").run();
    model.result("pg6").run();
    model.result("pg6").run();
    model.result("pg6").feature("lngr2").active(false);
    model.result("pg6").feature("lngr3").active(false);
    model.result("pg6").feature("lngr6").active(false);
    model.result("pg6").run();
    model.result("pg6").run();
    model.result("pg6").run();
    model.result("pg6").run();
    model.result("pg6").run();
    model.result("pg6").run();
    model.result("pg6").run();
    model.result("pg6").run();
    model.result("pg6").run();
    model.result("pg6").feature("lngr1").active(false);
    model.result("pg6").run();
    model.result("pg6").run();
    model.result("pg6").run();
    model.result("pg6").feature("lngr4").active(false);
    model.result("pg6").run();
    model.result("pg6").run();
    model.result("pg6").run();
    model.result("pg6").feature("lngr2").active(true);
    model.result("pg6").feature("lngr3").active(true);
    model.result("pg6").feature("lngr6").active(true);
    model.result("pg6").feature("lngr1").active(true);
    model.result("pg6").feature("lngr4").active(true);
    model.result("pg6").setIndex("looplevelinput", "first", 0);
    model.result("pg5").run();
    model.result("pg5").create("lngr1", "LineGraph");
    model.result("pg5").feature("lngr1").set("expr", "es.normE");
    model.result("pg5").run();
    model.result("pg5").feature("lngr1").set("expr", "es.normE*.43");
    model.result("pg5").feature("lngr1").set("unit", "kV/cm");
    model.result("pg5").feature("lngr1").set("xdata", "expr");
    model.result("pg5").feature("lngr1").set("xdataexpr", "Zaxis");
    model.result("pg5").set("title", "Trapping along Z, vary last pin gap");
    model.result("pg5").run();
    model.result("pg5").set("ylabel", "Field Norms (kG or 0.43 x kV/cm)");
    model.result("pg5").set("xlabel", "Z-axis (mm)");
    model.result("pg5").run();
    model.result("pg5").feature("lngr1").set("legend", "on");
    model.result("pg5").run();
    model.result("pg5").feature("lngr1").set("legendmethod", "manual");
    model.result("pg5").feature("lngr1").setIndex("legends", "0.5", 1);
    model.result("pg5").feature("lngr1").setIndex("legends", "1", 2);
    model.result("pg5").feature("lngr1").setIndex("legends", "1.5", 3);
    model.result("pg5").feature("lngr1").setIndex("legends", "2", 0);
    model.result("pg5").feature("lngr1").setIndex("legends", "2.5", 1);
    model.result("pg5").feature("lngr1").setIndex("legends", "3", 2);
    model.result("pg5").feature("lngr1").setIndex("legends", "3.5", 3);
    model.result("pg5").feature("lngr1").setIndex("legends", "4", 4);

    model.study("std1").feature("param").setIndex("plistarr", "range(0,0.5,3)", 0);

    model.result().create("pg11", "PlotGroup3D");
    model.result("pg11").label("Magnetic Flux Density Norm (mfnc) 1");
    model.result("pg11").set("oldanalysistype", "noneavailable");
    model.result("pg11").set("data", "dset1");
    model.result("pg11").feature().create("mslc1", "Multislice");
    model.result("pg11").feature("mslc1").set("oldanalysistype", "noneavailable");
    model.result("pg11").feature("mslc1").set("expr", "mfnc.normB");
    model.result("pg11").feature("mslc1").set("data", "parent");
    model.result().create("pg12", "PlotGroup3D");
    model.result("pg12").label("Electric Potential (es) 1");
    model.result("pg12").set("oldanalysistype", "noneavailable");
    model.result("pg12").set("frametype", "spatial");
    model.result("pg12").set("data", "dset1");
    model.result("pg12").feature().create("mslc1", "Multislice");
    model.result("pg12").feature("mslc1").set("oldanalysistype", "noneavailable");
    model.result("pg12").feature("mslc1").set("expr", "V");
    model.result("pg12").feature("mslc1").set("data", "parent");
    model.result().remove("pg11");
    model.result().remove("pg12");
    model.result("pg5").run();
    model.result().create("pg11", "PlotGroup3D");
    model.result("pg11").label("Magnetic Flux Density Norm (mfnc) 1");
    model.result("pg11").set("oldanalysistype", "noneavailable");
    model.result("pg11").set("solvertype", "none");
    model.result("pg11").set("showlooplevel", new String[]{"off", "off", "off"});
    model.result("pg11").set("data", "dset1");
    model.result("pg11").feature().create("mslc1", "Multislice");
    model.result("pg11").feature("mslc1").set("oldanalysistype", "noneavailable");
    model.result("pg11").feature("mslc1").set("solvertype", "none");
    model.result("pg11").feature("mslc1").set("expr", "mfnc.normB");
    model.result("pg11").feature("mslc1").set("data", "parent");
    model.result().create("pg12", "PlotGroup3D");
    model.result("pg12").label("Electric Potential (es) 1");
    model.result("pg12").set("oldanalysistype", "noneavailable");
    model.result("pg12").set("solvertype", "none");
    model.result("pg12").set("showlooplevel", new String[]{"off", "off", "off"});
    model.result("pg12").set("frametype", "spatial");
    model.result("pg12").set("data", "dset1");
    model.result("pg12").feature().create("mslc1", "Multislice");
    model.result("pg12").feature("mslc1").set("oldanalysistype", "noneavailable");
    model.result("pg12").feature("mslc1").set("solvertype", "none");
    model.result("pg12").feature("mslc1").set("expr", "V");
    model.result("pg12").feature("mslc1").set("data", "parent");

    model.batch("p1").run();

    model.result("pg5").run();
    model.result("pg5").feature("lngr1").setIndex("legends", "4.5", 5);
    model.result("pg5").feature("lngr1").setIndex("legends", "5", 6);
    model.result("pg5").run();
    model.result("pg5").feature("lngr1").set("resolution", "fine");
    model.result("pg5").run();
    model.result("pg5").feature("lngr1").set("resolution", "finer");
    model.result("pg5").run();
    model.result("pg6").run();
    model.result("pg6").feature("lngr3").setIndex("looplevelinput", "first", 0);
    model.result("pg6").feature("lngr6").setIndex("looplevelinput", "first", 0);
    model.result("pg6").feature("lngr4").setIndex("looplevelinput", "first", 0);
    model.result("pg6").feature("lngr5").setIndex("looplevelinput", "first", 0);
    model.result("pg6").run();

    model.label("me_rodliteral.mph");

    model.result().export().create("data2", "Data");
    model.result().export("data2").set("location", "grid");
    model.result().export("data2")
         .set("filename", "R:\\COMSOL files\\Magnetoelectrostatic Cloverleaf\\3D Field Files\\FullFieldsRF.dat");
    model.result().export("data2").set("gridx3", "range(-2,0.1,2)");
    model.result().export("data2").set("gridy3", "range(-2,0.1,2)");
    model.result().export("data2").set("gridz3", "range(-2,0.1,2)");
    model.result().dataset("cpl1").set("data", "dset1");
    model.result().dataset("cpl1").run();
    model.result("pg7").run();
    model.result("pg7").feature("surf1").set("expr", "es.normE");
    model.result("pg7").run();
    model.result("pg7").feature("surf1").set("rangecoloractive", "off");
    model.result("pg7").run();
    model.result().export("data2").setIndex("expr", "es.Ex", 0);
    model.result().export("data2").setIndex("expr", "mfnc.Bx", 0);
    model.result().export("data2").setIndex("expr", "mfnc.By", 1);
    model.result().export("data2").setIndex("expr", "mfnc.Bz", 2);
    model.result().export("data2").setIndex("expr", "es.Ex", 3);
    model.result().export("data2").setIndex("expr", "es.Ey", 4);
    model.result().export("data2").setIndex("expr", "es.Ez", 5);
    model.result().export("data2").label("Component Fields");
    model.result().export("data2").run();

    model.label("me_rodliteral.mph");

    model.result("pg7").run();
    model.result("pg3").run();
    model.result("pg3").set("showhiddenobjects", "on");

    return model;
  }

  public static Model run19(Model model) {
    model.result("pg3").run();
    model.result("pg3").label("EB Angle");
    model.result().remove("pg9");
    model.result().remove("pg11");
    model.result("pg7").set("data", "cpl3");
    model.result("pg7").setIndex("looplevel", "1", 0);
    model.result("pg7").feature("surf1").set("expr", "mfnc.normB");
    model.result("pg7").run();
    model.result("pg7").feature("surf1").set("wireframe", "off");
    model.result("pg7").set("edges", "off");
    model.result("pg7").run();
    model.result("pg7").feature("surf1").set("expr", "mfnc.normB + (dom > 1)*1.4");
    model.result("pg7").run();
    model.result("pg7").feature("surf1").set("expr", "dom");
    model.result("pg7").run();
    model.result("pg7").set("allowtableupdate", false);
    model.result("pg7").set("title", "xrs(1)=0 Surface: Entity index");
    model.result("pg7").set("xlabel", "");
    model.result("pg7").set("ylabel", "");
    model.result("pg7").set("hasbeenplotted", true);
    model.result("pg7").feature("surf1").set("rangeunit", "");
    model.result("pg7").feature("surf1").set("rangecolormin", 1);
    model.result("pg7").feature("surf1").set("rangecolormax", 22);
    model.result("pg7").feature("surf1").set("rangecoloractive", "off");
    model.result("pg7").feature("surf1").set("rangedatamin", 1);
    model.result("pg7").feature("surf1").set("rangedatamax", 22);
    model.result("pg7").feature("surf1").set("rangedataactive", "off");
    model.result("pg7").feature("surf1").set("rangeactualminmax", new double[]{1, 22});
    model.result("pg7").feature("surf1").set("hasbeenplotted", true);
    model.result("pg7").set("renderdatacached", false);
    model.result("pg7").set("allowtableupdate", true);
    model.result("pg7").set("renderdatacached", true);
    model.result().table("evl2").addRow(new double[]{-0.6215400695800781, 1.196171522140503, 8});
    model.result().table("evl2").addRow(new double[]{-0.0742720365524292, 1.1883535385131836, 15});
    model.result().table("evl2").addRow(new double[]{0.8091748952865601, 1.2899889945983887, 21});
    model.result().table("evl2").addRow(new double[]{0.4729959964752197, -1.2587164640426636, 19});
    model.result().table("evl2").addRow(new double[]{-0.16027140617370605, -1.2743526697158813, 13});
    model.result().table("evl2").addRow(new double[]{-0.9968096017837524, -1.3447157144546509, 7});
    model.result("pg7").feature("surf1").set("expr", "dom==7||dom==8||dom==13||dom==15||dom==19||dom==21");
    model.result("pg7").run();
    model.result("pg7").feature("surf1").set("expr", "dom");
    model.result("pg7").run();
    model.result("pg7").set("allowtableupdate", false);
    model.result("pg7").set("title", "xrs(1)=0 Surface: Entity index");
    model.result("pg7").set("xlabel", "");
    model.result("pg7").set("ylabel", "");
    model.result("pg7").set("hasbeenplotted", true);
    model.result("pg7").feature("surf1").set("rangeunit", "");
    model.result("pg7").feature("surf1").set("rangecolormin", 1);
    model.result("pg7").feature("surf1").set("rangecolormax", 22);
    model.result("pg7").feature("surf1").set("rangecoloractive", "off");
    model.result("pg7").feature("surf1").set("rangedatamin", 1);
    model.result("pg7").feature("surf1").set("rangedatamax", 22);
    model.result("pg7").feature("surf1").set("rangedataactive", "off");
    model.result("pg7").feature("surf1").set("rangeactualminmax", new double[]{1, 22});
    model.result("pg7").feature("surf1").set("hasbeenplotted", true);
    model.result("pg7").set("renderdatacached", false);
    model.result("pg7").set("allowtableupdate", true);
    model.result("pg7").set("renderdatacached", true);
    model.result().table("evl2").addRow(new double[]{2.69342041015625, 0.24411654472351074, 1});
    model.result().table("evl2").addRow(new double[]{1.2124457359313965, 0.16274452209472656, 6});
    model.result().table("evl2").addRow(new double[]{-2.742243766784668, 0.06509780883789062, 1});
    model.result().table("evl2").addRow(new double[]{-1.798326015472412, 0.03254890441894531, 6});
    model.result().table("evl2").addRow(new double[]{-0.3824493885040283, -0.03254890441894531, 9});
    model.result().table("evl2")
         .addRow(new double[]{-0.008137226104736328, -0.09764671325683594, 13.999999999999998});
    model.result().table("evl2").addRow(new double[]{0.36617517471313477, -0.03254890441894531, 20});
    model.result().table("evl2").addRow(new double[]{0.04068636894226074, -0.7160756587982178, 12});
    model.result("pg7").feature("surf1").set("expr", "dom==1||dom==6||dom==9||dom==12||dom==14||dom==20");
    model.result("pg7").run();
    model.result("pg7").feature("surf1").set("expr", "dom");
    model.result("pg7").run();
    model.result("pg7").set("allowtableupdate", false);
    model.result("pg7").set("title", "xrs(1)=0 Surface: Entity index");
    model.result("pg7").set("xlabel", "");
    model.result("pg7").set("ylabel", "");
    model.result("pg7").set("hasbeenplotted", true);
    model.result("pg7").feature("surf1").set("rangeunit", "");
    model.result("pg7").feature("surf1").set("rangecolormin", 1);
    model.result("pg7").feature("surf1").set("rangecolormax", 22);
    model.result("pg7").feature("surf1").set("rangecoloractive", "off");
    model.result("pg7").feature("surf1").set("rangedatamin", 1);
    model.result("pg7").feature("surf1").set("rangedatamax", 22);
    model.result("pg7").feature("surf1").set("rangedataactive", "off");
    model.result("pg7").feature("surf1").set("rangeactualminmax", new double[]{1, 22});
    model.result("pg7").feature("surf1").set("hasbeenplotted", true);
    model.result("pg7").set("renderdatacached", false);
    model.result("pg7").set("allowtableupdate", true);
    model.result("pg7").set("renderdatacached", true);
    model.result().table("evl2").addRow(new double[]{1.6111698150634766, -5.403115749359131, 1});
    model.result().table("evl2").addRow(new double[]{-3.15189790725708, -0.28895139694213867, 1});
    model.result().table("evl2").addRow(new double[]{-0.03582000732421875, -4.493183135986328, 10});
    model.result().table("evl2").addRow(new double[]{-0.011088848114013672, 4.583011627197266, 16});
    model.result("pg7").feature("surf1")
         .set("expr", "dom==1||dom==6||dom==9||dom==12||dom==14||dom==20||dom==10||dom==16");
    model.result("pg7").run();
    model.result("pg7").feature("surf1")
         .set("expr", "!(dom==1||dom==6||dom==9||dom==12||dom==14||dom==20||dom==10||dom==16)");
    model.result("pg7").run();
    model.result("pg7").feature("surf1")
         .set("expr", "mfnc.normB + 1.2*!(dom==1||dom==6||dom==9||dom==12||dom==14||dom==20||dom==10||dom==16)");
    model.result("pg7").run();
    model.result("pg7").feature("surf1")
         .set("expr", "mfnc.normB*(dom==1||dom==6||dom==9||dom==12||dom==14||dom==20||dom==10||dom==16)");
    model.result("pg7").run();
    model.result("pg7").feature("surf1").set("colortable", "Thermal");
    model.result("pg7").run();
    model.result("pg7").feature("surf1").set("colortable", "ThermalLight");
    model.result("pg7").run();
    model.result("pg7").feature("surf1").set("colortablerev", "on");
    model.result("pg7").run();
    model.result("pg7").feature("surf1")
         .set("expr", "mfnc.normB*(dom==1||dom==6||dom==9||dom==12||dom==14||dom==20||dom==10||dom==16) + !(dom==1||dom==6||dom==9||dom==12||dom==14||dom==20||dom==10||dom==16)");
    model.result("pg7").run();
    model.result("pg7").feature("surf1")
         .set("expr", "mfnc.normB*(dom==1||dom==6||dom==9||dom==12||dom==14||dom==20||dom==10||dom==16) + 1.2*!(dom==1||dom==6||dom==9||dom==12||dom==14||dom==20||dom==10||dom==16)");
    model.result("pg7").run();
    model.result("pg7").create("con1", "Contour");
    model.result("pg7").feature("con1").set("expr", "mfnc.normB");
    model.result("pg7").feature("con1").set("unit", "kG");
    model.result("pg7").run();
    model.result("pg7").feature("con1").set("coloring", "uniform");
    model.result("pg7").feature("con1").set("color", "black");
    model.result("pg7").run();
    model.result("pg7").feature("con1").set("contourtype", "tubes");
    model.result("pg7").run();
    model.result("pg7").feature("con1").set("radiusexpr", ".1");
    model.result("pg7").run();
    model.result("pg7").feature("con1").set("radiusexpr", ".01");
    model.result("pg7").run();
    model.result("pg7").feature("con1").set("radiusexpr", "1");
    model.result("pg7").feature("con1").set("contourtype", "filled");
    model.result("pg7").run();
    model.result("pg7").feature("con1").set("contourtype", "tubes");
    model.result("pg7").feature("con1").set("tuberadiusscaleactive", "on");
    model.result("pg7").feature("con1").set("tuberadiusscale", "1");
    model.result("pg7").run();
    model.result("pg7").feature("con1").set("tuberadiusscale", "10");
    model.result("pg7").run();
    model.result("pg7").feature("con1").set("tuberadiusscale", ".1");
    model.result("pg7").run();
    model.result("pg7").feature("con1").set("tuberadiusscale", ".01");
    model.result("pg7").run();
    model.result("pg7").feature("con1").set("tuberadiusscale", ".02");
    model.result("pg7").run();
    model.result("pg7").feature("con1").set("tuberadiusscale", ".04");
    model.result("pg7").run();
    model.result("pg7").feature("con1")
         .set("expr", "mfnc.normB*(dom==1||dom==6||dom==9||dom==12||dom==14||dom==20||dom==10||dom==16)");
    model.result("pg7").run();
    model.result("pg7").feature("con1").set("levelmethod", "levels");
    model.result("pg7").feature("con1").set("levels", "range(0,1,10)");
    model.result("pg7").run();
    model.result("pg7").set("titletype", "manual");
    model.result("pg7").set("title", "Pin Trap Magnetic Confinement");
    model.result("pg7").run();
    model.result("pg7").set("xlabelactive", "on");
    model.result("pg7").set("xlabel", "X (mm)");
    model.result("pg7").set("ylabelactive", "on");
    model.result("pg7").set("ylabel", "Y (mm)");
    model.result("pg7").run();
    model.result("pg7").feature("con1").set("colorlegend", "off");
    model.result("pg7").run();
    model.result("pg7").feature("surf1").set("unit", "kG");
    model.result("pg7").run();
    model.result("pg7").feature("surf1").set("rangedataactive", "on");
    model.result("pg7").feature("surf1").set("rangedatamin", "0");
    model.result("pg7").feature("surf1").set("rangedatamax", "9");
    model.result("pg7").feature("surf1").set("rangecoloractive", "on");
    model.result("pg7").feature("surf1").set("rangecolormin", "0");
    model.result("pg7").feature("surf1").set("rangecolormax", "9");
    model.result("pg7").feature("surf1")
         .set("expr", "mfnc.normB*(dom==1||dom==6||dom==9||dom==12||dom==14||dom==20||dom==10||dom==16) + .9*!(dom==1||dom==6||dom==9||dom==12||dom==14||dom==20||dom==10||dom==16)");
    model.result("pg7").run();
    model.result("pg7").feature("surf1")
         .set("expr", "mfnc.normB*(dom==1||dom==6||dom==9||dom==12||dom==14||dom==20||dom==10||dom==16) + .89*!(dom==1||dom==6||dom==9||dom==12||dom==14||dom==20||dom==10||dom==16)");
    model.result("pg7").run();
    model.result("pg7").feature("surf1").set("descractive", "on");
    model.result("pg7").run();
    model.result("pg7").run();
    model.result("pg7").feature("con1").set("tuberadiusscale", ".03");
    model.result("pg7").run();
    model.result("pg7").feature("con1").set("smooth", "everywhere");
    model.result("pg7").run();
    model.result("pg7").feature("con1").set("smooth", "internal");
    model.result("pg7").run();
    model.result("pg7").feature("con1").set("resolution", "fine");
    model.result("pg7").run();
    model.result("pg7").feature("con1").set("resolution", "finer");
    model.result("pg7").run();
    model.result("pg7").feature("con1").set("resolution", "normal");
    model.result("pg7").feature("con1").set("recover", "ppr");
    model.result("pg7").run();
    model.result("pg7").feature("con1").set("recover", "off");
    model.result("pg7").run();
    model.result("pg7").feature("con1")
         .set("expr", "mfnc.normB*(dom==1||dom==6||dom==9||dom==12||dom==14||dom==20||dom==10||dom==16)");
    model.result("pg7").run();
    model.result("pg7").run();
    model.result("pg6").run();
    model.result("pg7").run();
    model.result("pg7").feature("con1").set("unit", "kG");
    model.result("pg7").run();
    model.result("pg7").label("Pin Trap Contour View");

    model.geom("geom1").run();

    model.result().dataset("cpl3").set("data", "dset1");
    model.result("pg7").run();

    model.mesh("mesh1").feature("ref1").active(false);
    model.mesh("mesh1").feature("ref2").active(false);
    model.mesh("mesh1").feature("size").set("hauto", "4");

    model.param().set("xrs", "0");

    model.mesh("mesh1").feature("size").set("hauto", "3");

    model.geom("geom1").feature("cyl3").active(false);
    model.geom("geom1").feature("cyl9").active(false);

    model.sol("sol1").runFromTo("st1", "s1");

    model.result("pg7").run();

    model.mesh("mesh1").feature("size").set("hauto", "2");

    model.sol("sol1").runFromTo("st1", "s1");

    model.result("pg7").run();

    model.geom("geom1").feature("cyl3").active(true);
    model.geom("geom1").run();

    model.mesh("mesh1").feature("size").set("hauto", "1");

    model.geom("geom1").feature("cyl3").active(false);

    model.sol("sol1").runFromTo("st1", "s1");

    model.result("pg7").run();
    model.result("pg7").feature("surf1").set("expr", "dom");
    model.result("pg7").run();
    model.result("pg7").feature("surf1").set("descractive", "off");
    model.result("pg7").set("allowtableupdate", false);
    model.result("pg7").set("hasbeenplotted", true);
    model.result("pg7").feature("surf1").set("rangeunit", "");
    model.result("pg7").feature("surf1").set("rangeactualminmax", new double[]{1, 10.000000000000002});
    model.result("pg7").feature("surf1").set("hasbeenplotted", true);
    model.result("pg7").feature("con1").set("hasbeenplotted", true);
    model.result("pg7").set("renderdatacached", false);
    model.result("pg7").set("allowtableupdate", true);
    model.result("pg7").set("renderdatacached", true);
    model.result().table("evl2").addRow(new double[]{-3.430567741394043, 0.11078643798828125, 1});
    model.result().table("evl2").addRow(new double[]{-3.430567741394043, 0.11078643798828125, 1});
    model.result().table("evl2").addRow(new double[]{0.04318046569824219, 0.17337656021118164, 6});
    model.result().table("evl2").addRow(new double[]{0.04318046569824219, 0.17337656021118164, 6});
    model.result().table("evl2").addRow(new double[]{2.7032594680786133, 0.17337656021118164, 1});
    model.result("pg7").feature("surf1").set("expr", "mfnc.normB*(dom==1||dom==6)+.89*!(dom==1||dom==6)");
    model.result("pg7").run();
    model.result("pg7").feature("surf1").set("unit", "kG");
    model.result("pg7").feature("surf1").set("rangecolormax", "9");
    model.result("pg7").feature("surf1").set("rangedatamax", "9");
    model.result("pg7").feature("con1").set("expr", "mfnc.normB*(dom==1||dom==6)");
    model.result("pg7").run();

    model.view("view1").hideObjects("hide1").add("fin", new int[]{6});
    model.view("view1").hideObjects().clear();
    model.view("view1").hideObjects().create("hide1");
    model.view("view1").hideObjects("hide1").init(3);
    model.view("view1").hideObjects("hide1").add("fin", new int[]{1});
    model.view("view1").hideEntities().create("hide1");
    model.view("view1").hideEntities("hide1").geom(3);
    model.view("view1").hideEntities("hide1").add(new int[]{6});

    model.result("pg7").set("edges", "on");
    model.result("pg7").run();
    model.result("pg7").set("showhiddenobjects", "off");
    model.result("pg7").run();
    model.result("pg7").set("showhiddenobjects", "on");
    model.result("pg7").set("edges", "off");
    model.result("pg7").run();
    model.result("pg7").feature("con1").set("expr", "mfnc.normB*(dom==1||dom==6)+.89*!(dom==1||dom==6)");
    model.result("pg7").run();
    model.result("pg8").set("data", "cpl2");
    model.result().dataset("cpl2").set("data", "dset1");
    model.result("pg8").run();
    model.result("pg8").set("showhiddenobjects", "on");
    model.result("pg8").set("edges", "off");
    model.result("pg8").run();
    model.result().dataset("cpl4").set("data", "dset1");
    model.result("pg8").set("data", "cpl1");
    model.result("pg8").run();
    model.result("pg8").set("data", "cpl4");
    model.result("pg8").run();
    model.result("pg8").feature("surf1").set("colortable", "Thermal");
    model.result("pg8").feature("surf1").set("colortablerev", "on");
    model.result("pg8").run();
    model.result("pg8").feature("surf1").set("expr", "dom");
    model.result("pg8").run();
    model.result("pg8").set("allowtableupdate", false);
    model.result("pg8").set("title", "Surface: Entity index");
    model.result("pg8").set("xlabel", "");
    model.result("pg8").set("ylabel", "");
    model.result("pg8").set("hasbeenplotted", true);
    model.result("pg8").feature("surf1").set("rangeunit", "");
    model.result("pg8").feature("surf1").set("rangecolormin", 1);
    model.result("pg8").feature("surf1").set("rangecolormax", 12.000000000000002);
    model.result("pg8").feature("surf1").set("rangecoloractive", "off");
    model.result("pg8").feature("surf1").set("rangedatamin", 1);
    model.result("pg8").feature("surf1").set("rangedatamax", 12.000000000000002);
    model.result("pg8").feature("surf1").set("rangedataactive", "off");
    model.result("pg8").feature("surf1").set("rangeactualminmax", new double[]{1, 12.000000000000002});
    model.result("pg8").feature("surf1").set("hasbeenplotted", true);
    model.result("pg8").set("renderdatacached", false);
    model.result("pg8").set("allowtableupdate", true);
    model.result("pg8").set("renderdatacached", true);
    model.result().table("evl2").addRow(new double[]{-1.6256160736083984, -1.5985221862792969, 1});
    model.result().table("evl2").addRow(new double[]{-1.6256160736083984, -1.5985221862792969, 1});
    model.result().table("evl2").addRow(new double[]{-5.20197057723999, -2.221674919128418, 4});
    model.result().table("evl2").addRow(new double[]{-0.18965530395507812, 0, 6});
    model.result().table("evl2").addRow(new double[]{-0.5147781372070312, -1.5985221862792969, 1});
    model.result().table("evl2").addRow(new double[]{-0.43349742889404297, -0.10837459564208984, 6});
    model.result("pg8").feature("surf1").set("expr", "es.normE*(dom==1)||(dom==6)");
    model.result("pg8").run();
    model.result("pg8").feature("surf1").set("rangecoloractive", "on");
    model.result("pg8").feature("surf1").set("rangedataactive", "on");
    model.result("pg8").feature("surf1").set("rangecolormin", "0");
    model.result("pg8").feature("surf1").set("rangecolormax", "70");
    model.result("pg8").feature("surf1").set("expr", "es.normE");
    model.result("pg8").run();
    model.result("pg8").feature("surf1").set("rangecoloractive", "off");
    model.result("pg8").feature("surf1").set("rangedataactive", "off");
    model.result("pg8").run();
    model.result("pg8").feature("surf1").set("unit", "kV/cm");
    model.result("pg8").run();
    model.result("pg8").feature("surf1").set("unit", "kV/mm");
    model.result("pg8").run();
    model.result("pg8").feature("surf1").set("expr", "es.normE*(dom==1)||(dom==6)");
    model.result("pg8").run();
    model.result("pg8").feature("surf1").set("rangecoloractive", "on");
    model.result("pg8").feature("surf1").set("rangecolormax", "6");
    model.result("pg8").feature("surf1").set("rangedataactive", "on");
    model.result("pg8").feature("surf1").set("rangedatamax", "6");
    model.result("pg8").run();
    model.result("pg8").feature("surf1").set("unit", "kV/cm");
    model.result("pg8").run();
    model.result("pg8").feature("surf1").set("expr", "es.normE*(dom==1||dom==6)");
    model.result("pg8").feature("surf1").set("rangecolormin", "0");
    model.result("pg8").feature("surf1").set("rangecolormax", "500000");
    model.result("pg8").feature("surf1").set("unit", "kV/mm");
    model.result("pg8").feature("surf1").set("rangecolormax", "6");
    model.result("pg8").feature("surf1").set("rangedatamax", "6");
    model.result("pg8").feature("surf1").set("rangecolormax", "8");
    model.result("pg8").feature("surf1").set("rangedatamax", "8");
    model.result("pg8").run();
    model.result("pg8").feature("surf1").set("rangecolormax", "6");
    model.result("pg8").feature("surf1").set("rangedatamax", "6");
    model.result("pg8").run();
    model.result("pg8").feature("surf1").set("rangedatamax", "8");
    model.result("pg8").feature("surf1").set("expr", "es.normE*(dom==1||dom==6)+8*!(dom==1||dom==6)");
    model.result("pg8").run();
    model.result("pg8").feature("surf1").set("expr", "es.normE*(dom==1||dom==6)+7*!(dom==1||dom==6)");
    model.result("pg8").run();
    model.result("pg8").feature("surf1").set("expr", "es.normE*(dom==1||dom==6)+6.9*!(dom==1||dom==6)");
    model.result("pg8").run();
    model.result("pg8").feature("surf1").set("expr", "es.normE*(dom==1||dom==6)+5.9*!(dom==1||dom==6)");
    model.result("pg8").run();
    model.result("pg8").set("allowtableupdate", false);
    model.result("pg8").set("title", "Surface: es.normE*(dom==1||dom==6)+5.9*!(dom==1||dom==6) (kV/mm)");
    model.result("pg8").set("xlabel", "");
    model.result("pg8").set("ylabel", "");
    model.result("pg8").set("hasbeenplotted", true);
    model.result("pg8").feature("surf1").set("rangeunit", "kV/mm");
    model.result("pg8").feature("surf1")
         .set("rangeactualminmax", new double[]{5.899999999999999E-6, 6.3437969457747485});
    model.result("pg8").feature("surf1").set("hasbeenplotted", true);
    model.result("pg8").set("renderdatacached", false);
    model.result("pg8").set("allowtableupdate", true);
    model.result("pg8").set("renderdatacached", true);
    model.result().table("evl2").addRow(new double[]{-4.795566558837891, -2.709359645843506, 5.9E-6});
    model.result().table("evl2").addRow(new double[]{-4.795566558837891, -2.709359645843506, 5.9E-6});
    model.result("pg8").feature("surf1").set("expr", "es.normE*(dom==1||dom==6)+8e6*!(dom==1||dom==6)");
    model.result("pg8").run();
    model.result("pg8").feature("surf1").set("expr", "es.normE*(dom==1||dom==6)+5e6*!(dom==1||dom==6)");
    model.result("pg8").run();
    model.result("pg7").feature().duplicate("con2", "con1");
    model.result("pg8").feature().copy("con1", "pg7/con2");
    model.result("pg7").feature().remove("con2");
    model.result("pg8").feature("con1").tag("con2");
    model.result("pg8").feature("con2").label("Contour 2");
    model.result("pg8").feature("con2").set("expr", "es.normE*(dom==1||dom==6)+5e6*!(dom==1||dom==6)");
    model.result("pg8").feature("con2").set("unit", "kV/mm");
    model.result("pg8").run();
    model.result("pg8").feature("con2").set("unit", "kV/cm");
    model.result("pg8").feature("con2").set("levels", "range(0,5,60)");
    model.result("pg8").run();
    model.result("pg8").feature("con2").set("smooth", "everywhere");
    model.result("pg8").run();
    model.result("pg8").feature("con2").set("smooth", "internal");
    model.result("pg8").feature("con2").set("resolution", "fine");
    model.result("pg8").run();
    model.result("pg8").feature("surf1").set("unit", "kV/cm");
    model.result("pg8").run();
    model.result("pg8").set("xlabelactive", "on");
    model.result("pg8").set("ylabelactive", "on");
    model.result("pg8").set("xlabel", "z (mm)");
    model.result("pg8").set("ylabel", "X (mm)");
    model.result("pg8").set("xlabel", "Z (mm)");
    model.result("pg8").run();
    model.result("pg8").set("titletype", "manual");
    model.result("pg8").set("title", "Pin Trap Electric Confinement");
    model.result("pg8").feature("surf1").set("expr", "es.normE*(dom==1||dom==6)+5.5e6*!(dom==1||dom==6)");
    model.result("pg8").run();
    model.result("pg8").feature("surf1").set("expr", "es.normE*(dom==1||dom==6)+5.25e6*!(dom==1||dom==6)");
    model.result("pg8").run();

    model.label("me_rodliteral.mph");

    model.param().set("poff", "0.1");
    model.param().descr("poff", "pin installation offset");

    model.geom("geom1").feature().duplicate("blk8", "blk7");
    model.geom("geom1").feature("blk8").set("size", new String[]{"dg", "rd*1.1", "rd*1.1"});
    model.geom("geom1").feature("blk7").set("size", new String[]{"dg", "rd*1.1", "rd*1.1"});
    model.geom("geom1").feature("blk7").set("pos", new String[]{"0", "rs/2 + rd/2", "0"});
    model.geom("geom1").run("blk7");
    model.geom("geom1").feature("blk8").set("pos", new String[]{"0", "-rs/2 - rd/2", "0"});
    model.geom("geom1").runPre("fin");
    model.geom("geom1").feature("blk8").setIndex("pos", "poff/2", 2);
    model.geom("geom1").feature("blk7").setIndex("pos", "-poff/2", 2);
    model.geom("geom1").runPre("fin");
    model.geom("geom1").feature("blk7").setIndex("pos", "0", 2);
    model.geom("geom1").feature("blk7").setIndex("pos", "-poff/2", 0);
    model.geom("geom1").feature("blk8").setIndex("pos", "poff/2", 0);
    model.geom("geom1").feature("blk8").setIndex("pos", "0", 2);
    model.geom("geom1").runPre("fin");

    model.study("std1").feature("param").setIndex("plistarr", "range(0,0.5,6)", 0);
    model.study("std1").feature("param").setIndex("pname", "rd", 1);
    model.study("std1").feature("param").setIndex("plistarr", "", 1);
    model.study("std1").feature("param").setIndex("punit", "", 1);
    model.study("std1").feature("param").setIndex("pname", "rd", 1);
    model.study("std1").feature("param").setIndex("plistarr", "", 1);
    model.study("std1").feature("param").setIndex("punit", "", 1);
    model.study("std1").feature("param").setIndex("pname", "poff", 1);
    model.study("std1").feature("param").setIndex("plistarr", "range(0,0.1,0.5)", 1);
    model.study("std1").feature("param").setIndex("punit", "mm", 1);

    model.geom("geom1").run();

    model.view("view1").hideObjects().clear();
    model.view("view1").hideEntities().clear();
    model.view("view1").hideEntities().create("hide1");
    model.view("view1").hideEntities("hide1").geom(3);
    model.view("view1").hideEntities("hide1").add(new int[]{1});
    model.view("view1").hideObjects().create("hide1");
    model.view("view1").hideObjects("hide1").init();
    model.view("view1").hideObjects("hide1").add(new String[]{"cyl4"});

    model.geom("geom1").feature().remove("cyl3");
    model.geom("geom1").feature().remove("cyl9");
    model.geom("geom1").run("blk8");
    model.geom("geom1").create("blk9", "Block");
    model.geom("geom1").feature("blk9").set("base", "center");
    model.geom("geom1").run("blk9");
    model.geom("geom1").feature("blk9").set("size", new String[]{"1", "1", "3"});
    model.geom("geom1").runPre("fin");
    model.geom("geom1").feature("blk9").set("size", new String[]{"rs+rd", "rs+rd", "rd*1.5"});
    model.geom("geom1").runPre("fin");
    model.geom("geom1").feature("blk9").label("Finer Mesh");
    model.geom("geom1").run();

    model.mesh("mesh1").feature().remove("ref2");

    model.view("view1").hideObjects().clear();
    model.view("view1").hideEntities().clear();
    model.view("view1").hideEntities().create("hide1");
    model.view("view1").hideEntities("hide1").geom(3);
    model.view("view1").hideEntities("hide1").add(new int[]{1});
    model.view("view1").hideEntities("hide1").add(new int[]{21});
    model.view("view1").hideEntities("hide1").add(new int[]{4});
    model.view("view1").hideEntities("hide1").add(new int[]{5});
    model.view("view1").hideEntities("hide1").add(new int[]{22});
    model.view("view1").hideEntities("hide1").add(new int[]{19});
    model.view("view1").hideEntities("hide1").add(new int[]{18});
    model.view("view1").hideEntities("hide1").add(new int[]{3});
    model.view("view1").hideEntities("hide1").add(new int[]{2});
    model.view("view1").hideEntities("hide1").add(new int[]{14});
    model.view("view1").hideEntities("hide1").add(new int[]{13});
    model.view("view1").hideEntities("hide1").add(new int[]{11});
    model.view("view1").hideEntities("hide1").add(new int[]{12});

    model.mesh("mesh1").feature("ref1").selection().set(new int[]{6, 7, 8, 9, 10, 15, 16, 17, 20});
    model.mesh("mesh1").feature("ref1").active(true);
    model.mesh("mesh1").run();

    model.view("view1").hideObjects().clear();
    model.view("view1").hideEntities().clear();
    model.view("view1").hideEntities().create("hide1");
    model.view("view1").hideEntities("hide1").geom(3);
    model.view("view1").hideEntities("hide1").add(new int[]{1});

    model.mesh("mesh1").feature("size").set("hauto", "2");
    model.mesh("mesh1").run();

    model.geom("geom1").feature().duplicate("blk10", "blk9");
    model.geom("geom1").feature("blk10").label("Finest Mesh");
    model.geom("geom1").feature("blk10").setIndex("size", "1", 0);
    model.geom("geom1").feature("blk10").set("size", new String[]{"1", "1", "3"});
    model.geom("geom1").runPre("fin");
    model.geom("geom1").run();

    model.mesh("mesh1").feature().duplicate("ref2", "ref1");

    model.view("view1").hideEntities("hide1").add(new int[]{22});
    model.view("view1").hideEntities("hide1").add(new int[]{4});
    model.view("view1").hideEntities("hide1").add(new int[]{23});
    model.view("view1").hideEntities("hide1").add(new int[]{5});
    model.view("view1").hideEntities("hide1").add(new int[]{20});
    model.view("view1").hideEntities("hide1").add(new int[]{19});
    model.view("view1").hideEntities("hide1").add(new int[]{3});
    model.view("view1").hideEntities("hide1").add(new int[]{2});
    model.view("view1").hideEntities("hide1").add(new int[]{15});
    model.view("view1").hideEntities("hide1").add(new int[]{14});
    model.view("view1").hideEntities("hide1").add(new int[]{13});
    model.view("view1").hideEntities("hide1").add(new int[]{12});
    model.view("view1").hideEntities("hide1").add(new int[]{6});
    model.view("view1").hideEntities("hide1").add(new int[]{9});
    model.view("view1").hideObjects().clear();
    model.view("view1").hideEntities().clear();
    model.view("view1").hideEntities().create("hide1");
    model.view("view1").hideEntities("hide1").geom(3);
    model.view("view1").hideEntities("hide1").add(new int[]{1});
    model.view("view1").hideEntities("hide1").add(new int[]{23});
    model.view("view1").hideEntities("hide1").add(new int[]{5});
    model.view("view1").hideEntities("hide1").add(new int[]{6});

    model.mesh("mesh1").feature("ref2").selection().set(new int[]{6, 7, 8, 9, 10, 11, 16, 17, 18, 21});
    model.mesh("mesh1").feature("ref1").selection().set(new int[]{6, 7, 8, 9, 10, 11, 16, 17, 18, 21});
    model.mesh("mesh1").feature("ref2").selection().set(new int[]{9});
    model.mesh("mesh1").feature("ref2").set("numrefine", "1");
    model.mesh("mesh1").run();

    model.physics("mfnc").feature("mfc2").selection().set(new int[]{2, 7});

    model.view("view1").hideObjects().clear();
    model.view("view1").hideEntities().clear();
    model.view("view1").hideEntities().create("hide1");
    model.view("view1").hideEntities("hide1").geom(3);
    model.view("view1").hideEntities("hide1").add(new int[]{1});
    model.view("view1").hideEntities("hide1").add(new int[]{23});
    model.view("view1").hideEntities("hide1").add(new int[]{5});
    model.view("view1").hideEntities("hide1").add(new int[]{6});
    model.view("view1").hideEntities("hide1").add(new int[]{16});
    model.view("view1").hideEntities("hide1").add(new int[]{14});
    model.view("view1").hideEntities("hide1").add(new int[]{9});
    model.view("view1").hideEntities("hide1").add(new int[]{10});

    return model;
  }

  public static Model run20(Model model) {
    model.view("view1").hideEntities("hide1").add(new int[]{12});
    model.view("view1").hideObjects().clear();
    model.view("view1").hideEntities().clear();

    model.param().set("xrs", "5");

    model.sol("sol1").runFromTo("st1", "s1");

    model.result("pg6").run();

    model.study("std1").feature("param").set("sweeptype", "filled");
    model.study("std1").feature("param").setIndex("plistarr", "range(0,0.5,3.5)", 0);
    model.study("std1").feature("param").setIndex("plistarr", "range(0,0.1,0.4)", 1);

    model.batch("p1").run();

    model.label("me_rodliteral.mph");

    model.result("pg3").run();
    model.result().remove("pg12");
    model.result().remove("pg10");
    model.result().create("pg9", "PlotGroup3D");
    model.result("pg9").label("Loss Surface");
    model.result("pg9").set("data", "dset2");
    model.result("pg9").setIndex("looplevel", "1", 0);
    model.result("pg9").create("iso1", "Isosurface");
    model.result("pg9").feature("iso1")
         .set("expr", "acos((mfnc.Bx*es.Ex + mfnc.By*es.Ey + mfnc.Bz*es.Ez)/(mfnc.normB*es.normE+1e-10))");
    model.result("pg9").feature("iso1").set("levelmethod", "levels");
    model.result("pg9").run();
    model.result("pg9").run();
    model.result("pg9").feature("iso1").set("data", "dset2");
    model.result("pg9").run();
    model.result("pg9").feature("iso1").set("levelmethod", "number");
    model.result("pg9").run();
    model.result("pg9").feature("iso1").set("levelmethod", "levels");
    model.result("pg9").feature("iso1").set("levels", "pi/2");
    model.result("pg9").run();
    model.result("pg9").feature("iso1").setIndex("looplevel", "1", 0);
    model.result("pg9").run();
    model.result().dataset().create("grid1", "Grid3D");
    model.result().dataset("grid1").set("source", "data");
    model.result().dataset("grid1").set("data", "dset2");
    model.result().dataset("grid1").set("parmin1", "-1");
    model.result().dataset("grid1").set("parmin2", "-1");
    model.result().dataset("grid1").set("parmin3", "-1");
    model.result().dataset("grid1").run();

    model.view().remove("view10");

    model.result().dataset("grid1").set("res1", "10");
    model.result().dataset("grid1").set("res2", "10");
    model.result().dataset("grid1").set("res3", "10");
    model.result().dataset("grid1").run();

    model.view().remove("view10");

    model.result().dataset("grid1").set("res1", "201");
    model.result().dataset("grid1").set("res2", "201");
    model.result().dataset("grid1").set("res3", "201");
    model.result().dataset("grid1").run();

    model.view().remove("view10");

    model.result("pg9").set("data", "grid1");
    model.result("pg9").run();
    model.result().dataset("grid1").set("parmin1", "-1e-3");
    model.result().dataset("grid1").set("parmax1", "1e-3");
    model.result().dataset("grid1").set("parmin2", "-1e-3");
    model.result().dataset("grid1").set("parmax2", "1e-3");
    model.result().dataset("grid1").set("parmin3", "-1e-3");
    model.result().dataset("grid1").set("parmax3", "1e-3");
    model.result().dataset("grid1").run();
    model.result().dataset("grid1").set("parmin1", "-1");
    model.result().dataset("grid1").set("parmax1", "1");
    model.result().dataset("grid1").set("parmin2", "-1");
    model.result().dataset("grid1").set("parmax2", "1");
    model.result().dataset("grid1").set("parmin3", "-1");
    model.result().dataset("grid1").set("parmax3", "1");
    model.result("pg9").set("data", "none");
    model.result("pg9").feature("iso1").set("data", "grid1");
    model.result().dataset("grid1").set("data", "dset2");
    model.result("pg9").feature("iso1").set("data", "dset2");
    model.result("pg9").run();
    model.result().dataset().remove("grid1");
    model.result().export("data2").set("gridx3", "range(-1,0.1,1)");
    model.result().export("data2").set("gridy3", "range(-1,0.1,1)");
    model.result().export("data2").set("gridz3", "range(-1,0.1,1)");
    model.result().export("data2").set("gridx3", "range(-1,0.05,1)");
    model.result().export("data2").set("gridy3", "range(-1,0.05,1)");
    model.result().export("data2").set("gridz3", "range(-1,0.05,1)");
    model.result().export("data2")
         .set("filename", "R:\\COMSOL files\\Magnetoelectrostatic Cloverleaf\\3D Field Files\\CenterFieldsPush0um.dat");
    model.result().export("data2").set("gridx3", "range(-.1,0.01,.1)");
    model.result().export("data2").set("gridy3", "range(-.1,0.01,.1)");
    model.result().export("data2").set("gridz3", "range(-1,0.02,1)");
    model.result().export("data2").set("data", "dset2");
    model.result().export("data2").set("outersolnum", "36");
    model.result().export("data2").run();
    model.result().export("data2").set("outersolnum", "37");
    model.result().export("data2")
         .set("filename", "R:\\COMSOL files\\Magnetoelectrostatic Cloverleaf\\3D Field Files\\CenterFieldsPush100um.dat");
    model.result().export("data2").run();
    model.result().export("data2").set("outersolnum", "38");
    model.result().export("data2")
         .set("filename", "R:\\COMSOL files\\Magnetoelectrostatic Cloverleaf\\3D Field Files\\CenterFieldsPush200um.dat");
    model.result().export("data2").run();
    model.result().export("data2").set("outersolnum", "39");
    model.result().export("data2")
         .set("filename", "R:\\COMSOL files\\Magnetoelectrostatic Cloverleaf\\3D Field Files\\CenterFieldsPush300um.dat");
    model.result().export("data2").run();
    model.result().export("data2").set("outersolnum", "40");
    model.result().export("data2")
         .set("filename", "R:\\COMSOL files\\Magnetoelectrostatic Cloverleaf\\3D Field Files\\CenterFieldsPush400um.dat");
    model.result().export("data2").run();

    model.label("me_rodliteral.mph");

    model.result().export().duplicate("data3", "data2");
    model.result().export("data3").label("Component Fields Irregular");
    model.result().export("data3").set("gridx3", "range(-.2,0.02,-.02)");
    model.result().export("data3").set("gridy3", "range(-.2,0.02,-.02)");

    model.view("view1").hideObjects().create("hide1");
    model.view("view1").hideObjects("hide1").init(3);
    model.view("view1").hideObjects("hide1").add("cyl4", new int[]{1});

    model.geom("geom1").run();

    model.result().export("data3")
         .set("gridx3", "range(-.2,0.02,-.02) range(-0.02,0.005,0.02) range(0.02,0.02,0.2)");
    model.result().export("data3")
         .set("gridy3", "range(-.2,0.02,-.02) range(-0.02,0.005,0.02) range(0.02,0.02,0.2)");
    model.result().export("data3").set("gridz3", "range(-1.5,0.05,1.5)");
    model.result().export("data3")
         .set("filename", "R:\\COMSOL files\\Magnetoelectrostatic Cloverleaf\\3D Field Files\\CenterFieldsBroadPush100um.dat");
    model.result().export("data3").set("outersolnum", "37");
    model.result().export("data3").run();
    model.result().export("data3")
         .set("gridx3", "range(-.2,0.02,-.04) range(-0.02,0.005,0.02) range(0.04,0.02,0.2)");
    model.result().export("data3")
         .set("gridy3", "range(-.2,0.02,-.04) range(-0.02,0.005,0.02) range(0.04,0.02,0.2)");
    model.result().export("data3").run();
    model.result().export("data3")
         .set("gridx3", "range(-.2,0.02,-.04) range(-0.02,0.002,0.02) range(0.04,0.02,0.2)");
    model.result().export("data3")
         .set("gridy3", "range(-.2,0.02,-.04) range(-0.02,0.002,0.02) range(0.04,0.02,0.2)");
    model.result().export("data3").set("gridz3", "range(-1.5,0.1,-0.1) range(-0.05,0.005,0.05) range(0.1,0.1,1.5)");
    model.result().export("data3").run();
    model.result().export("data3")
         .set("gridx3", "range(-.2,0.02,-.04) range(-.02,0.005,-.01) range(-0.005,0.001,0.005) range(0.01,0.005,0.02) range(0.04,0.02,0.2)");
    model.result().export("data3")
         .set("gridy3", "range(-.2,0.02,-.04) range(-.02,0.005,-.01) range(-0.005,0.001,0.005) range(0.01,0.005,0.02) range(0.04,0.02,0.2)");
    model.result().export("data3").run();
    model.result().export("data3").set("outersolnum", "36");
    model.result().export("data3")
         .set("filename", "R:\\COMSOL files\\Magnetoelectrostatic Cloverleaf\\3D Field Files\\CenterFieldsBroadPush0um.dat");
    model.result().export("data3").run();
    model.result().export("data3").set("outersolnum", "38");
    model.result().export("data3")
         .set("filename", "R:\\COMSOL files\\Magnetoelectrostatic Cloverleaf\\3D Field Files\\CenterFieldsBroadPush200um.dat");
    model.result().export("data3").run();
    model.result().export("data3")
         .set("filename", "R:\\COMSOL files\\Magnetoelectrostatic Cloverleaf\\3D Field Files\\CenterFieldsBroadPush300um.dat");
    model.result().export("data3").set("outersolnum", "39");
    model.result().export("data3").run();
    model.result().export("data3").set("outersolnum", "40");
    model.result().export("data3")
         .set("filename", "R:\\COMSOL files\\Magnetoelectrostatic Cloverleaf\\3D Field Files\\CenterFieldsBroadPush400um.dat");
    model.result().export("data3").run();

    model.label("me_rodliteral.mph");

    model.result().export("data3").set("data", "dset1");
    model.result().export("data2").set("data", "dset1");
    model.result("pg9").feature("iso1").set("data", "dset1");
    model.result().dataset("cln2").set("data", "dset1");
    model.result().dataset("cln3").set("data", "dset1");
    model.result().dataset("cln4").set("data", "dset1");
    model.result().dataset("cln5").set("data", "dset1");
    model.result().dataset("cln6").set("data", "dset1");
    model.result().dataset("cpl5").set("data", "dset1");
    model.result().dataset().remove("dset2");

    model.study("std1").feature().remove("param");

    model.sol().remove("sol2");

    model.batch().remove("p1");

    model.param().set("vr2", "-12500");
    model.param().set("vr4", "-12500");

    model.sol("sol1").runAll();

    model.result("pg6").run();

    model.param().set("xrs", "0");
    model.param().set("poff", "0");

    model.sol("sol1").runAll();

    model.result("pg6").run();
    model.result().export("data2").set("gridx3", "range(-.1,0.1,.1)");
    model.result().export("data2").set("gridy3", "range(-.1,0.1,.1)");
    model.result().export("data2").set("gridz3", "range(-1,0.1,1)");
    model.result().export("data2").set("gridx3", "range(-1,0.1,1)");
    model.result().export("data2").set("gridy3", "range(-1,0.1,1)");
    model.result().export("data2").set("gridx3", "range(-1.5,0.1,1.5)");
    model.result().export("data2").set("gridy3", "range(-1.5,0.1,1.5)");
    model.result().export("data2").set("gridz3", "range(-2,0.1,2)");
    model.result().export("data2")
         .set("filename", "R:\\COMSOL files\\Magnetoelectrostatic Cloverleaf\\3D Field Files\\BroadFieldsPlusMinus.dat");
    model.result().export("data2").set("gridz3", "range(-2.5,0.1,2.5)");
    model.result().export("data2").run();
    model.result().export("data2").run();

    model.label("me_rodliteral_2mm_pingap.mph");

    model.result().create("pg10", "PlotGroup3D");
    model.result().remove("pg10");
    model.result("pg9").run();
    model.result("pg9").feature("iso1").set("coloring", "uniform");
    model.result("pg9").feature("iso1").set("color", "custom");
    model.result("pg9").feature("iso1").set("coloring", "colortable");
    model.result("pg9").feature("iso1").create("col1", "Color");
    model.result("pg9").feature("iso1").feature("col1").set("expr", "sqrt(mfnc.normB^2+es.normE^2)");
    model.result("pg9").run();

    model.view("view1").hideObjects().create("hide2");
    model.view("view1").hideObjects("hide2").init();
    model.view("view1").hideObjects("hide2").add(new String[]{"cyl1"});
    model.view("view1").hideObjects("hide2").add(new String[]{"cyl2"});
    model.view("view1").hideObjects("hide2").add(new String[]{"cyl5"});
    model.view("view1").hideObjects("hide2").add(new String[]{"cyl6"});
    model.view("view1").hideObjects("hide2").add(new String[]{"cyl7"});
    model.view("view1").hideObjects("hide2").add(new String[]{"cyl8"});
    model.view("view1").hideObjects("hide2").add(new String[]{"blk8"});
    model.view("view1").hideObjects("hide2").add(new String[]{"blk7"});

    model.result("pg9").run();
    model.result("pg6").run();
    model.result("pg6").label("XYZaxes");
    model.result("pg9").feature("iso1").feature("col1").set("expr", "3.294e6*(mfnc.normB)^3");
    model.result("pg9").feature("iso1").feature("col1")
         .set("descr", "3.294e6*(mfnc.normB)^3 Permeability of vacuum");
    model.result("pg9").feature("iso1").feature("col1")
         .set("expr", "3.294e6*(mfnc.normB)^3+1.278e4*mfnc.normB^2-47.15*mfnc.normB+0.03636");
    model.result("pg9").run();
    model.result("pg9").feature("iso1").feature("col1").set("rangecoloractive", "on");
    model.result("pg9").feature("iso1").feature("col1").set("rangecolormin", "0");
    model.result("pg9").feature("iso1").feature("col1").set("rangecolormax", "10");
    model.result().duplicate("pg10", "pg9");
    model.result("pg10").label("Loss Surface Color(EB)");
    model.result("pg10").feature("iso1").feature("col1")
         .set("expr", "0.539+306*mfnc.normB+3.4e5*mfnc.normB^2-5.9e-3*mfnc.normB*es.normE+2.53e7*mfnc.normB^3-2.8*mfnc.normB^2*es.normE+3.5e-8*mfnc.normB*es.normE^2-7.9e7*mfnc.normB^4-100*mfnc.normB^3*es.normE+7.5e-6*mfnc.normB^2*es.normE^2-8e-14*mfnc.normB*es.normE^3+170*mfnc.normB^4*es.normE+1e-4*mfnc.normB^3*es.normE^2-6.4e-12*mfnc.normB^2*es.normE^3+6.5e-20*mfnc.normB*es.normE^4");
    model.result("pg10").run();
    model.result("pg10").feature("iso1").feature("col1").set("rangecoloractive", "on");
    model.result("pg10").run();
    model.result().remove("pg10");
    model.result("pg9").feature("iso1")
         .set("expr", "acos((mfnc.Bx*es.Ex + mfnc.By*es.Ey + (mfnc.Bz+1e-2)*es.Ez)/(sqrt(mfnc.Bx^2+mfnc.By^2+(mfnc.Bz+1e-2)^2)*es.normE+1e-10))");
    model.result("pg9").run();
    model.result("pg9").feature("iso1")
         .set("expr", "acos((mfnc.Bx*es.Ex + mfnc.By*es.Ey + (mfnc.Bz+3e-2)*es.Ez)/(sqrt(mfnc.Bx^2+mfnc.By^2+(mfnc.Bz+3e-2)^2)*es.normE+1e-10))");
    model.result("pg9").run();
    model.result("pg9").feature("iso1")
         .set("expr", "acos((mfnc.Bx*es.Ex + mfnc.By*es.Ey + (mfnc.Bz+1e-2)*es.Ez)/(sqrt(mfnc.Bx^2+mfnc.By^2+(mfnc.Bz+1e-2)^2)*es.normE+1e-10))");
    model.result("pg9").feature("iso1").feature("col1")
         .set("expr", "3.294e6*(sqrt(mfnc.Bx^2+mfnc.By^2+(mfnc.Bz+1e-2)^2))^3+1.278e4*(sqrt(mfnc.Bx^2+mfnc.By^2+(mfnc.Bz+1e-2)^2))^2-47.15*(sqrt(mfnc.Bx^2+mfnc.By^2+(mfnc.Bz+1e-2)^2))+0.03636");
    model.result("pg9").run();
    model.result("pg9").feature("iso1").feature("col1").set("rangecolormax", "10");
    model.result("pg9").feature("iso1").feature("col1").set("expr", "10^8*3");
    model.result("pg9").run();
    model.result().numerical().create("gev1", "EvalGlobal");
    model.result().numerical("gev1").set("expr", "sqrt(mfnc.Bx^2+mfnc.By^2+(mfnc.Bz+1e-4)^2)");
    model.result().numerical("gev1").label("bshift");
    model.result().table().create("tbl1", "Table");
    model.result().table("tbl1").comments("bshift (sqrt(mfnc.Bx^2+mfnc.By^2+(mfnc.Bz+1e-4)^2))");
    model.result().numerical("gev1").set("table", "tbl1");
    model.result().numerical("gev1").set("expr", "mfnc.Bx");
    model.result().numerical("gev1").set("table", "tbl1");
    model.result().numerical("gev1").set("expr", "");
    model.result().numerical().create("pev1", "EvalPoint");
    model.result().numerical().remove("gev1");
    model.result().numerical().remove("pev1");
    model.result("pg6").feature("lngr2").set("expr", "");

    model.func().create("an1", "Analytic");
    model.func("an1").set("expr", "");
    model.func("an1").set("args", "bb");
    model.func("an1").set("expr", "sqrt(bb.x^2+bb.y^2+(bb.z+1e-3)^2)");
    model.func("an1").set("funcname", "bn");
    model.func("an1").set("args", "bb,bs");
    model.func("an1").set("expr", "sqrt(bb.x^2+bb.y^2+(bb.z+bs)^2)");

    model.result("pg3").run();
    model.result("pg3").feature("surf1")
         .set("expr", "acos((mfnc.Bx*es.Ex + mfnc.By*es.Ey + mfnc.Bz*es.Ez)/(bn(mfnc.normB,0)*es.normE+1e-10))");

    model.func().create("int1", "Interpolation");
    model.func().remove("an1");
    model.func().remove("int1");

    model.variable().create("var1");
    model.variable("var1").model("mod1");
    model.variable("var1").label("bnorm");
    model.variable("var1").set("bn", "sqrt(mfnc.Bx^2+mfnc.By^2+mfnc.Bz^2)");

    model.result("pg3").feature("surf1")
         .set("expr", "acos((mfnc.Bx*es.Ex + mfnc.By*es.Ey + mfnc.Bz*es.Ez)/(bnorm.bn*es.normE+1e-10))");

    model.sol("sol1").runAll();

    model.probe().create("dom1", "Domain");
    model.probe("dom1").model("mod1");
    model.probe().remove("dom1");

    model.result("pg6").feature("lngr2").set("data", "cln2");
    model.result("pg6").feature("lngr2").set("descr", " ");
    model.result("pg6").feature("lngr2").set("expr", "bn");
    model.result("pg6").run();

    model.variable().create("var2");
    model.variable("var2").set("bn", "mfnc.normB");
    model.variable().remove("var2");

    model.param().set("boffset", "1e-2");
    model.param().descr("boffset", "Offset Bias Field in Tesla");

    model.variable("var1").set("bn", "sqrt(mfnc.Bx^2+mfnc.By^2+(mfnc.Bz+boffset)^2)");

    model.result("pg6").run();

    model.sol("sol1").updateSolution();

    model.result("pg6").run();

    model.param().set("boffset", "1e-2[T]");

    model.sol("sol1").updateSolution();

    model.result("pg6").run();
    model.result("pg6").feature("lngr2").set("unit", "kG");
    model.result("pg6").run();

    model.variable("var1").set("en", "es.normE");
    model.variable("var1")
         .set("ang", "acos((mfnc.Bx*es.Ex + mfnc.By*es.Ey + (mfnc.Bz+boffset)*es.Ez)/(bn*es.normE+1e-10))");

    model.result("pg3").feature("surf1").set("expr", "ang");

    model.sol("sol1").updateSolution();

    model.result("pg3").feature("surf1").set("descr", "ang ");
    model.result("pg3").run();

    model.variable("var1").label("shortcuts");

    model.func().create("an1", "Analytic");
    model.func("an1").model("mod1");
    model.func("an1").set("expr", "x^3+x^2+x+1");

    model.sol("sol1").updateSolution();

    model.result("pg6").feature("lngr2").set("expr", "an1(bn)");
    model.result("pg6").run();
    model.result("pg6").feature("lngr2").set("expr", "bn");
    model.result("pg6").run();

    model.func("an1").set("args", "x,y");
    model.func("an1")
         .set("expr", "1.50919*10^27 (0.1*sqrt(3.05147*10^-47 + 4.79255*10^-46 * b + 9.40877*10^-45 * b^2 + 6.20614*10^-58 * e^2 + 4 sqrt(5.74212*10^-92 * b^2 + 9.01839*10^-91 * b^3 + 3.541*10^-90 * b^4 - 2.97432*10^-104 * b * e^2 + 4.67137*10^-103 * b^2 * e^2 + 1.54064*10^-116 * e^4)) - 0.1*sqrt(3.05147*10^-47 - 4.79255*10^-46 * b + 9.40877*10^-45 * b^2 + 6.20614*10^-58 * e^2 + 4 sqrt(5.74212*10^-92 * b^2 - 9.01839*10^-91 * b^3 + 3.541*10^-90 * b^4 + 2.97432*10^-104 * b * e^2 + 4.67137*10^-103 * b^2 * e^2 + 1.54064*10^-116 * e^4)))");
    model.func("an1").set("args", "b,e");
    model.func("an1").set("funcname", "angap");
    model.func("an1").setIndex("plotargs", ".01", 0, 2);
    model.func("an1").setIndex("plotargs", "3e5", 1, 2);
    model.func("an1")
         .set("expr", "1.50919*10^27 (0.1*sqrt(3.05147*10^-47 + 4.79255*10^-46 * bbb + 9.40877*10^-45 * bbb^2 + 6.20614*10^-58 * eee^2 + 4 sqrt(5.74212*10^-92 * bbb^2 + 9.01839*10^-91 * bbb^3 + 3.541*10^-90 * bbb^4 - 2.97432*10^-104 * bbb * eee^2 + 4.67137*10^-103 * bbb^2 * eee^2 + 1.54064*10^-116 * eee^4)) - 0.1*sqrt(3.05147*10^-47 - 4.79255*10^-46 * bbb + 9.40877*10^-45 * bbb^2 + 6.20614*10^-58 * eee^2 + 4 sqrt(5.74212*10^-92 * bbb^2 - 9.01839*10^-91 * bbb^3 + 3.541*10^-90 * bbb^4 + 2.97432*10^-104 * bbb * eee^2 + 4.67137*10^-103 * bbb^2 * eee^2 + 1.54064*10^-116 * eee^4)))");
    model.func("an1").set("args", "bbb, eee");

    model.result("pg9").feature("iso1").feature("col1").set("expr", "angap(bn,en)");

    model.func("an1")
         .set("expr", "1.50919*10^27 * (0.1*sqrt(3.05147*10^-47 + 4.79255*10^-46 * bbb + 9.40877*10^-45 * bbb^2 + 6.20614*10^-58 * eee^2 + 4 * sqrt(5.74212*10^-92 * bbb^2 + 9.01839*10^-91 * bbb^3 + 3.541*10^-90 * bbb^4 - 2.97432*10^-104 * bbb * eee^2 + 4.67137*10^-103 * bbb^2 * eee^2 + 1.54064*10^-116 * eee^4)) - 0.1*sqrt(3.05147*10^-47 - 4.79255*10^-46 * bbb + 9.40877*10^-45 * bbb^2 + 6.20614*10^-58 * eee^2 + 4 * sqrt(5.74212*10^-92 * bbb^2 - 9.01839*10^-91 * bbb^3 + 3.541*10^-90 * bbb^4 + 2.97432*10^-104 * bbb * eee^2 + 4.67137*10^-103 * bbb^2 * eee^2 + 1.54064*10^-116 * eee^4)))");

    model.result().create("pg10", 2);
    model.result("pg10").set("data", "none");
    model.result("pg10").active(false);
    model.result("pg10").set("titletype", "manual");
    model.result("pg10").set("title", "angap(bbb,eee)");
    model.result().dataset().create("an1_ds1", "Grid2D");
    model.result().dataset("an1_ds1").set("source", "function");
    model.result().dataset("an1_ds1").set("functionlist", "");
    model.result().dataset("an1_ds1").set("function", "all");
    model.result().dataset("an1_ds1").set("par1", "bbb");
    model.result().dataset("an1_ds1").set("parmin1", 0);
    model.result().dataset("an1_ds1").set("parmax1", 1);
    model.result().dataset("an1_ds1").set("par2", "eee");
    model.result().dataset("an1_ds1").set("parmin2", 0);
    model.result().dataset("an1_ds1").set("parmax2", 1);
    model.result("pg10").create("plot1", "Surface");
    model.result("pg10").feature("plot1").create("height1", "Height");
    model.result("pg10").set("edges", "off");
    model.result("pg10").feature("plot1").set("expr", "mod1.angap(root.bbb,root.eee)");
    model.result("pg10").feature("plot1").set("descr", "angap(bbb,eee)");
    model.result("pg10").feature("plot1").set("data", "an1_ds1");
    model.result("pg10").feature("plot1").set("smooth", "none");
    model.result("pg10").active(true);
    model.result("pg10").run();

    model.func("an1").setIndex("plotargs", "1e-2", 0, 2);
    model.func("an1").setIndex("plotargs", "3e5", 1, 2);

    model.sol("sol1").updateSolution();

    model.result("pg9").run();

    model.param().set("boffset", "2e-2[T]");

    model.sol("sol1").updateSolution();

    model.result("pg9").run();

    model.func().create("an2", "Analytic");
    model.func("an2").model("mod1");
    model.func("an2").label("bno");
    model.func("an2").label("Bfield Norm with Offset Parameter");
    model.func("an2").set("funcname", "bno");
    model.func("an2").set("args", "bst");
    model.func("an2").set("expr", "sqrt(mfnc.Bx^2+mfnc.By^2+(bo+mfnc.Bz)^2)");
    model.func("an2").set("args", "bo");

    model.sol("sol1").updateSolution();

    model.result("pg9").feature("iso1").feature("col1").set("expr", "angap(bno(1e-2),en)");

    model.func("an2").set("args", "bst,bo");
    model.func("an2").set("expr", "sqrt(bst.Bx^2+bst.By^2+(bo+bst.Bz)^2)");

    model.sol("sol1").updateSolution();

    model.result("pg9").feature("iso1").feature("col1").set("expr", "angap(bno(mfnc,1e-2),en)");

    model.func("an2").set("expr", "sqrt(bx^2+by^2+(bo+bz)^2)");
    model.func("an2").set("args", "bx,by,bz,bo");

    model.sol("sol1").updateSolution();

    model.result("pg9").feature("iso1").feature("col1").set("expr", "angap(bno(mfnc.Bx,mfnc.By,mfnc.Bz,1e-2),en)");
    model.result("pg9").run();
    model.result("pg9").feature("iso1").feature("col1").set("expr", "angap(bno(mfnc.Bx,mfnc.By,mfnc.Bz,2e-2),en)");
    model.result("pg9").run();
    model.result("pg9").feature("iso1").feature("col1").set("expr", "angap(bno(mfnc.Bx,mfnc.By,mfnc.Bz,3e-2),en)");
    model.result("pg9").run();
    model.result("pg9").feature("iso1").feature("col1").set("expr", "angap(bno(mfnc.Bx,mfnc.By,mfnc.Bz,5e-2),en)");
    model.result("pg9").run();
    model.result("pg9").feature("iso1").feature("col1").set("expr", "angap(bno(mfnc.Bx,mfnc.By,mfnc.Bz,1e-2),en)");
    model.result("pg9").run();
    model.result("pg9").feature("iso1").feature("col1").set("expr", "angap(bno(mfnc.Bx,mfnc.By,mfnc.Bz,1.5e-2),en)");
    model.result("pg9").run();
    model.result("pg9").feature("iso1").feature("col1").set("expr", "angap(bno(mfnc.Bx,mfnc.By,mfnc.Bz,1.5e-2),en)");

    model.func().create("an3", "Analytic");
    model.func("an3").model("mod1");
    model.func("an3").label("Highest Quartic Root");
    model.func("an3").set("funcname", "qr");
    model.func("an3")
         .set("expr", "-(a/4) + 1/ 2 + sqrt(a^2/4 - (2*b)/ 3 + (2^(1/ 3) * (b^2 - 3*a*c + 12*d))/(3*(2*b^3 - 9*a*b*c + 27*c^2 + 27*a^2*d - 72*b*d + sqrt(-4*(b^2 - 3*a*c + 12*d)^3 + (2*b^3 - 9*a*b*c + 27*c^2 + 27*a^2*d - 72*b*d)^2))^(1/3)) + (2*b^3 - 9*a*b*c + 27*c^2 + 27*a^2*d - 72*b*d + sqrt(-4*(b^2 - 3*a*c + 12*d)^3 + (2*b^3 - 9*a*b*c + 27*c^2 + 27*a^2*d - 72*b*d)^2))^(1/3)/(3*2^(1/3))) + 1/2 + sqrt(a^2/2 - (4*b)/ 3 - (2^(1/ 3) * (b^2 - 3*a*c + 12*d))/(3*(2*b^3 - 9*a*b*c + 27*c^2 + 27*a^2*d - 72*b*d + sqrt(-4*(b^2 - 3*a*c + 12*d)^3 + (2*b^3 - 9*a*b*c + 27*c^2 + 27*a^2*d - 72*b*d)^2))^(1/3)) - (2*b^3 - 9*a*b*c + 27*c^2 + 27*a^2*d - 72*b*d + sqrt(-4*(b^2 - 3*a*c + 12*d)^3 + (2*b^3 - 9*a*b*c + 27*c^2 + 27*a^2*d - 72*b*d)^2))^(1/3)/( 3*2^(1/3)) + (-a^3 + 4*a*b - 8*c)/(4 + sqrt(a^2/4 - (2*b)/ 3 + (2^( 1/3) * (b^2 - 3*a*c + 12*d))/(3*(2*b^3 - 9*a*b*c + 27*c^2 + 27*a^2*d - 72*b*d + sqrt(-4*(b^2 - 3*a*c + 12*d)^3 + (2*b^3 - 9*a*b*c + 27*c^2 + 27*a^2*d - 72*b*d)^2))^(1/3)) + (1/( 3*2^(1/3))) * ((2*b^3 - 9*a*b*c + 27*c^2 + 27*a^2*d - 72*b*d + sqrt(-4*(b^2 - 3*a*c + 12*d)^3 + (2*b^3 - 9*a*b*c + 27*c^2 + 27*a^2*d - 72*b*d)^2))^(1/3)))))");
    model.func("an3").set("args", "a,b,c,d");
    model.func("an3")
         .comments("One can obtain this by running the following in Mathematica:\nToRadicals[Root[#1^4+a*#1^3+b*#1^2+c*#1+d &,4]]\n\nI'm not certain it really always gives the \"largest\" root since this isn't even defined well for complex roots.\n\nShould this be a problem, an alternative would be to make a COMSOL function that computes the maximum over the real parts of all four roots.");
    model.func().create("an4", "Analytic");
    model.func("an4").model("mod1");
    model.func("an4").label("Quartic Coefficient A");
    model.func("an4").set("funcname", "f32a");
    model.func("an4")
         .set("expr", "-1.22059*10^-46 - 3.76351*10^-44*bb^2 - 2.48245*10^-57*ee^2*cos(tt)^2 - 2.48245*10^-57*ee^2*sin(tt)^2");
    model.func("an4").set("args", "bb,ee,tt");
    model.func().duplicate("an5", "an4");
    model.func().duplicate("an6", "an5");
    model.func().duplicate("an7", "an6");
    model.func("an5").label("Quartic Coefficient B");
    model.func("an5").set("funcname", "f32b");
    model.func("an6").label("Quartic Coefficient C");
    model.func("an6").set("funcname", "f32c");
    model.func("an7").label("Quartic Coefficient D");
    model.func("an7").set("funcname", "f32d");
    model.func("an5")
         .set("expr", "5.5869*10^-93 + 1.14842*10^-90*bb^2 + 4.17838*10^-88*bb^4 + 2.27254*10^-103*ee^2*cos(tt)^2 - 2.14883*10^-101*bb^2*ee^2*cos(tt)^2 + 1.81796*10^-114*ee^4*cos(tt)^4 + 2.27254*10^-103*ee^2*sin(tt)^2 + 5.51221*10^-101*bb^2*ee^2*sin(tt)^2 + 3.63592*10^-114*ee^4*cos(tt)^2*sin(tt)^2 + 1.81796*10^-114*ee^4*sin(tt)^4");
    model.func("an6")
         .set("expr", "-1.13655*10^-139 + 3.50439*10^-137*bb^2 - 9.94084*10^-135*bb^4 - 1.19939*10^-132*bb^6 - 6.93461*10^-150*ee^2*cos(tt)^2 + 2.33775*10^-147*bb^2*ee^2*cos(tt)^2 + 7.91132*10^-146*bb^4*ee^2*cos(tt)^2 - 1.10949*10^-160*ee^4*cos(tt)^4 + 5.2184*10^-159*bb^2*ee^4*cos(tt)^4 - 3.44212*10^-172*ee^6*cos(tt)^6 - 6.93461*10^-150*ee^2*sin(tt)^2 + 3.99128*10^-148*bb^2*ee^2*sin(tt)^2 - 2.3734*10^-145*bb^4*ee^2*sin(tt)^2 - 2.21898*10^-160*ee^4*cos(tt)^2*sin(tt)^2 - 1.04368*10^-158*bb^2*ee^4*cos(tt)^2*sin(tt)^2 - 1.03264*10^-171*ee^6*cos(tt)^4*sin(tt)^2 - 1.10949*10^-160*ee^4*sin(tt)^4 - 1.56552*10^-158*bb^2*ee^4*sin(tt)^4 - 1.03264*10^-171*ee^6*cos(tt)^2*sin(tt)^4 - 3.44212*10^-172*ee^6*sin(tt)^6");
    model.func("an7")
         .set("expr", "8.6704*10^-187 - 1.06936*10^-183*bb^2 + 3.89069*10^-181*bb^4 - 3.65991*10^-179*bb^6 + 1.01563*10^-177*bb^8 + 7.0536*10^-197*ee^2*cos(tt)^2 - 5.1327*10^-194*bb^2*ee^2*cos(tt)^2 + 7.24236*10^-192*bb^4*ee^2*cos(tt)^2 - 2.67969*10^-190*bb^6*ee^2*cos(tt)^2 + 1.69279*10^-207*ee^4*cos(tt)^4 - 4.77715*10^-205*bb^2*ee^4*cos(tt)^4 + 2.65133*10^-203*bb^4*ee^4*cos(tt)^4 + 1.05036*10^-218*ee^6*cos(tt)^6 - 1.1659*10^-216*bb^2*ee^6*cos(tt)^6 + 1.92261*10^-230*ee^8*cos(tt)^8 + 7.0536*10^-197*ee^2*sin(tt)^2 - 6.35062*10^-194*bb^2*ee^2*sin(tt)^2 + 1.30363*10^-191*bb^4*ee^2*sin(tt)^2 + 2.67969*10^-190*bb^6*ee^2*sin(tt)^2 + 3.38559*10^-207*ee^4*cos(tt)^2*sin(tt)^2 - 1.3376*10^-204*bb^2*ee^4*cos(tt)^2*sin(tt)^2 - 1.76756*10^-203*bb^4*ee^4*cos(tt)^2*sin(tt)^2 + 3.15107*10^-218*ee^6*cos(tt)^4*sin(tt)^2 - 1.1659*10^-216*bb^2*ee^6*cos(tt)^4*sin(tt)^2 + 7.69042*10^-230*ee^8*cos(tt)^6*sin(tt)^2 + 1.69279*10^-207*ee^4*sin(tt)^4 - 8.59887*10^-205*bb^2*ee^4*sin(tt)^4 + 2.65133*10^-203*bb^4*ee^4*sin(tt)^4 + 3.15107*10^-218*ee^6*cos(tt)^2*sin(tt)^4 + 1.1659*10^-216*bb^2*ee^6*cos(tt)^2*sin(tt)^4 + 1.15356*10^-229*ee^8*cos(tt)^4*sin(tt)^4 + 1.05036*10^-218*ee^6*sin(tt)^6 + 1.1659*10^-216*bb^2*ee^6*sin(tt)^6 + 7.69042*10^-230*ee^8*cos(tt)^2*sin(tt)^6 + 1.92261*10^-230*ee^8*sin(tt)^8");
    model.func().create("an8", "Analytic");
    model.func("an8").model("mod1");
    model.func("an8").label("Stark-Zeeman Hamiltonian Energy");
    model.func("an8").set("funcname", "f32energy");
    model.func("an8").set("expr", "0.1*sqrt(qr(f32a(b,e,t),f32b(b,e,t),f32c(b,e,t),f32d(b,e,t)))");
    model.func("an8").set("args", "b,e,t");
    model.func("an8").set("expr", "0.1*sqrt(qr(f32a(b,e,t),f32b(b,e,t),f32c(b,e,t),f32d(b,e,t)))/6.62607e-25");

    model.sol("sol1").updateSolution();

    model.result("pg6").feature("lngr2").set("expr", "f32energy(bn,en,ang)");
    model.result("pg6").run();
    model.result("pg6").feature("lngr2").set("expr", "f32energy(bn,en,ang)-f32energy(0,0,pi/3)");
    model.result("pg6").run();
    model.result("pg6").feature("lngr2").set("expr", "f32energy(bn,en,ang)-f32energy(1e-5,1e-2,pi/3)");
    model.result("pg6").run();
    model.result("pg6").feature("lngr2").set("expr", "(f32energy(bn,en,ang)-f32energy(1e-5,1e-2,pi/3))*10^8");
    model.result("pg6").run();
    model.result("pg6").feature("lngr2").set("expr", "(f32energy(bn,en,ang)-f32energy(1e-5,1e-2,pi/3))*10^23");
    model.result("pg6").run();

    model.func("an3")
         .set("expr", "-(a/4) + (1/2)*sqrt(a^2/4 - (2*b)/3 + (2^(1/3)*(b^2 - 3*a*c + 12*d))/(3*(2*b^3 - 9*a*b*c + 27*c^2 + 27*a^2*d - 72*b*d + sqrt(-4*(b^2 - 3*a*c + 12*d)^3 + (2*b^3 - 9*a*b*c + 27*c^2 + 27*a^2*d - 72*b*d)^2))^(1/3)) + (2*b^3 - 9*a*b*c + 27*c^2 + 27*a^2*d - 72*b*d + sqrt(-4*(b^2 - 3*a*c + 12*d)^3 + (2*b^3 - 9*a*b*c + 27*c^2 + 27*a^2*d - 72*b*d)^2))^(1/3)/(3*2^(1/3))) + (1/2)*sqrt(a^2/2 - (4*b)/3 - (2^(1/3)*(b^2 - 3*a*c + 12*d))/(3*(2*b^3 - 9*a*b*c + 27*c^2 + 27*a^2*d - 72*b*d + sqrt(-4*(b^2 - 3*a*c + 12*d)^3 + (2*b^3 - 9*a*b*c + 27*c^2 + 27*a^2*d - 72*b*d)^2))^(1/3)) - (2*b^3 - 9*a*b*c + 27*c^2 + 27*a^2*d - 72*b*d + sqrt(-4*(b^2 - 3*a*c + 12*d)^3 + (2*b^3 - 9*a*b*c + 27*c^2 + 27*a^2*d - 72*b*d)^2))^(1/3)/( 3*2^(1/3)) + (-a^3 + 4*a*b - 8*c)/(4*sqrt(a^2/4 - (2*b)/3 + (2^(1/3)*(b^2 - 3*a*c + 12*d))/(3*(2*b^3 - 9*a*b*c + 27*c^2 + 27*a^2*d - 72*b*d + sqrt(-4*(b^2 - 3*a*c + 12*d)^3 + (2*b^3 - 9*a*b*c + 27*c^2 + 27*a^2*d - 72*b*d)^2))^(1/3)) + (1/( 3*2^(1/3)))*((2*b^3 - 9*a*b*c + 27*c^2 + 27*a^2*d - 72*b*d + sqrt(-4*(b^2 - 3*a*c + 12*d)^3 + (2*b^3 - 9*a*b*c + 27*c^2 + 27*a^2*d - 72*b*d)^2))^(1/3)))))");

    model.sol("sol1").updateSolution();

    model.result("pg6").run();
    model.result("pg6").feature("lngr2").set("expr", "f32energy(bn,en,ang)");
    model.result("pg6").run();
    model.result("pg6").feature("lngr2").set("expr", "mfnc.normB");
    model.result("pg6").feature("lngr2").set("unit", "kG");
    model.result("pg6").run();
    model.result("pg6").feature("lngr2").set("linecolor", "custom");
    model.result("pg6").feature("lngr2").set("customlinecolor", new double[]{0, 0, 1});
    model.result("pg6").feature("lngr3").set("linecolor", "blue");
    model.result("pg6").feature("lngr3").set("linestyle", "dashed");

    return model;
  }

  public static Model run21(Model model) {
    model.result("pg6").feature("lngr6").set("linestyle", "dashdot");
    model.result("pg6").feature("lngr6").set("linecolor", "blue");
    model.result("pg6").feature("lngr1").set("linecolor", "red");
    model.result("pg6").feature("lngr4").set("linestyle", "dashed");
    model.result("pg6").feature("lngr4").set("linecolor", "red");
    model.result("pg6").feature("lngr5").set("linestyle", "dotted");
    model.result("pg6").feature("lngr5").set("linecolor", "red");
    model.result("pg6").feature("lngr6").set("linestyle", "dotted");
    model.result("pg6").feature("lngr2").setIndex("legends", "|B| X-axis", 0);
    model.result("pg6").feature("lngr3").setIndex("legends", "|B| Y-axis", 0);
    model.result("pg6").feature("lngr6").setIndex("legends", "|B| Z-axis", 0);
    model.result("pg6").feature("lngr1").setIndex("legends", "|E| X-axis", 0);
    model.result("pg6").feature("lngr4").setIndex("legends", "|E| Y-axis", 0);
    model.result("pg6").feature("lngr5").setIndex("legends", "|E| Z-axis", 0);
    model.result("pg6").run();
    model.result().duplicate("pg11", "pg6");
    model.result("pg11").label("StarkZeemanAxes");
    model.result("pg11").feature("lngr2").set("expr", "f32energy(bn,en,ang)");
    model.result("pg11").feature("lngr2").set("unit", "GHz");
    model.result("pg11").run();
    model.result("pg11").feature().remove("lngr1");
    model.result("pg11").feature().remove("lngr4");
    model.result("pg11").feature().remove("lngr5");
    model.result("pg11").feature("lngr3").set("expr", "f32energy(bn,en,ang)");
    model.result("pg11").feature("lngr3").set("unit", "GHz");
    model.result("pg11").feature("lngr6").set("expr", "f32energy(bn,en,ang)");
    model.result("pg11").feature("lngr6").set("unit", "GHz");
    model.result("pg11").run();

    model.variable("var1")
         .set("ang", "acos((mfnc.Bx*es.Ex + mfnc.By*es.Ey + (mfnc.Bz+boffset)*es.Ez)/(bn*en+1e-10))");

    model.result("pg11").run();
    model.result("pg11").feature("lngr6").set("expr", "real(f32energy(bn,en,ang))");
    model.result("pg11").run();
    model.result("pg11").feature("lngr3").set("expr", "real(f32energy(bn,en,ang))");
    model.result("pg11").run();
    model.result("pg11").feature().duplicate("lngr7", "lngr6");
    model.result("pg11").feature("lngr7").label("Diagnostic");

    model.func("an8").set("expr", "0.1*sqrt(real(qr(f32a(b,e,t),f32b(b,e,t),f32c(b,e,t),f32d(b,e,t))))/6.62607e-25");

    model.result("pg11").feature("lngr7").set("expr", "isnan(f32energy(bn,en,ang))*5");
    model.result("pg11").run();
    model.result("pg11").feature("lngr7").set("expr", "isnan(ang)*5");
    model.result("pg11").run();
    model.result("pg11").feature("lngr6").set("expr", "real(f32energy(bn+1e-2,en,ang))");
    model.result("pg11").run();
    model.result("pg11").feature("lngr6").set("expr", "real(f32energy(bn+1e-1,en,ang))");
    model.result("pg11").run();
    model.result("pg11").feature("lngr6").set("expr", "real(f32energy(bn,en,ang))");
    model.result("pg11").run();
    model.result("pg11").feature("lngr7").set("expr", "isnan(f32energy(bn,en,ang))");
    model.result("pg11").run();
    model.result("pg11").feature("lngr7").set("expr", "5*isnan(f32a(bn,en,ang))");
    model.result("pg11").run();
    model.result("pg11").feature("lngr7").set("expr", "5*isnan(f32b(bn,en,ang))");
    model.result("pg11").run();
    model.result("pg11").feature("lngr7").set("expr", "5*isnan(f32c(bn,en,ang))");
    model.result("pg11").run();
    model.result("pg11").feature("lngr7").set("expr", "5*isnan(f32d(bn,en,ang))");
    model.result("pg11").run();
    model.result("pg11").feature("lngr7").set("expr", "5*(0==f32d(bn,en,ang))");
    model.result("pg11").run();
    model.result("pg11").feature("lngr7").set("expr", "5*(0==f32c(bn,en,ang))");
    model.result("pg11").run();
    model.result("pg11").feature("lngr7").set("expr", "5*(0==f32b(bn,en,ang))");
    model.result("pg11").run();
    model.result("pg11").feature("lngr7").set("expr", "5*(0==f32a(bn,en,ang))");
    model.result("pg11").run();
    model.result("pg11").feature("lngr7").set("expr", "5*(10^-100>=f32a(bn,en,ang))");
    model.result("pg11").run();
    model.result("pg11").feature("lngr7").set("expr", "5*(10^-200>=f32a(bn,en,ang))");
    model.result("pg11").run();
    model.result("pg11").feature("lngr7").set("expr", "5*(10^-100>=abs(f32a(bn,en,ang)))");
    model.result("pg11").run();
    model.result("pg11").feature("lngr7").set("expr", "5*(10^-100>=abs(f32b(bn,en,ang)))");
    model.result("pg11").run();
    model.result("pg11").feature("lngr7").set("expr", "5*(10^-50>=abs(f32b(bn,en,ang)))");
    model.result("pg11").run();
    model.result("pg11").feature("lngr7").set("expr", "5*(10^-50>=abs(f32c(bn,en,ang)))");
    model.result("pg11").run();
    model.result("pg11").feature("lngr7").set("expr", "5*(10^-50>=abs(f32d(bn,en,ang)))");
    model.result("pg11").run();
    model.result("pg11").feature("lngr7").set("expr", "5*(10^-100>=abs(f32d(bn,en,ang)))");
    model.result("pg11").run();
    model.result("pg11").feature("lngr7").set("expr", "5*(10^-200>=abs(f32d(bn,en,ang)))");
    model.result("pg11").run();
    model.result("pg11").feature("lngr7").set("expr", "5*(10^-150>=abs(f32d(bn,en,ang)))");
    model.result("pg11").run();
    model.result("pg11").feature("lngr7").set("expr", "5*(10^-180>=abs(f32d(bn,en,ang)))");
    model.result("pg11").run();
    model.result("pg11").feature("lngr7").active(false);
    model.result("pg11").feature("lngr7").active(true);
    model.result("pg11").run();
    model.result("pg11").feature("lngr7").active(false);
    model.result("pg11").run();

    model.func("an4")
         .set("expr", "-278.008 - 85719.7*bb^2 - 5.65417*10^-9*ee^2*cos(tt)^2 - 5.65417*10^-9*ee^2*sin(tt)^2");
    model.func("an5")
         .set("expr", "28983.2 + 5.9577*10^6*bb^2 + 2.16762*10^9*bb^4 + 1.17893*10^-6*ee^2*cos(tt)^2 - 0.000111475*bb^2*ee^2*cos(tt)^2 + 9.43106*10^-18*ee^4*cos(tt)^4 + 1.17893*10^-6*ee^2*sin(tt)^2 + 0.000285958*bb^2*ee^2*sin(tt)^2 + 1.88621*10^-17*ee^4*cos(tt)^2*sin(tt)^2 + 9.43106*10^-18*ee^4*sin(tt)^4");
    model.func("an6")
         .set("expr", "-1.34293*10^6 + 4.14072*10^8*bb^2 - 1.17459*10^11*bb^4 - 1.41718*10^13*bb^6 - 0.0000819381*ee^2*cos(tt)^2 + 0.0276224*bb^2*ee^2*cos(tt)^2 + 0.934788*bb^4*ee^2*cos(tt)^2 - 1.31096*10^-15*ee^4*cos(tt)^4 + 6.16597*10^-14*bb^2*ee^4*cos(tt)^4 - 4.06715*10^-27*ee^6*cos(tt)^6 - 0.0000819381*ee^2*sin(tt)^2 + 0.00471602*bb^2*ee^2*sin(tt)^2 - 2.80436*bb^4*ee^2*sin(tt)^2 - 2.62191*10^-15*ee^4*cos(tt)^2*sin(tt)^2 - 1.23319*10^-13*bb^2*ee^4*cos(tt)^2*sin(tt)^2 - 1.22015*10^-26*ee^6*cos(tt)^4*sin(tt)^2 - 1.31096*10^-15*ee^4*sin(tt)^4 - 1.84979*10^-13*bb^2*ee^4*sin(tt)^4 - 1.22015*10^-26*ee^6*cos(tt)^2*sin(tt)^4 - 4.06715*10^-27*ee^6*sin(tt)^6");
    model.func("an7")
         .set("expr", "2.33341*10^7 - 2.87789*10^10*bb^2 + 1.04708*10^13*bb^4 - 9.84968*10^14*bb^6 + 2.7333*10^16*bb^8 + 0.00189829*ee^2*cos(tt)^2 - 1.38133*bb^2*ee^2*cos(tt)^2 + 194.909*bb^4*ee^2*cos(tt)^2 - 7211.68*bb^6*ee^2*cos(tt)^2 + 4.55571*10^-14*ee^4*cos(tt)^4 - 1.28564*10^-11*bb^2*ee^4*cos(tt)^4 + 7.13536*10^-10*bb^4*ee^4*cos(tt)^4 + 2.82675*10^-25*ee^6*cos(tt)^6 - 3.13771*10^-23*bb^2*ee^6*cos(tt)^6 + 5.17419*10^-37*ee^8*cos(tt)^8 + 0.00189829*ee^2*sin(tt)^2 - 1.7091*bb^2*ee^2*sin(tt)^2 + 350.836*bb^4*ee^2*sin(tt)^2 + 7211.68*bb^6*ee^2*sin(tt)^2 + 9.11142*10^-14*ee^4*cos(tt)^2*sin(tt)^2 - 3.5998*10^-11*bb^2*ee^4*cos(tt)^2*sin(tt)^2 - 4.75691*10^-10*bb^4*ee^4*cos(tt)^2*sin(tt)^2 + 8.48026*10^-25*ee^6*cos(tt)^4*sin(tt)^2 - 3.13771*10^-23*bb^2*ee^6*cos(tt)^4*sin(tt)^2 + 2.06967*10^-36*ee^8*cos(tt)^6*sin(tt)^2 + 4.55571*10^-14*ee^4*sin(tt)^4 - 2.31416*10^-11*bb^2*ee^4*sin(tt)^4 + 7.13536*10^-10*bb^4*ee^4*sin(tt)^4 + 8.48026*10^-25*ee^6*cos(tt)^2*sin(tt)^4 + 3.13771*10^-23*bb^2*ee^6*cos(tt)^2*sin(tt)^4 + 3.10451*10^-36*ee^8*cos(tt)^4*sin(tt)^4 + 2.82675*10^-25*ee^6*sin(tt)^6 + 3.13771*10^-23*bb^2*ee^6*sin(tt)^6 + 2.06967*10^-36*ee^8*cos(tt)^2*sin(tt)^6 + 5.17419*10^-37*ee^8*sin(tt)^8");
    model.func("an8").set("expr", "0.1*sqrt(real(qr(f32a(b,e,t),f32b(b,e,t),f32c(b,e,t),f32d(b,e,t))))");

    model.sol("sol1").updateSolution();

    model.result("pg11").run();
    model.result("pg11").feature("lngr7").set("expr", "5*isnan(f32energy(bn,en,ang))");
    model.result("pg11").feature("lngr7").active(true);
    model.result("pg11").run();
    model.result("pg11").feature("lngr7").set("data", "cln2");
    model.result("pg11").feature("lngr7").set("xdataexpr", "Xaxis");
    model.result("pg11").run();
    model.result("pg11").feature("lngr7").set("expr", "5*isnan(f32a(bn,en,ang))");
    model.result("pg11").run();
    model.result("pg11").feature("lngr7").set("expr", "5*isnan(f32b(bn,en,ang))");
    model.result("pg11").run();
    model.result("pg11").feature("lngr7").set("expr", "5*isnan(f32c(bn,en,ang))");
    model.result("pg11").run();
    model.result("pg11").feature("lngr7").set("expr", "5*isnan(f32d(bn,en,ang))");
    model.result("pg11").run();
    model.result("pg11").feature("lngr7").set("expr", "5*isreal(f32d(bn,en,ang))");

    model.func("an3")
         .set("expr", "-real(a/4) + real(1/2)*sqrtreal(a^2/4 - real(2*b)/3 + real(2^real(1/3)*real(b^2 - 3*a*c + 12*d))/real(3*real(2*b^3 - 9*a*b*c + 27*c^2 + 27*a^2*d - 72*b*d + sqrtreal(-4*real(b^2 - 3*a*c + 12*d)^3 + real(2*b^3 - 9*a*b*c + 27*c^2 + 27*a^2*d - 72*b*d)^2))^real(1/3)) + real(2*b^3 - 9*a*b*c + 27*c^2 + 27*a^2*d - 72*b*d + sqrtreal(-4*real(b^2 - 3*a*c + 12*d)^3 + real(2*b^3 - 9*a*b*c + 27*c^2 + 27*a^2*d - 72*b*d)^2))^real(1/3)/real(3*2^real(1/3))) + real(1/2)*sqrtreal(a^2/2 - real(4*b)/3 - real(2^real(1/3)*real(b^2 - 3*a*c + 12*d))/real(3*real(2*b^3 - 9*a*b*c + 27*c^2 + 27*a^2*d - 72*b*d + sqrtreal(-4*real(b^2 - 3*a*c + 12*d)^3 + real(2*b^3 - 9*a*b*c + 27*c^2 + 27*a^2*d - 72*b*d)^2))^real(1/3)) - real(2*b^3 - 9*a*b*c + 27*c^2 + 27*a^2*d - 72*b*d + sqrtreal(-4*real(b^2 - 3*a*c + 12*d)^3 + real(2*b^3 - 9*a*b*c + 27*c^2 + 27*a^2*d - 72*b*d)^2))^real(1/3)/real( 3*2^real(1/3)) + real(-a^3 + 4*a*b - 8*c)/real(4*sqrtreal(a^2/4 - real(2*b)/3 + real(2^real(1/3)*real(b^2 - 3*a*c + 12*d))/real(3*real(2*b^3 - 9*a*b*c + 27*c^2 + 27*a^2*d - 72*b*d + sqrtreal(-4*real(b^2 - 3*a*c + 12*d)^3 + real(2*b^3 - 9*a*b*c + 27*c^2 + 27*a^2*d - 72*b*d)^2))^real(1/3)) + real(1/real( 3*2^real(1/3)))*real(real(2*b^3 - 9*a*b*c + 27*c^2 + 27*a^2*d - 72*b*d + sqrtreal(-4*real(b^2 - 3*a*c + 12*d)^3 + real(2*b^3 - 9*a*b*c + 27*c^2 + 27*a^2*d - 72*b*d)^2))^real(1/3)))))");
    model.func().create("an9", "Analytic");
    model.func("an9").model("mod1");
    model.func("an9").label("sqrt checker");
    model.func("an9").set("funcname", "sqrtreal");
    model.func("an9").set("expr", "sqrt(real(x))");

    model.sol("sol1").updateSolution();

    model.result("pg11").feature("lngr7").set("expr", "isnan(f32energy(bn,en,ang))*5");
    model.result("pg11").run();

    model.func("an3")
         .set("expr", "-(a/4) + (1/2)*sqrt(a^2/4 - (2*b)/3 + (2^(1/3)*(b^2 - 3*a*c + 12*d))/(3*(2*b^3 - 9*a*b*c + 27*c^2 + 27*a^2*d - 72*b*d + sqrt(-4*(b^2 - 3*a*c + 12*d)^3 + (2*b^3 - 9*a*b*c + 27*c^2 + 27*a^2*d - 72*b*d)^2))^(1/3)) + (2*b^3 - 9*a*b*c + 27*c^2 + 27*a^2*d - 72*b*d + sqrt(-4*(b^2 - 3*a*c + 12*d)^3 + (2*b^3 - 9*a*b*c + 27*c^2 + 27*a^2*d - 72*b*d)^2))^(1/3)/(3*2^(1/3))) + (1/2)*sqrt(a^2/2 - (4*b)/3 - (2^(1/3)*(b^2 - 3*a*c + 12*d))/(3*(2*b^3 - 9*a*b*c + 27*c^2 + 27*a^2*d - 72*b*d + sqrt(-4*(b^2 - 3*a*c + 12*d)^3 + (2*b^3 - 9*a*b*c + 27*c^2 + 27*a^2*d - 72*b*d)^2))^(1/3)) - (2*b^3 - 9*a*b*c + 27*c^2 + 27*a^2*d - 72*b*d + sqrt(-4*(b^2 - 3*a*c + 12*d)^3 + (2*b^3 - 9*a*b*c + 27*c^2 + 27*a^2*d - 72*b*d)^2))^(1/3)/( 3*2^(1/3)) + (-a^3 + 4*a*b - 8*c)/(4*sqrt(a^2/4 - (2*b)/3 + (2^(1/3)*(b^2 - 3*a*c + 12*d))/(3*(2*b^3 - 9*a*b*c + 27*c^2 + 27*a^2*d - 72*b*d + sqrt(-4*(b^2 - 3*a*c + 12*d)^3 + (2*b^3 - 9*a*b*c + 27*c^2 + 27*a^2*d - 72*b*d)^2))^(1/3)) + (1/( 3*2^(1/3)))*((2*b^3 - 9*a*b*c + 27*c^2 + 27*a^2*d - 72*b*d + sqrt(-4*(b^2 - 3*a*c + 12*d)^3 + (2*b^3 - 9*a*b*c + 27*c^2 + 27*a^2*d - 72*b*d)^2))^(1/3)))))");

    model.sol("sol1").updateSolution();

    model.result("pg11").run();
    model.result("pg11").feature("lngr2").set("expr", "real(f32energy(bn,en,ang))");
    model.result("pg11").run();
    model.result("pg11").feature("lngr7").set("expr", "isnan(0)*5");
    model.result("pg11").run();
    model.result("pg11").feature("lngr7").set("expr", "isnan((-1)^(1/3))*5");
    model.result("pg11").run();
    model.result("pg11").run();
    model.result().duplicate("pg12", "pg11");
    model.result("pg12").label("Check Coeffs");
    model.result("pg11").feature("lngr2").set("expr", "f32a(bn,en,ang)");
    model.result("pg11").feature("lngr3").set("expr", "f32b(bn,en,ang)");
    model.result("pg11").feature("lngr3").set("data", "cln2");
    model.result("pg11").feature("lngr3").set("xdataexpr", "Xaxis");
    model.result("pg11").feature("lngr6").set("expr", "real(f32c(bn,en,ang))");
    model.result("pg11").feature("lngr6").set("data", "cln2");
    model.result("pg11").feature("lngr6").set("xdataexpr", "Xaxis");
    model.result("pg11").feature().remove("lngr7");
    model.result("pg11").run();
    model.result("pg11").run();
    model.result("pg11").label("StarkZeemanAxesoeua");
    model.result("pg12").label("StarkZeemanAxes");
    model.result("pg11").label("CheckCoeffs");
    model.result("pg11").feature("lngr2").set("expr", "f32b(bn,en,ang)");
    model.result("pg11").run();
    model.result("pg11").run();
    model.result("pg11").feature("lngr2").set("expr", "f32a(bn,en,ang)");
    model.result("pg11").feature("lngr3").set("expr", "f32a(bn,en,ang)");
    model.result("pg11").run();
    model.result("pg11").feature("lngr3").set("expr", "real(f32a(bn,en,ang))");
    model.result("pg11").run();

    model.func("an4")
         .set("expr", "-278.008 - 85719.7*bb^2 - 5.65417*(10^-9)*ee^2*cos(tt)^2 - 5.65417*(10^-9)*ee^2*sin(tt)^2");

    model.result("pg11").feature("lngr2").set("expr", "abs(f32a(bn,en,ang))");
    model.result("pg11").feature("lngr3").set("expr", "abs(f32b(bn,en,ang))");
    model.result("pg11").feature("lngr6").set("expr", "abs(f32c(bn,en,ang))");
    model.result("pg11").run();
    model.result("pg11").feature("lngr2").setIndex("legends", "f32a ceoff", 0);
    model.result("pg11").feature("lngr3").setIndex("legends", "f32b coeff", 0);
    model.result("pg11").feature("lngr2").setIndex("legends", "f32a coeff", 0);
    model.result("pg11").feature("lngr6").setIndex("legends", "f32c coeff", 0);
    model.result("pg11").feature().duplicate("lngr7", "lngr6");
    model.result("pg11").feature("lngr7").setIndex("legends", "f32d coeff", 0);
    model.result("pg11").feature("lngr7").set("expr", "abs(f32d(bn,en,ang))");
    model.result("pg11").run();
    model.result("pg5").feature("lngr1").set("expr", "qr(0.1,0.1,0.1,0.1)");
    model.result("pg5").run();
    model.result("pg5").feature("lngr1").set("expr", "qr(4,6,4,0)");
    model.result("pg5").run();
    model.result("pg5").feature("lngr1").set("expr", "isnan(qr(4,6,4,0))");
    model.result("pg5").run();
    model.result("pg5").feature("lngr1").set("expr", "isnan(qr(4,6,4,.9))");
    model.result("pg5").run();

    model.func("an3").set("complex", "on");

    model.result("pg5").run();

    model.sol("sol1").updateSolution();

    model.result("pg5").run();
    model.result("pg5").feature("lngr1").set("expr", "qr(4,6,4,.9)");
    model.result("pg5").run();
    model.result("pg12").run();
    model.result("pg9").run();

    model.func("an2").set("expr", "sqrt(mfnc.Bx^2+by^2+(bo+bz)^2)");
    model.func("an2").set("args", "by, bz, bo");

    model.sol("sol1").updateSolution();

    model.result("pg9").feature("iso1").feature("col1").set("expr", "angap(bno(mfnc.By,mfnc.Bz,1.5e-2),en)");

    model.variable("var1").set("bx", "mfnc.Bx");
    model.variable("var1").set("by", "mfnc.By");
    model.variable("var1").set("bz", "mfnc.Bz");

    model.result("pg9").feature("iso1").feature("col1").set("expr", "angap(bno(bx,by,bz,1.5e-2),en)");

    model.func("an2").set("expr", "sqrt(bx^2+by^2+(bo+bz)^2)");
    model.func("an2").set("args", "bo");

    model.sol("sol1").updateSolution();

    model.result("pg9").feature("iso1").feature("col1").set("expr", "angap(bno(1.5e-2),en)");

    model.func("an2").set("args", "bx,by,bz,bo");

    model.result("pg9").feature("iso1").feature("col1").set("expr", "angap(bno(bx,by,bz,1.5e-2),en)");

    model.sol("sol1").updateSolution();

    model.result("pg9").run();

    model.func().create("an10", "Analytic");
    model.func("an10").model("mod1");
    model.func("an10").label("Boltzmann Weight");
    model.func("an10").set("expr", "exp(-(f32nergy(bb,ee,tt)");

    model.result("pg9").feature("iso1").feature("col1")
         .set("expr", "angap(bno(bx,by,bz,1.5e-2),en)+f32energy(bno(bx,by,bz,1.5e-2),en,ang)");

    model.func().duplicate("an11", "an2");
    model.func("an11").label("Angle with offset");
    model.func("an11").set("funcname", "ano");
    model.func("an11").set("expr", "acos((bx*ex + by*ey + (mfnc.Bz+boffset)*es.Ez)/(bn*en+1e-10))");
    model.func().remove("an11");

    model.result("pg9").feature("iso1").feature("col1").set("expr", "angap(bn,en)+f32energy(bn,en,ang)");
    model.result("pg9").run();
    model.result("pg9").feature("iso1").feature("col1").set("expr", "f32energy(bn,en,ang)");
    model.result("pg9").run();

    model.probe().create("pdom1", "DomainPoint");
    model.probe("pdom1").model("mod1");
    model.probe("pdom1").label("Geometry Center");
    model.probe("pdom1").set("depthpointnormal", "0");
    model.probe("pdom1").set("method", "pointdir");
    model.probe("pdom1").set("depthpointdir", "0");
    model.probe("pdom1").set("frame", "geometry");
    model.probe().create("pbnd1", "BoundaryPoint");
    model.probe("pbnd1").model("mod1");
    model.probe("pbnd1").selection("dom").geom("geom1", 2);
    model.probe().remove("pbnd1");
    model.probe("pdom1").feature("ppb1").set("expr", "f32energy(bn,en,ang)");

    model.func("an10").set("expr", "exp(-(f32nergy(bb,ee,tt)-zz)/(1.38e-23*5e-2/6.62607e-25))");
    model.func("an10").set("args", "bb,ee,tt,zz");
    model.func("an10").set("funcname", "bw");

    model.sol("sol1").updateSolution();

    model.result("pg9").feature("iso1").feature("col1").set("descr", "f32energy(bn,en,ang) Probe variable ppb1");
    model.result("pg9").feature("iso1").feature("col1").set("expr", "f32energy(bn,en,ang)-ppb1");
    model.result("pg9").run();
    model.result("pg9").feature().duplicate("iso2", "iso1");
    model.result("pg9").feature("iso2").feature("col1").set("expr", "angap(bn,en)");
    model.result("pg9").run();
    model.result().duplicate("pg13", "pg9");
    model.result("pg9").feature("iso1").feature().remove("col1");
    model.result("pg9").feature().remove("iso1");
    model.result("pg9").run();
    model.result("pg13").feature().remove("iso2");
    model.result("pg13").run();
    model.result("pg13").set("allowtableupdate", false);
    model.result("pg13")
         .set("title", "Isosurface: acos((mfnc.Bx*es.Ex + mfnc.By*es.Ey + (mfnc.Bz+1e-2)*es.Ez)/(sqrt(mfnc.Bx^2+mfnc.By^2+(mfnc.Bz+1e-2)^2)*es.normE+1e-10)) (rad)");
    model.result("pg13").set("hasbeenplotted", true);
    model.result("pg13").feature("iso1").feature("col1").set("rangeunit", "");
    model.result("pg13").feature("iso1").feature("col1").set("rangedatamin", 0.020478797333983847);
    model.result("pg13").feature("iso1").feature("col1").set("rangedatamax", 29.25278811669248);
    model.result("pg13").feature("iso1").feature("col1").set("rangedataactive", "off");
    model.result("pg13").feature("iso1").feature("col1")
         .set("rangeactualminmax", new double[]{0.020478797333983847, 29.25278811669248});
    model.result("pg13").feature("iso1").set("hasbeenplotted", true);
    model.result("pg13").set("renderdatacached", false);
    model.result("pg13").set("allowtableupdate", true);
    model.result("pg13").set("renderdatacached", true);
    model.result().table().create("evl3", "Table");
    model.result().table("evl3").comments("Interactive 3D values");
    model.result().table("evl3").label("Evaluation 3D");
    model.result().table("evl3")
         .addRow(new double[]{0.015826131359547774, -5.222533791626738E-4, 1.1691454608560519, 2.547229131198209});

    model.param().set("boffset", "3e-2[T]");

    model.sol("sol1").updateSolution();

    model.result("pg9").run();
    model.result("pg9").set("allowtableupdate", false);
    model.result("pg9")
         .set("title", "Isosurface: acos((mfnc.Bx*es.Ex + mfnc.By*es.Ey + (mfnc.Bz+1e-2)*es.Ez)/(sqrt(mfnc.Bx^2+mfnc.By^2+(mfnc.Bz+1e-2)^2)*es.normE+1e-10)) (rad)");
    model.result("pg9").set("hasbeenplotted", true);
    model.result("pg9").feature("iso2").feature("col1").set("rangeunit", "");
    model.result("pg9").feature("iso2").feature("col1").set("rangedatamin", 0.14407853697378156);
    model.result("pg9").feature("iso2").feature("col1").set("rangedatamax", 1659.7154396032292);
    model.result("pg9").feature("iso2").feature("col1").set("rangedataactive", "off");
    model.result("pg9").feature("iso2").feature("col1")
         .set("rangeactualminmax", new double[]{0.14407853697378156, 1659.7154396032292});
    model.result("pg9").feature("iso2").set("hasbeenplotted", true);
    model.result("pg9").set("renderdatacached", false);
    model.result("pg9").set("allowtableupdate", true);
    model.result("pg9").set("renderdatacached", true);
    model.result().table("evl3")
         .addRow(new double[]{0.004122912431214709, 6.105181797426695E-4, 1.0280696785525296, 6.973424281341436});
    model.result().table("evl3")
         .addRow(new double[]{0.004122912431214709, 6.105181797426695E-4, 1.0280696785525296, 6.973424281341436});
    model.result("pg13").run();
    model.result("pg13").set("allowtableupdate", false);
    model.result("pg13")
         .set("title", "Isosurface: acos((mfnc.Bx*es.Ex + mfnc.By*es.Ey + (mfnc.Bz+1e-2)*es.Ez)/(sqrt(mfnc.Bx^2+mfnc.By^2+(mfnc.Bz+1e-2)^2)*es.normE+1e-10)) (rad)");
    model.result("pg13").set("hasbeenplotted", true);
    model.result("pg13").feature("iso1").feature("col1").set("rangeunit", "");
    model.result("pg13").feature("iso1").feature("col1").set("rangedatamin", 0.012716745188215603);
    model.result("pg13").feature("iso1").feature("col1").set("rangedatamax", 29.328603343287785);
    model.result("pg13").feature("iso1").feature("col1").set("rangedataactive", "off");
    model.result("pg13").feature("iso1").feature("col1")
         .set("rangeactualminmax", new double[]{0.012716745188215603, 29.328603343287785});
    model.result("pg13").feature("iso1").set("hasbeenplotted", true);
    model.result("pg13").set("renderdatacached", false);
    model.result("pg13").set("allowtableupdate", true);
    model.result("pg13").set("renderdatacached", true);
    model.result().table("evl3")
         .addRow(new double[]{-0.009341238833193932, -4.199701349800744E-4, 1.2749598787712557, 2.968740861540443});
    model.result().table("evl3")
         .addRow(new double[]{-0.02017635752481875, -0.0012410239225680852, 1.3235737144872197, 3.2528013954413764});
    model.result().table("evl3")
         .addRow(new double[]{-0.05717374395610045, -0.002028441380748869, 1.0268457951600811, 1.9180542064023254});
    model.result("pg12").run();
    model.result("pg12").feature().remove("lngr7");
    model.result("pg12").run();
    model.result("pg12").feature("lngr2").setIndex("legends", "Potential Energy along X-axis", 0);
    model.result("pg12").feature("lngr3").setIndex("legends", "Along Y-axis", 0);
    model.result("pg12").feature("lngr6").setIndex("legends", "Along Z-axis", 0);
    model.result("pg12").set("ylabel", "Stark-Zeeman Energy, Relative to trap center (GHz)");
    model.result("pg12").feature("lngr2").set("expr", "real(f32energy(bn,en,ang))-ppb1");
    model.result("pg12").feature("lngr3").set("expr", "real(f32energy(bn,en,ang))-ppb2");
    model.result("pg12").feature("lngr6").set("expr", "real(f32energy(bn,en,ang))-ppb1");
    model.result("pg12").feature("lngr3").set("expr", "real(f32energy(bn,en,ang))-ppb1");
    model.result("pg12").run();
    model.result("pg6").run();
    model.result("pg13").label("Energy on Loss Surface");
    model.result().duplicate("pg14", "pg9");
    model.result().move("pg14", 6);
    model.result("pg14").label("Angle Change on Loss Surface");
    model.result("pg14").feature("iso2").feature("col1")
         .set("expr", "acos((mfnc.Bx*es.Ex + mfnc.By*es.Ey + (mfnc.Bz+1e-2)*es.Ez)/(sqrt(mfnc.Bx^2+mfnc.By^2+(mfnc.Bz+1e-2)^2)*es.normE+1e-10))");
    model.result("pg11").run();
    model.result("pg5").feature("lngr1").set("expr", "bx");
    model.result("pg5").run();
    model.result("pg5").feature("lngr1").set("expr", "d(bx,x)");
    model.result("pg5").run();
    model.result("pg5").feature("lngr1").set("smooth", "everywhere");
    model.result("pg5").run();
    model.result("pg5").feature("lngr1").set("smooth", "none");
    model.result("pg5").feature("lngr1").set("expr", "0.5*d(bx,x)");
    model.result("pg5").run();
    model.result("pg5").feature("lngr1").set("expr", "0.5*d(d(bx,x),x)");
    model.result("pg5").run();
    model.result("pg5").feature("lngr1").set("expr", "0.5*d(d(es.Ez,z),z)");
    model.result("pg5").run();
    model.result("pg5").feature("lngr1").set("expr", "0.5*d(es.Ez,z)");
    model.result("pg5").run();
    model.result("pg5").feature("lngr1").set("expr", "0.5*d(es.Ez,z)");
    model.result("pg5").run();
    model.result("pg5").feature("lngr1").set("expr", "0.5*d(d(es.Ez,z),z)");
    model.result("pg5").run();
    model.result("pg5").feature("lngr1").set("smooth", "everywhere");
    model.result("pg5").run();
    model.result("pg5").feature("lngr1").set("expr", "0.5*d(d(es.normE,z),z)");
    model.result("pg5").run();
    model.result("pg5").feature("lngr1").set("expr", "0.5*d(es.normE,z)");
    model.result("pg5").run();
    model.result("pg5").feature("lngr1").set("expr", "es.normE");
    model.result("pg5").run();
    model.result("pg5").feature().duplicate("lngr2", "lngr1");
    model.result("pg5").feature("lngr2").set("expr", "d(d(es.normE,z),z)*1e-10");
    model.result("pg5").run();
    model.result("pg5").feature("lngr2").set("expr", "d(d(es.normE,z),z)*1e-5");
    model.result("pg5").run();
    model.result("pg5").feature("lngr2").set("expr", "d(d(es.normE,z),z)*1e-5+es.normE");
    model.result("pg5").run();
    model.result("pg5").feature("lngr2").set("expr", "d(d(es.normE,z),z)*1e-7+es.normE");
    model.result("pg5").run();
    model.result("pg5").feature("lngr2").set("expr", "d(d(es.normE,z),z)*1e-6+es.normE");
    model.result("pg5").run();
    model.result("pg5").feature("lngr2").set("expr", "d(d(es.normE,z),z)*5e-7+es.normE");
    model.result("pg5").run();
    model.result("pg14").feature("iso2").feature("col1").set("expr", "d(ang,x)");
    model.result("pg14").run();
    model.result("pg14").feature("iso2").feature("col1").set("rangecoloractive", "off");
    model.result("pg14").run();
    model.result("pg14").feature("iso2").feature("col1").set("expr", "sqrt(d(ang,x)^2+d(ang,y)^2+d(ang,z)^2)");
    model.result("pg14").run();

    model.func("an1").label("Gap assuming pi/2");

    model.study("std1").create("param", "Parametric");
    model.study("std1").feature("param").setIndex("pname", "rd", 0);
    model.study("std1").feature("param").setIndex("plistarr", "", 0);
    model.study("std1").feature("param").setIndex("punit", "", 0);
    model.study("std1").feature("param").setIndex("pname", "rd", 0);
    model.study("std1").feature("param").setIndex("plistarr", "", 0);
    model.study("std1").feature("param").setIndex("punit", "", 0);
    model.study("std1").feature("param").setIndex("pname", "boffset", 0);
    model.study("std1").feature("param").setIndex("plistarr", "range(0,.05,.005)", 0);

    model.sol("sol1").updateSolution();
    model.sol("sol1").feature("s1").create("p1", "Parametric");
    model.sol("sol1").feature("s1").feature("p1").set("pname", new String[]{"boffset"});
    model.sol("sol1").feature("s1").feature("p1").set("plistarr", new String[]{"range(0,.05,.005)"});
    model.sol("sol1").feature("s1").feature("p1").set("sweeptype", "sparse");
    model.sol("sol1").feature("s1").feature("p1").set("preusesol", "no");
    model.sol("sol1").feature("s1").feature("p1").set("pcontinuationmode", "no");
    model.sol("sol1").feature("s1").feature("p1").set("plot", "off");
    model.sol("sol1").feature("s1").feature("p1").set("plotgroup", "pg6");
    model.sol("sol1").feature("s1").feature("p1").set("probesel", "all");
    model.sol("sol1").feature("s1").feature("p1").set("probes", new String[]{"pdom1"});
    model.sol("sol1").feature("s1").feature("p1").set("control", "param");

    model.probe("pdom1").genResult("none");

    model.sol("sol1").runAll();

    model.study("std1").feature("param").setIndex("plistarr", "range(0,.005,.05)", 0);

    model.probe("pdom1").genResult("none");

    model.study("std1").feature().remove("param");

    model.variable("var1").rename("bn", "bn0");
    model.variable("var1").set("bn0", "sqrt(mfnc.Bx^2+mfnc.By^2+(mfnc.Bz+boffset)^2)");
    model.variable("var1").rename("ang", "ang0");
    model.variable("var1")
         .set("ang0", "acos((mfnc.Bx*es.Ex + mfnc.By*es.Ey + (mfnc.Bz+boffset)*es.Ez)/(bn*en+1e-10))");
    model.variable("var1").set("bn0", "sqrt(mfnc.Bx^2+mfnc.By^2+(mfnc.Bz+0)^2)");
    model.variable("var1").set("bn50", "sqrt(mfnc.Bx^2+mfnc.By^2+(mfnc.Bz+.005)^2)");
    model.variable("var1").set("bn100", "sqrt(mfnc.Bx^2+mfnc.By^2+(mfnc.Bz+.01)^2)");
    model.variable("var1").set("bn150", "sqrt(mfnc.Bx^2+mfnc.By^2+(mfnc.Bz+.015)^2)");
    model.variable("var1").set("bn200", "sqrt(mfnc.Bx^2+mfnc.By^2+(mfnc.Bz+.02)^2)");
    model.variable("var1").set("bn250", "sqrt(mfnc.Bx^2+mfnc.By^2+(mfnc.Bz+.025)^2)");
    model.variable("var1").set("bn300", "sqrt(mfnc.Bx^2+mfnc.By^2+(mfnc.Bz+.03)^2)");
    model.variable("var1")
         .set("ang0", "acos((mfnc.Bx*es.Ex + mfnc.By*es.Ey + (mfnc.Bz+boffset)*es.Ez)/(bn0*en+1e-10))");
    model.variable("var1")
         .set("ang50", "acos((mfnc.Bx*es.Ex + mfnc.By*es.Ey + (mfnc.Bz+boffset)*es.Ez)/(bn50*en+1e-10))");
    model.variable("var1")
         .set("ang100", "acos((mfnc.Bx*es.Ex + mfnc.By*es.Ey + (mfnc.Bz+boffset)*es.Ez)/(bn100*en+1e-10))");
    model.variable("var1")
         .set("ang150", "acos((mfnc.Bx*es.Ex + mfnc.By*es.Ey + (mfnc.Bz+boffset)*es.Ez)/(bn150*en+1e-10))");
    model.variable("var1")
         .set("ang200", "acos((mfnc.Bx*es.Ex + mfnc.By*es.Ey + (mfnc.Bz+boffset)*es.Ez)/(bn200*en+1e-10))");
    model.variable("var1")
         .set("ang250", "acos((mfnc.Bx*es.Ex + mfnc.By*es.Ey + (mfnc.Bz+boffset)*es.Ez)/(bn250*en+1e-10))");
    model.variable("var1")
         .set("ang300", "acos((mfnc.Bx*es.Ex + mfnc.By*es.Ey + (mfnc.Bz+boffset)*es.Ez)/(bn300*en+1e-10))");
    model.variable("var1")
         .set("ang", "acos((mfnc.Bx*es.Ex + mfnc.By*es.Ey + (mfnc.Bz+boffset)*es.Ez)/(bn*en+1e-10))");
    model.variable("var1").set("bn", "sqrt(mfnc.Bx^2+mfnc.By^2+(mfnc.Bz+boffset)^2)");
    model.variable("var1")
         .set("ang300", "acos((mfnc.Bx*es.Ex + mfnc.By*es.Ey + (mfnc.Bz+.03)*es.Ez)/(bn300*en+1e-10))");
    model.variable("var1")
         .set("ang250", "acos((mfnc.Bx*es.Ex + mfnc.By*es.Ey + (mfnc.Bz+.025)*es.Ez)/(bn250*en+1e-10))");
    model.variable("var1")
         .set("ang200", "acos((mfnc.Bx*es.Ex + mfnc.By*es.Ey + (mfnc.Bz+.02)*es.Ez)/(bn200*en+1e-10))");
    model.variable("var1")
         .set("ang150", "acos((mfnc.Bx*es.Ex + mfnc.By*es.Ey + (mfnc.Bz+.015)*es.Ez)/(bn150*en+1e-10))");
    model.variable("var1")
         .set("ang100", "acos((mfnc.Bx*es.Ex + mfnc.By*es.Ey + (mfnc.Bz+.01)*es.Ez)/(bn100*en+1e-10))");
    model.variable("var1")
         .set("ang50", "acos((mfnc.Bx*es.Ex + mfnc.By*es.Ey + (mfnc.Bz+.005)*es.Ez)/(bn50*en+1e-10))");
    model.variable("var1").set("ang0", "acos((mfnc.Bx*es.Ex + mfnc.By*es.Ey + mfnc.Bz*es.Ez)/(bn0*en+1e-10))");

    model.func().remove("an9");

    return model;
  }

  public static Model run22(Model model) {
    model.func("an8").label("Stark-Zeeman Energy");
    model.func().duplicate("an11", "an8");
    model.func("an11").label("LZ Slope");
    model.func("an11").set("expr", "(f32energy(b,e,pi/2+pi/25)-f32energy(b,e,pi/2))*25/pi");
    model.func("an11").set("funcname", "dVdTheta");
    model.func("an11").set("expr", "2*(f32energy(b,e,pi/2+pi/25)-f32energy(b,e,pi/2))*25/pi");
    model.func().duplicate("an12", "an11");
    model.func("an12").label("LZ Formula");
    model.func("an12").set("funcname", "lz");
    model.func("an12").set("expr", "exp(-pi/2*angap^2/dVdTheta*dThetadx*dxdt)");

    model.result("pg9").run();

    model.probe("pdom1").genResult("none");

    model.sol("sol1").runAll();

    model.result("pg9").run();
    model.result("pg9").feature("iso2").set("expr", "ang100");
    model.result("pg9").feature("iso2").feature("col1").set("expr", "angap(bn100,en)");
    model.result("pg9").run();

    model.func("an12").set("expr", "exp(-pi/2*angap(b,e)^2/dVdTheta*dThetadx*dxdt)");
    model.func("an1").label("Gap pi/2 in MHz");
    model.func().remove("an2");
    model.func("an8").label("Stark-Zeeman Energy (GHz)");
    model.func("an12").set("expr", "exp(-pi/2*angap(b,e)^2/dVdTheta(b,e)*dThetadx*dxdt)");
    model.func("an11").set("args", "b, e");
    model.func("an12").set("expr", "exp(-pi/2*(angap(b,e)*hM)^2/dVdTheta(b,e)*dThetadx*dxdt)");

    model.variable().create("var2");
    model.variable("var2").model("mod1");
    model.variable("var2").label("constants");
    model.variable("var2").set("h", "6.62607e-34");
    model.variable("var2").set("hM", "6.62607e-28");
    model.variable("var2").set("hG", "6.62607e-25");
    model.variable("var2").set("kB", "1.3807e-23");
    model.variable("var2").set("hbar", "h/(2*pi)");

    model.func("an12").set("expr", "exp(-pi/2*(angap(b,e)*hM)^2/(dVdTheta(b,e)*hG*dThetadx*dxdt)");
    model.func("an12").set("args", "b, e, dThetadx,dxdt");
    model.func("an12").set("expr", "exp(-pi/2*(angap(b,e)*hM)^2/(dVdTheta(b,e)*hG*dThetadx*dxdt*hbar)");

    model.result("pg14").run();
    model.result().move("pg13", 7);
    model.result().duplicate("pg16", "pg14");
    model.result().move("pg16", 7);
    model.result("pg16").label("LZ Loss");

    model.func().duplicate("an13", "an11");
    model.func("an13").label("Mag of Gradient");
    model.func("an13").set("funcname", "mog");
    model.func("an13").set("expr", "sqrt(d(f,x)^2+d(f,y)^2+d(f,z)^2)");
    model.func("an13").set("args", "f");

    model.result("pg16").feature("iso2").feature("col1").set("expr", "lz(bn0,en,mog(ang0),5)");

    model.func("an12").set("expr", "exp(-pi/2*(angap(b,e)*hM)^2/(dVdTheta(b,e)*hG*dThetadx*dxdt*hbar))");

    model.sol("sol1").updateSolution();

    model.func("an12").set("expr", "exp(-pi/2*(angap(b,e)*h*1e6)^2/(dVdTheta(b,e)*h*1e9*dThetadx*dxdt*hbar))");

    model.sol("sol1").updateSolution();

    model.func("an12")
         .set("expr", "exp(-pi/2*(angap(b,e)*h_const*1e6)^2/(dVdTheta(b,e)*h_const*1e9*dThetadx*dxdt*hbar_const))");

    model.sol("sol1").updateSolution();

    model.result("pg16").run();
    model.result("pg16").feature("iso2").feature("col1").set("expr", "lz(bn0,en,mog(ang0),50)");
    model.result("pg16").run();
    model.result("pg16").feature("iso2").feature("col1").set("expr", "lz(bn0,en,mog(ang0),5000)");
    model.result("pg16").run();
    model.result("pg16").feature("iso2").feature("col1").set("expr", "lz(bn0,en,mog(ang0),500000000000)");
    model.result("pg16").run();
    model.result("pg16").feature("iso2").feature("col1")
         .set("expr", "lz(bn0,en,mog(ang0),50000000000000000000000000000000000)");
    model.result("pg16").run();
    model.result("pg16").feature("iso2").feature("col1")
         .set("expr", "lz(bn0,en,mog(ang0),50000000000000000000000000000000000000000000000000)");
    model.result("pg16").run();
    model.result("pg16").feature("iso2").feature("col1").set("expr", "mog(ang0)");
    model.result("pg16").run();

    model.func("an13").set("args", "f,x,y,z");

    model.result("pg16").feature("iso2").feature("col1").set("expr", "mog(ang0,x,y,z)");

    model.sol("sol1").updateSolution();

    model.result("pg16").run();
    model.result("pg16").feature("iso2").set("expr", "ang0");
    model.result("pg16").run();
    model.result("pg16").feature("iso2").feature("col1").set("expr", "sqrt(d(ang0,x)^2+d(ang0,y)^2+d(ang0,z)^2)");
    model.result("pg16").run();
    model.result("pg16").feature("iso2").feature("col1").set("rangecoloractive", "off");
    model.result("pg16").feature("iso2").feature("col1")
         .set("expr", "lz(bn0,en,sqrt(d(ang0,x)^2+d(ang0,y)^2+d(ang0,z)^2),5)");
    model.result("pg16").run();

    model.func("an13").set("complex", "on");
    model.func("an13").set("args", "f");
    model.func("an13").set("dermethod", "automatic");

    model.result("pg16").feature("iso2").feature("col1").set("expr", "lz(bn0,en,mog(ang0),5)");

    model.sol("sol1").updateSolution();

    model.result("pg16").run();

    model.func("an13").set("expr", "sqrt(x^2+y^2+z^2)");
    model.func("an13").set("args", "x,y,z");
    model.func("an13").label("Magnitude");
    model.func("an13").set("funcname", "mag");
    model.func().duplicate("an14", "an13");
    model.func("an14").label("deriv");
    model.func("an14").set("funcname", "deriv");
    model.func("an14").set("expr", "d(f,x)");
    model.func("an14").set("args", "f");

    model.sol("sol1").updateSolution();

    model.func().remove("an14");

    model.result("pg16").feature("iso2").feature("col1")
         .set("expr", "lz(bn0,en,mag(d(ang0,x),d(ang0,y),d(ang0,z)),5)");
    model.result("pg16").run();
    model.result("pg16").feature("iso2").feature("col1")
         .set("expr", "lz(bn50,en,mag(d(ang50,x),d(ang50,y),d(ang50,z)),5)");
    model.result("pg16").run();
    model.result("pg16").feature("iso2").feature("col1")
         .set("expr", "lz(bn100,en,mag(d(ang100,x),d(ang100,y),d(ang100,z)),5)");
    model.result("pg16").run();
    model.result("pg16").feature("iso2").set("expr", "ang100");
    model.result("pg16").run();
    model.result().duplicate("pg17", "pg16");
    model.result("pg17").label("LZ Loss Weighted");
    model.result().move("pg17", 9);
    model.result("pg17").feature("iso2").feature("col1")
         .set("expr", "lz(bn100,en,mag(d(ang100,x),d(ang100,y),d(ang100,z)),5)*bw(bn100,en,ang100,ppb1)");

    model.func("an10").set("expr", "exp(-(f32energy(bb,ee,tt)-zz)/(1.38e-23*5e-2/6.62607e-25))");

    model.sol("sol1").updateSolution();

    model.result("pg17").run();

    model.probe("pdom1").feature("ppb1").set("expr", "f32energy(bn100,en,ang100)");

    model.sol("sol1").updateSolution();

    model.result("pg17").run();
    model.result("pg17").feature("iso2").feature("col1")
         .set("expr", "lz(bn100,en,mag(d(ang100,x),d(ang100,y),d(ang100,z)),5)");
    model.result("pg17").run();
    model.result("pg17").feature("iso2").feature("col1")
         .set("expr", "lz(bn150,en,mag(d(ang150,x),d(ang150,y),d(ang150,z)),5)*bw(bn150,en,ang150,ppb1)");
    model.result("pg17").feature("iso2").set("expr", "ang150");

    model.probe("pdom1").feature("ppb1").set("expr", "f32energy(bn150,en,ang150)");
    model.probe("pdom1").genResult("none");

    model.sol("sol1").runAll();

    model.result("pg17").run();
    model.result().dataset().create("int1", "Integral");
    model.result().dataset().remove("int1");
    model.result().numerical().create("int1", "IntSurface");
    model.result().numerical().remove("int1");
    model.result("pg17").feature().duplicate("iso3", "iso2");
    model.result("pg17").feature("iso2").label("150G");
    model.result("pg17").feature("iso3").label("200G");
    model.result("pg17").feature("iso3").set("expr", "ang200");
    model.result("pg17").feature("iso3").feature("col1")
         .set("expr", "lz(bn200,en,mag(d(ang200,x),d(ang200,y),d(ang200,z)),5)*bw(bn200,en,ang200,ppb1)");
    model.result("pg17").run();
    model.result("pg17").feature("iso2").active(false);
    model.result("pg17").run();
    model.result("pg17").feature().duplicate("iso4", "iso3");
    model.result("pg17").feature("iso4").label("250 G");
    model.result("pg17").feature("iso4").label("250G");
    model.result("pg17").feature("iso4").set("expr", "ang250");
    model.result("pg17").feature("iso4").feature("col1")
         .set("expr", "lz(bn250,en,mag(d(ang250,x),d(ang250,y),d(ang250,z)),5)*bw(bn250,en,ang250,ppb1)");
    model.result("pg17").run();
    model.result("pg17").feature("iso3").active(false);
    model.result("pg17").run();
    model.result().dataset().create("surf1", "Surface");
    model.result().dataset("surf1").set("param", "expr");
    model.result().dataset().remove("surf1");

    model.param().set("vr2", "12500");
    model.param().set("vr4", "12500");
    model.param().set("poff", ".1");

    model.probe("pdom1").genResult("none");

    model.sol("sol1").runAll();

    model.result("pg17").run();
    model.result("pg17").feature().duplicate("iso5", "iso2");
    model.result("pg17").feature().move("iso5", 0);
    model.result("pg17").feature("iso5").label("50G");
    model.result("pg17").feature("iso5").set("expr", "ang50");
    model.result("pg17").feature("iso5").feature("col1")
         .set("expr", "lz(bn50,en,mag(d(ang50,x),d(ang50,y),d(ang50,z)),5)*bw(bn50,en,ang50,ppb1)");

    model.probe("pdom1").feature("ppb1").set("expr", "f32energy(bn50,en,ang50)");
    model.probe("pdom1").feature("ppb1").genResult("sol1");

    model.result().numerical("pev1").set("table", "tbl2");
    model.result().numerical("pev1").set("innerinput", "all");
    model.result().numerical("pev1").set("outerinput", "all");
    model.result().numerical("pev1").setResult();
    model.result("pg15").feature("tblp1").set("plotcolumns", new int[]{1});
    model.result("pg15").run();
    model.result("pg17").feature("iso4").active(false);
    model.result("pg17").feature("iso5").active(true);
    model.result("pg17").run();
    model.result("pg17").set("axisactive", "on");
    model.result("pg17").set("axisprecision", "5");
    model.result("pg17").run();
    model.result("pg17").set("axistrailingzeros", "on");
    model.result("pg17").run();
    model.result("pg17").set("axisactive", "off");
    model.result("pg17").set("allowtableupdate", false);
    model.result("pg17").set("title", "Isosurface:  (rad)");
    model.result("pg17").set("hasbeenplotted", true);
    model.result("pg17").feature("iso5").feature("col1").set("rangeunit", "");
    model.result("pg17").feature("iso5").feature("col1").set("rangecolormin", 0);
    model.result("pg17").feature("iso5").feature("col1").set("rangecolormax", 0.1640477303091347);
    model.result("pg17").feature("iso5").feature("col1").set("rangecoloractive", "off");
    model.result("pg17").feature("iso5").feature("col1").set("rangedatamin", 0);
    model.result("pg17").feature("iso5").feature("col1").set("rangedatamax", 0.1640477303091347);
    model.result("pg17").feature("iso5").feature("col1").set("rangedataactive", "off");
    model.result("pg17").feature("iso5").feature("col1")
         .set("rangeactualminmax", new double[]{0, 0.1640477303091347});
    model.result("pg17").feature("iso5").set("hasbeenplotted", true);
    model.result("pg17").set("renderdatacached", false);
    model.result("pg17").set("allowtableupdate", true);
    model.result("pg17").set("renderdatacached", true);
    model.result().table("evl3")
         .addRow(new double[]{0.013549499987195082, -0.01824839350686653, -0.386145201529307, 0.024240726581965022});
    model.result().table("evl3")
         .addRow(new double[]{-0.025054359083163988, -0.024069264455733985, -0.3079926262440096, 0.0560603652037313});
    model.result("pg17").feature("iso5").feature("col1").active(false);
    model.result("pg13").feature("iso1").set("expr", "ang50");
    model.result("pg13").feature("iso1").feature("col1").set("expr", "bn50");
    model.result("pg13").feature("iso1").feature("col1").set("unit", "G");
    model.result("pg13").feature("iso1").feature("col1").set("rangecolormax", "200");
    model.result("pg13").run();
    model.result("pg13").set("allowtableupdate", false);
    model.result("pg13").set("title", "Isosurface:  (rad)");
    model.result("pg13").set("hasbeenplotted", true);
    model.result("pg13").feature("iso1").feature("col1").set("rangeunit", "G");
    model.result("pg13").feature("iso1").feature("col1").set("rangedatamin", 44.22265739679122);
    model.result("pg13").feature("iso1").feature("col1").set("rangedatamax", 5474.889318589791);
    model.result("pg13").feature("iso1").feature("col1").set("rangedataactive", "off");
    model.result("pg13").feature("iso1").feature("col1")
         .set("rangeactualminmax", new double[]{44.22265739679122, 5474.889318589791});
    model.result("pg13").feature("iso1").set("hasbeenplotted", true);
    model.result("pg13").set("renderdatacached", false);
    model.result("pg13").set("allowtableupdate", true);
    model.result("pg13").set("renderdatacached", true);
    model.result().table("evl3")
         .addRow(new double[]{-0.0032310722424255534, -0.0025126118676155884, -0.0017230815910540542, 71.83571840145135});
    model.result().table("evl3")
         .addRow(new double[]{-0.013741938118140104, 0.002394271941687804, -0.3865788562863641, 117.19739262334});
    model.result("pg13").feature("iso1").set("levels", "pi/2-pi/100");
    model.result("pg13").run();
    model.result("pg13").set("allowtableupdate", false);
    model.result("pg13").set("title", "Isosurface:  (rad)");
    model.result("pg13").set("hasbeenplotted", true);
    model.result("pg13").feature("iso1").feature("col1").set("rangeunit", "G");
    model.result("pg13").feature("iso1").feature("col1").set("rangedatamin", 42.36441273770638);
    model.result("pg13").feature("iso1").feature("col1").set("rangedatamax", 5473.9685626000755);
    model.result("pg13").feature("iso1").feature("col1").set("rangedataactive", "off");
    model.result("pg13").feature("iso1").feature("col1")
         .set("rangeactualminmax", new double[]{42.36441273770638, 5473.9685626000755});
    model.result("pg13").feature("iso1").set("hasbeenplotted", true);
    model.result("pg13").set("renderdatacached", false);
    model.result("pg13").set("allowtableupdate", true);
    model.result("pg13").set("renderdatacached", true);
    model.result().table("evl3")
         .addRow(new double[]{-0.004339931189690394, -0.004055385304464712, -0.0014882563056670683, 73.48353348223057});
    model.result("pg13").feature("iso1").set("levels", "pi/2-2*pi/100");
    model.result("pg13").run();
    model.result("pg13").feature("iso1").set("levels", "pi/2-3*pi/100");
    model.result("pg13").run();
    model.result("pg13").set("allowtableupdate", false);
    model.result("pg13").set("title", "Isosurface:  (rad)");
    model.result("pg13").set("hasbeenplotted", true);
    model.result("pg13").feature("iso1").feature("col1").set("rangeunit", "G");
    model.result("pg13").feature("iso1").feature("col1").set("rangedatamin", 38.89233870117325);
    model.result("pg13").feature("iso1").feature("col1").set("rangedatamax", 5524.263472638908);
    model.result("pg13").feature("iso1").feature("col1").set("rangedataactive", "off");
    model.result("pg13").feature("iso1").feature("col1")
         .set("rangeactualminmax", new double[]{38.89233870117325, 5524.263472638908});
    model.result("pg13").feature("iso1").set("hasbeenplotted", true);
    model.result("pg13").set("renderdatacached", false);
    model.result("pg13").set("allowtableupdate", true);
    model.result("pg13").set("renderdatacached", true);
    model.result().table("evl3")
         .addRow(new double[]{0.0036739723945680702, 0.008087048750402934, -0.3245896823297785, 51.08352136903197});
    model.result("pg13").feature("iso1").set("levels", "pi/2-4*pi/100");
    model.result("pg13").run();
    model.result("pg13").set("allowtableupdate", false);
    model.result("pg13").set("title", "Isosurface:  (rad)");
    model.result("pg13").set("hasbeenplotted", true);
    model.result("pg13").feature("iso1").feature("col1").set("rangeunit", "G");
    model.result("pg13").feature("iso1").feature("col1").set("rangedatamin", 37.26690299304427);
    model.result("pg13").feature("iso1").feature("col1").set("rangedatamax", 5564.233518897936);
    model.result("pg13").feature("iso1").feature("col1").set("rangedataactive", "off");
    model.result("pg13").feature("iso1").feature("col1")
         .set("rangeactualminmax", new double[]{37.26690299304427, 5564.233518897936});
    model.result("pg13").feature("iso1").set("hasbeenplotted", true);
    model.result("pg13").set("renderdatacached", false);
    model.result("pg13").set("allowtableupdate", true);
    model.result("pg13").set("renderdatacached", true);
    model.result().table("evl3")
         .addRow(new double[]{3.975535357980675E-4, 0.009943766052488263, -0.31172105019380414, 52.64303529308303});
    model.result("pg13").feature("iso1").set("levels", "pi/2-14*pi/100");
    model.result("pg13").run();
    model.result("pg13").feature("iso1").set("levels", "pi/2-7*pi/100");
    model.result("pg13").run();
    model.result("pg13").feature("iso1").set("levels", "pi/2+7*pi/100");
    model.result("pg13").run();
    model.result("pg13").feature("iso1").set("levels", "pi/2+2*pi/100");
    model.result("pg13").run();
    model.result("pg13").feature("iso1").set("levels", "pi/2");
    model.result("pg13").run();
    model.result("pg17").run();
    model.result("pg17").feature("iso5").feature("col1").active(true);
    model.result("pg17").run();
    model.result("pg17").feature("iso5").feature("col1")
         .set("expr", "lz(bn50,en,mag(d(ang50,x),d(ang50,y),d(ang50,z)),5)*(bw(bn50,en,ang50,ppb1)*0+1)");
    model.result("pg17").run();
    model.result("pg17").set("allowtableupdate", false);
    model.result("pg17").set("title", "Isosurface:  (rad)");
    model.result("pg17").set("hasbeenplotted", true);
    model.result("pg17").feature("iso5").feature("col1").set("rangeunit", "");
    model.result("pg17").feature("iso5").feature("col1").set("rangecolormin", 0);
    model.result("pg17").feature("iso5").feature("col1").set("rangecolormax", 1.0011707650115222);
    model.result("pg17").feature("iso5").feature("col1").set("rangecoloractive", "off");
    model.result("pg17").feature("iso5").feature("col1").set("rangedatamin", 0);
    model.result("pg17").feature("iso5").feature("col1").set("rangedatamax", 1.0011707650115222);
    model.result("pg17").feature("iso5").feature("col1").set("rangedataactive", "off");
    model.result("pg17").feature("iso5").feature("col1")
         .set("rangeactualminmax", new double[]{0, 1.0011707650115222});
    model.result("pg17").feature("iso5").set("hasbeenplotted", true);
    model.result("pg17").set("renderdatacached", false);
    model.result("pg17").set("allowtableupdate", true);
    model.result("pg17").set("renderdatacached", true);
    model.result().table("evl3")
         .addRow(new double[]{-0.02759934462857262, 0.030399224410158708, -0.5037182559980047, 0.5489721559769997});
    model.result().table("evl3")
         .addRow(new double[]{-0.035057174324339115, 0.03625768188079122, -0.5295667759067357, 0.4521211031620178});
    model.result().table("evl3")
         .addRow(new double[]{0.04295442855627406, -0.03238211096101608, -0.5453073177779069, 0.31532797186315464});
    model.result().table("evl3")
         .addRow(new double[]{-0.021511562948278412, -0.021878766540334826, -0.3363249426792527, 0.39906344653952197});
    model.result().table("evl3")
         .addRow(new double[]{-0.06619687099015803, 0.05161969053024912, -0.7130534005043772, 0.16888881410887852});
    model.result().table("evl3")
         .addRow(new double[]{-2.5528353877266614, 0.0030630367494411948, 0.3625971836991493, 0});
    model.result().table("evl3")
         .addRow(new double[]{-0.07364555417427668, 0.04182113627452344, -0.6954398576680689, 0.2803646941599066});
    model.result().table("evl3")
         .addRow(new double[]{-0.032553727932857324, 0.0338382191780332, -0.5207999524093174, 0.48304618903785457});
    model.result().table("evl3")
         .addRow(new double[]{-0.02005037676637228, -0.02621910091440749, -0.3205282431076233, 0.3189976851233596});
    model.result().table("evl3")
         .addRow(new double[]{-0.023954568520631825, 0.016301473114589626, -0.43291652586181373, 0.3925338060992319});
    model.result().table("evl3")
         .addRow(new double[]{-0.038558446920584966, 0.03684834086812527, -0.5388268268322851, 0.37310850122640987});

    model.view("view1").hideObjects("hide2").add(new String[]{"blk9"});

    model.result("pg13").run();
    model.result("pg17").run();

    model.mesh("mesh1").feature("ref2").set("numrefine", "2");

    model.probe("pdom1").genResult("none");

    model.sol("sol1").runAll();

    model.result("pg13").run();
    model.result("pg17").run();

    model.mesh("mesh1").feature("ref2").set("numrefine", "3");
    model.mesh("mesh1").run();
    model.mesh("mesh1").feature("ref2").set("numrefine", "4");
    model.mesh("mesh1").run();
    model.mesh("mesh1").feature("ref2").set("numrefine", "3");
    model.mesh("mesh1").run("ref2");

    model.probe("pdom1").genResult("none");

    model.sol("sol1").runAll();

    model.result("pg17").run();
    model.result("pg17").set("allowtableupdate", false);
    model.result("pg17").set("title", "Isosurface:  (rad)");
    model.result("pg17").set("hasbeenplotted", true);
    model.result("pg17").feature("iso5").feature("col1").set("rangeunit", "");
    model.result("pg17").feature("iso5").feature("col1").set("rangecolormin", 0);
    model.result("pg17").feature("iso5").feature("col1").set("rangecolormax", 1.0047953283932853);
    model.result("pg17").feature("iso5").feature("col1").set("rangecoloractive", "off");
    model.result("pg17").feature("iso5").feature("col1").set("rangedatamin", 0);
    model.result("pg17").feature("iso5").feature("col1").set("rangedatamax", 1.0047953283932853);
    model.result("pg17").feature("iso5").feature("col1").set("rangedataactive", "off");
    model.result("pg17").feature("iso5").feature("col1")
         .set("rangeactualminmax", new double[]{0, 1.0047953283932853});
    model.result("pg17").feature("iso5").set("hasbeenplotted", true);
    model.result("pg17").set("renderdatacached", false);
    model.result("pg17").set("allowtableupdate", true);
    model.result("pg17").set("renderdatacached", true);
    model.result().table("evl3")
         .addRow(new double[]{-0.08221070488019744, 0.16801739919853623, 0.5737490153131611, 9.83303638323823E-192});
    model.result().table("evl3")
         .addRow(new double[]{0.011037506354720169, 0.020742456922856176, -0.3706195189484691, 0.5335771672338719});
    model.result().table("evl3")
         .addRow(new double[]{0.020613793363933, -0.014206793983748776, -0.42737914257493337, 0.6082073315284267});
    model.result().table("evl3")
         .addRow(new double[]{-0.021487719758175, 0.02143243102309305, -0.44916137073686535, 0.5838313348835812});
    model.result().table("evl3")
         .addRow(new double[]{0.007947904707430429, 0.022381350030462703, -0.3772164959219235, 0.5788551997360633});
    model.result().table("evl3")
         .addRow(new double[]{0.011470047298290105, 0.023989701987439976, -0.36398965787699566, 0.3643396301898077});
    model.result().table("evl3")
         .addRow(new double[]{-0.021224075665544778, -0.010483462833494595, -0.37172161874757603, 0.644209484336434});

    model.mesh("mesh1").feature("ref2").set("numrefine", "4");
    model.mesh("mesh1").run();

    model.probe("pdom1").genResult("none");

    model.sol("sol1").runAll();

    model.result("pg17").run();
    model.result("pg17").set("allowtableupdate", false);
    model.result("pg17").set("title", "Isosurface:  (rad)");
    model.result("pg17").set("hasbeenplotted", true);
    model.result("pg17").feature("iso5").feature("col1").set("rangeunit", "");
    model.result("pg17").feature("iso5").feature("col1").set("rangecolormin", 0);
    model.result("pg17").feature("iso5").feature("col1").set("rangecolormax", 0.9995791153489823);
    model.result("pg17").feature("iso5").feature("col1").set("rangecoloractive", "off");
    model.result("pg17").feature("iso5").feature("col1").set("rangedatamin", 0);
    model.result("pg17").feature("iso5").feature("col1").set("rangedatamax", 0.9995791153489823);
    model.result("pg17").feature("iso5").feature("col1").set("rangedataactive", "off");
    model.result("pg17").feature("iso5").feature("col1")
         .set("rangeactualminmax", new double[]{0, 0.9995791153489823});
    model.result("pg17").feature("iso5").set("hasbeenplotted", true);
    model.result("pg17").set("renderdatacached", false);
    model.result("pg17").set("allowtableupdate", true);
    model.result("pg17").set("renderdatacached", true);
    model.result().table("evl3")
         .addRow(new double[]{-0.015366213235900518, -0.02167978577452756, -0.3531062106181, 0.4304722060120309});
    model.result().table("evl3")
         .addRow(new double[]{-0.025952427779294913, 0.025747694718828318, -0.4665052829348012, 0.4377050485717787});
    model.result("pg13").run();
    model.result("pg13").set("allowtableupdate", false);
    model.result("pg13").set("title", "Isosurface:  (rad)");
    model.result("pg13").set("hasbeenplotted", true);
    model.result("pg13").feature("iso1").feature("col1").set("rangeunit", "G");
    model.result("pg13").feature("iso1").feature("col1").set("rangedatamin", 31.495859303521154);
    model.result("pg13").feature("iso1").feature("col1").set("rangedatamax", 2725.3211435382423);
    model.result("pg13").feature("iso1").feature("col1").set("rangedataactive", "off");
    model.result("pg13").feature("iso1").feature("col1")
         .set("rangeactualminmax", new double[]{31.495859303521154, 2725.3211435382423});
    model.result("pg13").feature("iso1").set("hasbeenplotted", true);
    model.result("pg13").set("renderdatacached", false);
    model.result("pg13").set("allowtableupdate", true);
    model.result("pg13").set("renderdatacached", true);
    model.result().table("evl3")
         .addRow(new double[]{0.004557780585491819, -5.649913091673175E-4, -0.39983556249805385, 46.68824264485714});
    model.result().table("evl3")
         .addRow(new double[]{-0.0029887409877675936, 0.003270024691312226, -0.40121190595703093, 40.34933624073061});
    model.result("pg13").feature("iso1").feature("col1").set("expr", "f32energy(bn50,en,ang50)-ppb1");
    model.result("pg13").run();
    model.result("pg13").feature("iso1").feature("col1").set("rangecoloractive", "off");
    model.result("pg13").run();
    model.result("pg13").feature("iso1").feature("col1").set("expr", "bw(bn50,en,ang50,ppb1)");
    model.result("pg13").run();

    model.view("view1").hideObjects().clear();
    model.view("view1").hideEntities().clear();
    model.view("view1").hideEntities().create("hide1");
    model.view("view1").hideEntities("hide1").geom(3);
    model.view("view1").hideEntities("hide1").add(new int[]{1});
    model.view("view1").hideEntities("hide1").add(new int[]{23});
    model.view("view1").hideEntities("hide1").add(new int[]{5});
    model.view("view1").hideEntities("hide1").add(new int[]{22});
    model.view("view1").hideEntities("hide1").add(new int[]{4});
    model.view("view1").hideEntities("hide1").add(new int[]{20});
    model.view("view1").hideEntities("hide1").add(new int[]{2});
    model.view("view1").hideEntities("hide1").add(new int[]{14});
    model.view("view1").hideEntities("hide1").add(new int[]{15});
    model.view("view1").hideEntities("hide1").add(new int[]{19});
    model.view("view1").hideEntities("hide1").add(new int[]{3});
    model.view("view1").hideEntities("hide1").add(new int[]{12});
    model.view("view1").hideEntities("hide1").add(new int[]{13});
    model.view("view1").hideEntities("hide1").add(new int[]{6});
    model.view("view1").hideEntities("hide1").add(new int[]{21});
    model.view("view1").hideEntities("hide1").add(new int[]{7});
    model.view("view1").hideEntities("hide1").add(new int[]{17});
    model.view("view1").hideEntities("hide1").add(new int[]{16});
    model.view("view1").hideEntities("hide1").add(new int[]{18});
    model.view("view1").hideEntities("hide1").add(new int[]{10});
    model.view("view1").hideEntities("hide1").add(new int[]{8});
    model.view("view1").hideEntities("hide1").add(new int[]{11});

    model.result("pg17").run();
    model.result("pg17").feature("iso5").active(false);
    model.result("pg17").feature("iso2").active(true);
    model.result("pg17").run();
    model.result("pg17").feature().duplicate("iso6", "iso2");
    model.result("pg17").feature().move("iso6", 1);
    model.result("pg17").feature("iso6").label("100G");
    model.result("pg17").feature("iso6").set("expr", "ang100");
    model.result("pg17").feature("iso6").feature("col1")
         .set("expr", "lz(bn100,en,mag(d(ang100,x),d(ang100,y),d(ang100,z)),5)*bw(bn100,en,ang100,ppb1)");
    model.result("pg17").run();
    model.result("pg17").feature("iso5").active(true);
    model.result("pg17").run();

    model.modelNode().create("comp1");

    model.geom().create("geom2", 1);

    model.mesh().create("mesh2", "geom2");

    model.modelNode().remove("comp1");

    model.study().create("std2");
    model.study("std2").create("param", "Parametric");
    model.study("std2").feature("param").label("Dummy");
    model.study("std2").label("Bfield Offset");
    model.study("std2").feature("param").setIndex("pname", "rd", 0);
    model.study("std2").feature("param").setIndex("plistarr", "", 0);
    model.study("std2").feature("param").setIndex("punit", "", 0);
    model.study("std2").feature("param").setIndex("pname", "rd", 0);
    model.study("std2").feature("param").setIndex("plistarr", "", 0);
    model.study("std2").feature("param").setIndex("punit", "", 0);
    model.study("std2").feature("param").setIndex("pname", "boffset", 0);
    model.study("std2").feature("param").setIndex("plistarr", "range(-.05,.001,.05)", 0);

    model.result().dataset().create("iso1", "Isosurface");
    model.result().dataset("iso1").set("expr", "ang0");
    model.result().dataset("iso1").set("levelmethod", "levels");
    model.result().dataset("iso1").set("level", "pi/2");
    model.result().dataset("iso1").set("descractive", "off");
    model.result().dataset("iso1").run();
    model.result().numerical().create("int1", "IntSurface");
    model.result().numerical("int1").set("data", "iso1");
    model.result().numerical("int1")
         .set("expr", "lz(bn50,en,mag(d(ang50,x),d(ang50,y),d(ang50,z)),5)*(bw(bn50,en,ang50,ppb1)*0+1)");
    model.result().dataset("iso1").set("expr", "ang50");
    model.result().dataset("iso1").label("Surface, Boffset=50G");
    model.result().numerical("int1")
         .set("expr", "lz(bn50,en,mag(d(ang50,x),d(ang50,y),d(ang50,z)),5)*(bw(bn50,en,ang50,ppb1,5e-2)*0+1)");

    model.func("an10").set("expr", "exp(-(f32energy(bb,ee,tt)-zz)/(1.38e-23*temp/6.62607e-25))");
    model.func("an10").set("args", "bb, ee, tt, zz,temp");

    model.sol("sol1").updateSolution();

    model.result("pg17").feature("iso5").feature("col1")
         .set("expr", "lz(bn50,en,mag(d(ang50,x),d(ang50,y),d(ang50,z)),5)*(bw(bn50,en,ang50,ppb1,5e-2)*0+1)");
    model.result("pg17").feature("iso6").feature("col1")
         .set("expr", "lz(bn100,en,mag(d(ang100,x),d(ang100,y),d(ang100,z)),5)*bw(bn100,en,ang100,ppb1,5e-2)");
    model.result("pg17").feature("iso2").feature("col1")
         .set("expr", "lz(bn150,en,mag(d(ang150,x),d(ang150,y),d(ang150,z)),5)*bw(bn150,en,ang150,ppb1,5e-2)");
    model.result("pg17").feature("iso2").active(false);
    model.result("pg17").feature("iso6").active(false);
    model.result("pg17").feature("iso5").feature("col1")
         .set("expr", "lz(bn50,en,mag(d(ang50,x),d(ang50,y),d(ang50,z)),5)*(bw(bn50,en,ang50,ppb1,5e-2))");
    model.result("pg17").run();
    model.result("pg17").feature("iso5").feature("col1")
         .set("expr", "lz(bn50,en,mag(d(ang50,x),d(ang50,y),d(ang50,z)),5)*(bw(bn50,en,ang50,ppb1,1e-1))");
    model.result("pg17").run();
    model.result("pg17").feature("iso5").feature("col1")
         .set("expr", "lz(bn50,en,mag(d(ang50,x),d(ang50,y),d(ang50,z)),5)*(bw(bn50,en,ang50,ppb1,2e-1))");

    return model;
  }

  public static Model run23(Model model) {
    model.result("pg17").run();
    model.result("pg17").feature("iso5").feature("col1")
         .set("expr", "lz(bn50,en,mag(d(ang50,x),d(ang50,y),d(ang50,z)),5)*(bw(bn50,en,ang50,ppb1,3e-1))");
    model.result("pg17").run();
    model.result("pg17").feature("iso5").feature("col1")
         .set("expr", "lz(bn50,en,mag(d(ang50,x),d(ang50,y),d(ang50,z)),5)*(bw(bn50,en,ang50,ppb1,1e-1))");
    model.result("pg17").run();
    model.result("pg17").feature("iso5").feature("col1")
         .set("expr", "lz(bn50,en,mag(d(ang50,x),d(ang50,y),d(ang50,z)),5)*(bw(bn50,en,ang50,ppb1,2e-1))");
    model.result("pg17").run();
    model.result().numerical("int1")
         .set("expr", "lz(bn50,en,mag(d(ang50,x),d(ang50,y),d(ang50,z)),5)*(bw(bn50,en,ang50,ppb1,2e-1))");
    model.result().table().create("tbl3", "Table");
    model.result().table("tbl3")
         .comments("Surface Integration 1 (lz(bn50,en,mag(d(ang50,x),d(ang50,y),d(ang50,z)),5)*(bw(bn50,en,ang50,ppb1,2e-1)))");
    model.result().numerical("int1").set("table", "tbl3");
    model.result().numerical("int1").setResult();
    model.result("pg17").set("allowtableupdate", false);
    model.result("pg17").set("title", "Isosurface:  (rad)");
    model.result("pg17").set("hasbeenplotted", true);
    model.result("pg17").feature("iso5").feature("col1").set("rangeunit", "");
    model.result("pg17").feature("iso5").feature("col1").set("rangecolormin", 0);
    model.result("pg17").feature("iso5").feature("col1").set("rangecolormax", 0.5357631019693382);
    model.result("pg17").feature("iso5").feature("col1").set("rangecoloractive", "off");
    model.result("pg17").feature("iso5").feature("col1").set("rangedatamin", 0);
    model.result("pg17").feature("iso5").feature("col1").set("rangedatamax", 0.5357631019693382);
    model.result("pg17").feature("iso5").feature("col1").set("rangedataactive", "off");
    model.result("pg17").feature("iso5").feature("col1")
         .set("rangeactualminmax", new double[]{0, 0.5357631019693382});
    model.result("pg17").feature("iso5").set("hasbeenplotted", true);
    model.result("pg17").set("renderdatacached", false);
    model.result("pg17").set("allowtableupdate", true);
    model.result("pg17").set("renderdatacached", true);
    model.result().table("evl3")
         .addRow(new double[]{-0.015262717041920481, -0.017234317425694007, -0.3619327858347199, 0.352015230790259});
    model.result().table("evl3")
         .addRow(new double[]{0.013283306146933013, -0.014213388949651786, -0.4197258829611137, 0.409929458073561});
    model.result().numerical("int1").set("method", "summation");
    model.result().numerical("int1").set("table", "tbl3");
    model.result().numerical("int1").appendResult();
    model.result().numerical("int1").set("method", "integration");
    model.result().numerical("int1")
         .set("expr", "real(lz(bn50,en,mag(d(ang50,x),d(ang50,y),d(ang50,z)),5)*(bw(bn50,en,ang50,ppb1,2e-1)))");
    model.result().numerical("int1").set("table", "tbl3");
    model.result().numerical("int1").appendResult();
    model.result().numerical("int1")
         .set("expr", "1+0*lz(bn50,en,mag(d(ang50,x),d(ang50,y),d(ang50,z)),5)*(bw(bn50,en,ang50,ppb1,2e-1))");
    model.result().numerical("int1").set("table", "tbl3");
    model.result().numerical("int1").set("expr", "1");
    model.result().numerical("int1").set("table", "tbl3");
    model.result().numerical("int1").appendResult();
    model.result().remove("pg10");
    model.result("pg5").feature("lngr1").set("expr", "dom");
    model.result("pg5").feature().remove("lngr2");
    model.result().remove("pg5");
    model.result("pg15").set("window", "window1");
    model.result("pg8").run();
    model.result("pg8").label("Domain Check");
    model.result("pg8").feature().remove("con2");
    model.result("pg8").feature("surf1").set("expr", "dom");
    model.result("pg8").run();
    model.result("pg8").set("allowtableupdate", false);
    model.result("pg8").set("hasbeenplotted", true);
    model.result("pg8").feature("surf1").set("rangeunit", "");
    model.result("pg8").feature("surf1").set("rangeactualminmax", new double[]{1, 23.000000000000004});
    model.result("pg8").feature("surf1").set("hasbeenplotted", true);
    model.result("pg8").set("renderdatacached", false);
    model.result("pg8").set("allowtableupdate", true);
    model.result("pg8").set("renderdatacached", true);
    model.result().table("evl2").addRow(new double[]{0.33414745330810547, -0.03341484069824219, 9});
    model.result().table("evl2").addRow(new double[]{0.33414745330810547, -0.03341484069824219, 9});
    model.result().table("evl2").addRow(new double[]{0.7017087936401367, -1.4034180641174316, 6});
    model.result().table("evl2").addRow(new double[]{0.4678058624267578, -3.6756186485290527, 1});
    model.result().table("evl2").addRow(new double[]{0.6014652252197266, -1.4368324279785156, 6});
    model.result().table("evl2").addRow(new double[]{0.568049430847168, -0.10024404525756836, 9});
    model.result().numerical("int1")
         .set("expr", "lz(bn50,en,mag(d(ang50,x),d(ang50,y),d(ang50,z)),5)*(bw(bn50,en,ang50,ppb1,2e-1))*(dom==9)");
    model.result().numerical("int1").set("descractive", "on");
    model.result().numerical("int1").set("descr", "Restrict Domain");
    model.result().numerical("int1").set("table", "tbl3");
    model.result().numerical("int1").appendResult();
    model.result().numerical("int1")
         .set("expr", "lz(bn50,en,mag(d(ang50,x),d(ang50,y),d(ang50,z)),5)*(bw(bn50,en,ang50,ppb1,1e-1))*(dom==9)");
    model.result().numerical("int1").set("intorderactive", "on");
    model.result().numerical("int1").set("intorder", "1");
    model.result().numerical("int1").set("table", "tbl3");
    model.result().numerical("int1").appendResult();
    model.result().numerical("int1")
         .set("expr", "lz(bn50,en,mag(d(ang50,x),d(ang50,y),d(ang50,z)),5)*(bw(bn50,en,ang50,ppb1,2e-1))*(dom==9)");
    model.result().numerical("int1").set("table", "tbl3");
    model.result().numerical("int1").appendResult();
    model.result("pg17").feature("iso5").feature("col1")
         .set("expr", "lz(bn50,en,mag(d(ang50,x),d(ang50,y),d(ang50,z)),5)*(bw(bn50,en,ang50,ppb1,1e-1))");
    model.result("pg17").run();
    model.result("pg17").feature("iso5").set("resolution", "fine");
    model.result("pg17").run();
    model.result().dataset("iso1").run();
    model.result("pg17").feature("iso5").set("resolution", "fine");

    model.label("me_rodliteral_2mm_pingap.mph");

    model.sol().create("sol2");
    model.sol("sol2").study("std2");
    model.sol("sol2").create("st1", "StudyStep");
    model.sol("sol2").feature("st1").set("study", "std2");
    model.sol("sol2").create("v1", "Variables");
    model.sol("sol2").attach("std2");

    model.batch().create("p1", "Parametric");
    model.batch("p1").study("std2");
    model.batch("p1").create("so1", "Solutionseq");
    model.batch("p1").feature("so1").set("seq", "sol2");
    model.batch("p1").feature("so1").set("store", "on");
    model.batch("p1").feature("so1").set("clear", "on");
    model.batch("p1").feature("so1").set("psol", "none");
    model.batch("p1").set("pname", new String[]{"boffset"});
    model.batch("p1").set("plistarr", new String[]{"range(-.05,.001,.05)"});
    model.batch("p1").set("sweeptype", "sparse");
    model.batch("p1").set("probesel", "all");
    model.batch("p1").set("probes", new String[]{"pdom1"});
    model.batch("p1").set("plot", "off");
    model.batch("p1").set("err", "on");
    model.batch("p1").set("pdistrib", "off");
    model.batch("p1").attach("std2");
    model.batch("p1").set("control", "param");

    model.sol().create("sol3");
    model.sol("sol3").study("std2");
    model.sol("sol3").label("Parametric Solutions 1");

    model.batch("p1").feature("so1").set("psol", "sol3");

    model.probe("pdom1").genResult("none");
    model.probe("pdom1").genResult("none");

    model.sol("sol1").runAll();

    model.result().numerical("int1")
         .set("expr", "lz(bn,en,mag(d(ang,x),d(ang,y),d(ang,z)),5)*(bw(bn,en,ang,ppb1,2e-1))*(dom==9)");
    model.result().numerical("int1").set("table", "tbl3");
    model.result().numerical("int1").appendResult();
    model.result().table("tbl3").removeColumn(0);
    model.result().table("tbl3").removeColumn(0);
    model.result().table("tbl3").removeColumn(0);

    model.probe("pdom1").feature("ppb1").set("expr", "f32energy(bn,en,ang)");
    model.probe("pdom1").feature("ppb1").genResult("sol3");

    model.result().numerical("pev1").set("table", "tbl2");
    model.result().numerical("pev1").set("innerinput", "all");
    model.result().numerical("pev1").set("outerinput", "all");
    model.result().numerical("pev1").setResult();
    model.result("pg15").feature("tblp1").set("plotcolumns", new int[]{3});
    model.result("pg15").run();
    model.result("pg17").feature("iso5").set("expr", "ang");
    model.result("pg17").feature("iso5").feature("col1")
         .set("expr", "lz(bn,en,mag(d(ang,x),d(ang,y),d(ang,z)),5)*(bw(bn,en,ang,ppb1,1e-1))");
    model.result("pg17").run();

    model.sol("sol2").study("std2");
    model.sol("sol2").feature().remove("v1");
    model.sol("sol2").feature().remove("st1");
    model.sol("sol2").create("st1", "StudyStep");
    model.sol("sol2").feature("st1").set("study", "std2");
    model.sol("sol2").create("v1", "Variables");
    model.sol("sol2").attach("std2");

    model.batch("p1").feature().remove("so1");
    model.batch("p1").create("so1", "Solutionseq");
    model.batch("p1").feature("so1").set("seq", "sol2");
    model.batch("p1").feature("so1").set("store", "on");
    model.batch("p1").feature("so1").set("clear", "on");
    model.batch("p1").feature("so1").set("psol", "sol3");
    model.batch("p1").set("pname", new String[]{"boffset"});
    model.batch("p1").set("plistarr", new String[]{"range(-.05,.001,.05)"});
    model.batch("p1").set("sweeptype", "sparse");
    model.batch("p1").set("probesel", "all");
    model.batch("p1").set("probes", new String[]{"pdom1"});
    model.batch("p1").set("plot", "off");
    model.batch("p1").set("err", "on");
    model.batch("p1").set("pdistrib", "off");
    model.batch("p1").attach("std2");
    model.batch("p1").set("control", "param");

    model.probe("pdom1").genResult("none");

    model.batch("p1").run();

    model.result().numerical("int1").set("data", "dset4");
    model.result().numerical("int1").setIndex("looplevelinput", "first", 1);
    model.result().numerical("int1").setIndex("looplevelinput", "first", 0);
    model.result().numerical("int1").set("tablecols", "level2");
    model.result().numerical("int1").set("table", "tbl3");
    model.result().table().create("tbl4", "Table");
    model.result().table("tbl3").label("Tabel");
    model.result().numerical("int1").set("table", "tbl4");
    model.result().numerical("int1").setResult();
    model.result().numerical("int1").setIndex("looplevelinput", "manualindices", 1);
    model.result().numerical("int1").setIndex("looplevelindices", "51", 1);
    model.result().numerical("int1").set("table", "tbl4");
    model.result().numerical("int1").appendResult();
    model.result().numerical("int1")
         .set("expr", "with(lz(bn,en,mag(d(ang,x),d(ang,y),d(ang,z)),5)*(bw(bn,en,ang,ppb1,2e-1))*(dom==9))");
    model.result().numerical("int1").set("table", "tbl4");
    model.result().numerical("int1").appendResult();
    model.result().numerical("int1").set("table", "tbl4");
    model.result().numerical("int1").appendResult();
    model.result().numerical("int1").set("table", "tbl4");
    model.result().numerical("int1").appendResult();
    model.result().numerical("int1")
         .set("expr", "withsol('lz(bn,en,mag(d(ang,x),d(ang,y),d(ang,z)),5)*(bw(bn,en,ang,ppb1,2e-1))*(dom==9))");
    model.result("pg17").feature("iso5").set("data", "dset4");
    model.result("pg17").run();
    model.result("pg17").feature("iso5").set("expr", "withsol('Solver 1',ang)");
    model.result("pg17").feature("iso5").feature("col1").set("descractive", "on");
    model.result("pg17").feature("iso5").feature("col1").set("descr", "color");
    model.result("pg17").feature("iso5").feature("col1")
         .set("expr", "withsol('Solver 1',lz(bn,en,mag(d(ang,x),d(ang,y),d(ang,z)),5)*(bw(bn,en,ang,ppb1,1e-1)))");
    model.result("pg17").run();
    model.result("pg17").run();
    model.result("pg17").feature("iso5").feature("col1")
         .set("expr", "withsol('sol1',lz(bn,en,mag(d(ang,x),d(ang,y),d(ang,z)),5)*(bw(bn,en,ang,ppb1,1e-1)))");
    model.result("pg17").feature("iso5").set("expr", "withsol('sol1',ang)");
    model.result("pg17").run();
    model.result("pg17").feature("iso5").setIndex("looplevel", "51", 1);
    model.result("pg17").run();
    model.result().numerical("int1")
         .set("expr", "withsol('sol1',lz(bn,en,mag(d(ang,x),d(ang,y),d(ang,z)),5)*(bw(bn,en,ang,ppb1,2e-1))*(dom==9)))");
    model.result().table().create("tbl5", "Table");
    model.result().table("tbl5")
         .comments("Surface Integration 1 (withsol('sol1',lz(bn,en,mag(d(ang,x),d(ang,y),d(ang,z)),5)*(bw(bn,en,ang,ppb1,2e-1))*(dom==9))))");
    model.result().numerical("int1").set("table", "tbl5");
    model.result().numerical("int1")
         .set("expr", "withsol('sol1',lz(bn,en,mag(d(ang,x),d(ang,y),d(ang,z)),5)*(bw(bn,en,ang,ppb1,2e-1))*(dom==9))");
    model.result().numerical("int1").set("table", "tbl4");
    model.result().numerical("int1").appendResult();
    model.result().table().create("tbl6", "Table");
    model.result().table("tbl6")
         .comments("Surface Integration 1 (withsol('sol1',lz(bn,en,mag(d(ang,x),d(ang,y),d(ang,z)),5)*(bw(bn,en,ang,ppb1,2e-1))*(dom==9)))");
    model.result().numerical("int1").set("table", "tbl6");
    model.result().numerical("int1").setResult();
    model.result("pg17").feature("iso5").set("data", "dset1");

    model.study().remove("std2");

    model.result("pg15").set("window", "window1");

    model.study("std1").feature().remove("stat");
    model.study("std1").create("param", "Parametric");
    model.study("std1").feature("param").set("sweeptype", "filled");
    model.study("std1").feature("param").setIndex("pname", "rd", 0);
    model.study("std1").feature("param").setIndex("plistarr", "", 0);
    model.study("std1").feature("param").setIndex("punit", "", 0);
    model.study("std1").feature("param").setIndex("pname", "rd", 0);
    model.study("std1").feature("param").setIndex("plistarr", "", 0);
    model.study("std1").feature("param").setIndex("punit", "", 0);
    model.study("std1").feature("param").setIndex("pname", "poff", 0);
    model.study("std1").feature("param").setIndex("plistarr", "range(0,.1,.5)", 0);
    model.study("std1").feature("param").setIndex("pname", "rd", 1);
    model.study("std1").feature("param").setIndex("plistarr", "", 1);
    model.study("std1").feature("param").setIndex("punit", "", 1);
    model.study("std1").feature("param").setIndex("pname", "rd", 1);
    model.study("std1").feature("param").setIndex("plistarr", "", 1);
    model.study("std1").feature("param").setIndex("punit", "", 1);
    model.study("std1").feature("param").setIndex("pname", "xrs", 1);
    model.study("std1").feature("param").setIndex("plistarr", "range(0,2.5,5)", 1);
    model.study("std1").feature("param").setIndex("plistarr", "range(0,.1,.3)", 0);
    model.study("std1").feature("param").setIndex("pname", "rd", 2);
    model.study("std1").feature("param").setIndex("plistarr", "", 2);
    model.study("std1").feature("param").setIndex("punit", "", 2);
    model.study("std1").feature("param").setIndex("pname", "rd", 2);
    model.study("std1").feature("param").setIndex("plistarr", "", 2);
    model.study("std1").feature("param").setIndex("punit", "", 2);
    model.study("std1").feature("param").setIndex("pname", "boffset", 2);
    model.study("std1").feature("param").setIndex("plistarr", "range(-.02,.002,.02)", 2);
    model.study("std1").feature("param").setIndex("plistarr", "range(0,5,5)", 1);

    model.batch().create("p1", "Parametric");
    model.batch("p1").study("std1");
    model.batch("p1").create("so1", "Solutionseq");
    model.batch("p1").feature("so1").set("seq", "sol1");
    model.batch("p1").feature("so1").set("store", "on");
    model.batch("p1").feature("so1").set("clear", "on");
    model.batch("p1").feature("so1").set("psol", "none");
    model.batch("p1").set("pname", new String[]{"poff", "xrs", "boffset"});
    model.batch("p1").set("plistarr", new String[]{"range(0,.1,.3)", "range(0,5,5)", "range(-.02,.002,.02)"});
    model.batch("p1").set("sweeptype", "filled");
    model.batch("p1").set("probesel", "all");
    model.batch("p1").set("probes", new String[]{"pdom1"});
    model.batch("p1").set("plot", "off");
    model.batch("p1").set("err", "on");
    model.batch("p1").set("pdistrib", "off");
    model.batch("p1").attach("std1");
    model.batch("p1").set("control", "param");

    model.sol().create("sol2");
    model.sol("sol2").study("std1");
    model.sol("sol2").label("Parametric Solutions 1");

    model.batch("p1").feature("so1").set("psol", "sol2");

    model.probe("pdom1").genResult("none");

    model.result().numerical().remove("pev1");

    model.study("std1").feature("param").setIndex("pname", "", 2);
    model.study("std1").feature("param").remove("pname", 2);
    model.study("std1").feature("param").remove("punit", 2);
    model.study("std1").feature("param").remove("plistarr", 2);
    model.study("std1").create("funsw", "FunctionSweep");
    model.study("std1").feature("funsw").setIndex("pname", "", 0);
    model.study("std1").feature("funsw").setIndex("pcase", "all", 0);
    model.study("std1").feature("funsw").setIndex("plistarr", "", 0);
    model.study("std1").feature("funsw").setIndex("pname", "", 0);
    model.study("std1").feature("funsw").setIndex("pcase", "all", 0);
    model.study("std1").feature("funsw").setIndex("plistarr", "", 0);
    model.study("std1").feature().remove("funsw");
    model.study("std1").feature("param").setIndex("pname", "boffset", 0);
    model.study("std1").feature("param").setIndex("plistarr", "range(-.02,.002,.02)", 0);
    model.study("std1").feature("param").remove("pname", 1);
    model.study("std1").feature("param").remove("punit", 1);
    model.study("std1").feature("param").remove("plistarr", 1);

    model.probe("pdom1").genResult("none");

    model.batch("p1").run();

    model.variable("var1").set("enx", "d(en,x)");

    model.study().create("std2");
    model.study("std2").label("Bfield Offset");
    model.study("std2").create("param", "Parametric");
    model.study("std2").feature("param").setIndex("pname", "rd", 0);
    model.study("std2").feature("param").setIndex("plistarr", "", 0);
    model.study("std2").feature("param").setIndex("punit", "", 0);
    model.study("std2").feature("param").setIndex("pname", "rd", 0);
    model.study("std2").feature("param").setIndex("plistarr", "", 0);
    model.study("std2").feature("param").setIndex("punit", "", 0);
    model.study("std2").feature("param").setIndex("pname", "boffset", 0);
    model.study("std2").feature("param").setIndex("plistarr", "range(-.02,.002,.02)", 0);

    model.probe("pdom1").feature("ppb1").set("expr", "");

    model.result().dataset().create("cpt2", "CutPoint1D");
    model.result().dataset("cpt2").set("pointx", "0");
    model.result().dataset("cpt2").run();
    model.result().dataset().remove("cpt2");
    model.result().dataset("cpt1").set("data", "dset1");
    model.result().numerical().create("min1", "MinLine");
    model.result().numerical("min1").set("data", "cln1");

    model.probe("pdom1").feature("ppb1").set("probename", "bx");
    model.probe("pdom1").feature("ppb1").set("table", "default");
    model.probe("pdom1").feature("ppb1").set("expr", "mfnc.Bx");
    model.probe("pdom1").feature("ppb1").label("Center Energy");
    model.probe("pdom1").feature().duplicate("ppb2", "ppb1");
    model.probe("pdom1").feature("ppb2").label("Center Energy 2");
    model.probe("pdom1").feature("ppb2").set("probename", "bycent");
    model.probe("pdom1").feature("ppb1").set("probename", "bxcent");
    model.probe("pdom1").feature("ppb2").set("expr", "mfnc.By");
    model.probe("pdom1").feature().duplicate("ppb3", "ppb2");
    model.probe("pdom1").feature("ppb3").label("Center Energy 3");
    model.probe("pdom1").feature("ppb3").set("probename", "bzcent");
    model.probe("pdom1").feature("ppb3").set("expr", "mfnc.Bz");
    model.probe("pdom1").feature().duplicate("ppb4", "ppb1");
    model.probe("pdom1").feature().duplicate("ppb5", "ppb2");
    model.probe("pdom1").feature().duplicate("ppb6", "ppb3");
    model.probe("pdom1").feature("ppb4").label("Center Energy 4");
    model.probe("pdom1").feature("ppb4").set("probename", "excent");
    model.probe("pdom1").feature("ppb4").set("expr", "es.Ex");
    model.probe("pdom1").feature("ppb5").label("Center Energy 5");
    model.probe("pdom1").feature("ppb5").set("probename", "eycent");
    model.probe("pdom1").feature("ppb5").set("expr", "es.Ey");
    model.probe("pdom1").feature("ppb6").label("Center Energy 6");
    model.probe("pdom1").feature("ppb6").set("probename", "ezcent");
    model.probe("pdom1").feature("ppb6").set("expr", "es.Ez");
    model.probe("pdom1").feature("ppb1").label("Center Energy 1");

    model.study("std1").feature("param").setIndex("pname", "poff", 0);
    model.study("std1").feature("param").setIndex("plistarr", "range(0,.1,0)", 0);

    model.variable("var1").remove("ang300");
    model.variable("var1").remove("bn");
    model.variable("var1").remove("ang");
    model.variable("var1").remove("enx");
    model.variable("var1").remove("ang250");
    model.variable("var1").remove("bn0");
    model.variable("var1").remove("bn50");
    model.variable("var1").remove("bn100");
    model.variable("var1").remove("bn150");
    model.variable("var1").remove("bn200");
    model.variable("var1").remove("bn250");
    model.variable("var1").remove("bn300");
    model.variable("var1").remove("ang0");
    model.variable("var1").remove("ang50");
    model.variable("var1").remove("ang100");
    model.variable("var1").remove("ang150");
    model.variable("var1").remove("ang200");
    model.variable("var1").set("ex", "es.Ex");
    model.variable("var1").set("ey", "es.Ey");
    model.variable("var1").set("ez", "es.Ez");
    model.variable("var1").set("ezz", "d(ez,z)");
    model.variable().remove("var2");

    model.study("std2").create("stat", "Stationary");
    model.study("std2").feature("stat").set("physselection", "mfnc");
    model.study("std2").feature("stat").set("activate", new String[]{"mfnc", "off", "es", "on"});
    model.study("std2").feature("stat").set("physselection", "mfnc");
    model.study("std2").feature("stat").set("activate", new String[]{"mfnc", "off", "es", "off"});
    model.study("std2").feature("stat").set("useadvanceddisable", "on");
    model.study("std2").feature("stat").set("disabledphysics", new String[]{"mfnc", "es"});

    model.probe("pdom1").genResult("none");

    model.batch("p1").run();

    model.sol().create("sol4");
    model.sol("sol4").study("std2");

    model.study("std2").feature("stat").set("notlistsolnum", 1);
    model.study("std2").feature("stat").set("notsolnum", "1");
    model.study("std2").feature("stat").set("listsolnum", 1);
    model.study("std2").feature("stat").set("solnum", "1");

    model.sol("sol4").create("st1", "StudyStep");
    model.sol("sol4").feature("st1").set("study", "std2");
    model.sol("sol4").feature("st1").set("studystep", "stat");
    model.sol("sol4").create("v1", "Variables");
    model.sol("sol4").feature("v1").set("control", "stat");
    model.sol("sol4").create("s1", "Stationary");
    model.sol("sol4").feature("s1").create("p1", "Parametric");
    model.sol("sol4").feature("s1").feature("p1").set("pname", new String[]{"boffset"});
    model.sol("sol4").feature("s1").feature("p1").set("plistarr", new String[]{"range(-.02,.002,.02)"});
    model.sol("sol4").feature("s1").feature("p1").set("punit", new String[]{""});
    model.sol("sol4").feature("s1").feature("p1").set("sweeptype", "sparse");
    model.sol("sol4").feature("s1").feature("p1").set("preusesol", "no");
    model.sol("sol4").feature("s1").feature("p1").set("pcontinuationmode", "no");
    model.sol("sol4").feature("s1").feature("p1").set("plot", "off");
    model.sol("sol4").feature("s1").feature("p1").set("plotgroup", "pg6");
    model.sol("sol4").feature("s1").feature("p1").set("probesel", "all");
    model.sol("sol4").feature("s1").feature("p1").set("probes", new String[]{"pdom1"});
    model.sol("sol4").feature("s1").feature("p1").set("control", "param");
    model.sol("sol4").feature("s1").set("control", "stat");
    model.sol("sol4").attach("std2");

    model.probe("pdom1").genResult("none");

    model.sol("sol4").runAll();

    model.result().dataset("cpt1").set("data", "dset2");
    model.result().dataset("cpt1").run();
    model.result().numerical("pev1").set("table", "tbl2");
    model.result().dataset("cpt1").set("data", "dset1");
    model.result("pg17").feature("iso5").set("expr", "");
    model.result("pg17").feature("iso5").set("data", "dset4");
    model.result("pg17").feature("iso5").setIndex("looplevel", "8", 0);

    model.label("me_rodliteral_2mm_pingap.mph");

    model.physics("mfnc").prop("EquationForm").setIndex("form", "Stationary", 0);
    model.physics("es").prop("EquationForm").setIndex("form", "Stationary", 0);

    model.result().dataset().remove("cpl5");
    model.result().dataset().remove("an1_ds1");

    model.variable("var1").remove("en");
    model.variable("var1").remove("bx");
    model.variable("var1").remove("by");
    model.variable("var1").remove("bz");
    model.variable("var1").remove("ex");
    model.variable("var1").remove("ey");
    model.variable("var1").remove("ez");
    model.variable("var1").remove("ezz");
    model.variable("var1").set("bn", "sqrt(mfnc.Bx^2+mfnc.By^2+(mfnc.Bz+boffset)^2)");
    model.variable("var1")
         .set("ang", "acos((es.Ex*mfnc.Bx+es.Ey*mfnc.By+es.Ez*(mfnc.Bz+boffset))/(bn*es.normE+1e-20))");

    model.probe("pdom1").feature().remove("ppb2");
    model.probe("pdom1").feature().remove("ppb3");
    model.probe("pdom1").feature().remove("ppb4");
    model.probe("pdom1").feature().remove("ppb5");
    model.probe("pdom1").feature().remove("ppb6");
    model.probe("pdom1").feature("ppb1").set("expr", "f32energy(bn,es.normE,ang)");

    model.study().remove("std2");

    model.mesh("mesh1").feature("ref2").set("numrefine", "3");

    model.result().numerical().remove("min1");
    model.result().numerical().remove("pev2");
    model.result().numerical().remove("pev3");
    model.result().numerical().remove("pev4");
    model.result().numerical().remove("pev5");
    model.result().numerical().remove("pev6");

    model.probe("pdom1").feature("ppb1").set("probename", "enm");

    model.result().numerical().remove("pev1");
    model.result().numerical().create("int1", "IntSurface");
    model.result().numerical("int1").set("data", "iso1");
    model.result().dataset("iso1").set("expr", "ang");
    model.result().dataset("iso1").label("Loss Surface");
    model.result().numerical("int1").label("LossIntegration");
    model.result().numerical("int1").set("expr", "lz(bn,en,moag,5)*bw(bn,en,ang,enm,1e-2)");

    model.variable("var1").set("moag", "sqrt(d(ang,x)^2+d(ang,y)^2+d(ang,z)^2)");

    model.result("pg8").run();
    model.result("pg8").set("allowtableupdate", false);
    model.result("pg8").set("hasbeenplotted", true);
    model.result("pg8").feature("surf1").set("rangeunit", "");
    model.result("pg8").feature("surf1").set("rangeactualminmax", new double[]{1, 23.000000000000004});
    model.result("pg8").feature("surf1").set("hasbeenplotted", true);
    model.result("pg8").set("renderdatacached", false);
    model.result("pg8").set("allowtableupdate", true);
    model.result("pg8").set("renderdatacached", true);
    model.result().table("evl2").addRow(new double[]{-1.042104721069336, -0.11578941345214844, 9});
    model.result().numerical("int1").set("expr", "lz(bn,en,moag,5)*bw(bn,en,ang,enm,1e-2)*(dom==9)");
    model.result().table().remove("evl2");
    model.result().table().remove("tbl1");
    model.result().table().remove("evl3");
    model.result().table().remove("tbl2");
    model.result().table().remove("tbl3");
    model.result().table().remove("tbl4");
    model.result().table().remove("tbl5");
    model.result().table().remove("tbl6");
    model.result("pg17").feature("iso6").label("Surface");
    model.result("pg17").feature("iso6").set("expr", "ang");
    model.result("pg17").feature("iso6").feature("col1").set("expr", "lz(bn,en,moag,5)*bw(bn,en,ang,enm,2e-1)");
    model.result().numerical("int1").set("expr", "lz(bn,en,moag,5)*bw(bn,en,ang,enm,2e-1)*(dom==9)");
    model.result("pg17").feature().remove("iso2");
    model.result("pg17").feature().remove("iso3");
    model.result("pg17").feature().remove("iso4");
    model.result().remove("pg13");
    model.result().remove("pg16");
    model.result("pg14").set("data", "iso1");
    model.result("pg9").label("Gap");
    model.result().remove("pg7");

    model.study("std1").feature("param").setIndex("pname", "rd", 1);
    model.study("std1").feature("param").setIndex("plistarr", "", 1);
    model.study("std1").feature("param").setIndex("punit", "", 1);
    model.study("std1").feature("param").setIndex("pname", "rd", 1);
    model.study("std1").feature("param").setIndex("plistarr", "", 1);
    model.study("std1").feature("param").setIndex("punit", "", 1);
    model.study("std1").feature("param").setIndex("pname", "xrs", 1);
    model.study("std1").feature("param").setIndex("plistarr", "range(0,5,0)", 1);
    model.study("std1").feature("param").setIndex("pname", "rd", 2);
    model.study("std1").feature("param").setIndex("plistarr", "", 2);
    model.study("std1").feature("param").setIndex("punit", "", 2);
    model.study("std1").feature("param").setIndex("pname", "rd", 2);
    model.study("std1").feature("param").setIndex("plistarr", "", 2);
    model.study("std1").feature("param").setIndex("punit", "", 2);
    model.study("std1").feature("param").setIndex("pname", "boffset", 2);
    model.study("std1").feature("param").setIndex("plistarr", "range(0,0.02,0.02)", 2);
    model.study("std1").feature("param").set("probesel", "none");

    model.probe("pdom1").genResult("none");

    model.batch("p1").run();

    model.geom("geom1").run();

    model.result().table().create("tbl2", "Table");
    model.result().table("tbl2").comments("LossIntegration (lz(bn,en,moag,5)*bw(bn,en,ang,enm,2e-1)*(dom==9))");
    model.result().numerical("int1").set("table", "tbl2");
    model.result().numerical("int1").set("expr", "lz(bn,es.normE,moag,5)*bw(bn,es.normE,ang,enm,2e-1)*(dom==9)");
    model.result().table().create("tbl3", "Table");
    model.result().table("tbl3")
         .comments("LossIntegration (lz(bn,es.normE,moag,5)*bw(bn,es.normE,ang,enm,2e-1)*(dom==9))");
    model.result().numerical("int1").set("table", "tbl3");
    model.result().numerical("int1").setResult();
    model.result().dataset("iso1").set("data", "dset2");
    model.result().numerical("int1").set("descractive", "on");
    model.result().numerical("int1").set("descr", "Loss Integral");
    model.result().dataset("cpl1").set("data", "dset2");
    model.result().dataset("cpl2").set("data", "dset2");
    model.result().dataset("cpl3").set("data", "dset2");
    model.result().dataset("cpl4").set("data", "dset2");
    model.result().dataset("cln2").set("data", "dset2");
    model.result().dataset("cln3").set("data", "dset2");
    model.result().dataset().remove("cln4");
    model.result().dataset().remove("cln5");
    model.result().dataset().remove("cln6");
    model.result("pg9").set("data", "dset2");

    return model;
  }

  public static Model run24(Model model) {
    model.result("pg17").set("data", "iso1");
    model.result("pg17").run();
    model.result("pg17").feature("iso6").active(true);
    model.result("pg17").feature("iso6").feature("col1")
         .set("expr", "lz(bn,es.normE,moag,5)*bw(bn,es.normE,ang,enm,2e-1)");
    model.result("pg17").run();
    model.result("pg17").set("data", "dset2");
    model.result("pg17").run();
    model.result("pg17").setIndex("looplevel", "1", 0);
    model.result("pg17").run();
    model.result("pg17").run();
    model.result("pg17").setIndex("looplevel", "2", 0);
    model.result("pg17").run();
    model.result("pg17").setIndex("looplevel", "1", 0);
    model.result("pg17").run();
    model.result().dataset("iso1").run();

    model.view("view1").hideObjects().create("hide1");
    model.view("view1").hideObjects("hide1").init();
    model.view("view1").hideObjects("hide1").add(new String[]{"cyl4"});
    model.view("view1").hideObjects("hide1").add(new String[]{"cyl6"});
    model.view("view1").hideObjects("hide1").add(new String[]{"cyl5"});
    model.view("view1").hideObjects("hide1").add(new String[]{"cyl1"});
    model.view("view1").hideObjects("hide1").add(new String[]{"cyl2"});
    model.view("view1").hideObjects("hide1").add(new String[]{"cyl7"});
    model.view("view1").hideObjects("hide1").add(new String[]{"cyl8"});
    model.view("view1").hideObjects("hide1").add(new String[]{"blk8"});

    model.result("pg17").run();

    model.view("view1").hideObjects().clear();
    model.view("view1").hideEntities().clear();
    model.view("view1").hideEntities().create("hide1");
    model.view("view1").hideEntities("hide1").geom(2);
    model.view("view1").hideEntities("hide1").add(new int[]{1});
    model.view("view1").hideEntities().create("hide2");
    model.view("view1").hideEntities("hide2").geom(3);
    model.view("view1").hideEntities("hide2").add(new int[]{1});
    model.view("view1").hideEntities("hide2").add(new int[]{5});
    model.view("view1").hideEntities("hide2").add(new int[]{5});
    model.view("view1").hideEntities("hide2").add(new int[]{23});
    model.view("view1").hideEntities("hide2").add(new int[]{23});
    model.view("view1").hideEntities("hide2").add(new int[]{4});
    model.view("view1").hideEntities("hide2").add(new int[]{22});
    model.view("view1").hideEntities("hide2").add(new int[]{2});
    model.view("view1").hideEntities("hide2").add(new int[]{3});
    model.view("view1").hideEntities("hide2").add(new int[]{14});
    model.view("view1").hideEntities("hide2").add(new int[]{14});
    model.view("view1").hideEntities("hide2").add(new int[]{20});
    model.view("view1").hideEntities("hide2").add(new int[]{15});
    model.view("view1").hideEntities("hide2").add(new int[]{13});
    model.view("view1").hideEntities("hide2").add(new int[]{12});
    model.view("view1").hideEntities("hide2").add(new int[]{12});
    model.view("view1").hideEntities("hide2").add(new int[]{19});

    model.result("pg17").run();
    model.result("pg17").feature("iso6").set("data", "parent");
    model.result("pg17").run();
    model.result("pg17").set("edges", "on");
    model.result("pg17").run();
    model.result("pg3").run();
    model.result("pg3").set("data", "cpl4");
    model.result("pg3").run();
    model.result().dataset("iso1").run();
    model.result("pg3").set("data", "cpl1");
    model.result("pg3").run();
    model.result("pg3").setIndex("looplevel", "1", 0);
    model.result("pg3").run();
    model.result("pg3").setIndex("looplevel", "2", 0);
    model.result("pg3").run();
    model.result("pg17").set("showhiddenobjects", "on");
    model.result("pg17").run();
    model.result("pg17").feature("iso6").set("data", "dset2");

    model.func("an12")
         .set("expr", "exp(-pi/2*(angap(b,e)*h_const*1e6)^2/(dVdTheta(b,e)*h_const*1e9*dThetadx*dxdt*hbar_const+1e-100))");

    model.sol("sol1").updateSolution();

    model.result("pg17").feature("iso6").feature("col1")
         .set("expr", "1+0*lz(bn,es.normE,moag,5)*bw(bn,es.normE,ang,enm,2e-1)");
    model.result("pg17").run();
    model.result("pg17").feature("iso6").set("outersolnum", "1");
    model.result("pg17").run();
    model.result("pg17").feature("iso6").set("outersolnum", "2");
    model.result("pg17").run();
    model.result("pg17").feature("iso6")
         .set("expr", "acos((es.Ex*mfnc.Bx+es.Ey*mfnc.By+es.Ez*(mfnc.Bz+boffset))/(bn*es.normE+1e-20))");
    model.result("pg17").run();
    model.result("pg17").feature("iso6").set("outersolnum", "1");
    model.result("pg17").run();
    model.result("pg17").feature("iso6")
         .set("expr", "acos((es.Ex*mfnc.Bx+es.Ey*mfnc.By+es.Ez*(mfnc.Bz+boffset))/(sqrt(mfnc.Bx^2+mfnc.By^2+(mfnc.Bz+boffset)^2)*es.normE+1e-20))");
    model.result("pg17").run();
    model.result("pg3").run();
    model.result().dataset("dset2").set("frametype", "mesh");
    model.result("pg17").run();
    model.result().dataset("iso1").run();
    model.result().dataset("dset2").set("solution", "sol3");
    model.result().dataset("cpt1").run();
    model.result().dataset("iso1").run();
    model.result().dataset("dset2").set("frametype", "geometry");
    model.result().dataset("dset2").set("solution", "sol2");
    model.result().dataset("iso1").run();
    model.result().dataset("iso1").set("data", "dset1");
    model.result().dataset("iso1").run();
    model.result().dataset("iso1").set("data", "dset2");
    model.result().dataset("dset2").set("frametype", "spatial");
    model.result().dataset("dset2").run();
    model.result().dataset("dset2").set("frametype", "geometry");
    model.result().dataset("dset2").run();
    model.result().dataset("dset2").set("frametype", "mesh");
    model.result().dataset("iso1").run();
    model.result().numerical("int1").set("table", "tbl3");
    model.result().table().create("tbl4", "Table");
    model.result().table("tbl4")
         .comments("LossIntegration (lz(bn,es.normE,moag,5)*bw(bn,es.normE,ang,enm,2e-1)*(dom==9))");
    model.result().numerical("int1").set("table", "tbl4");
    model.result().numerical("int1").setResult();
    model.result().numerical("int1").set("data", "iso1");

    model.study("std1").feature("param").setIndex("plistarr", "range(0,0.01,0.02)", 2);

    model.probe("pdom1").genResult("none");

    model.batch("p1").run();

    model.result("pg17").run();
    model.result("pg17").feature("iso6").feature("col1").set("expr", "1");
    model.result("pg17").run();
    model.result("pg14").run();
    model.result("pg14").setIndex("looplevel", "1", 0);
    model.result("pg14").run();
    model.result().remove("pg9");
    model.result("pg3").run();
    model.result("pg3").setIndex("looplevel", "3", 0);
    model.result("pg3").run();
    model.result("pg3").setIndex("looplevel", "1", 0);
    model.result("pg3").run();
    model.result("pg3").setIndex("looplevel", "2", 0);
    model.result("pg3").run();
    model.result("pg3").feature("surf1").set("expr", "bn");
    model.result("pg3").run();

    model.geom("geom1").run();

    model.view("view1").hideObjects().clear();
    model.view("view1").hideEntities().clear();
    model.view("view1").hideEntities().create("hide1");
    model.view("view1").hideEntities("hide1").geom(3);
    model.view("view1").hideEntities("hide1").add(new int[]{1});
    model.view("view1").hideEntities("hide1").add(new int[]{22});
    model.view("view1").hideEntities("hide1").add(new int[]{4});
    model.view("view1").hideEntities("hide1").add(new int[]{5});
    model.view("view1").hideEntities("hide1").add(new int[]{23});

    model.result("pg3").set("data", "cpl4");
    model.result("pg3").run();
    model.result("pg3").setIndex("looplevel", "3", 0);
    model.result("pg3").run();
    model.result("pg3").setIndex("looplevel", "1", 0);
    model.result("pg3").run();
    model.result("pg3").feature("surf1").set("expr", "mfnc.normB");
    model.result("pg3").run();
    model.result("pg3").run();
    model.result("pg3").feature("surf1").set("expr", "mfnc.Bx");
    model.result("pg3").run();
    model.result("pg3").setIndex("looplevel", "2", 0);
    model.result("pg3").run();

    model.study("std1").create("stat", "Stationary");

    model.probe("pdom1").genResult("none");

    model.batch("p1").run();

    model.result().dataset("iso1").run();
    model.result("pg17").run();
    model.result("pg17").feature("iso6").set("expr", "ang");
    model.result("pg17").feature("iso6").feature("col1")
         .set("expr", "lz(bn,es.normE,moag,5)*bw(bn,es.normE,ang,enm,2e-1)");
    model.result("pg17").run();

    model.geom("geom1").run();

    model.view("view1").hideEntities("hide1").add(new int[]{2});
    model.view("view1").hideEntities("hide1").add(new int[]{20});
    model.view("view1").hideEntities("hide1").add(new int[]{3});
    model.view("view1").hideEntities("hide1").add(new int[]{19});
    model.view("view1").hideEntities("hide1").add(new int[]{12});
    model.view("view1").hideEntities("hide1").add(new int[]{13});
    model.view("view1").hideEntities("hide1").add(new int[]{15});
    model.view("view1").hideEntities("hide1").add(new int[]{14});

    model.result("pg17").run();
    model.result("pg17").set("showhiddenobjects", "off");
    model.result("pg17").set("edges", "off");
    model.result("pg17").run();
    model.result("pg17").setIndex("looplevel", "2", 0);
    model.result("pg17").run();
    model.result("pg17").run();
    model.result("pg17").setIndex("looplevel", "3", 0);
    model.result("pg17").feature("iso6").set("data", "parent");
    model.result("pg17").run();
    model.result("pg17").setIndex("looplevel", "2", 0);
    model.result("pg17").run();

    model.study("std1").feature("param").remove("pname", 2);
    model.study("std1").feature("param").remove("punit", 2);
    model.study("std1").feature("param").remove("plistarr", 2);
    model.study().create("std2");
    model.study("std2").create("stat", "Stationary");
    model.study("std2").feature("stat").activate("mfnc", true);
    model.study("std2").feature("stat").activate("es", true);
    model.study("std2").label("Boffset Variable");
    model.study("std2").label("Boffset Dummy");
    model.study("std2").feature("stat").set("physselection", "mfnc");
    model.study("std2").feature("stat").set("activate", new String[]{"mfnc", "off", "es", "on"});
    model.study("std2").feature("stat").set("physselection", "mfnc");
    model.study("std2").feature("stat").set("activate", new String[]{"mfnc", "off", "es", "off"});
    model.study("std2").feature("stat").set("usesol", "on");
    model.study("std2").feature("stat").set("notsolmethod", "sol");
    model.study("std2").feature("stat").set("notstudy", "std1");
    model.study("std2").feature("stat").set("notsol", "sol2");

    model.result().dataset("cpl1").set("data", "dset1");
    model.result().dataset("cpl2").set("data", "dset1");
    model.result().dataset("cpl3").set("data", "dset1");
    model.result().dataset("cpl4").set("data", "dset1");
    model.result().dataset("iso1").set("data", "dset2");
    model.result().dataset("cpl1").set("data", "dset2");
    model.result().dataset("cpl3").set("data", "dset2");
    model.result().dataset("cpl2").set("data", "dset2");
    model.result().dataset("cpl4").set("data", "dset2");

    model.study("std2").feature("stat").set("notsoluse", "sol3");
    model.study("std2").feature("stat").set("notsolnum", "auto");
    model.study("std2").feature("stat").set("useparam", "on");
    model.study("std2").feature("stat").setIndex("pname", "rd", 0);
    model.study("std2").feature("stat").setIndex("plistarr", "", 0);
    model.study("std2").feature("stat").setIndex("punit", "", 0);
    model.study("std2").feature("stat").setIndex("pname", "rd", 0);
    model.study("std2").feature("stat").setIndex("plistarr", "", 0);
    model.study("std2").feature("stat").setIndex("punit", "", 0);
    model.study("std2").feature("stat").setIndex("pname", "boffset", 0);
    model.study("std2").feature("stat").setIndex("plistarr", "range(-.02,.02,.02)", 0);
    model.study("std1").feature("param").setIndex("plistarr", "range(0,.1,.1)", 0);
    model.study("std1").feature("param").setIndex("plistarr", "range(0,.1,0)", 0);

    model.probe("pdom1").genResult("none");

    model.batch("p1").run();

    model.sol().create("sol4");
    model.sol("sol4").study("std2");

    model.study("std2").feature("stat").set("notlistsolnum", 1);
    model.study("std2").feature("stat").set("notsolnum", "auto");
    model.study("std2").feature("stat").set("listsolnum", 1);
    model.study("std2").feature("stat").set("solnum", "1");

    model.sol("sol4").create("st1", "StudyStep");
    model.sol("sol4").feature("st1").set("study", "std2");
    model.sol("sol4").feature("st1").set("studystep", "stat");
    model.sol("sol4").create("v1", "Variables");
    model.sol("sol4").feature("v1").set("control", "stat");
    model.sol("sol4").create("s1", "Stationary");
    model.sol("sol4").feature("s1").create("p1", "Parametric");
    model.sol("sol4").feature("s1").feature().remove("pDef");
    model.sol("sol4").feature("s1").feature("p1").set("control", "stat");
    model.sol("sol4").feature("s1").set("control", "stat");
    model.sol("sol4").attach("std2");

    model.probe("pdom1").genResult("none");

    model.sol("sol4").runAll();

    model.result().numerical("int1").set("data", "dset4");
    model.result().numerical("int1").set("table", "tbl4");
    model.result().table().create("tbl5", "Table");
    model.result().table("tbl5")
         .comments("LossIntegration (lz(bn,es.normE,moag,5)*bw(bn,es.normE,ang,enm,2e-1)*(dom==9))");
    model.result().numerical("int1").set("table", "tbl5");
    model.result().numerical("int1").setResult();
    model.result().dataset("iso1").set("data", "dset4");
    model.result().dataset("iso1").run();
    model.result().numerical("int1").set("table", "tbl5");
    model.result().numerical("int1").appendResult();
    model.result().dataset("iso1").set("data", "dset2");
    model.result().numerical("int1").set("data", "dset2");

    model.study().remove("std2");
    model.study("std1").feature("param").setIndex("pname", "rd", 2);
    model.study("std1").feature("param").setIndex("plistarr", "", 2);
    model.study("std1").feature("param").setIndex("punit", "", 2);
    model.study("std1").feature("param").setIndex("pname", "rd", 2);
    model.study("std1").feature("param").setIndex("plistarr", "", 2);
    model.study("std1").feature("param").setIndex("punit", "", 2);
    model.study("std1").feature("param").setIndex("pname", "boffset", 2);
    model.study("std1").feature("param").setIndex("plistarr", "range(0,.02,.02)", 2);

    model.result().create("pg19", "PlotGroup3D");
    model.result("pg19").label("Magnetic Flux Density Norm (mfnc)");
    model.result("pg19").set("oldanalysistype", "noneavailable");
    model.result("pg19").set("data", "dset1");
    model.result("pg19").feature().create("mslc1", "Multislice");
    model.result("pg19").feature("mslc1").set("oldanalysistype", "noneavailable");
    model.result("pg19").feature("mslc1").set("expr", "mfnc.normB");
    model.result("pg19").feature("mslc1").set("data", "parent");
    model.result().create("pg20", "PlotGroup3D");
    model.result("pg20").label("Electric Potential (es)");
    model.result("pg20").set("oldanalysistype", "noneavailable");
    model.result("pg20").set("frametype", "spatial");
    model.result("pg20").set("data", "dset1");
    model.result("pg20").feature().create("mslc1", "Multislice");
    model.result("pg20").feature("mslc1").set("oldanalysistype", "noneavailable");
    model.result("pg20").feature("mslc1").set("expr", "V");
    model.result("pg20").feature("mslc1").set("data", "parent");

    model.probe("pdom1").genResult("none");

    model.batch("p1").run();

    model.result().numerical("int1").set("table", "tbl5");
    model.result().table().create("tbl6", "Table");
    model.result().table("tbl6")
         .comments("LossIntegration (lz(bn,es.normE,moag,5)*bw(bn,es.normE,ang,enm,2e-1)*(dom==9))");
    model.result().numerical("int1").set("table", "tbl6");
    model.result().numerical("int1").setResult();
    model.result().numerical("int1").set("data", "iso1");
    model.result().numerical("int1").set("table", "tbl6");
    model.result().numerical("int1").appendResult();

    model.study("std1").feature("param").setIndex("plistarr", "range(0,.1,.1)", 0);
    model.study("std1").feature("param").setIndex("plistarr", "range(-.02,.002,.02)", 2);
    model.study("std1").feature("param").setIndex("plistarr", "range(-.02,.005,.02)", 2);
    model.study("std1").feature("param").setIndex("plistarr", "range(.2,.2,.2)", 0);
    model.study("std1").feature("param").setIndex("plistarr", "range(-.02,.002,.02)", 2);

    model.probe("pdom1").genResult("none");

    model.batch("p1").run();

    model.result().numerical("int1").setIndex("looplevelinput", "manualindices", 2);
    model.result().numerical("int1").setIndex("looplevelinput", "manual", 2);
    model.result().numerical("int1").setIndex("looplevelinput", "manual", 1);
    model.result().numerical("int1").setIndex("looplevelinput", "first", 1);
    model.result().numerical("int1").setIndex("looplevelinput", "first", 2);
    model.result().numerical("int1").setIndex("looplevelinput", "manual", 0);
    model.result().numerical("int1").setIndex("looplevelinput", "all", 0);
    model.result().numerical("int1").set("descr", "Loss Area v B @ 200um pin offset");
    model.result().numerical("int1").set("table", "tbl6");
    model.result().numerical("int1").appendResult();
    model.result().numerical("int1").set("tablecols", "level1");
    model.result().numerical("int1").set("table", "tbl6");
    model.result().table().create("tbl7", "Table");
    model.result().table("tbl7")
         .comments("LossIntegration (lz(bn,es.normE,moag,5)*bw(bn,es.normE,ang,enm,2e-1)*(dom==9))");
    model.result().numerical("int1").set("table", "tbl7");
    model.result().numerical("int1").setResult();
    model.result().create("pg21", 1);
    model.result("pg21").set("data", "none");
    model.result("pg21").create("tblp1", "Table");
    model.result("pg21").feature("tblp1").set("table", "tbl7");
    model.result("pg21").run();
    model.result("pg21").feature("tblp1").set("imagplot", "on");
    model.result().numerical("int1").set("tablecols", "data");
    model.result().table("tbl7").set("rows", "boffset");
    model.result().table("tbl7").set("format", "filled");
    model.result("pg21").run();
    model.result("pg21").feature("tblp1").set("imagplot", "off");
    model.result("pg21").run();

    model.study("std1").feature("param").setIndex("plistarr", "range(.02,.002,.02)", 2);
    model.study("std1").feature("param").setIndex("plistarr", "range(0,.04,.2)", 0);
    model.study("std1").feature("param").setIndex("plistarr", "range(.15,.1,.15)", 0);
    model.study("std1").feature("param").setIndex("plistarr", "range(5,5,0)", 1);
    model.study("std1").feature("param").setIndex("plistarr", "range(-.03,.0025,.03)", 2);

    model.result("pg17").setIndex("looplevel", "11", 0);
    model.result("pg17").run();
    model.result("pg18").set("window", "window1");
    model.result("pg21").set("xlabelactive", "on");
    model.result("pg21").set("xlabel", "Offset B-field (T)");
    model.result("pg21").set("ylabelactive", "on");
    model.result("pg21").set("ylabel", "Area of Loss Region (m^2)");
    model.result("pg21").set("titletype", "manual");
    model.result("pg21")
         .set("title", "Loss Region v Offset B-field, Pin Trap (+,+), 200um pin offset, no extra pin gap");
    model.result("pg21").run();

    model.geom("geom1").run();

    model.probe("pdom1").genResult("none");

    model.study("std1").feature("param").setIndex("plistarr", "range(5,5,5)", 1);

    model.probe("pdom1").genResult("none");

    model.batch("p1").run();

    model.result("pg17").setIndex("looplevel", "13", 0);
    model.result("pg17").run();
    model.result("pg17").setIndex("looplevel", "12", 0);
    model.result("pg17").run();
    model.result("pg17").setIndex("looplevel", "14", 0);
    model.result("pg17").run();
    model.result("pg17").setIndex("looplevel", "19", 0);
    model.result("pg17").run();

    model.geom("geom1").run();

    model.result().numerical("int1").set("descr", "Loss Area v B @ 150um pin offset");
    model.result().numerical("int1").set("table", "tbl7");
    model.result().numerical("int1").appendResult();
    model.result().numerical("int1").setIndex("looplevelinput", "manualindices", 0);
    model.result().numerical("int1").setIndex("looplevelinput", "manual", 0);
    model.result().numerical("int1").setIndex("looplevelinput", "all", 0);
    model.result().table().create("tbl8", "Table");
    model.result().table("tbl8")
         .comments("LossIntegration (lz(bn,es.normE,moag,5)*bw(bn,es.normE,ang,enm,2e-1)*(dom==9))");
    model.result().numerical("int1").set("table", "tbl8");
    model.result().numerical("int1").setResult();
    model.result().create("pg22", 1);
    model.result("pg22").set("data", "none");
    model.result("pg22").create("tblp1", "Table");
    model.result("pg22").feature("tblp1").set("table", "tbl8");
    model.result("pg22").run();
    model.result("pg22").feature("tblp1").set("xaxisdata", "3");
    model.result("pg22").run();
    model.result("pg22").feature("tblp1").set("plotcolumninput", "manual");
    model.result("pg22").feature("tblp1").set("plotcolumns", new String[]{"4"});
    model.result("pg22").feature("tblp1").set("preprocy", "linear");
    model.result("pg22").feature("tblp1").set("scalingy", "1e12");
    model.result("pg22").run();
    model.result("pg22").run();
    model.result().table("tbl8").label("150um ++");
    model.result().remove("pg20");
    model.result().remove("pg19");
    model.result().table().remove("tbl1");
    model.result().table().remove("tbl2");
    model.result().table().remove("tbl3");
    model.result().table().remove("tbl4");
    model.result().table().remove("tbl5");
    model.result().table().remove("tbl6");

    model.param().set("vr2", "-12500");
    model.param().set("vr4", "-12500");

    model.result().table().remove("tbl7");
    model.result().dataset().remove("dset1");

    model.sol("sol2").feature().remove("su1");
    model.sol("sol2").feature().remove("su2");
    model.sol("sol2").feature().remove("su3");
    model.sol("sol2").feature().remove("su4");
    model.sol("sol2").feature().remove("su5");
    model.sol("sol2").feature().remove("su6");
    model.sol("sol2").feature().remove("su7");
    model.sol("sol2").feature().remove("su8");
    model.sol("sol2").feature().remove("su9");
    model.sol("sol2").feature().remove("su10");
    model.sol("sol2").feature().remove("su11");
    model.sol("sol2").feature().remove("su12");
    model.sol("sol2").feature().remove("su13");
    model.sol("sol2").feature().remove("su14");
    model.sol("sol2").feature().remove("su15");
    model.sol("sol2").feature().remove("su16");
    model.sol("sol2").feature().remove("su17");
    model.sol("sol2").feature().remove("su18");
    model.sol("sol2").feature().remove("su19");
    model.sol("sol2").feature().remove("su20");
    model.sol("sol2").feature().remove("su21");
    model.sol("sol2").feature().remove("su22");
    model.sol("sol2").feature().remove("su23");
    model.sol("sol2").feature().remove("su24");
    model.sol("sol2").feature().remove("su25");

    model.batch().remove("p1");

    model.result().dataset("dset2").set("solution", "none");

    model.sol().remove("sol2");

    model.study("std1").feature("param").setIndex("plistarr", "range(-2,.2,2)", 0);
    model.study("std1").feature("param").setIndex("plistarr", "range(0,.02,.02)", 2);
    model.study("std1").feature("param").setIndex("plistarr", "range(-2,.5,2)", 0);

    model.batch().create("p1", "Parametric");
    model.batch("p1").study("std1");
    model.batch("p1").create("so1", "Solutionseq");
    model.batch("p1").feature("so1").set("seq", "sol1");
    model.batch("p1").feature("so1").set("store", "on");
    model.batch("p1").feature("so1").set("clear", "on");
    model.batch("p1").feature("so1").set("psol", "none");
    model.batch("p1").set("pname", new String[]{"poff", "xrs", "boffset"});
    model.batch("p1").set("plistarr", new String[]{"range(-2,.5,2)", "range(5,5,5)", "range(0,.02,.02)"});
    model.batch("p1").set("sweeptype", "filled");
    model.batch("p1").set("probesel", "none");
    model.batch("p1").set("probes", new String[]{"pdom1"});
    model.batch("p1").set("plot", "off");
    model.batch("p1").set("err", "on");
    model.batch("p1").set("pdistrib", "off");
    model.batch("p1").attach("std1");
    model.batch("p1").set("control", "param");

    model.sol().create("sol2");
    model.sol("sol2").study("std1");
    model.sol("sol2").label("Parametric Solutions 1");

    model.batch("p1").feature("so1").set("psol", "sol2");

    model.result().create("pg23", "PlotGroup3D");
    model.result("pg23").label("Magnetic Flux Density Norm (mfnc)");
    model.result("pg23").set("data", "dset4");
    model.result("pg23").set("oldanalysistype", "noneavailable");
    model.result("pg23").set("outertype", "none");
    model.result("pg23").set("data", "dset4");
    model.result("pg23").feature().create("mslc1", "Multislice");
    model.result("pg23").feature("mslc1").set("oldanalysistype", "noneavailable");
    model.result("pg23").feature("mslc1").set("expr", "mfnc.normB");
    model.result("pg23").feature("mslc1").set("data", "parent");
    model.result().create("pg24", "PlotGroup3D");
    model.result("pg24").label("Electric Potential (es)");
    model.result("pg24").set("data", "dset4");
    model.result("pg24").set("oldanalysistype", "noneavailable");
    model.result("pg24").set("outertype", "none");
    model.result("pg24").set("frametype", "spatial");
    model.result("pg24").set("data", "dset4");
    model.result("pg24").feature().create("mslc1", "Multislice");
    model.result("pg24").feature("mslc1").set("oldanalysistype", "noneavailable");
    model.result("pg24").feature("mslc1").set("expr", "V");
    model.result("pg24").feature("mslc1").set("data", "parent");

    model.probe("pdom1").genResult("none");

    model.result().remove("pg24");
    model.result().remove("pg23");
    model.result().remove("pg25");

    model.study("std1").feature("param").setIndex("plistarr", "range(0,5,5)", 1);

    model.result().create("pg23", "PlotGroup3D");
    model.result("pg23").label("Magnetic Flux Density Norm (mfnc)");
    model.result("pg23").set("data", "dset4");
    model.result("pg23").set("oldanalysistype", "noneavailable");
    model.result("pg23").set("outertype", "none");
    model.result("pg23").set("data", "dset4");
    model.result("pg23").feature().create("mslc1", "Multislice");
    model.result("pg23").feature("mslc1").set("oldanalysistype", "noneavailable");
    model.result("pg23").feature("mslc1").set("expr", "mfnc.normB");
    model.result("pg23").feature("mslc1").set("data", "parent");
    model.result().create("pg24", "PlotGroup3D");
    model.result("pg24").label("Electric Potential (es)");
    model.result("pg24").set("data", "dset4");
    model.result("pg24").set("oldanalysistype", "noneavailable");
    model.result("pg24").set("outertype", "none");
    model.result("pg24").set("frametype", "spatial");
    model.result("pg24").set("data", "dset4");
    model.result("pg24").feature().create("mslc1", "Multislice");
    model.result("pg24").feature("mslc1").set("oldanalysistype", "noneavailable");
    model.result("pg24").feature("mslc1").set("expr", "V");
    model.result("pg24").feature("mslc1").set("data", "parent");

    model.probe("pdom1").genResult("none");

    model.batch("p1").run();

    model.result("pg17").set("data", "dset4");
    model.result("pg17").run();
    model.result("pg17").set("outersolnum", "2");
    model.result("pg17").run();

    model.geom("geom1").run();

    model.result().dataset("iso1").set("data", "dset4");
    model.result().numerical("int1").set("outerinput", "manual");
    model.result().numerical("int1")
         .set("outersolnum", new String[]{"1", "5", "9", "13", "17", "21", "25", "29", "33"});
    model.result().table().create("tbl10", "Table");
    model.result().table("tbl10")
         .comments("LossIntegration (lz(bn,es.normE,moag,5)*bw(bn,es.normE,ang,enm,2e-1)*(dom==9))");
    model.result().numerical("int1").set("table", "tbl10");
    model.result().numerical("int1").set("descr", "Loss Area v B @ pin offset +,-");
    model.result().table().create("tbl11", "Table");
    model.result().table("tbl11")
         .comments("LossIntegration (lz(bn,es.normE,moag,5)*bw(bn,es.normE,ang,enm,2e-1)*(dom==9))");
    model.result().numerical("int1").set("table", "tbl11");
    model.result().numerical("int1").setResult();
    model.result().create("pg26", 1);
    model.result("pg26").set("data", "none");
    model.result("pg26").create("tblp1", "Table");
    model.result("pg26").feature("tblp1").set("table", "tbl11");
    model.result("pg26").feature("tblp1").set("xaxisdata", "1");
    model.result("pg26").run();
    model.result("pg26").feature("tblp1").set("preprocy", "linear");
    model.result("pg26").feature("tblp1").set("scalingy", "1e12");
    model.result("pg26").run();
    model.result().numerical("int1")
         .set("outersolnum", new String[]{"2", "6", "10", "14", "18", "22", "26", "30", "34"});
    model.result().numerical("int1").set("descr", "Loss Area v B @ pin offset (+,-), boffset=200G");
    model.result().table().create("tbl12", "Table");
    model.result().table("tbl12")
         .comments("LossIntegration (lz(bn,es.normE,moag,5)*bw(bn,es.normE,ang,enm,2e-1)*(dom==9))");
    model.result().numerical("int1").set("table", "tbl12");
    model.result().numerical("int1").setResult();
    model.result().table().remove("tbl10");
    model.result().table().remove("tbl9");
    model.result().table("tbl11").label("0G, 2mm, +,-");
    model.result().table("tbl12").label("200G, 2mm, +,-");
    model.result("pg26").feature().duplicate("tblp2", "tblp1");
    model.result("pg26").feature("tblp2").set("table", "tbl12");
    model.result("pg26").run();
    model.result("pg26").feature("tblp2").set("plotcolumninput", "manual");
    model.result("pg26").feature("tblp2").set("plotcolumns", new String[]{"4"});
    model.result("pg26").feature("tblp1").set("plotcolumninput", "manual");
    model.result("pg26").feature("tblp1").set("plotcolumns", new String[]{"4"});
    model.result("pg26").run();
    model.result("pg17").set("outersolnum", "17");
    model.result("pg17").run();
    model.result("pg17").set("outersolnum", "21");
    model.result("pg17").run();
    model.result("pg17").set("outersolnum", "19");
    model.result("pg17").run();
    model.result("pg17").set("outersolnum", "20");
    model.result("pg17").run();
    model.result().numerical("int1").set("descr", "Loss Area v B @ pin offset (+,-), xtra rod space");
    model.result().numerical("int1")
         .set("outersolnum", new String[]{"3", "7", "11", "15", "19", "23", "27", "31", "35"});
    model.result().table().create("tbl13", "Table");
    model.result().table("tbl13")
         .comments("LossIntegration (lz(bn,es.normE,moag,5)*bw(bn,es.normE,ang,enm,2e-1)*(dom==9))");
    model.result().numerical("int1").set("table", "tbl13");
    model.result().numerical("int1").setResult();
    model.result().table("tbl13").label("0G, 7mm, +,-");
    model.result("pg26").feature().duplicate("tblp3", "tblp2");
    model.result("pg26").feature("tblp3").set("table", "tbl13");
    model.result("pg26").run();
    model.result().numerical("int1")
         .set("outersolnum", new String[]{"4", "8", "12", "16", "20", "24", "28", "32", "36"});
    model.result().table().create("tbl14", "Table");

    return model;
  }

  public static Model run25(Model model) {
    model.result().table("tbl14")
         .comments("LossIntegration (lz(bn,es.normE,moag,5)*bw(bn,es.normE,ang,enm,2e-1)*(dom==9))");
    model.result().numerical("int1").set("table", "tbl14");
    model.result().numerical("int1").setResult();
    model.result().table("tbl14").label("200G, 7mm, +,-");
    model.result("pg26").feature().duplicate("tblp4", "tblp3");
    model.result("pg26").feature("tblp4").set("table", "tbl14");
    model.result("pg26").run();

    model.study("std1").feature("param").setIndex("plistarr", "range(-.5,.1,.5)", 0);
    model.study("std1").feature("param").setIndex("plistarr", "range(0,5,0)", 1);
    model.study("std1").feature("param").setIndex("plistarr", "range(0,.02,0)", 2);
    model.study("std1").feature("param").setIndex("plistarr", "range(-.5,.025,.5)", 0);

    model.probe("pdom1").genResult("none");

    model.batch("p1").run();

    model.geom("geom1").run();

    model.result("pg17").setIndex("looplevel", "25", 2);
    model.result("pg17").run();
    model.result("pg17").setIndex("looplevel", "21", 2);
    model.result("pg17").run();
    model.result("pg17").setIndex("looplevel", "29", 2);
    model.result("pg17").run();
    model.result().dataset().create("dset5", "Solution");
    model.result().dataset("dset5").set("solution", "sol2");
    model.result().dataset().remove("dset5");
    model.result().numerical("int1").set("descr", "Loss Area v B @ pin offset (+,-), zoomed in");
    model.result().numerical("int1").setIndex("looplevelinput", "all", 2);
    model.result().numerical("int1").setIndex("looplevelinput", "all", 1);
    model.result().numerical("int1").setIndex("looplevelinput", "all", 0);
    model.result().numerical("int1").set("expr", "(dom==9)*lz(bn,es.normE,moag,5)*bw(bn,es.normE,ang,enm,2e-1)");
    model.result().table().create("tbl16", "Table");
    model.result().table("tbl16")
         .comments("LossIntegration ((dom==9)*lz(bn,es.normE,moag,5)*bw(bn,es.normE,ang,enm,2e-1))");
    model.result().numerical("int1").set("table", "tbl16");
    model.result().numerical("int1").setResult();
    model.result().table("tbl16").label("(+,-) 0G, 2mm, Zoom");
    model.result("pg26").feature().duplicate("tblp5", "tblp4");
    model.result("pg26").feature("tblp5").set("table", "tbl16");
    model.result("pg26").run();
    model.result("pg26").feature("tblp1").set("linestyle", "none");
    model.result("pg26").feature("tblp1").set("linemarker", "circle");
    model.result("pg26").run();
    model.result("pg26").feature("tblp2").set("linestyle", "dashed");
    model.result("pg26").run();
    model.result("pg26").feature("tblp2").set("legend", "on");
    model.result("pg26").feature("tblp2").set("legendmethod", "manual");
    model.result("pg26").feature("tblp1").set("legend", "on");
    model.result("pg26").feature("tblp1").set("legendmethod", "manual");
    model.result("pg26").feature("tblp3").set("legend", "on");
    model.result("pg26").feature("tblp3").set("legendmethod", "manual");
    model.result("pg26").feature("tblp4").set("legend", "on");
    model.result("pg26").feature("tblp4").set("legendmethod", "manual");
    model.result("pg26").feature("tblp5").set("legend", "on");
    model.result("pg26").feature("tblp5").set("legendmethod", "manual");
    model.result("pg26").run();
    model.result("pg26").set("titletype", "manual");
    model.result("pg26").set("title", "Loss Area v Pin Offset, (+,-) trap");
    model.result("pg26").run();
    model.result("pg26").set("ylabelactive", "on");
    model.result("pg26").set("ylabel", "Effective Area (Weighted by Trap Depth)");
    model.result("pg26").set("xlabelactive", "on");
    model.result("pg26").set("xlabel", "Pin Offset (mm)");
    model.result("pg26").set("ylabel", "Effective Area (\\mum)");
    model.result("pg26").run();
    model.result("pg26").run();
    model.result("pg26").set("ylabel", "Effective Area (um)");
    model.result("pg26").run();
    model.result("pg26").set("ylabel", "Trap-Depth Weighted Loss Area (um)");
    model.result("pg26").run();
    model.result("pg26").feature().move("tblp5", 2);
    model.result("pg26").feature("tblp1").set("linecolor", "blue");
    model.result("pg26").feature("tblp3").set("linecolor", "red");
    model.result("pg26").run();
    model.result("pg26").feature("tblp2").set("linecolor", "blue");
    model.result("pg26").feature("tblp4").set("linecolor", "red");
    model.result("pg26").feature("tblp5").set("linecolor", "blue");
    model.result("pg26").feature("tblp5").set("linewidth", "1");
    model.result("pg26").feature("tblp1").set("markerpos", "datapoints");
    model.result("pg26").feature("tblp2").set("linestyle", "none");
    model.result("pg26").feature("tblp2").set("linemarker", "asterisk");
    model.result("pg26").feature("tblp2").set("markerpos", "datapoints");
    model.result("pg26").feature().move("tblp5", 1);
    model.result("pg26").feature("tblp3").set("linemarker", "circle");
    model.result("pg26").feature("tblp4").set("linemarker", "asterisk");
    model.result("pg26").feature("tblp4").set("markerpos", "datapoints");
    model.result("pg26").feature("tblp3").set("markerpos", "datapoints");
    model.result("pg26").run();
    model.result("pg26").feature("tblp2").set("linestyle", "solid");
    model.result("pg26").run();
    model.result("pg26").run();
    model.result("pg26").set("legendpos", "lowerright");
    model.result("pg26").run();
    model.result().remove("pg23");
    model.result().remove("pg24");
    model.result("pg17").setIndex("looplevel", "1", 2);
    model.result("pg17").run();
    model.result("pg17").setIndex("looplevel", "2", 2);
    model.result("pg17").run();
    model.result("pg26").run();
    model.result("pg26").feature("tblp1").setIndex("legends", "(+,-) Straight Pins", 0);
    model.result("pg26").feature("tblp5").setIndex("legends", "Detail Near Zero", 0);
    model.result("pg26").feature("tblp2").setIndex("legends", "200G Offset", 0);
    model.result("pg26").feature("tblp3").setIndex("legends", "(+,-), bent pins", 0);
    model.result("pg26").feature("tblp4").setIndex("legends", "200G Offset", 0);
    model.result("pg26").feature("tblp3").setIndex("legends", "(+,-), Bent Pins (7mm)", 0);
    model.result("pg26").feature("tblp3").setIndex("legends", "(+,-), 7mm Bent Pins, 0G", 0);
    model.result("pg26").feature("tblp1").setIndex("legends", "(+,-) Straight Pins, 0G", 0);
    model.result("pg26").feature("tblp1").set("linestyle", "solid");
    model.result("pg26").feature("tblp5").set("linestyle", "dashed");
    model.result("pg26").run();
    model.result("pg26").set("legendpos", "upperright");
    model.result("pg26").run();
    model.result("pg26").feature("tblp1").set("linewidth", "2");
    model.result("pg26").feature("tblp5").set("linewidth", "2");
    model.result("pg26").feature("tblp2").set("linewidth", "2");
    model.result("pg26").feature("tblp3").set("linewidth", "2");
    model.result("pg26").feature("tblp4").set("linewidth", "2");
    model.result("pg22").run();
    model.result("pg22").label("W Plot +,+");
    model.result("pg22").set("titletype", "manual");
    model.result("pg22").set("title", "(+,+) Trap W-plot fit");
    model.result("pg22").set("xlabelactive", "on");
    model.result("pg22").set("xlabel", "Bias Field (G)");
    model.result("pg22").set("ylabelactive", "on");
    model.result("pg22").set("ylabel", "Loss Area (um)");
    model.result("pg22").run();
    model.result("pg22").feature("tblp1").set("preprocx", "linear");
    model.result("pg22").feature("tblp1").set("scalingx", "10000");
    model.result("pg22").run();
    model.result("pg22").feature("tblp1").set("linewidth", "2");
    model.result("pg22").feature("tblp1").set("linemarker", "circle");
    model.result("pg22").run();
    model.result("pg22").feature("tblp1").set("markerpos", "datapoints");
    model.result("pg22").run();
    model.result("pg22").feature("tblp1").set("legend", "on");
    model.result("pg22").feature("tblp1").set("legendmethod", "manual");
    model.result("pg22").feature("tblp1").setIndex("legends", "150um pin offset, 7mm pin gap", 0);
    model.result("pg22").run();
    model.result("pg22").feature("tblp1").setIndex("legends", "150um offset, bent pins", 0);
    model.result("pg22").run();

    model.label("me_rodliteral_2mm_pingap.mph");

    model.result("pg17").run();
    model.result("pg17").set("allowtableupdate", false);
    model.result("pg17").set("title", "poff=-0.475, xrs=0, boffset=0 Isosurface:  (rad)");
    model.result("pg17").set("hasbeenplotted", true);
    model.result("pg17").feature("iso6").feature("col1").set("rangeunit", "");
    model.result("pg17").feature("iso6").feature("col1").set("rangecolormin", 0);
    model.result("pg17").feature("iso6").feature("col1").set("rangecolormax", 0.5252819418834553);
    model.result("pg17").feature("iso6").feature("col1").set("rangecoloractive", "off");
    model.result("pg17").feature("iso6").feature("col1").set("rangedatamin", 0);
    model.result("pg17").feature("iso6").feature("col1").set("rangedatamax", 0.5252819418834553);
    model.result("pg17").feature("iso6").feature("col1").set("rangedataactive", "off");
    model.result("pg17").feature("iso6").feature("col1")
         .set("rangeactualminmax", new double[]{0, 0.5252819418834553});
    model.result("pg17").feature("iso6").set("hasbeenplotted", true);
    model.result("pg17").set("renderdatacached", false);
    model.result("pg17").set("allowtableupdate", true);
    model.result("pg17").set("renderdatacached", true);
    model.result().table().create("evl3", "Table");
    model.result().table("evl3").comments("Interactive 3D values");
    model.result().table("evl3").label("Evaluation 3D");
    model.result().table("evl3")
         .addRow(new double[]{-0.10889004812535541, 0.03692210528090123, -0.7967123391851025, 1.0073136909970562E-124});
    model.result("pg17").feature("iso6").feature("col1").set("expr", "sphereavg(1e-5,bn,20)-bn");
    model.result("pg17").feature("iso6").set("resolution", "norefine");
    model.result("pg17").feature("iso6").set("smooth", "none");
    model.result("pg17").feature("iso6").feature("col1").set("expr", "sphavg(1e-5,bn,20)-bn");
    model.result("pg17").run();
    model.result("pg17").set("allowtableupdate", false);
    model.result("pg17").set("title", "poff=-0.475, xrs=0, boffset=0 Isosurface:  (rad)");
    model.result("pg17").set("hasbeenplotted", true);
    model.result("pg17").feature("iso6").feature("col1").set("rangeunit", "");
    model.result("pg17").feature("iso6").feature("col1").set("rangecolormin", -0.17856384479947202);
    model.result("pg17").feature("iso6").feature("col1").set("rangecolormax", 0.36731902814121237);
    model.result("pg17").feature("iso6").feature("col1").set("rangecoloractive", "off");
    model.result("pg17").feature("iso6").feature("col1").set("rangedatamin", -0.17856384479947202);
    model.result("pg17").feature("iso6").feature("col1").set("rangedatamax", 0.36731902814121237);
    model.result("pg17").feature("iso6").feature("col1").set("rangedataactive", "off");
    model.result("pg17").feature("iso6").feature("col1")
         .set("rangeactualminmax", new double[]{-0.17856384479947202, 0.36731902814121237});
    model.result("pg17").feature("iso6").set("hasbeenplotted", true);
    model.result("pg17").set("renderdatacached", false);
    model.result("pg17").set("allowtableupdate", true);
    model.result("pg17").set("renderdatacached", true);
    model.result().table("evl3")
         .addRow(new double[]{0.1323066778413292, -0.02814060638460647, -0.038025645098982874, 5.699043331471002E-5});

    model.view("view1").hideEntities("hide1").add(new int[]{6});
    model.view("view1").hideEntities("hide1").add(new int[]{16});
    model.view("view1").hideEntities("hide1").add(new int[]{7});
    model.view("view1").hideEntities("hide1").add(new int[]{21});
    model.view("view1").hideEntities("hide1").add(new int[]{10});
    model.view("view1").hideEntities("hide1").add(new int[]{8});
    model.view("view1").hideEntities("hide1").add(new int[]{18});
    model.view("view1").hideEntities("hide1").add(new int[]{11});
    model.view("view1").hideEntities("hide1").add(new int[]{13});

    model.result("pg17").run();
    model.result("pg17").feature("iso6").feature("col1").set("rangecoloractive", "on");
    model.result("pg17").feature("iso6").feature("col1").set("rangecolormin", "0");
    model.result("pg17").feature("iso6").feature("col1").set("rangecolormax", "0.01");
    model.result("pg17").run();
    model.result("pg17").feature("iso6").feature("col1").set("rangecolormax", "0.005");
    model.result("pg17").run();
    model.result("pg17").feature("iso6").feature("col1").set("rangecolormax", "0.001");
    model.result("pg17").run();
    model.result("pg17").feature("iso6").set("smooth", "internal");
    model.result("pg17").feature("iso6").set("resolution", "normal");
    model.result("pg17").run();
    model.result("pg17").feature("iso6").feature("col1").set("expr", "sphavg(1e-5,bn,10)-bn");
    model.result("pg17").run();
    model.result("pg17").feature("iso6").feature("col1").set("expr", "sphavg(1e-5,bn,100)-bn");
    model.result("pg17").run();
    model.result("pg17").feature("iso6").feature("col1").set("expr", "sphavg(1e-4,bn,100)-bn");
    model.result("pg17").run();
    model.result("pg17").feature("iso6").feature("col1").set("rangecolormax", "0.005");
    model.result("pg17").run();
    model.result("pg17").feature("iso6").feature("col1").set("rangecolormax", "0.02");
    model.result("pg17").run();
    model.result("pg17").set("allowtableupdate", false);
    model.result("pg17").set("title", "poff=-0.475, xrs=0, boffset=0 Isosurface:  (rad)");
    model.result("pg17").set("hasbeenplotted", true);
    model.result("pg17").feature("iso6").feature("col1").set("rangeunit", "");
    model.result("pg17").feature("iso6").feature("col1").set("rangedatamin", -0.32019828597331484);
    model.result("pg17").feature("iso6").feature("col1").set("rangedatamax", 0.23127341436083376);
    model.result("pg17").feature("iso6").feature("col1").set("rangedataactive", "off");
    model.result("pg17").feature("iso6").feature("col1")
         .set("rangeactualminmax", new double[]{-0.32019828597331484, 0.23127341436083376});
    model.result("pg17").feature("iso6").set("hasbeenplotted", true);
    model.result("pg17").set("renderdatacached", false);
    model.result("pg17").set("allowtableupdate", true);
    model.result("pg17").set("renderdatacached", true);
    model.result().table("evl3")
         .addRow(new double[]{0.3872057798924595, -0.22863217713158812, 0.9108975138558619, 0.0010661692123000901});

    model.study().create("std2");
    model.study("std2").create("stat", "Stationary");
    model.study("std2").feature("stat").activate("mfnc", true);
    model.study("std2").feature("stat").activate("es", true);
    model.study("std2").feature("stat").set("physselection", "mfnc");
    model.study("std2").feature("stat").set("activate", new String[]{"mfnc", "off", "es", "on"});
    model.study("std2").feature("stat").set("physselection", "mfnc");
    model.study("std2").feature("stat").set("activate", new String[]{"mfnc", "off", "es", "off"});
    model.study("std2").feature("stat").set("usesol", "on");
    model.study("std2").feature("stat").set("notsolmethod", "sol");
    model.study("std2").feature("stat").set("notstudy", "std1");
    model.study("std2").feature("stat").set("notsol", "sol2");
    model.study("std2").feature("stat").set("notsoluse", "sol29");
    model.study("std2").feature("stat").set("notsolnum", "auto");
    model.study("std2").feature("stat").set("useparam", "on");
    model.study("std2").feature("stat").setIndex("pname", "rd", 0);
    model.study("std2").feature("stat").setIndex("plistarr", "", 0);
    model.study("std2").feature("stat").setIndex("punit", "", 0);
    model.study("std2").feature("stat").setIndex("pname", "rd", 0);
    model.study("std2").feature("stat").setIndex("plistarr", "", 0);
    model.study("std2").feature("stat").setIndex("punit", "", 0);
    model.study("std2").feature("stat").setIndex("pname", "tw", 0);
    model.study("std2").feature("stat").setIndex("pname", "boffset", 0);
    model.study("std2").feature("stat").setIndex("plistarr", "range(-.04,.001,.04)", 0);

    model.sol().create("sol44");
    model.sol("sol44").study("std2");

    model.study("std2").feature("stat").set("notlistsolnum", 1);
    model.study("std2").feature("stat").set("notsolnum", "auto");
    model.study("std2").feature("stat").set("listsolnum", 1);
    model.study("std2").feature("stat").set("solnum", "1");

    model.sol("sol44").create("st1", "StudyStep");
    model.sol("sol44").feature("st1").set("study", "std2");
    model.sol("sol44").feature("st1").set("studystep", "stat");

    model.study("std2").feature("stat").set("notsoluse", "sol29");

    model.sol("sol44").create("v1", "Variables");
    model.sol("sol44").feature("v1").set("control", "stat");
    model.sol("sol44").create("s1", "Stationary");
    model.sol("sol44").feature("s1").create("p1", "Parametric");
    model.sol("sol44").feature("s1").feature().remove("pDef");
    model.sol("sol44").feature("s1").feature("p1").set("control", "stat");
    model.sol("sol44").feature("s1").set("control", "stat");
    model.sol("sol44").attach("std2");

    model.probe("pdom1").genResult("none");

    model.sol("sol44").runAll();

    model.result("pg17").set("data", "dset5");
    model.result("pg17").setIndex("looplevel", "43", 0);
    model.result("pg17").feature("iso6").feature("col1").set("expr", "f32energy(bn,es.normE,ang)-enm");
    model.result("pg17").run();
    model.result("pg17").feature("iso6").feature("col1").set("rangecoloractive", "off");
    model.result("pg17").run();
    model.result("pg17").feature("iso6").feature("col1")
         .set("expr", "sphavg(1e-5,f32energy(bn,es.normE,ang),20)-f32energy(bn,es.normE,ang)");
    model.result("pg17").run();
    model.result("pg17").feature("iso6").feature("col1")
         .set("expr", "sphavg(1e-5,f32energy(bn,es.normE,ang),20)-f32energy(bn,es.normE,pi/2)");
    model.result("pg17").run();
    model.result("pg17").feature("iso6").feature("col1")
         .set("expr", "sphavg(1e-5,f32energy(bn,es.normE,ang),100)-f32energy(bn,es.normE,pi/2)");
    model.result("pg17").run();
    model.result("pg17").feature("iso6").feature("col1")
         .set("expr", "sphavg(2e-5,f32energy(bn,es.normE,ang),100)-f32energy(bn,es.normE,pi/2)");
    model.result("pg17").run();
    model.result("pg17").feature("iso6").feature("col1")
         .set("expr", "sphavg(2e-5,f32energy(bn,es.normE,ang))-f32energy(bn,es.normE,pi/2)");
    model.result("pg17").run();
    model.result("pg17").feature("iso6").feature("col1")
         .set("expr", "sphavg(2e-5,f32energy(bn,es.normE,ang),10)-f32energy(bn,es.normE,pi/2)");
    model.result("pg17").run();
    model.result("pg17").feature("iso6").feature("col1")
         .set("expr", "sphavg(4e-5,f32energy(bn,es.normE,ang),10)-f32energy(bn,es.normE,pi/2)");
    model.result("pg17").run();

    model.variable("var1").set("eng", "f32energy(bn,es.normE,ang)");

    model.result("pg17").feature("iso6").feature("col1").set("expr", "dVdTheta(bn,es.normE)*moag");
    model.result("pg17").run();
    model.result("pg17").feature("iso6").feature("col1")
         .set("expr", "2*2*(sphavg(4e-5,f32energy(bn,es.normE,ang),10)-angap(bn,es.normE))/4e-5");
    model.result("pg17").run();
    model.result("pg17").feature("iso6").feature("col1")
         .set("expr", "2*2*(sphavg(4e-5,f32energy(bn,es.normE,ang),10)-f32energy(bn,es.normE,pi/2))/4e-5");
    model.result("pg17").run();
    model.result("pg17").feature("iso6").feature("col1").set("expr", "dVdTheta(bn,es.normE)*moag");
    model.result("pg17").run();

    model.study("std1").feature("param").setIndex("plistarr", "range(.15,.025,.15)", 0);

    model.param().set("vr2", "12500");
    model.param().set("vr4", "12500");

    model.study("std1").feature("param").setIndex("plistarr", "range(3.5,5,3.5)", 1);

    model.result().dataset().create("dset6", "Solution");
    model.result().dataset("dset6").set("solution", "sol1");
    model.result().create("pg28", "PlotGroup3D");
    model.result("pg28").label("Magnetic Flux Density Norm (mfnc)");
    model.result("pg28").set("data", "dset6");
    model.result("pg28").set("oldanalysistype", "noneavailable");
    model.result("pg28").set("data", "dset6");
    model.result("pg28").feature().create("mslc1", "Multislice");
    model.result("pg28").feature("mslc1").set("oldanalysistype", "noneavailable");
    model.result("pg28").feature("mslc1").set("expr", "mfnc.normB");
    model.result("pg28").feature("mslc1").set("data", "parent");
    model.result().create("pg29", "PlotGroup3D");
    model.result("pg29").label("Electric Potential (es)");
    model.result("pg29").set("data", "dset6");
    model.result("pg29").set("oldanalysistype", "noneavailable");
    model.result("pg29").set("frametype", "spatial");
    model.result("pg29").set("data", "dset6");
    model.result("pg29").feature().create("mslc1", "Multislice");
    model.result("pg29").feature("mslc1").set("oldanalysistype", "noneavailable");
    model.result("pg29").feature("mslc1").set("expr", "V");
    model.result("pg29").feature("mslc1").set("data", "parent");

    model.probe("pdom1").genResult("none");

    model.batch("p1").run();

    model.study("std2").feature("stat").set("notsoluse", "sol45");

    model.probe("pdom1").genResult("none");

    model.sol("sol44").runAll();

    model.result("pg17").run();
    model.result("pg17").feature("iso6").feature("col1")
         .set("expr", "2*2*(sphavg(4e-5,f32energy(bn,es.normE,ang),10)-f32energy(bn,es.normE,pi/2))/4e-5");
    model.result("pg17").run();

    model.probe("pdom1").genResult("none");

    model.sol("sol44").runAll();

    model.result("pg17").feature("iso6").feature("col1")
         .set("expr", "2*2*(sphavg(4e-5,eng,10)-f32energy(bn,es.normE,pi/2))/4e-5");
    model.result("pg17").run();
    model.result("pg17").feature("iso6").feature("col1").set("expr", "moag*dVdTheta(bn,es.normE)");
    model.result("pg17").run();
    model.result("pg17").feature("iso6").feature("col1").set("rangecoloractive", "on");
    model.result("pg17").feature("iso6").feature("col1").set("rangecolormin", "0");
    model.result("pg17").feature("iso6").feature("col1").set("rangecolormax", "2000");
    model.result("pg17").run();
    model.result("pg17").set("allowtableupdate", false);
    model.result("pg17").set("title", "boffset(43)=0.002 Isosurface:  (rad)");
    model.result("pg17").set("hasbeenplotted", true);
    model.result("pg17").feature("iso6").feature("col1").set("rangeunit", "");
    model.result("pg17").feature("iso6").feature("col1").set("rangedatamin", 13.761809827380688);
    model.result("pg17").feature("iso6").feature("col1").set("rangedatamax", 10789.593414746367);
    model.result("pg17").feature("iso6").feature("col1").set("rangedataactive", "off");
    model.result("pg17").feature("iso6").feature("col1")
         .set("rangeactualminmax", new double[]{13.761809827380688, 10789.593414746367});
    model.result("pg17").feature("iso6").set("hasbeenplotted", true);
    model.result("pg17").set("renderdatacached", false);
    model.result("pg17").set("allowtableupdate", true);
    model.result("pg17").set("renderdatacached", true);
    model.result().table("evl3")
         .addRow(new double[]{0.11224802250054713, -0.02178674725001284, 0.15486915399928838, 2976.229976868948});
    model.result().table("evl3")
         .addRow(new double[]{0.1914224078657599, -0.014429690804513395, 0.17205559939313628, 2759.2805727171576});

    model.func().duplicate("an14", "an12");
    model.func("an14").label("LZ Formula 2");
    model.func("an14").set("funcname", "lz2");
    model.func("an14")
         .set("expr", "exp(-pi/2*(angap(b,e)*h_const*1e6)^2/(dvdx*h_const*1e9*dxdt*hbar_const+1e-100))");
    model.func("an14").set("args", "b, e, dEdx, dxdt");
    model.func("an14")
         .set("expr", "exp(-pi/2*(angap(b,e)*h_const*1e6)^2/(dEdx*h_const*1e9*dxdt*hbar_const+1e-100))");

    model.variable("var1").set("deng", "4*(sphavg(4e-5,eng,10)-f32energy(bn,es.normE,ang))/4e-5");

    model.result("pg17").feature().duplicate("iso7", "iso6");
    model.result("pg17").feature("iso7").feature("col1").set("expr", "lz2(bn,es.normE,deng,5)");
    model.result("pg17").feature("iso6").feature("col1").set("expr", "lz(bn,es.normE,moag,5)");
    model.result("pg17").feature("iso7").active(false);

    model.sol("sol1").updateSolution();

    model.probe("pdom1").genResult("none");

    model.result("pg27").set("window", "window1");

    model.probe("pdom1").genResult("none");

    model.batch("p1").run();

    model.probe("pdom1").genResult("none");

    model.sol("sol44").runAll();

    model.result("pg17").run();
    model.result("pg17").set("allowtableupdate", false);
    model.result("pg17").set("title", "boffset(43)=0.002 Isosurface:  (rad)");
    model.result("pg17").set("hasbeenplotted", true);
    model.result("pg17").feature("iso6").feature("col1").set("rangeunit", "");
    model.result("pg17").feature("iso6").feature("col1").set("rangedatamin", 0);
    model.result("pg17").feature("iso6").feature("col1").set("rangedatamax", 0.3604760096110192);
    model.result("pg17").feature("iso6").feature("col1").set("rangedataactive", "off");
    model.result("pg17").feature("iso6").feature("col1")
         .set("rangeactualminmax", new double[]{0, 0.3604760096110192});
    model.result("pg17").feature("iso6").set("hasbeenplotted", true);
    model.result("pg17").set("renderdatacached", false);
    model.result("pg17").set("allowtableupdate", true);
    model.result("pg17").set("renderdatacached", true);
    model.result("pg17").feature("iso6").feature("col1").set("rangecoloractive", "off");
    model.result("pg17").run();
    model.result("pg17").run();
    model.result("pg17").feature("iso6").active(false);
    model.result("pg17").feature("iso7").active(true);
    model.result("pg17").run();
    model.result("pg17").run();
    model.result("pg17").run();
    model.result("pg17").feature("iso7").feature("col1")
         .set("expr", "lz2(bn,es.normE,4*(sphavg(4e-5,eng,10)-f32energy(bn,es.normE,ang))/4e-5,5)");
    model.result("pg17").run();
    model.result("pg17").feature("iso7").feature("col1")
         .set("expr", "lz2(bn,es.normE,4*(sphavg(4e-5,f32energy(bn,es.normE,ang),10)-f32energy(bn,es.normE,ang))/4e-5,5)");
    model.result("pg17").run();
    model.result("pg17").feature("iso7").feature("col1")
         .set("expr", "lz2(bn,es.normE,4*(sphavg(4e-5,f32energy(bn,es.normE,ang),10)-f32energy(bn,es.normE,pi/2))/4e-5,5)");
    model.result("pg17").run();
    model.result("pg17").feature("iso7").feature("col1").set("rangecoloractive", "off");
    model.result("pg17").run();
    model.result("pg17").setIndex("looplevel", "41", 0);
    model.result("pg17").run();
    model.result("pg17").feature("iso7").active(false);
    model.result("pg17").feature("iso6").active(true);
    model.result("pg17").run();
    model.result("pg17").feature("iso7").feature("col1").active(true);
    model.result("pg17").run();
    model.result("pg17").feature("iso6").active(false);
    model.result("pg17").feature("iso7").active(true);
    model.result("pg17").run();
    model.result("pg17").setIndex("looplevel", "47", 0);
    model.result("pg17").run();
    model.result("pg17").set("allowtableupdate", false);
    model.result("pg17").set("title", "boffset(47)=0.006 Isosurface:  (rad)");
    model.result("pg17").set("hasbeenplotted", true);
    model.result("pg17").feature("iso7").feature("col1").set("rangeunit", "");
    model.result("pg17").feature("iso7").feature("col1").set("rangecolormin", 0);
    model.result("pg17").feature("iso7").feature("col1").set("rangecolormax", 0.9992680373799349);
    model.result("pg17").feature("iso7").feature("col1").set("rangecoloractive", "off");
    model.result("pg17").feature("iso7").feature("col1").set("rangedatamin", 0);
    model.result("pg17").feature("iso7").feature("col1").set("rangedatamax", 0.9992680373799349);
    model.result("pg17").feature("iso7").feature("col1").set("rangedataactive", "off");
    model.result("pg17").feature("iso7").feature("col1")
         .set("rangeactualminmax", new double[]{0, 0.9992680373799349});
    model.result("pg17").feature("iso7").set("hasbeenplotted", true);
    model.result("pg17").set("renderdatacached", false);
    model.result("pg17").set("allowtableupdate", true);
    model.result("pg17").set("renderdatacached", true);
    model.result().duplicate("pg30", "pg17");
    model.result().move("pg30", 5);
    model.result("pg30").label("LZ Loss Weighted angle based");
    model.result("pg17").feature().remove("iso6");
    model.result("pg30").feature().remove("iso7");
    model.result("pg30").feature("iso6").active(true);
    model.result("pg30").run();
    model.result("pg17").run();
    model.result().numerical("int1").set("intorderactive", "on");
    model.result().numerical("int1").set("intorder", "1");
    model.result().numerical("int1").set("descr", "Loss Area v B 150um ++");
    model.result().numerical("int1").set("tablecols", "level1");
    model.result().numerical("int1").set("table", "tbl16");
    model.result().table().create("tbl17", "Table");
    model.result().table("tbl17")
         .comments("LossIntegration ((dom==9)*lz(bn,es.normE,moag,5)*bw(bn,es.normE,ang,enm,2e-1))");
    model.result().numerical("int1").set("table", "tbl17");
    model.result().numerical("int1").setResult();
    model.result().dataset("iso1").set("data", "dset5");
    model.result().table().create("tbl18", "Table");
    model.result().table("tbl18")
         .comments("LossIntegration ((dom==9)*lz(bn,es.normE,moag,5)*bw(bn,es.normE,ang,enm,2e-1))");
    model.result().numerical("int1").set("table", "tbl18");
    model.result().numerical("int1").setResult();
    model.result().create("pg31", 1);
    model.result("pg31").set("data", "none");
    model.result("pg31").create("tblp1", "Table");
    model.result("pg31").feature("tblp1").set("table", "tbl18");
    model.result("pg31").run();

    model.study("std1").feature("param").setIndex("plistarr", "range(.1,.01,.15)", 0);

    model.result().create("pg32", "PlotGroup3D");
    model.result("pg32").label("Magnetic Flux Density Norm (mfnc) 1");
    model.result("pg32").set("data", "dset4");
    model.result("pg32").set("oldanalysistype", "noneavailable");
    model.result("pg32").set("outertype", "none");
    model.result("pg32").set("showlooplevel", new String[]{"off", "off", "off"});
    model.result("pg32").set("data", "dset4");
    model.result("pg32").feature().create("mslc1", "Multislice");
    model.result("pg32").feature("mslc1").set("oldanalysistype", "noneavailable");
    model.result("pg32").feature("mslc1").set("outertype", "none");
    model.result("pg32").feature("mslc1").set("expr", "mfnc.normB");
    model.result("pg32").feature("mslc1").set("data", "parent");
    model.result().create("pg33", "PlotGroup3D");
    model.result("pg33").label("Electric Potential (es) 1");
    model.result("pg33").set("data", "dset4");
    model.result("pg33").set("oldanalysistype", "noneavailable");
    model.result("pg33").set("outertype", "none");
    model.result("pg33").set("showlooplevel", new String[]{"off", "off", "off"});
    model.result("pg33").set("frametype", "spatial");
    model.result("pg33").set("data", "dset4");
    model.result("pg33").feature().create("mslc1", "Multislice");
    model.result("pg33").feature("mslc1").set("oldanalysistype", "noneavailable");
    model.result("pg33").feature("mslc1").set("outertype", "none");
    model.result("pg33").feature("mslc1").set("expr", "V");
    model.result("pg33").feature("mslc1").set("data", "parent");

    return model;
  }

  public static Model run26(Model model) {

    model.probe("pdom1").genResult("none");

    model.batch("p1").run();

    model.func("an11").set("expr", "2*abs(f32energy(b,e,pi/2+pi/25)-f32energy(b,e,pi/2))*25/pi");

    model.geom("geom1").run();

    model.sol("sol1").updateSolution();
    model.sol("sol2").updateSolution();

    model.study("std2").feature("stat").set("notsoluse", "sol49");

    model.probe("pdom1").genResult("none");

    model.sol("sol44").runAll();

    model.result("pg30").run();
    model.result("pg30").run();
    model.result("pg30").run();
    model.result("pg30").run();
    model.result("pg30").run();
    model.result("pg30").run();
    model.result("pg30").run();
    model.result("pg30").run();
    model.result("pg30").run();
    model.result("pg17").run();
    model.result().numerical("int1").set("descr", "Loss Area v B 140um ++");

    model.view("view1").hideEntities("hide1").add(new int[]{9});
    model.view("view1").hideObjects().clear();
    model.view("view1").hideEntities().clear();
    model.view("view1").hideEntities().create("hide1");
    model.view("view1").hideEntities("hide1").geom(3);
    model.view("view1").hideEntities("hide1").add(new int[]{1});
    model.view("view1").hideEntities("hide1").add(new int[]{22});
    model.view("view1").hideEntities("hide1").add(new int[]{4});
    model.view("view1").hideEntities("hide1").add(new int[]{4});
    model.view("view1").hideEntities("hide1").add(new int[]{5});
    model.view("view1").hideEntities("hide1").add(new int[]{23});
    model.view("view1").hideEntities("hide1").add(new int[]{19});
    model.view("view1").hideEntities("hide1").add(new int[]{20});
    model.view("view1").hideEntities("hide1").add(new int[]{2});
    model.view("view1").hideEntities("hide1").add(new int[]{3});
    model.view("view1").hideEntities("hide1").add(new int[]{12});
    model.view("view1").hideEntities("hide1").add(new int[]{12});
    model.view("view1").hideEntities("hide1").add(new int[]{13});
    model.view("view1").hideEntities("hide1").add(new int[]{14});
    model.view("view1").hideEntities("hide1").add(new int[]{15});
    model.view("view1").hideEntities("hide1").add(new int[]{6});
    model.view("view1").hideEntities("hide1").add(new int[]{18});
    model.view("view1").hideEntities("hide1").add(new int[]{10});
    model.view("view1").hideEntities("hide1").add(new int[]{11});
    model.view("view1").hideEntities("hide1").add(new int[]{8});
    model.view("view1").hideEntities("hide1").add(new int[]{7});
    model.view("view1").hideEntities("hide1").add(new int[]{21});
    model.view("view1").hideEntities("hide1").add(new int[]{16});
    model.view("view1").hideEntities("hide1").add(new int[]{17});

    model.result().table().create("tbl19", "Table");
    model.result().table("tbl19")
         .comments("LossIntegration ((dom==9)*lz(bn,es.normE,moag,5)*bw(bn,es.normE,ang,enm,2e-1))");
    model.result().numerical("int1").set("table", "tbl19");
    model.result().numerical("int1").setResult();
    model.result().create("pg34", 1);
    model.result("pg34").set("data", "none");
    model.result("pg34").create("tblp1", "Table");
    model.result("pg34").feature("tblp1").set("table", "tbl19");
    model.result("pg34").run();
    model.result().remove("pg32");
    model.result().remove("pg33");
    model.result().remove("pg28");
    model.result().remove("pg29");
    model.result("pg31").run();

    model.study("std2").feature("stat").set("notsoluse", "sol48");

    model.probe("pdom1").genResult("none");

    model.sol("sol44").runAll();

    model.result().numerical("int1").set("descr", "Loss Area v B 130um ++");
    model.result().numerical("int1").set("table", "tbl19");
    model.result().numerical("int1").appendResult();
    model.result("pg34").run();

    model.study("std2").feature("stat").set("notsoluse", "sol47");

    model.probe("pdom1").genResult("none");

    model.sol("sol44").runAll();

    model.result().numerical("int1").set("descr", "Loss Area v B 120um ++");
    model.result().numerical("int1").set("table", "tbl19");
    model.result().numerical("int1").appendResult();

    model.study("std2").feature("stat").set("notsoluse", "sol46");

    model.probe("pdom1").genResult("none");

    model.sol("sol44").runAll();

    model.probe("pdom1").genResult("none");

    model.sol("sol44").runAll();

    model.result().numerical("int1").set("descr", "Loss Area v B 110um ++");
    model.result().numerical("int1").set("table", "tbl19");
    model.result().numerical("int1").appendResult();

    model.study("std2").feature("stat").set("notsoluse", "sol45");

    model.probe("pdom1").genResult("none");

    model.sol("sol44").runAll();

    model.result().numerical("int1").set("descr", "Loss Area v B 100um ++");
    model.result().numerical("int1").set("table", "tbl19");
    model.result().numerical("int1").appendResult();
    model.result("pg34").run();

    model.study("std1").feature("param").setIndex("plistarr", "range(0,.01,.1)", 0);

    model.result().create("pg35", "PlotGroup3D");
    model.result("pg35").label("Magnetic Flux Density Norm (mfnc)");
    model.result("pg35").set("data", "dset4");
    model.result("pg35").set("oldanalysistype", "noneavailable");
    model.result("pg35").set("oldouteranalysistype", "noneavailable");
    model.result("pg35").set("outertype", "none");
    model.result("pg35").set("outersolnum", 1);
    model.result("pg35").set("showlooplevel", new String[]{"off", "off", "off"});
    model.result("pg35").set("oldanalysistype", "noneavailable");
    model.result("pg35").set("oldouteranalysistype", "noneavailable");
    model.result("pg35").set("outertype", "none");
    model.result("pg35").set("data", "dset4");
    model.result("pg35").feature().create("mslc1", "Multislice");
    model.result("pg35").feature("mslc1").set("oldanalysistype", "noneavailable");
    model.result("pg35").feature("mslc1").set("outertype", "none");
    model.result("pg35").feature("mslc1").set("expr", "mfnc.normB");
    model.result("pg35").feature("mslc1").set("data", "parent");
    model.result().create("pg36", "PlotGroup3D");
    model.result("pg36").label("Electric Potential (es)");
    model.result("pg36").set("data", "dset4");
    model.result("pg36").set("oldanalysistype", "noneavailable");
    model.result("pg36").set("oldouteranalysistype", "noneavailable");
    model.result("pg36").set("outertype", "none");
    model.result("pg36").set("outersolnum", 1);
    model.result("pg36").set("showlooplevel", new String[]{"off", "off", "off"});
    model.result("pg36").set("frametype", "spatial");
    model.result("pg36").set("oldanalysistype", "noneavailable");
    model.result("pg36").set("oldouteranalysistype", "noneavailable");
    model.result("pg36").set("outertype", "none");
    model.result("pg36").set("data", "dset4");
    model.result("pg36").feature().create("mslc1", "Multislice");
    model.result("pg36").feature("mslc1").set("oldanalysistype", "noneavailable");
    model.result("pg36").feature("mslc1").set("outertype", "none");
    model.result("pg36").feature("mslc1").set("expr", "V");
    model.result("pg36").feature("mslc1").set("data", "parent");

    model.probe("pdom1").genResult("none");

    model.batch("p1").run();

    model.study("std2").feature("stat").set("notsoluse", "sol54");

    model.probe("pdom1").genResult("none");

    model.sol("sol44").runAll();

    model.result().numerical("int1").set("descr", "Loss Area v B 90um ++");
    model.result().numerical("int1").set("table", "tbl19");
    model.result().numerical("int1").appendResult();

    model.study("std2").feature("stat").set("notsoluse", "sol53");

    model.probe("pdom1").genResult("none");

    model.sol("sol44").runAll();

    model.result().numerical("int1").set("descr", "Loss Area v B 80um ++");
    model.result().numerical("int1").set("table", "tbl19");
    model.result().numerical("int1").appendResult();

    model.study("std2").feature("stat").set("notsoluse", "sol52");

    model.probe("pdom1").genResult("none");

    model.sol("sol44").runAll();

    model.result().numerical("int1").set("descr", "Loss Area v B 70um ++");
    model.result().numerical("int1").set("table", "tbl19");
    model.result().numerical("int1").appendResult();

    model.study("std2").feature("stat").set("notsoluse", "sol51");

    model.probe("pdom1").genResult("none");

    model.sol("sol44").runAll();

    model.result().numerical("int1").set("descr", "Loss Area v B 60um ++");
    model.result().numerical("int1").set("table", "tbl19");
    model.result().numerical("int1").appendResult();

    model.study("std2").feature("stat").set("notsoluse", "sol50");

    model.probe("pdom1").genResult("none");

    model.sol("sol44").runAll();

    model.result().numerical("int1").set("descr", "Loss Area v B 50um ++");
    model.result("pg34").run();
    model.result().numerical("int1").set("table", "tbl19");
    model.result().numerical("int1").appendResult();

    model.study("std2").feature("stat").set("notsoluse", "sol49");

    model.probe("pdom1").genResult("none");

    model.sol("sol44").runAll();

    model.result().numerical("int1").set("descr", "Loss Area v B 40um ++");
    model.result().numerical("int1").set("table", "tbl19");
    model.result().numerical("int1").appendResult();

    model.study("std2").feature("stat").set("notsoluse", "sol48");

    model.probe("pdom1").genResult("none");

    model.sol("sol44").runAll();

    model.result().numerical("int1").set("descr", "Loss Area v B 30um ++");
    model.result().numerical("int1").set("table", "tbl19");
    model.result().numerical("int1").appendResult();

    model.study("std2").feature("stat").set("notsoluse", "sol47");

    model.probe("pdom1").genResult("none");

    model.sol("sol44").runAll();

    model.result().numerical("int1").set("descr", "Loss Area v B 20um ++");
    model.result().numerical("int1").set("table", "tbl19");
    model.result().numerical("int1").appendResult();

    model.study("std2").feature("stat").set("notsoluse", "sol46");

    model.probe("pdom1").genResult("none");

    model.sol("sol44").runAll();

    model.result().numerical("int1").set("descr", "Loss Area v B 10um ++");
    model.result().numerical("int1").set("table", "tbl19");
    model.result().numerical("int1").appendResult();

    model.study("std2").feature("stat").set("notsoluse", "sol45");

    model.probe("pdom1").genResult("none");

    model.sol("sol44").runAll();

    model.result().numerical("int1").set("descr", "Loss Area v B 0um ++");
    model.result().numerical("int1").set("table", "tbl19");
    model.result().numerical("int1").appendResult();
    model.result("pg34").run();
    model.result("pg31").run();
    model.result("pg31").feature("tblp1").label(".15");
    model.result("pg34").feature().copy("tblp2", "pg31/tblp1");
    model.result("pg31").feature().remove("tblp1");
    model.result("pg34").feature("tblp2").label(".15");
    model.result("pg34").feature().move("tblp2", 0);
    model.result("pg34").feature("tblp1").label(".14-0");
    model.result("pg34").run();
    model.result("pg34").run();
    model.result("pg34").feature("tblp2").set("linecolor", "custom");
    model.result("pg34").feature("tblp2").set("customlinecolor", new double[]{1, 0, 0});
    model.result("pg34").feature("tblp1").set("linecolor", "custom");
    model.result("pg34").feature("tblp1")
         .set("customlinecolor", new double[]{0, 0.3333333432674408, 0.5882353186607361});
    model.result("pg34").run();
    model.result("pg34").feature("tblp1").set("linecolor", "cycle");
    model.result("pg34").run();
    model.result("pg34").feature("tblp1").set("linewidth", "1");
    model.result("pg34").run();
    model.result().numerical().create("int2", "IntVolume");
    model.result().numerical("int2").label("Volume Integration");
    model.result().numerical("int2").selection().set(new int[]{9});

    model.view("view1").hideObjects().clear();
    model.view("view1").hideEntities().clear();

    model.result().numerical("int2").selection().set(new int[]{9});

    model.view("view1").hideEntities().create("hide1");
    model.view("view1").hideEntities("hide1").geom(3);
    model.view("view1").hideEntities("hide1").add(new int[]{1});
    model.view("view1").hideEntities("hide1").add(new int[]{4});
    model.view("view1").hideEntities("hide1").add(new int[]{6});
    model.view("view1").hideObjects().clear();
    model.view("view1").hideEntities().clear();
    model.view("view1").hideEntities().create("hide1");
    model.view("view1").hideEntities("hide1").geom(3);
    model.view("view1").hideEntities("hide1").add(new int[]{1});

    model.result().numerical("int2").selection().set(new int[]{9});
    model.result().numerical("int2").set("expr", "bw(bn,es.normE,ang,enm,2e-1)");
    model.result().numerical("int2").set("data", "dset5");
    model.result().numerical("int2").set("innerinput", "manual");
    model.result().numerical("int2").set("solnum", new String[]{"41"});
    model.result().table().create("tbl20", "Table");
    model.result().table("tbl20").comments("Volume Integration (bw(bn,es.normE,ang,enm,2e-1))");
    model.result().numerical("int2").set("table", "tbl20");
    model.result().numerical("int2").setResult();

    model.study("std1").feature().duplicate("stat1", "stat");
    model.study("std1").feature("stat1").set("physselection", "mfnc");
    model.study("std1").feature("stat1").set("activate", new String[]{"mfnc", "off", "es", "on"});
    model.study("std1").feature("stat1").set("physselection", "mfnc");
    model.study("std1").feature("stat1").set("activate", new String[]{"mfnc", "off", "es", "off"});
    model.study("std1").feature("stat1").set("usesol", "on");
    model.study("std1").feature("stat1").set("notsolmethod", "sol");
    model.study("std1").feature("stat1").set("notstudy", "std1");
    model.study("std1").feature("stat1").set("notsol", "current");
    model.study("std1").feature("stat1").set("useparam", "on");
    model.study("std1").feature("stat1").setIndex("pname", "rd", 0);
    model.study("std1").feature("stat1").setIndex("plistarr", "", 0);
    model.study("std1").feature("stat1").setIndex("punit", "", 0);
    model.study("std1").feature("stat1").setIndex("pname", "rd", 0);
    model.study("std1").feature("stat1").setIndex("plistarr", "", 0);
    model.study("std1").feature("stat1").setIndex("punit", "", 0);
    model.study("std1").feature("stat1").setIndex("pname", "boffset", 0);
    model.study("std1").feature("stat1").setIndex("plistarr", "range(-0.04,0.001,0.04)", 0);
    model.study("std1").feature().remove("stat1");
    model.study("std1").feature("stat").set("useparam", "on");
    model.study("std1").feature("stat").setIndex("pname", "rd", 0);
    model.study("std1").feature("stat").setIndex("plistarr", "", 0);
    model.study("std1").feature("stat").setIndex("punit", "", 0);
    model.study("std1").feature("stat").setIndex("pname", "rd", 0);
    model.study("std1").feature("stat").setIndex("plistarr", "", 0);
    model.study("std1").feature("stat").setIndex("punit", "", 0);
    model.study("std1").feature("stat").setIndex("pname", "boffset", 0);
    model.study("std1").feature("stat").setIndex("plistarr", "range(-.04,.001,.04)", 0);
    model.study("std1").feature("param").setIndex("plistarr", "range(0,.01,0)", 0);

    model.result().create("pg37", "PlotGroup3D");
    model.result("pg37").label("Magnetic Flux Density Norm (mfnc) 1");
    model.result("pg37").set("data", "dset6");
    model.result("pg37").set("oldanalysistype", "noneavailable");
    model.result("pg37").set("data", "dset6");
    model.result("pg37").feature().create("mslc1", "Multislice");
    model.result("pg37").feature("mslc1").set("oldanalysistype", "noneavailable");
    model.result("pg37").feature("mslc1").set("expr", "mfnc.normB");
    model.result("pg37").feature("mslc1").set("data", "parent");
    model.result().create("pg38", "PlotGroup3D");
    model.result("pg38").label("Electric Potential (es) 1");
    model.result("pg38").set("data", "dset6");
    model.result("pg38").set("oldanalysistype", "noneavailable");
    model.result("pg38").set("frametype", "spatial");
    model.result("pg38").set("data", "dset6");
    model.result("pg38").feature().create("mslc1", "Multislice");
    model.result("pg38").feature("mslc1").set("oldanalysistype", "noneavailable");
    model.result("pg38").feature("mslc1").set("expr", "V");
    model.result("pg38").feature("mslc1").set("data", "parent");

    model.probe("pdom1").genResult("none");

    model.batch("p1").run();

    model.study("std1").feature("param").remove("pname", 2);
    model.study("std1").feature("param").remove("punit", 2);
    model.study("std1").feature("param").remove("plistarr", 2);

    model.probe("pdom1").genResult("none");

    model.batch("p1").run();

    model.geom("geom1").run();

    model.study("std1").feature().duplicate("stat1", "stat");
    model.study("std1").feature("stat1").set("physselection", "mfnc");
    model.study("std1").feature("stat1").set("activate", new String[]{"mfnc", "off", "es", "on"});
    model.study("std1").feature("stat1").set("physselection", "mfnc");
    model.study("std1").feature("stat1").set("activate", new String[]{"mfnc", "off", "es", "off"});
    model.study("std1").feature("stat1").set("usesol", "on");
    model.study("std1").feature("stat1").set("notsolmethod", "sol");
    model.study("std1").feature("stat1").set("notstudy", "std1");
    model.study("std1").feature("stat").set("useparam", "off");

    model.probe("pdom1").genResult("none");

    model.batch("p1").run();

    model.geom("geom1").run();

    model.result().numerical("int1").set("data", "dset4");

    model.param().set("temp", "2e-1[K]");
    model.param().descr("temp", "Boltzman Temperature");

    model.result().numerical("int1").set("expr", "(dom==9)*lz(bn,es.normE,moag,5)*bw(bn,es.normE,ang,enm,temp)");

    model.study("std1").feature("param").setIndex("plistarr", "range(.13,.01,.13)", 0);

    model.probe("pdom1").genResult("none");

    model.batch("p1").run();

    model.study("std2").feature("stat").setIndex("pname", "rd", 1);
    model.study("std2").feature("stat").setIndex("plistarr", "", 1);
    model.study("std2").feature("stat").setIndex("punit", "", 1);
    model.study("std2").feature("stat").setIndex("pname", "rd", 1);
    model.study("std2").feature("stat").setIndex("plistarr", "", 1);
    model.study("std2").feature("stat").setIndex("punit", "", 1);
    model.study("std2").feature("stat").setIndex("pname", "temp", 1);
    model.study("std2").feature("stat").setIndex("plistarr", "range(0.1,0.02,0.2)", 1);
    model.study("std2").feature("stat").set("sweeptype", "filled");
    model.study("std2").feature("stat").set("notsoluse", "sol45");

    model.probe("pdom1").genResult("none");

    model.sol("sol44").runAll();

    model.probe("pdom1").genResult("none");

    model.sol("sol44").runAll();

    model.result().numerical("int1").set("data", "dset5");
    model.result().numerical("int1").set("tablecols", "level2");
    model.result().numerical("int1").setIndex("looplevelinput", "manualindices", 0);
    model.result().numerical("int1").setIndex("looplevelinput", "all", 0);
    model.result().numerical("int1").set("descr", "Loss Area v B 130um ++ Vary Temp");
    model.result().table().create("tbl21", "Table");
    model.result().table("tbl21")
         .comments("LossIntegration ((dom==9)*lz(bn,es.normE,moag,5)*bw(bn,es.normE,ang,enm,temp))");
    model.result().numerical("int1").set("table", "tbl21");
    model.result().numerical("int1").setResult();
    model.result().numerical("int1").set("data", "iso1");
    model.result().table().create("tbl22", "Table");
    model.result().table("tbl22")
         .comments("LossIntegration ((dom==9)*lz(bn,es.normE,moag,5)*bw(bn,es.normE,ang,enm,temp))");
    model.result().numerical("int1").set("table", "tbl22");
    model.result().numerical("int1").set("tablecols", "data");
    model.result().table().create("tbl23", "Table");
    model.result().table("tbl23")
         .comments("LossIntegration ((dom==9)*lz(bn,es.normE,moag,5)*bw(bn,es.normE,ang,enm,temp))");
    model.result().numerical("int1").set("table", "tbl23");
    model.result().numerical("int1").setResult();
    model.result().create("pg39", 1);
    model.result("pg39").set("data", "none");
    model.result("pg39").create("tblp1", "Table");
    model.result("pg39").feature("tblp1").set("table", "tbl23");
    model.result("pg39").run();
    model.result().numerical("int2").setIndex("looplevelinput", "manual", 1);
    model.result().numerical("int2").setIndex("looplevel", "3", 1);
    model.result().numerical("int2").setIndex("looplevel", "41", 1);
    model.result().numerical("int2").setIndex("looplevelinput", "all", 0);
    model.result().numerical("int2").set("expr", "bw(bn,es.normE,ang,enm,temp)");
    model.result().table().create("tbl24", "Table");
    model.result().table("tbl24").comments("Volume Integration (bw(bn,es.normE,ang,enm,temp))");
    model.result().numerical("int2").set("table", "tbl24");
    model.result().numerical("int2").setResult();
    model.result().table("tbl24").label("Normalizations");
    model.result().table("tbl23").label("Offset and Temp at 130um");
    model.result().table().remove("tbl22");
    model.result().table().remove("tbl21");
    model.result().table().remove("tbl20");
    model.result().table("tbl19").label("Bfield And Pin Offaets, ++, 200mK");
    model.result().table("tbl18").label("Bfield at 150um");
    model.result().table().remove("tbl17");

    model.study("std1").feature("param").setIndex("plistarr", "range(.1,.01,.1)", 0);

    model.probe("pdom1").genResult("none");

    model.batch("p1").run();

    model.probe("pdom1").genResult("none");

    model.sol("sol44").runAll();

    model.result().numerical("int1").set("tablecols", "level1");
    model.result().table().create("tbl25", "Table");
    model.result().table("tbl25")
         .comments("LossIntegration ((dom==9)*lz(bn,es.normE,moag,5)*bw(bn,es.normE,ang,enm,temp))");
    model.result().numerical("int1").set("table", "tbl25");
    model.result().numerical("int1").setResult();
    model.result().numerical("int2").set("descractive", "on");
    model.result().numerical("int2").set("descr", "normalization, 100um offset");
    model.result().numerical("int2").set("table", "tbl24");
    model.result().numerical("int2").appendResult();

    model.study("std1").feature("param").setIndex("plistarr", "range(.07,.01,.09)", 0);

    model.probe("pdom1").genResult("none");

    model.batch("p1").run();

    model.study("std2").feature("stat").set("notsoluse", "sol46");

    model.probe("pdom1").genResult("none");

    model.sol("sol44").runAll();

    model.result().table("tbl25").label("B-offset and Temp at 100um");
    model.result().table("tbl23").label("B-offset and Temp at 130um");
    model.result().numerical("int1").set("descr", "Loss Area v B 80um ++ Vary Temp");

    model.study("std2").feature("stat").setIndex("plistarr", "range(0.06,0.02,0.16)", 1);

    model.probe("pdom1").genResult("none");

    model.sol("sol44").runAll();

    model.result().table().create("tbl26", "Table");
    model.result().table("tbl26")
         .comments("LossIntegration ((dom==9)*lz(bn,es.normE,moag,5)*bw(bn,es.normE,ang,enm,temp))");
    model.result().numerical("int1").set("table", "tbl26");
    model.result().numerical("int1").setResult();
    model.result().table("tbl26").label("B-offset and Temp at 80um");

    model.study("std2").feature("stat").set("notsoluse", "sol47");

    model.probe("pdom1").genResult("none");

    model.sol("sol44").runAll();

    model.result().numerical("int1").set("descr", "Loss Area v B 90um ++ Vary Temp");
    model.result().table().create("tbl27", "Table");
    model.result().table("tbl27")
         .comments("LossIntegration ((dom==9)*lz(bn,es.normE,moag,5)*bw(bn,es.normE,ang,enm,temp))");
    model.result().numerical("int1").set("table", "tbl27");
    model.result().numerical("int1").setResult();
    model.result().table("tbl26").label("B-offset and Temp at 80um");
    model.result().table("tbl27").label("B-offset and Temp at 90um");
    model.result().numerical().create("min1", "MinSurface");
    model.result().numerical("min1").set("data", "iso1");
    model.result().numerical("min1")
         .set("expr", "f32energy(bn,es.normE,ang)-enm+(lz(bn,es.normE,ang)<.1||dom!=9)*10");
    model.result().numerical("min1").set("innerinput", "manual");
    model.result().numerical("min1").set("solnum", new String[]{"243"});
    model.result().numerical("min1")
         .set("expr", "f32energy(bn,es.normE,ang)-enm+(lz(bn,es.normE,moag,5)<.1||dom!=9)*10");
    model.result().table().create("tbl28", "Table");
    model.result().table("tbl28")
         .comments("Surface Minimum 1 (f32energy(bn,es.normE,ang)-enm+(lz(bn,es.normE,moag,5)<.1||dom!=9)*10)");
    model.result().numerical("min1").set("table", "tbl28");
    model.result().numerical("min1").setResult();

    model.study("std1").feature("param").setIndex("plistarr", "range(0,.01,0)", 0);

    model.probe("pdom1").genResult("none");

    model.batch("p1").run();

    model.result().numerical().create("min2", "MinVolume");

    model.geom("geom1").run();

    model.result().numerical("min2").set("expr", "f32energy(bn,es.normE,ang)+(abs(x)+abs(y)+abs(z)>5e-4)*100");

    model.view("view1").hideEntities("hide1").add(new int[]{23});
    model.view("view1").hideEntities("hide1").add(new int[]{5});
    model.view("view1").hideEntities("hide1").add(new int[]{4});
    model.view("view1").hideEntities("hide1").add(new int[]{22});
    model.view("view1").hideEntities("hide1").add(new int[]{19});
    model.view("view1").hideEntities("hide1").add(new int[]{20});
    model.view("view1").hideEntities("hide1").add(new int[]{3});
    model.view("view1").hideEntities("hide1").add(new int[]{2});
    model.view("view1").hideEntities("hide1").add(new int[]{12});
    model.view("view1").hideEntities("hide1").add(new int[]{13});
    model.view("view1").hideEntities("hide1").add(new int[]{6});
    model.view("view1").hideEntities("hide1").add(new int[]{18});
    model.view("view1").hideEntities("hide1").add(new int[]{11});
    model.view("view1").hideEntities("hide1").add(new int[]{8});
    model.view("view1").hideEntities("hide1").add(new int[]{10});
    model.view("view1").hideEntities("hide1").add(new int[]{21});
    model.view("view1").hideEntities("hide1").add(new int[]{16});
    model.view("view1").hideEntities("hide1").add(new int[]{17});
    model.view("view1").hideEntities("hide1").add(new int[]{15});
    model.view("view1").hideEntities("hide1").add(new int[]{14});
    model.view("view1").hideEntities("hide1").add(new int[]{7});

    model.result().numerical("min2").selection().set(new int[]{9});
    model.result().numerical("min2").set("data", "dset5");

    model.study("std2").feature("stat").remove("pname", 1);
    model.study("std2").feature("stat").remove("punit", 1);
    model.study("std2").feature("stat").remove("plistarr", 1);

    model.probe("pdom1").genResult("none");

    model.sol("sol44").runAll();

    model.result().numerical("min2").setIndex("looplevelinput", "first", 0);
    model.result().table().create("tbl29", "Table");
    model.result().table("tbl29")
         .comments("Volume Minimum 2 (f32energy(bn,es.normE,ang)+(abs(x)+abs(y)+abs(z)>5e-4)*100)");
    model.result().numerical("min2").set("table", "tbl29");
    model.result().numerical("min2").setResult();
    model.result().numerical("min1").setIndex("looplevelinput", "first", 0);
    model.result().numerical("min1")
         .set("expr", "f32energy(bn,es.normE,ang)+(lz(bn,es.normE,moag,5)<.1||dom!=9)*10");
    model.result().numerical("min1").set("refine", "1");
    model.result().table().create("tbl30", "Table");
    model.result().table("tbl30")
         .comments("Surface Minimum 1 (f32energy(bn,es.normE,ang)+(lz(bn,es.normE,moag,5)<.1||dom!=9)*10)");
    model.result().numerical("min1").set("table", "tbl30");
    model.result().numerical("min1").setResult();
    model.result().numerical("min1")
         .set("expr", "f32energy(bn,es.normE,ang)+(lz(bn,es.normE,moag,5)<.01||dom!=9)*10");
    model.result().numerical("min1").set("table", "tbl30");
    model.result().numerical("min1").appendResult();
    model.result().numerical("min1")
         .set("expr", "f32energy(bn,es.normE,ang)+(lz(bn,es.normE,moag,1)<.01||dom!=9)*10");
    model.result().numerical("min1").set("table", "tbl30");
    model.result().numerical("min1").appendResult();
    model.result().numerical("min1").setIndex("looplevelinput", "manual", 0);
    model.result().numerical("min1").setIndex("looplevel", "2", 0);
    model.result().numerical("min1").setIndex("looplevel", "31", 0);
    model.result().numerical("min1").set("table", "tbl30");
    model.result().numerical("min1").appendResult();
    model.result().numerical("min1").set("table", "tbl30");
    model.result().numerical("min1").appendResult();
    model.result().numerical("min1")
         .set("expr", "f32energy(bn,es.normE,ang)+(lz(bn,es.normE,moag,1)<.1||dom!=9)*10");
    model.result().numerical("min1").set("table", "tbl30");
    model.result().numerical("min1").appendResult();
    model.result().numerical("min1").setIndex("looplevel", "41", 0);
    model.result().numerical("min1")
         .set("expr", "f32energy(bn,es.normE,ang)+(lz(bn,es.normE,moag,5)<.1||dom!=9)*10");
    model.result().numerical("min1").set("descractive", "on");
    model.result().numerical("min1").set("descr", "asdf");
    model.result().numerical("min1").set("table", "tbl30");
    model.result().numerical("min1").appendResult();
    model.result().numerical("min1").set("expr", "f32energy(bn,es.normE,ang)");
    model.result().numerical("min1").set("table", "tbl30");
    model.result().numerical("min1").appendResult();
    model.result().numerical("min1").set("refine", "3");
    model.result().numerical("min1").set("table", "tbl30");
    model.result().numerical("min1").appendResult();
    model.result().numerical("min1")
         .set("expr", "f32energy(bn,es.normE,ang)+(lz(bn,es.normE,moag,5)<.1||dom!=9)*10");
    model.result().numerical("min1").set("table", "tbl30");
    model.result().numerical("min1").appendResult();
    model.result().numerical("min1").set("refine", "5");
    model.result("pg30").feature("iso6").feature("col1")
         .set("expr", "f32energy(bn,es.normE,ang)+(lz(bn,es.normE,moag,5)<.1||dom!=9)*10");
    model.result("pg30").run();
    model.result("pg30").setIndex("looplevel", "43", 0);
    model.result("pg30").run();
    model.result("pg30").setIndex("looplevel", "42", 0);
    model.result("pg30").run();
    model.result("pg30").setIndex("looplevel", "41", 0);
    model.result("pg30").run();
    model.result().numerical("min1").set("obj", "abs");
    model.result().numerical("min1").set("table", "tbl30");
    model.result().numerical("min1").appendResult();
    model.result("pg30").setIndex("looplevel", "46", 0);
    model.result("pg30").run();
    model.result("pg30").feature("iso6").feature("col1")
         .set("expr", "f32energy(bn,es.normE,ang)+(lz(bn,es.normE,moag,1)<.1||dom!=9)*10");
    model.result("pg30").run();
    model.result("pg30").feature("iso6").feature("col1")
         .set("expr", "f32energy(bn,es.normE,ang)+(lz(bn,es.normE,moag,5)<.1||dom!=9)*10");
    model.result("pg30").run();
    model.result("pg30").feature("iso6").feature("col1")
         .set("expr", "f32energy(bn,es.normE,ang)+(lz(bn,es.normE,moag,10)<.1||dom!=9)*10");
    model.result("pg30").run();
    model.result("pg30").feature("iso6").feature("col1")
         .set("expr", "f32energy(bn,es.normE,ang)+(lz(bn,es.normE,moag,5)<.01||dom!=9)*10");
    model.result("pg30").run();
    model.result("pg30").feature("iso6").feature("col1")
         .set("expr", "f32energy(bn,es.normE,ang)+(lz(bn,es.normE,moag,5)<.001||dom!=9)*10");

    return model;
  }

  public static Model run27(Model model) {
    model.result("pg30").run();
    model.result("pg30").feature("iso6").feature("col1")
         .set("expr", "f32energy(bn,es.normE,ang)+(lz(bn,es.normE,moag,5)<.01||dom!=9)*10");
    model.result("pg30").run();
    model.result("pg30").feature("iso6").feature("col1")
         .set("expr", "f32energy(bn,es.normE,ang)+(lz(bn,es.normE,moag,5)<.001||dom!=9)*10");
    model.result("pg30").run();
    model.result("pg30").set("showlegendsmaxmin", "on");
    model.result("pg30").run();
    model.result("pg30").feature("iso6").feature("col1")
         .set("expr", "f32energy(bn,es.normE,ang)+(lz(bn,es.normE,moag,5)<.0001||dom!=9)*10");
    model.result("pg30").run();
    model.result("pg30").feature("iso6").feature("col1")
         .set("expr", "f32energy(bn,es.normE,ang)+(lz(bn,es.normE,moag,5)<.00001||dom!=9)*10");
    model.result("pg30").run();
    model.result("pg30").feature("iso6").feature("col1").set("expr", "exp(-f32energy(bn,es.normE,ang))");
    model.result("pg30").run();
    model.result("pg30").feature("iso6").feature("col1")
         .set("expr", "exp(-f32energy(bn,es.normE,ang)*1e9*6.626e-34/(1.38e-23*.1))");
    model.result("pg30").run();
    model.result("pg30").feature("iso6").feature("col1")
         .set("expr", "exp(-f32energy(bn,es.normE,ang)*1e9*6.626e-34/(1.38e-23*.2))");
    model.result("pg30").run();
    model.result("pg30").feature("iso6").feature("col1").set("expr", "lz(bn,es.normE,moag,5)");
    model.result("pg30").run();
    model.result("pg30").feature("iso6").feature("col1").set("expr", "angap(bn,es.normE)");
    model.result("pg30").run();
    model.result("pg30").feature("iso6").feature("col1").set("rangecoloractive", "on");
    model.result("pg30").feature("iso6").feature("col1").set("rangecolormin", "0");
    model.result("pg30").feature("iso6").feature("col1").set("rangecolormax", "10");
    model.result("pg30").run();

    model.label("me_rodliteral_2mm_pingap.mph");

    model.result().numerical("min1").set("expr", "f32energy(bn,es.normE,ang)");
    model.result().numerical("min1").setIndex("looplevel", "38", 0);
    model.result().numerical("min1").setIndex("looplevel", "39", 0);
    model.result().numerical("min1").setIndex("looplevel", "40", 0);
    model.result().numerical("min1").setIndex("looplevel", "41", 0);
    model.result().table().create("tbl31", "Table");
    model.result().table("tbl31").comments("Surface Minimum 1 (f32energy(bn,es.normE,ang))");
    model.result().numerical("min1").set("table", "tbl31");
    model.result().numerical("min1").setResult();
    model.result().numerical("min1").setIndex("looplevel", "1", 0);
    model.result().numerical("min1").set("table", "tbl31");
    model.result().numerical("min1").appendResult();
    model.result().numerical("min1").set("expr", "bn");
    model.result().numerical("min1").set("table", "tbl31");
    model.result().numerical("min1").appendResult();
    model.result().numerical("min1").set("expr", "bn+(sqrt(x^2+y^2+z^2)*1000)^10");
    model.result().numerical("min1").set("table", "tbl31");
    model.result().numerical("min1").appendResult();
    model.result("pg30").feature("iso6").feature("col1").set("expr", "bn+(sqrt(x^2+y^2+z^2)*1000)^10");
    model.result("pg30").run();
    model.result("pg30").feature("iso6").feature("col1").set("rangecolormax", ".11");
    model.result("pg30").run();
    model.result("pg30").set("allowtableupdate", false);
    model.result("pg30").set("title", "boffset(46)=0.005 Isosurface:  (rad)");
    model.result("pg30").set("hasbeenplotted", true);
    model.result("pg30").feature("iso6").feature("col1").set("rangeunit", "");
    model.result("pg30").feature("iso6").feature("col1").set("rangedatamin", 0.005927637470166957);
    model.result("pg30").feature("iso6").feature("col1").set("rangedatamax", 98.02742039874263);
    model.result("pg30").feature("iso6").feature("col1").set("rangedataactive", "off");
    model.result("pg30").feature("iso6").feature("col1")
         .set("rangeactualminmax", new double[]{0.005927637470166957, 98.02742039874263});
    model.result("pg30").feature("iso6").set("hasbeenplotted", true);
    model.result("pg30").set("renderdatacached", false);
    model.result("pg30").set("allowtableupdate", true);
    model.result("pg30").set("renderdatacached", true);
    model.result().table("evl3")
         .addRow(new double[]{0.008381149282031486, 3.5688661596892934E-4, -0.085648593162998, 0.0076407760628093135});
    model.result().table("evl3")
         .addRow(new double[]{0.008381149282031486, 3.5688661596892934E-4, -0.085648593162998, 0.0076407760628093135});
    model.result().table("evl3")
         .addRow(new double[]{0.00877166262626869, 0.012742756753680987, -0.09409806764084205, 0.00929671964024794});
    model.result().table("evl3")
         .addRow(new double[]{0.00877166262626869, 0.012742756753680987, -0.09409806764084205, 0.00929671964024794});
    model.result("pg30").feature("iso6").feature("col1").set("rangecolormax", ".01");
    model.result("pg30").run();
    model.result("pg30").set("allowtableupdate", false);
    model.result("pg30").set("title", "boffset(46)=0.005 Isosurface:  (rad)");
    model.result("pg30").set("hasbeenplotted", true);
    model.result("pg30").feature("iso6").feature("col1").set("rangeunit", "");
    model.result("pg30").feature("iso6").feature("col1").set("rangedatamin", 0.005927637470166957);
    model.result("pg30").feature("iso6").feature("col1").set("rangedatamax", 98.02742039874263);
    model.result("pg30").feature("iso6").feature("col1").set("rangedataactive", "off");
    model.result("pg30").feature("iso6").feature("col1")
         .set("rangeactualminmax", new double[]{0.005927637470166957, 98.02742039874263});
    model.result("pg30").feature("iso6").set("hasbeenplotted", true);
    model.result("pg30").set("renderdatacached", false);
    model.result("pg30").set("allowtableupdate", true);
    model.result("pg30").set("renderdatacached", true);
    model.result().table("evl3")
         .addRow(new double[]{0.0018918285724348963, 0.003371532905641815, -0.08620983568638896, 0.006093576295756213});
    model.result().table("evl3")
         .addRow(new double[]{0.0014986585486795531, 0.0029719766315320986, -0.08639554924934822, 0.006134060749771577});
    model.result("pg30").setIndex("looplevel", "1", 0);
    model.result("pg30").run();
    model.result("pg30").set("showhiddenobjects", "on");
    model.result("pg30").run();
    model.result("pg30").feature("iso6").feature("col1").set("rangecolormax", ".1");
    model.result("pg30").run();
    model.result("pg30").set("allowtableupdate", false);
    model.result("pg30").set("title", "boffset(1)=-0.04 Isosurface:  (rad)");
    model.result("pg30").set("hasbeenplotted", true);
    model.result("pg30").feature("iso6").feature("col1").set("rangeunit", "");
    model.result("pg30").feature("iso6").feature("col1").set("rangedatamin", 0.040761368794116376);
    model.result("pg30").feature("iso6").feature("col1").set("rangedatamax", 8.648666113501154E11);
    model.result("pg30").feature("iso6").feature("col1").set("rangedataactive", "off");
    model.result("pg30").feature("iso6").feature("col1")
         .set("rangeactualminmax", new double[]{0.040761368794116376, 8.648666113501154E11});
    model.result("pg30").feature("iso6").set("hasbeenplotted", true);
    model.result("pg30").set("renderdatacached", false);
    model.result("pg30").set("allowtableupdate", true);
    model.result("pg30").set("renderdatacached", true);
    model.result().table("evl3")
         .addRow(new double[]{-0.0522297383490713, 0.035137594570403774, -0.1040888861660072, 0.05185853270824824});
    model.result().table("evl3")
         .addRow(new double[]{0.0022958441277456387, 0.04768850255482704, -0.08254451621338355, 0.04850276362644738});
    model.result().numerical("min1").set("obj", "real");
    model.result().numerical("min1").set("refine", "1");
    model.result().numerical("min1").setIndex("looplevelinput", "first", 0);
    model.result().numerical("min1").set("table", "tbl31");
    model.result().numerical("min1").appendResult();
    model.result().numerical("min1").set("table", "tbl31");
    model.result().numerical("min1").appendResult();
    model.result().numerical("min1").set("refine", "1");
    model.result().numerical("min1").set("dataseries", "minimum");
    model.result().numerical("min1").set("table", "tbl31");
    model.result().numerical("min1").set("dataseries", "none");
    model.result().numerical("min1").set("table", "tbl31");
    model.result().numerical("min1").appendResult();
    model.result().numerical("min1").set("dataseries", "minimum");
    model.result().table().create("tbl32", "Table");
    model.result().table("tbl32").comments("Surface Minimum 1 (bn+(sqrt(x^2+y^2+z^2)*1000)^10)");
    model.result().numerical("min1").set("table", "tbl32");
    model.result().numerical("min1").setResult();
    model.result().numerical("min1").set("refine", "2");
    model.result().numerical("min1").set("table", "tbl32");
    model.result().numerical("min1").appendResult();
    model.result().numerical("min1").set("refine", "3");
    model.result().numerical("min1").set("table", "tbl32");
    model.result().numerical("min1").appendResult();
    model.result().numerical("min1").setIndex("looplevelinput", "manual", 0);
    model.result().numerical("min1").setIndex("looplevel", "2", 0);
    model.result().numerical("min1").set("table", "tbl32");
    model.result().numerical("min1").appendResult();
    model.result().numerical("min1").set("expr", "f32energy(bn,es.normE,ang)+(sqrt(x^2+y^2+z^2)*1000)^10");
    model.result().numerical("min1").set("table", "tbl32");
    model.result().numerical("min1").appendResult();
    model.result().numerical("min1").set("refine", "1");
    model.result().numerical("min1").set("table", "tbl32");
    model.result().numerical("min1").appendResult();
    model.result().numerical("min1").set("descractive", "on");
    model.result().numerical("min1").set("descr", "g");
    model.result().numerical("min1").setIndex("looplevel", "48", 0);
    model.result().numerical("min1").setIndex("looplevel", "43", 0);
    model.result().numerical("min1").setIndex("looplevel", "42", 0);
    model.result().numerical("min1").setIndex("looplevel", "41", 0);
    model.result().numerical("min1").set("table", "tbl32");
    model.result().numerical("min1").appendResult();
    model.result().numerical("min1").set("refine", "3");
    model.result().numerical("min1").set("table", "tbl32");
    model.result().numerical("min1").appendResult();
    model.result().numerical("min1").set("expr", "f32energy(bn,es.normE,ang)+dom!=");
    model.result("pg8").run();
    model.result().dataset("cpl4").set("data", "dset5");
    model.result("pg8").run();
    model.result("pg8").set("allowtableupdate", false);
    model.result("pg8").set("hasbeenplotted", true);
    model.result("pg8").feature("surf1").set("rangeunit", "");
    model.result("pg8").feature("surf1").set("rangeactualminmax", new double[]{1, 23.000000000000004});
    model.result("pg8").feature("surf1").set("hasbeenplotted", true);
    model.result("pg8").set("renderdatacached", false);
    model.result("pg8").set("allowtableupdate", true);
    model.result("pg8").set("renderdatacached", true);
    model.result().table().create("evl2", "Table");
    model.result().table("evl2").comments("Interactive 2D values");
    model.result().table("evl2").label("Evaluation 2D");
    model.result().table("evl2").addRow(new double[]{-0.059139251708984375, 0.019713401794433594, 9});
    model.result().table("evl2").addRow(new double[]{0.7688169479370117, 1.5967741012573242, 6});
    model.result().numerical("min1").set("expr", "f32energy(bn,es.normE,ang)+(dom==9)*100");
    model.result().numerical("min1").set("table", "tbl32");
    model.result().numerical("min1").appendResult();
    model.result().numerical("min1").set("expr", "f32energy(bn,es.normE,ang)+(dom==9||lz(bn,es.normE,moag,5)*100");
    model.result().numerical("min1").set("descr", "");
    model.result().numerical("min1")
         .set("expr", "f32energy(bn,es.normE,ang)+(dom==9||lz(bn,es.normE,moag,5)<.1)*100");
    model.result().numerical("min1").set("table", "tbl32");
    model.result().numerical("min1").appendResult();
    model.result().numerical("min1").setIndex("looplevel", "1", 0);
    model.result().numerical("min1").setIndex("looplevel", "40", 0);
    model.result().numerical("min1").set("descr", ".");
    model.result().table().create("tbl33", "Table");
    model.result().table("tbl33")
         .comments("Surface Minimum 1 (f32energy(bn,es.normE,ang)+(dom==9||lz(bn,es.normE,moag,5)<.1)*100)");
    model.result().numerical("min1").set("table", "tbl33");
    model.result().numerical("min1").setResult();
    model.result().numerical("min1").setIndex("looplevel", "39", 0);
    model.result().numerical("min1").set("refine", "1");
    model.result().numerical("min1").setIndex("looplevelinput", "all", 0);
    model.result().table().create("tbl34", "Table");
    model.result().table("tbl34")
         .comments("Surface Minimum 1 (f32energy(bn,es.normE,ang)+(dom==9||lz(bn,es.normE,moag,5)<.1)*100)");
    model.result().numerical("min1").set("table", "tbl34");
    model.result().numerical("min1").setResult();
    model.result().numerical("min1").setIndex("looplevelinput", "manualindices", 0);
    model.result().numerical("min1").setIndex("looplevelinput", "manual", 0);
    model.result().numerical("min1").setIndex("looplevel", "38", 0);
    model.result().numerical("min1").setIndex("looplevel", "41", 0);
    model.result().numerical("min1").setIndex("looplevel", "40,41", 0);
    model.result().numerical("min1").setIndex("looplevel", "39,40,41", 0);
    model.result().numerical("min1").setIndex("looplevel", "38,39,40,41", 0);
    model.result().numerical("min1").setIndex("looplevel", "37,38,39,40,41", 0);
    model.result().table().create("tbl35", "Table");
    model.result().table("tbl35")
         .comments("Surface Minimum 1 (f32energy(bn,es.normE,ang)+(dom==9||lz(bn,es.normE,moag,5)<.1)*100)");
    model.result().numerical("min1").set("table", "tbl35");
    model.result().numerical("min1").setResult();
    model.result().numerical("min1").set("dataseries", "none");
    model.result().table().create("tbl36", "Table");
    model.result().table("tbl36")
         .comments("Surface Minimum 1 (f32energy(bn,es.normE,ang)+(dom==9||lz(bn,es.normE,moag,5)<.1)*100)");
    model.result().numerical("min1").set("table", "tbl36");
    model.result().numerical("min1").setResult();
    model.result().numerical("min1").setIndex("looplevelinput", "all", 0);
    model.result().table().create("tbl37", "Table");
    model.result().table("tbl37")
         .comments("Surface Minimum 1 (f32energy(bn,es.normE,ang)+(dom==9||lz(bn,es.normE,moag,5)<.1)*100)");
    model.result().numerical("min1").set("table", "tbl37");
    model.result().numerical("min1").setResult();
    model.result().create("pg40", 1);
    model.result("pg40").set("data", "none");
    model.result("pg40").create("tblp1", "Table");
    model.result("pg40").feature("tblp1").set("table", "tbl37");
    model.result("pg40").run();
    model.result().numerical("min1")
         .set("expr", "f32energy(bn,es.normE,ang)+(dom!=9||lz(bn,es.normE,moag,5)<.1)*100");
    model.result().numerical("min1").setIndex("looplevelinput", "manual", 0);
    model.result().numerical("min1").setIndex("looplevel", "1", 0);
    model.result().numerical("min1").setIndex("looplevel", "1,2", 0);
    model.result().numerical("min1").setIndex("looplevel", "1,2,3", 0);
    model.result().table().create("tbl38", "Table");
    model.result().table("tbl38")
         .comments("Surface Minimum 1 (f32energy(bn,es.normE,ang)+(dom!=9||lz(bn,es.normE,moag,5)<.1)*100)");
    model.result().numerical("min1").set("table", "tbl38");
    model.result().numerical("min1").setResult();
    model.result().numerical("min1")
         .set("expr", "f32energy(bn,es.normE,ang)+dom==9||dom==lz(bn,es.normE,moag,5)<.1)*100");
    model.result("pg8").run();
    model.result("pg8").set("allowtableupdate", false);
    model.result("pg8").set("hasbeenplotted", true);
    model.result("pg8").feature("surf1").set("rangeunit", "");
    model.result("pg8").feature("surf1").set("rangeactualminmax", new double[]{1, 23.000000000000004});
    model.result("pg8").feature("surf1").set("hasbeenplotted", true);
    model.result("pg8").set("renderdatacached", false);
    model.result("pg8").set("allowtableupdate", true);
    model.result("pg8").set("renderdatacached", true);
    model.result().table("evl2").addRow(new double[]{0.7688169479370117, 0.05913972854614258, 9});
    model.result().table("evl2").addRow(new double[]{1.4390668869018555, -2.069892406463623, 6});
    model.result().numerical("min1")
         .set("expr", "f32energy(bn,es.normE,ang)+100-100*(dom==9||dom==6)+lz(bn,es.normE,moag,5)<.1)*100");
    model.result().numerical("min1").set("table", "tbl38");
    model.result().numerical("min1")
         .set("expr", "f32energy(bn,es.normE,ang)+100-100*(dom==9||dom==6)+(lz(bn,es.normE,moag,5)<.1)*100");
    model.result().numerical("min1").set("table", "tbl38");
    model.result().numerical("min1").appendResult();
    model.result().numerical("min1").setIndex("looplevel", "9", 0);
    model.result().table().create("tbl39", "Table");
    model.result().table("tbl39")
         .comments("Surface Minimum 1 (f32energy(bn,es.normE,ang)+100-100*(dom==9||dom==6)+(lz(bn,es.normE,moag,5)<.1)*100)");
    model.result().numerical("min1").set("table", "tbl39");
    model.result().numerical("min1").setResult();
    model.result().numerical("min1").setIndex("looplevel", "27", 0);
    model.result().numerical("min1").set("table", "tbl39");
    model.result().numerical("min1").appendResult();
    model.result().numerical("min1").setIndex("looplevel", "35", 0);
    model.result().numerical("min1").set("table", "tbl39");
    model.result().numerical("min1").appendResult();
    model.result().numerical("min1")
         .set("expr", "f32energy(bn,es.normE,ang)+100*((x^2+y^2+z^2)*1000)^5+(lz(bn,es.normE,moag,5)<.1)*100");
    model.result().numerical("min1").set("table", "tbl39");
    model.result().numerical("min1").appendResult();
    model.result().numerical("min1").setIndex("looplevel", "26", 0);
    model.result().numerical("min1").set("table", "tbl39");
    model.result().numerical("min1").appendResult();
    model.result().numerical("min1").set("refine", "2");
    model.result().numerical("min1").set("table", "tbl39");
    model.result().numerical("min1").appendResult();
    model.result().numerical("min1")
         .set("expr", "f32energy(bn,es.normE,ang)+100*((x^2+y^2+z^2)*1000)^5+100*(lz(bn,es.normE,moag,5)*10)^10");
    model.result().numerical("min1").set("table", "tbl39");
    model.result().numerical("min1").appendResult();
    model.result().numerical("min1")
         .set("expr", "f32energy(bn,es.normE,ang)+100*((x^2+y^2+z^2)*1000)^5+100*((1-lz(bn,es.normE,moag,5))*10)^10");
    model.result().numerical("min1").set("table", "tbl39");
    model.result().numerical("min1").appendResult();
    model.result().numerical("min1").setIndex("looplevel", "30", 0);
    model.result().numerical("min1").set("table", "tbl39");
    model.result().numerical("min1").appendResult();
    model.result().numerical("min1").setIndex("looplevel", "38", 0);
    model.result().numerical("min1").set("table", "tbl39");
    model.result().numerical("min1").appendResult();
    model.result().numerical("min1").set("table", "tbl39");
    model.result().numerical("min1").appendResult();
    model.result().numerical("min1")
         .set("expr", "f32energy(bn,es.normE,ang)+100*((x^2+y^2+z^2)*1000)^6+100*((1-lz(bn,es.normE,moag,5))*10)^10");
    model.result().numerical("min1").set("table", "tbl39");
    model.result().numerical("min1").appendResult();
    model.result().numerical("min1").setIndex("looplevel", "40", 0);
    model.result().numerical("min1").setIndex("looplevel", "41", 0);
    model.result().numerical("min1")
         .set("expr", "f32energy(bn,es.normE,ang)+100*((x^2+y^2+z^2)*1000)^5+100*((1-lz(bn,es.normE,moag,5))*10)^10");
    model.result().numerical("min1").set("table", "tbl39");
    model.result().numerical("min1").appendResult();
    model.result("pg30").feature("iso6").feature("col1")
         .set("expr", "f32energy(bn,es.normE,ang)+100*((x^2+y^2+z^2)*1000)^5+100*((1-lz(bn,es.normE,moag,5))*10)^10");
    model.result("pg30").run();
    model.result("pg30").set("showhiddenobjects", "off");
    model.result("pg30").run();
    model.result("pg30").setIndex("looplevel", "41", 0);
    model.result("pg30").feature("iso6").feature("col1").set("rangecolormax", "2");
    model.result("pg30").run();
    model.result("pg30").feature("iso6").feature("col1").set("rangecolormin", "1");
    model.result("pg30").feature("iso6").feature("col1").set("rangecolormax", "4");
    model.result("pg30").run();
    model.result("pg30").run();
    model.result("pg30").feature("iso6").feature("col1")
         .set("expr", "f32energy(bn,es.normE,ang)+(lz(bn,es.normE,moag,5)<.1)*100+100-100*(dom==9||dom==6)");
    model.result("pg30").run();
    model.result("pg30").setIndex("looplevel", "44", 0);
    model.result("pg30").run();
    model.result("pg30").feature("iso6").feature("col1").set("rangecoloractive", "off");
    model.result("pg30").run();
    model.result().numerical("min1")
         .set("expr", "f32energy(bn,es.normE,ang)+(lz(bn,es.normE,moag,5)<.1)*100+100-100*(dom==9||dom==6)");
    model.result().numerical("min1").setIndex("looplevel", "44", 0);
    model.result().table().create("tbl40", "Table");
    model.result().table("tbl40")
         .comments("Surface Minimum 1 (f32energy(bn,es.normE,ang)+(lz(bn,es.normE,moag,5)<.1)*100+100-100*(dom==9||dom==6))");
    model.result().numerical("min1").set("table", "tbl40");
    model.result().numerical("min1").setResult();
    model.result().numerical("min1").setIndex("looplevel", "43", 0);
    model.result().numerical("min1")
         .set("expr", "f32energy(bn,es.normE,ang)+(lz(bn,es.normE,moag,5)<.1)*100+100-101*(dom==9||dom==6)");
    model.result().numerical("min1").set("table", "tbl40");
    model.result().numerical("min1").appendResult();
    model.result().numerical("min1").setIndex("looplevel", "44", 0);
    model.result().numerical("min1").setIndex("looplevel", "43", 0);
    model.result().numerical("min1").setIndex("looplevel", "42", 0);
    model.result().numerical("min1")
         .set("expr", "f32energy(bn,es.normE,ang)+(lz(bn,es.normE,moag,5)<.1)*100+100-102*(dom==9||dom==6)");
    model.result().numerical("min1").set("table", "tbl40");
    model.result().numerical("min1").appendResult();
    model.result().numerical("min1")
         .set("expr", "f32energy(bn,es.normE,ang)+(lz(bn,es.normE,moag,5)<.05)*100+100-102*(dom==9||dom==6)");
    model.result().numerical("min1").set("table", "tbl40");
    model.result().numerical("min1").appendResult();
    model.result().numerical("min1")
         .set("expr", "f32energy(bn,es.normE,ang)+(lz(bn,es.normE,moag,5)<.1)*100+100*abs(x)>1e-3+100*abs(y)>1e-3+100*abs(z)>3e-3");
    model.result().numerical("min1").set("table", "tbl40");
    model.result().numerical("min1").appendResult();
    model.result().numerical("min1")
         .set("expr", "f32energy(bn,es.normE,ang)+(lz(bn,es.normE,moag,5)<.1)*100+100*(abs(x)>1e-3)+100*(abs(y))>1e-3+100*(abs(z)>3e-3)");
    model.result().numerical("min1").set("table", "tbl40");
    model.result().numerical("min1").appendResult();
    model.result().numerical("min1")
         .set("expr", "f32energy(bn,es.normE,ang)+(lz(bn,es.normE,moag,5)<.1)*100+100*(abs(x)>1e-3)+100*(abs(y))>1e-3+100*(abs(z)>2e-3)");
    model.result().numerical("min1").set("table", "tbl40");
    model.result().numerical("min1").appendResult();
    model.result().numerical("min1")
         .set("expr", "f32energy(bn,es.normE,ang)+(lz(bn,es.normE,moag,5)<.1)*100+100*(abs(x)>1e-3)+100*(abs(y)>1e-3)+100*(abs(z)>2e-3)");
    model.result().numerical("min1").set("table", "tbl40");
    model.result().numerical("min1").appendResult();
    model.result().numerical("min1").setIndex("looplevel", "44", 0);
    model.result().numerical("min1").setIndex("looplevel", "42", 0);
    model.result().numerical("min1")
         .set("expr", "f32energy(bn,es.normE,ang)+(lz(bn,es.normE,moag,5)<.1)*100+100*(abs(x)>1e-3)+101*(abs(y)>1e-3)+100*(abs(z)>2e-3)");
    model.result().numerical("min1").set("table", "tbl40");
    model.result().numerical("min1").appendResult();
    model.result().numerical("min1").setIndex("looplevel", "43", 0);
    model.result().numerical("min1")
         .set("expr", "f32energy(bn,es.normE,ang)+(lz(bn,es.normE,moag,5)<.1)*100+100*(abs(x)>1e-3)+102*(abs(y)>1e-3)+100*(abs(z)>2e-3)");
    model.result().table().create("tbl41", "Table");
    model.result().table("tbl41")
         .comments("Surface Minimum 1 (f32energy(bn,es.normE,ang)+(lz(bn,es.normE,moag,5)<.1)*100+100*(abs(x)>1e-3)+102*(abs(y)>1e-3)+100*(abs(z)>2e-3))");
    model.result().numerical("min1").set("table", "tbl41");
    model.result().numerical("min1").setResult();
    model.result().numerical("min1").setIndex("looplevel", "42", 0);
    model.result().numerical("min1").setIndex("looplevelinput", "manualindices", 0);
    model.result().numerical("min1").setIndex("looplevelindices", "", 0);
    model.result().numerical("min1").setIndex("looplevelindices", "range(1,4,41)", 0);
    model.result().numerical("min1").set("refine", "1");
    model.result().table().create("tbl42", "Table");
    model.result().table("tbl42")
         .comments("Surface Minimum 1 (f32energy(bn,es.normE,ang)+(lz(bn,es.normE,moag,5)<.1)*100+100*(abs(x)>1e-3)+102*(abs(y)>1e-3)+100*(abs(z)>2e-3))");
    model.result().numerical("min1").set("table", "tbl42");
    model.result().numerical("min1").setResult();

    model.study("std1").feature("param").setIndex("plistarr", "range(0.1,.01,0.1)", 0);

    model.probe("pdom1").genResult("none");

    model.batch("p1").run();

    model.study("std1").feature().remove("stat1");

    model.probe("pdom1").genResult("none");

    model.result().table().remove("tbl28");
    model.result().table().remove("tbl29");
    model.result().table().remove("tbl30");
    model.result().table().remove("tbl31");
    model.result().table().remove("tbl32");
    model.result().table().remove("evl2");
    model.result().table().remove("tbl33");
    model.result().table().remove("tbl34");
    model.result().table().remove("tbl35");
    model.result().table().remove("tbl36");
    model.result().table().remove("tbl37");
    model.result().table().remove("tbl38");
    model.result().table().remove("tbl39");
    model.result().table().remove("tbl40");
    model.result().table().remove("tbl41");
    model.result().table().remove("tbl42");

    model.study("std2").create("param", "Parametric");
    model.study("std2").feature("stat").set("notsolnum", "manual");

    model.param().set("poffi", "1");

    model.study("std2").feature("stat").set("notmanualsolnum", "poffi");
    model.study("std2").feature("param").setIndex("pname", "rd", 0);
    model.study("std2").feature("param").setIndex("plistarr", "", 0);
    model.study("std2").feature("param").setIndex("punit", "", 0);
    model.study("std2").feature("param").setIndex("pname", "rd", 0);
    model.study("std2").feature("param").setIndex("plistarr", "", 0);
    model.study("std2").feature("param").setIndex("punit", "", 0);
    model.study("std2").feature("param").setIndex("pname", "poffi", 0);
    model.study("std1").feature("param").setIndex("plistarr", "range(0,.1,0.1)", 0);
    model.study("std2").feature("param").setIndex("plistarr", "range(1,1,2)", 0);

    model.probe("pdom1").genResult("none");

    model.batch("p1").run();
    model.batch().create("p2", "Parametric");
    model.batch("p2").study("std2");
    model.batch("p2").create("so1", "Solutionseq");
    model.batch("p2").feature("so1").set("seq", "sol44");
    model.batch("p2").feature("so1").set("store", "on");
    model.batch("p2").feature("so1").set("clear", "on");
    model.batch("p2").feature("so1").set("psol", "none");
    model.batch("p2").set("pname", new String[]{"poffi"});
    model.batch("p2").set("plistarr", new String[]{"range(1,1,2)"});
    model.batch("p2").set("sweeptype", "sparse");
    model.batch("p2").set("probesel", "all");
    model.batch("p2").set("probes", new String[]{"pdom1"});
    model.batch("p2").set("plot", "off");
    model.batch("p2").set("err", "on");
    model.batch("p2").set("pdistrib", "off");
    model.batch("p2").attach("std2");
    model.batch("p2").set("control", "param");

    model.sol().create("sol47");
    model.sol("sol47").study("std2");
    model.sol("sol47").label("Parametric Solutions 2");

    model.batch("p2").feature("so1").set("psol", "sol47");

    model.probe("pdom1").genResult("none");

    model.study("std2").feature("stat").set("notsolnum", "from_list");
    model.study("std2").feature("stat").set("notstudy", "std1");
    model.study("std2").feature("stat").set("notsolnum", "from_list");
    model.study("std2").feature("stat").set("notsol", "sol2");
    model.study("std2").feature("stat").set("notsoluse", "sol45");

    model.sol().remove("sol44");
    model.sol().remove("sol47");
    model.sol().remove("sol48");

    model.study("std1").feature("stat").set("useparam", "on");
    model.study("std2").feature("stat").set("notstudy", "std1");

    model.result().create("pg40", "PlotGroup1D");
    model.result("pg40").label("Histogram Energy");

    model.study("std2").feature().remove("param");
    model.study("std2").feature("stat").set("notsolmethod", "sol");
    model.study("std2").feature("stat").set("notsol", "sol2");
    model.study("std2").feature("stat").set("notsoluse", "sol45");
    model.study("std2").feature("stat").set("notsolnum", "from_list");
    model.study("std1").feature("stat").set("useparam", "on");

    model.result().remove("pg35");
    model.result().remove("pg36");
    model.result().remove("pg37");
    model.result().remove("pg38");

    model.sol().create("sol47");
    model.sol("sol47").study("std2");

    model.study("std2").feature("stat").set("notlistsolnum", 1);
    model.study("std2").feature("stat").set("notsolnum", "from_list");
    model.study("std2").feature("stat").set("listsolnum", 1);
    model.study("std2").feature("stat").set("solnum", "1");

    model.sol("sol47").create("st1", "StudyStep");
    model.sol("sol47").feature("st1").set("study", "std2");
    model.sol("sol47").feature("st1").set("studystep", "stat");

    model.study("std2").feature("stat").set("notsoluse", "sol45");

    model.sol("sol47").create("v1", "Variables");
    model.sol("sol47").feature("v1").set("control", "stat");
    model.sol("sol47").create("s1", "Stationary");
    model.sol("sol47").feature("s1").create("p1", "Parametric");
    model.sol("sol47").feature("s1").feature().remove("pDef");
    model.sol("sol47").feature("s1").feature("p1").set("control", "stat");
    model.sol("sol47").feature("s1").set("control", "stat");
    model.sol("sol47").attach("std2");

    model.batch("p2").detach();

    model.probe("pdom1").genResult("none");

    model.sol("sol47").runAll();

    model.result().dataset().create("iso1", "Isosurface");
    model.result().dataset("iso1").label("Loss Surface");
    model.result().dataset("iso1").set("data", "dset7");
    model.result().dataset("iso1").set("expr", "angap(bn,es.normE)");
    model.result().dataset("iso1").set("unit", "pi/2");
    model.result().dataset("iso1").set("number", "1");
    model.result().dataset("iso1").run();
    model.result().dataset("iso1").set("levelmethod", "levels");
    model.result().dataset("iso1").set("level", "pi/2");
    model.result().dataset("iso1").run();
    model.result().remove("pg34");
    model.result().remove("pg39");
    model.result("pg26").run();
    model.result("pg22").run();
    model.result("pg12").run();
    model.result().dataset("cpl1").set("data", "dset7");

    return model;
  }

  public static Model run28(Model model) {
    model.result().dataset("cpl2").set("data", "dset7");
    model.result().dataset("cpl3").set("data", "dset7");
    model.result().dataset("cln2").set("data", "dset7");
    model.result().dataset("cln3").set("data", "dset7");
    model.result("pg12").feature("lngr2").set("expr", "real(f32energy(bn,en,ang))-enm");
    model.result("pg12").feature("lngr3").set("expr", "real(f32energy(bn,en,ang))-enm");
    model.result("pg12").feature("lngr6").set("expr", "real(f32energy(bn,en,ang))-enm");
    model.result("pg11").set("innerinput", "first");
    model.result("pg12").feature("lngr2").set("innerinput", "first");
    model.result("pg12").feature("lngr3").set("innerinput", "first");
    model.result("pg12").feature("lngr6").set("innerinput", "first");
    model.result("pg12").feature("lngr2").set("expr", "real(f32energy(bn,es.normE,ang))-enm");
    model.result("pg12").feature("lngr3").set("expr", "real(f32energy(bn,es.normE,ang))-enm");
    model.result("pg12").feature("lngr6").set("expr", "real(f32energy(bn,es.normE,ang))-enm");
    model.result("pg12").run();
    model.result("pg27").set("window", "window1");
    model.result("pg27").feature().remove("tblp1");
    model.result("pg27").set("window", "window1");
    model.result("pg27").label("Histogram");
    model.result("pg27").create("hist1", "Histogram");
    model.result("pg27").feature("hist1").set("data", "iso1");
    model.result("pg27").feature("hist1").setIndex("looplevelinput", "first", 0);
    model.result("pg27").feature("hist1").set("expr", "f32energy(bn,es.normE,ang)");
    model.result("pg27").set("window", "window1");
    model.result("pg27").run();
    model.result("pg27").feature("hist1")
         .set("expr", "f32energy(bn,es.normE,ang)-100*(abs(x)>1e-3||abs(y)>1e-3||abs(z)>2e-3)");
    model.result("pg27").set("window", "window1");
    model.result("pg27").run();
    model.result("pg27").feature("hist1").set("method", "number");
    model.result("pg27").feature("hist1").set("number", "100");
    model.result("pg27").set("window", "window1");
    model.result("pg27").run();
    model.result("pg27").feature("hist1")
         .set("expr", "f32energy(bn,es.normE,ang)*(1-(abs(x)>1e-3||abs(y)>1e-3||abs(z)>2e-3))");
    model.result("pg27").set("window", "window1");
    model.result("pg27").run();
    model.result("pg27").feature("hist1").set("method", "limits");
    model.result("pg27").feature("hist1").set("limits", ".5 20");
    model.result("pg27").set("window", "window1");
    model.result("pg27").run();
    model.result("pg27").feature("hist1").set("method", "number");
    model.result("pg27").set("window", "window1");
    model.result("pg27").feature("hist1").set("method", "limits");
    model.result("pg27").feature("hist1").set("limits", "range(0.5,0.5,15)");
    model.result("pg27").set("window", "window1");
    model.result("pg27").run();
    model.result("pg27").feature("hist1").setIndex("looplevelinput", "manual", 0);
    model.result("pg27").feature("hist1").setIndex("looplevel", "2", 0);
    model.result("pg27").feature("hist1").setIndex("looplevel", "41", 0);
    model.result("pg27").set("window", "window1");
    model.result("pg27").run();
    model.result("pg27").feature("hist1").setIndex("looplevel", "51", 0);
    model.result("pg27").set("window", "window1");
    model.result("pg27").run();
    model.result("pg27").feature("hist1")
         .set("expr", "f32energy(bn,es.normE,ang)*(1-(abs(x)>1e-3||abs(y)>1e-3||abs(z)>1e-3))");
    model.result("pg27").set("window", "window1");
    model.result("pg27").run();
    model.result("pg27").feature("hist1")
         .set("expr", "f32energy(bn,es.normE,ang)*(1-(abs(x)>1e-3||abs(y)>1e-3||abs(z)>1.5e-3))");
    model.result("pg27").set("window", "window1");
    model.result("pg27").run();
    model.result("pg27").feature("hist1")
         .set("expr", "(f32energy(bn,es.normE,ang)-f32energy(boffset,0,pi/4))*(1-(abs(x)>1e-3||abs(y)>1e-3||abs(z)>1.5e-3))");
    model.result("pg27").set("window", "window1");
    model.result("pg27").feature("hist1").set("limits", "range(0.0001,0.5,15.0001)");
    model.result("pg27").set("window", "window1");
    model.result("pg27").run();
    model.result("pg27").feature("hist1").setIndex("looplevel", "41", 0);
    model.result("pg27").feature("hist1")
         .setIndex("looplevel", "41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81", 0);
    model.result("pg27").feature("hist1").setIndex("looplevelinput", "manualindices", 0);
    model.result("pg27").feature("hist1").setIndex("looplevelindices", "range(41,5,81)", 0);
    model.result("pg27").set("window", "window1");
    model.result("pg27").feature("hist1").setIndex("looplevelinput", "manual", 0);
    model.result("pg27").feature("hist1").setIndex("looplevel", "40", 0);
    model.result("pg27").feature("hist1").setIndex("looplevel", "41", 0);
    model.result("pg27").set("window", "window1");
    model.result("pg27").run();
    model.result("pg27").set("window", "window1");
    model.result("pg27").feature().duplicate("hist2", "hist1");
    model.result("pg27").set("window", "window1");
    model.result("pg27").feature().duplicate("hist3", "hist2");
    model.result("pg27").set("window", "window1");
    model.result("pg27").feature().duplicate("hist4", "hist3");
    model.result("pg27").set("window", "window1");
    model.result("pg27").feature().copy("hist5", "pg27/hist1");
    model.result("pg27").feature().copy("hist6", "pg27/hist2");
    model.result("pg27").feature().copy("hist7", "pg27/hist3");
    model.result("pg27").feature().copy("hist8", "pg27/hist4");
    model.result("pg27").set("window", "window1");
    model.result("pg27").feature("hist2").setIndex("looplevelinput", "manualindices", 0);
    model.result("pg27").set("window", "window1");
    model.result("pg27").feature("hist1").setIndex("looplevelinput", "manualindices", 0);
    model.result("pg27").set("window", "window1");
    model.result("pg27").feature("hist1").setIndex("looplevelindices", "41", 0);
    model.result("pg27").set("window", "window1");
    model.result("pg27").feature("hist2").setIndex("looplevelindices", "46", 0);
    model.result("pg27").set("window", "window1");
    model.result("pg27").feature("hist3").setIndex("looplevelinput", "manualindices", 0);
    model.result("pg27").feature("hist3").setIndex("looplevelindices", "51", 0);
    model.result("pg27").set("window", "window1");
    model.result("pg27").feature("hist4").setIndex("looplevelinput", "manualindices", 0);
    model.result("pg27").feature("hist4").setIndex("looplevelindices", "56", 0);
    model.result("pg27").set("window", "window1");
    model.result("pg27").feature("hist5").setIndex("looplevelinput", "manualindices", 0);
    model.result("pg27").feature("hist5").setIndex("looplevelindices", "61", 0);
    model.result("pg27").set("window", "window1");
    model.result("pg27").feature("hist6").setIndex("looplevelinput", "manualindices", 0);
    model.result("pg27").feature("hist6").setIndex("looplevelindices", "66", 0);
    model.result("pg27").set("window", "window1");
    model.result("pg27").feature("hist7").setIndex("looplevelinput", "manualindices", 0);
    model.result("pg27").feature("hist7").setIndex("looplevelindices", "71", 0);
    model.result("pg27").set("window", "window1");
    model.result("pg27").feature("hist8").setIndex("looplevelinput", "manualindices", 0);
    model.result("pg27").feature("hist8").setIndex("looplevelindices", "76", 0);
    model.result("pg27").set("window", "window1");
    model.result("pg27").run();
    model.result("pg27").set("window", "window1");
    model.result("pg27").feature("hist1")
         .set("expr", "(lz(bn,es.normE,moag,5)<.1)*(f32energy(bn,es.normE,ang)-f32energy(boffset,0,pi/4))*(1-(abs(x)>1e-3||abs(y)>1e-3||abs(z)>1.5e-3))");
    model.result("pg27").set("window", "window1");
    model.result("pg27").feature("hist2")
         .set("expr", "(lz(bn,es.normE,moag,5)<.1)*(f32energy(bn,es.normE,ang)-f32energy(boffset,0,pi/4))*(1-(abs(x)>1e-3||abs(y)>1e-3||abs(z)>1.5e-3))");
    model.result("pg27").set("window", "window1");
    model.result("pg27").feature("hist3")
         .set("expr", "(lz(bn,es.normE,moag,5)<.1)*(f32energy(bn,es.normE,ang)-f32energy(boffset,0,pi/4))*(1-(abs(x)>1e-3||abs(y)>1e-3||abs(z)>1.5e-3))");
    model.result("pg27").set("window", "window1");
    model.result("pg27").feature("hist2").active(false);
    model.result("pg27").feature("hist3").active(false);
    model.result("pg27").feature("hist4").active(false);
    model.result("pg27").feature("hist5").active(false);
    model.result("pg27").feature("hist6").active(false);
    model.result("pg27").feature("hist7").active(false);
    model.result("pg27").feature("hist8").active(false);
    model.result("pg27").set("window", "window1");
    model.result("pg27").run();
    model.result("pg27").set("window", "window1");
    model.result("pg27").feature("hist1").set("limits", "range(0.0001,1,15.0001)");
    model.result("pg27").set("window", "window1");
    model.result("pg27").run();
    model.result("pg27").set("window", "window1");
    model.result("pg27").feature("hist4")
         .set("expr", "(lz(bn,es.normE,moag,5)<.1)*(f32energy(bn,es.normE,ang)-f32energy(boffset,0,pi/4))*(1-(abs(x)>1e-3||abs(y)>1e-3||abs(z)>1.5e-3))");
    model.result("pg27").set("window", "window1");
    model.result("pg27").feature("hist5")
         .set("expr", "(lz(bn,es.normE,moag,5)<.1)*(f32energy(bn,es.normE,ang)-f32energy(boffset,0,pi/4))*(1-(abs(x)>1e-3||abs(y)>1e-3||abs(z)>1.5e-3))");
    model.result("pg27").set("window", "window1");
    model.result("pg27").feature("hist6")
         .set("expr", "(lz(bn,es.normE,moag,5)<.1)*(f32energy(bn,es.normE,ang)-f32energy(boffset,0,pi/4))*(1-(abs(x)>1e-3||abs(y)>1e-3||abs(z)>1.5e-3))");
    model.result("pg27").set("window", "window1");
    model.result("pg27").feature("hist7")
         .set("expr", "(lz(bn,es.normE,moag,5)<.1)*(f32energy(bn,es.normE,ang)-f32energy(boffset,0,pi/4))*(1-(abs(x)>1e-3||abs(y)>1e-3||abs(z)>1.5e-3))");
    model.result("pg27").set("window", "window1");
    model.result("pg27").feature("hist8")
         .set("expr", "(lz(bn,es.normE,moag,5)<.1)*(f32energy(bn,es.normE,ang)-f32energy(boffset,0,pi/4))*(1-(abs(x)>1e-3||abs(y)>1e-3||abs(z)>1.5e-3))");
    model.result("pg27").set("window", "window1");
    model.result("pg27").feature("hist1").active(true);
    model.result("pg27").feature("hist2").active(true);
    model.result("pg27").feature("hist3").active(true);
    model.result("pg27").feature("hist4").active(true);
    model.result("pg27").feature("hist5").active(true);
    model.result("pg27").feature("hist6").active(true);
    model.result("pg27").feature("hist7").active(true);
    model.result("pg27").feature("hist8").active(true);
    model.result("pg27").set("window", "window1");
    model.result("pg27").run();
    model.result("pg27").set("window", "window1");
    model.result("pg27").feature("hist8")
         .set("expr", "(lz(bn,es.normE,moag,5)>.1)*(f32energy(bn,es.normE,ang)-f32energy(boffset,0,pi/4))*(1-(abs(x)>1e-3||abs(y)>1e-3||abs(z)>1.5e-3))");
    model.result("pg27").set("window", "window1");
    model.result("pg27").feature("hist7")
         .set("expr", "(lz(bn,es.normE,moag,5)>.1)*(f32energy(bn,es.normE,ang)-f32energy(boffset,0,pi/4))*(1-(abs(x)>1e-3||abs(y)>1e-3||abs(z)>1.5e-3))");
    model.result("pg27").set("window", "window1");
    model.result("pg27").feature("hist6")
         .set("expr", "(lz(bn,es.normE,moag,5)>.1)*(f32energy(bn,es.normE,ang)-f32energy(boffset,0,pi/4))*(1-(abs(x)>1e-3||abs(y)>1e-3||abs(z)>1.5e-3))");
    model.result("pg27").set("window", "window1");
    model.result("pg27").feature("hist5")
         .set("expr", "(lz(bn,es.normE,moag,5)>.1)*(f32energy(bn,es.normE,ang)-f32energy(boffset,0,pi/4))*(1-(abs(x)>1e-3||abs(y)>1e-3||abs(z)>1.5e-3))");
    model.result("pg27").set("window", "window1");
    model.result("pg27").feature("hist4")
         .set("expr", "(lz(bn,es.normE,moag,5)>.1)*(f32energy(bn,es.normE,ang)-f32energy(boffset,0,pi/4))*(1-(abs(x)>1e-3||abs(y)>1e-3||abs(z)>1.5e-3))");
    model.result("pg27").set("window", "window1");
    model.result("pg27").feature("hist3")
         .set("expr", "(lz(bn,es.normE,moag,5)>.1)*(f32energy(bn,es.normE,ang)-f32energy(boffset,0,pi/4))*(1-(abs(x)>1e-3||abs(y)>1e-3||abs(z)>1.5e-3))");
    model.result("pg27").set("window", "window1");
    model.result("pg27").feature("hist2")
         .set("expr", "(lz(bn,es.normE,moag,5)>.1)*(f32energy(bn,es.normE,ang)-f32energy(boffset,0,pi/4))*(1-(abs(x)>1e-3||abs(y)>1e-3||abs(z)>1.5e-3))");
    model.result("pg27").set("window", "window1");
    model.result("pg27").feature("hist1")
         .set("expr", "(lz(bn,es.normE,moag,5)>.1)*(f32energy(bn,es.normE,ang)-f32energy(boffset,0,pi/4))*(1-(abs(x)>1e-3||abs(y)>1e-3||abs(z)>1.5e-3))");
    model.result("pg27").set("window", "window1");
    model.result("pg27").run();
    model.result("pg27").set("window", "window1");
    model.result("pg27").feature("hist1").set("limits", "range(0.0001,.5,15.0001)");
    model.result("pg27").feature("hist1").set("normalization", "none");
    model.result("pg27").set("window", "window1");
    model.result("pg27").feature("hist1").set("limits", "range(0.0001,0.25,15.0001)");
    model.result("pg27").feature("hist1")
         .set("expr", "4*(lz(bn,es.normE,moag,5)>.1)*(f32energy(bn,es.normE,ang)-f32energy(boffset,0,pi/4))*(1-(abs(x)>1e-3||abs(y)>1e-3||abs(z)>1.5e-3))");
    model.result("pg27").set("window", "window1");
    model.result("pg27").feature("hist2").set("limits", "range(0.0001,0.25,15.0001)");
    model.result("pg27").set("window", "window1");
    model.result("pg27").feature("hist3").set("limits", "range(0.0001,0.25,15.0001)");
    model.result("pg27").set("window", "window1");
    model.result("pg27").feature("hist4").set("limits", "range(0.0001,0.25,15.0001)");
    model.result("pg27").set("window", "window1");
    model.result("pg27").feature("hist5").set("limits", "range(0.0001,0.25,15.0001)");
    model.result("pg27").set("window", "window1");
    model.result("pg27").feature("hist6").set("limits", "range(0.0001,0.25,15.0001)");
    model.result("pg27").set("window", "window1");
    model.result("pg27").feature("hist7").set("limits", "range(0.0001,0.25,15.0001)");
    model.result("pg27").set("window", "window1");
    model.result("pg27").feature("hist8").set("limits", "range(0.0001,0.25,15.0001)");
    model.result("pg27").set("window", "window1");
    model.result("pg27").feature("hist2")
         .set("expr", "4*(lz(bn,es.normE,moag,5)>.1)*(f32energy(bn,es.normE,ang)-f32energy(boffset,0,pi/4))*(1-(abs(x)>1e-3||abs(y)>1e-3||abs(z)>1.5e-3))");
    model.result("pg27").set("window", "window1");
    model.result("pg27").feature("hist3")
         .set("expr", "4*(lz(bn,es.normE,moag,5)>.1)*(f32energy(bn,es.normE,ang)-f32energy(boffset,0,pi/4))*(1-(abs(x)>1e-3||abs(y)>1e-3||abs(z)>1.5e-3))");
    model.result("pg27").set("window", "window1");
    model.result("pg27").feature("hist4")
         .set("expr", "4*(lz(bn,es.normE,moag,5)>.1)*(f32energy(bn,es.normE,ang)-f32energy(boffset,0,pi/4))*(1-(abs(x)>1e-3||abs(y)>1e-3||abs(z)>1.5e-3))");
    model.result("pg27").set("window", "window1");
    model.result("pg27").feature("hist5")
         .set("expr", "4*(lz(bn,es.normE,moag,5)>.1)*(f32energy(bn,es.normE,ang)-f32energy(boffset,0,pi/4))*(1-(abs(x)>1e-3||abs(y)>1e-3||abs(z)>1.5e-3))");
    model.result("pg27").set("window", "window1");
    model.result("pg27").feature("hist6")
         .set("expr", "4*(lz(bn,es.normE,moag,5)>.1)*(f32energy(bn,es.normE,ang)-f32energy(boffset,0,pi/4))*(1-(abs(x)>1e-3||abs(y)>1e-3||abs(z)>1.5e-3))");
    model.result("pg27").set("window", "window1");
    model.result("pg27").feature("hist7")
         .set("expr", "4*(lz(bn,es.normE,moag,5)>.1)*(f32energy(bn,es.normE,ang)-f32energy(boffset,0,pi/4))*(1-(abs(x)>1e-3||abs(y)>1e-3||abs(z)>1.5e-3))");
    model.result("pg27").set("window", "window1");
    model.result("pg27").feature("hist8")
         .set("expr", "4*(lz(bn,es.normE,moag,5)>.1)*(f32energy(bn,es.normE,ang)-f32energy(boffset,0,pi/4))*(1-(abs(x)>1e-3||abs(y)>1e-3||abs(z)>1.5e-3))");
    model.result("pg27").set("window", "window1");
    model.result("pg27").run();
    model.result().create("pg28", "PlotGroup3D");
    model.result("pg28").label("View Loss Surface");
    model.result("pg28").set("data", "iso1");
    model.result("pg28").set("solnum", "46");
    model.result("pg28").create("iso1", "Isosurface");
    model.result("pg28").feature("iso1").set("expr", "");
    model.result("pg28").run();
    model.result("pg28").set("data", "dset7");
    model.result("pg28").feature("iso1").set("expr", "angap");
    model.result("pg28").feature("iso1").set("levelmethod", "levels");
    model.result("pg28").feature("iso1").set("levels", "pi/2");
    model.result("pg28").feature("iso1").set("expr", "angap(bn,es.normE)");
    model.result("pg28").run();
    model.result("pg28").feature("iso1").create("col1", "Color");
    model.result("pg27").set("window", "window1");
    model.result("pg28").feature("iso1").feature("col1")
         .set("expr", "4*(lz(bn,es.normE,moag,5)>.1)*(f32energy(bn,es.normE,ang)-f32energy(boffset,0,pi/4))*(1-(abs(x)>1e-3||abs(y)>1e-3||abs(z)>1.5e-3))");
    model.result("pg28").run();
    model.result("pg28").feature("iso1").feature("col1").set("rangecoloractive", "on");
    model.result("pg28").feature("iso1").feature("col1").set("rangecolormax", "3");
    model.result("pg28").run();

    model.view("view1").hideObjects().clear();
    model.view("view1").hideEntities().clear();
    model.view("view1").hideEntities().create("hide1");
    model.view("view1").hideEntities("hide1").geom(2);
    model.view("view1").hideEntities("hide1").add(new int[]{82});
    model.view("view1").hideObjects().clear();
    model.view("view1").hideEntities().clear();
    model.view("view1").hideEntities().create("hide1");
    model.view("view1").hideEntities("hide1").geom(3);
    model.view("view1").hideEntities("hide1").add(new int[]{1});
    model.view("view1").hideEntities("hide1").add(new int[]{6});

    model.result("pg28").run();

    model.view("view1").hideObjects().clear();
    model.view("view1").hideEntities().clear();
    model.view("view1").hideEntities().create("hide1");
    model.view("view1").hideEntities("hide1").geom(3);
    model.view("view1").hideEntities("hide1").add(new int[]{1});
    model.view("view1").hideEntities("hide1").add(new int[]{5});
    model.view("view1").hideEntities("hide1").add(new int[]{23});
    model.view("view1").hideEntities("hide1").add(new int[]{22});
    model.view("view1").hideEntities("hide1").add(new int[]{4});
    model.view("view1").hideEntities("hide1").add(new int[]{2});
    model.view("view1").hideEntities("hide1").add(new int[]{3});
    model.view("view1").hideEntities("hide1").add(new int[]{20});
    model.view("view1").hideEntities("hide1").add(new int[]{19});
    model.view("view1").hideEntities("hide1").add(new int[]{12});
    model.view("view1").hideEntities("hide1").add(new int[]{13});
    model.view("view1").hideEntities("hide1").add(new int[]{14});
    model.view("view1").hideEntities("hide1").add(new int[]{15});

    model.result("pg28").run();
    model.result("pg28").set("solnum", "36");
    model.result("pg28").run();

    model.study("std1").feature("stat").set("useparam", "off");

    model.view("view1").hideObjects().create("hide1");
    model.view("view1").hideObjects("hide1").init();
    model.view("view1").hideObjects("hide1").add(new String[]{"cyl4"});

    model.param().set("xrs", "3.5");

    model.geom("geom1").run("fin");

    model.view("view1").hideObjects("hide1").add(new String[]{"fin"});
    model.view("view1").hideObjects().clear();
    model.view("view1").hideObjects().create("hide1");
    model.view("view1").hideObjects("hide1").init(3);
    model.view("view1").hideObjects("hide1").add("fin", new int[]{1});

    model.result("pg28").feature("iso1").set("expr", "ang");
    model.result("pg28").run();
    model.result().dataset("iso1").set("expr", "ang");
    model.result("pg27").set("window", "window1");
    model.result("pg27").run();
    model.result("pg28").feature("iso1").feature("col1").set("rangecoloractive", "off");
    model.result("pg28").run();
    model.result("pg28").set("solnum", "40");
    model.result("pg28").run();
    model.result("pg27").set("window", "window1");

    model.study("std2").feature("stat").set("notsoluse", "sol46");

    model.sol("sol47").study("std2");

    model.study("std2").feature("stat").set("notlistsolnum", 1);
    model.study("std2").feature("stat").set("notsolnum", "from_list");
    model.study("std2").feature("stat").set("listsolnum", 1);
    model.study("std2").feature("stat").set("solnum", "1");

    model.sol("sol47").feature().remove("s1");
    model.sol("sol47").feature().remove("v1");
    model.sol("sol47").feature().remove("st1");
    model.sol("sol47").create("st1", "StudyStep");
    model.sol("sol47").feature("st1").set("study", "std2");
    model.sol("sol47").feature("st1").set("studystep", "stat");

    model.study("std2").feature("stat").set("notsoluse", "sol46");

    model.sol("sol47").create("v1", "Variables");
    model.sol("sol47").feature("v1").set("control", "stat");
    model.sol("sol47").create("s1", "Stationary");
    model.sol("sol47").feature("s1").create("p1", "Parametric");
    model.sol("sol47").feature("s1").feature().remove("pDef");
    model.sol("sol47").feature("s1").feature("p1").set("control", "stat");
    model.sol("sol47").feature("s1").set("control", "stat");
    model.sol("sol47").attach("std2");

    model.probe("pdom1").genResult("none");

    model.sol("sol47").runAll();

    model.result("pg27").set("window", "window1");
    model.result("pg27").feature().remove("tblp1");
    model.result("pg27").set("window", "window1");
    model.result("pg27").feature("hist3").active(false);
    model.result("pg27").feature("hist4").active(false);
    model.result("pg27").feature("hist5").active(false);
    model.result("pg27").feature("hist6").active(false);
    model.result("pg27").feature("hist7").active(false);
    model.result("pg27").feature("hist8").active(false);
    model.result("pg27").set("window", "window1");
    model.result("pg27").run();
    model.result("pg27").set("window", "window1");
    model.result("pg27").feature("hist3").active(true);
    model.result("pg27").feature("hist4").active(true);
    model.result("pg27").feature("hist5").active(true);
    model.result("pg27").feature("hist6").active(true);
    model.result("pg27").feature("hist7").active(true);
    model.result("pg27").feature("hist8").active(true);
    model.result("pg27").set("window", "window1");
    model.result("pg27").feature("hist1")
         .set("expr", "4*(lz(bn,es.normE,moag,5)>.1)*(f32energy(bn,es.normE,ang)-f32energy(0,0,pi/4))*(1-(abs(x)>1e-3||abs(y)>1e-3||abs(z)>1.5e-3))");
    model.result("pg27").set("window", "window1");
    model.result("pg27").feature("hist2")
         .set("expr", "4*(lz(bn,es.normE,moag,5)>.1)*(f32energy(bn,es.normE,ang)-f32energy(0,0,pi/4))*(1-(abs(x)>1e-3||abs(y)>1e-3||abs(z)>1.5e-3))");
    model.result("pg27").set("window", "window1");
    model.result("pg27").feature("hist3")
         .set("expr", "4*(lz(bn,es.normE,moag,5)>.1)*(f32energy(bn,es.normE,ang)-f32energy(0,0,pi/4))*(1-(abs(x)>1e-3||abs(y)>1e-3||abs(z)>1.5e-3))");
    model.result("pg27").set("window", "window1");
    model.result("pg27").feature("hist4")
         .set("expr", "4*(lz(bn,es.normE,moag,5)>.1)*(f32energy(bn,es.normE,ang)-f32energy(0,0,pi/4))*(1-(abs(x)>1e-3||abs(y)>1e-3||abs(z)>1.5e-3))");
    model.result("pg27").set("window", "window1");
    model.result("pg27").feature("hist5")
         .set("expr", "4*(lz(bn,es.normE,moag,5)>.1)*(f32energy(bn,es.normE,ang)-f32energy(0,0,pi/4))*(1-(abs(x)>1e-3||abs(y)>1e-3||abs(z)>1.5e-3))");
    model.result("pg27").set("window", "window1");
    model.result("pg27").feature("hist6")
         .set("expr", "4*(lz(bn,es.normE,moag,5)>.1)*(f32energy(bn,es.normE,ang)-f32energy(0,0,pi/4))*(1-(abs(x)>1e-3||abs(y)>1e-3||abs(z)>1.5e-3))");
    model.result("pg27").set("window", "window1");
    model.result("pg27").feature("hist7")
         .set("expr", "4*(lz(bn,es.normE,moag,5)>.1)*(f32energy(bn,es.normE,ang)-f32energy(0,0,pi/4))*(1-(abs(x)>1e-3||abs(y)>1e-3||abs(z)>1.5e-3))");
    model.result("pg27").set("window", "window1");
    model.result("pg27").feature("hist8")
         .set("expr", "4*(lz(bn,es.normE,moag,5)>.1)*(f32energy(bn,es.normE,ang)-f32energy(0,0,pi/4))*(1-(abs(x)>1e-3||abs(y)>1e-3||abs(z)>1.5e-3))");
    model.result("pg27").set("window", "window1");
    model.result("pg27").run();
    model.result("pg27").set("window", "window1");
    model.result("pg28").setIndex("looplevel", "46", 0);
    model.result("pg28").feature("iso1").feature("col1")
         .set("expr", "4*(lz(bn,es.normE,moag,5)>.1)*(f32energy(bn,es.normE,ang)-f32energy(0,0,pi/4))*(1-(abs(x)>1e-3||abs(y)>1e-3||abs(z)>1.5e-3))");
    model.result("pg28").run();
    model.result("pg28").feature("iso1").feature("col1")
         .set("expr", "4*(lz(bn,es.normE,moag,5)>.1)*(10+f32energy(bn,es.normE,ang)-f32energy(0,0,pi/4))*(1-(abs(x)>1e-3||abs(y)>1e-3||abs(z)>1.5e-3))");
    model.result("pg28").run();

    model.view("view1").hideEntities("hide1").add(new int[]{8});
    model.view("view1").hideEntities("hide1").add(new int[]{7});
    model.view("view1").hideEntities("hide1").add(new int[]{11});
    model.view("view1").hideEntities("hide1").add(new int[]{18});
    model.view("view1").hideEntities("hide1").add(new int[]{17});
    model.view("view1").hideEntities("hide1").add(new int[]{21});

    model.result("pg28").run();
    model.result("pg28").feature("iso1").feature("col1")
         .set("expr", "4*(lz(bn,es.normE,moag,5)>.1)*(10+f32energy(bn,es.normE,ang)-f32energy(0,0,pi/4))*(1-(abs(x)>1e-3||abs(y)>1e-3||abs(z)>1.0e-3))");
    model.result("pg28").run();
    model.result("pg28").feature("iso1").feature("col1").set("rangecoloractive", "on");
    model.result("pg28").feature("iso1").feature("col1").set("rangecolormax", "12");
    model.result("pg28").run();
    model.result("pg28").feature("iso1").feature("col1").set("rangecoloractive", "off");
    model.result("pg27").set("window", "window1");
    model.result("pg27").feature("hist5").active(false);
    model.result("pg27").feature("hist6").active(false);
    model.result("pg27").feature("hist7").active(false);
    model.result("pg27").feature("hist8").active(false);
    model.result("pg27").set("window", "window1");
    model.result("pg27").run();
    model.result("pg27").set("window", "window1");
    model.result("pg27").feature("hist1").set("resolution", "norefine");
    model.result("pg27").set("window", "window1");
    model.result("pg27").feature("hist2").set("resolution", "norefine");
    model.result("pg27").set("window", "window1");
    model.result("pg27").feature("hist3").set("resolution", "norefine");
    model.result("pg27").set("window", "window1");
    model.result("pg27").feature("hist4").set("resolution", "norefine");
    model.result("pg27").set("window", "window1");
    model.result("pg27").run();
    model.result("pg27").set("window", "window1");
    model.result("pg27").feature("hist1")
         .set("expr", "4*(lz(bn,es.normE,moag,5)>.1)*(10+f32energy(bn,es.normE,ang)-f32energy(0,0,pi/4))*(1-(abs(x)>1e-3||abs(y)>1e-3||abs(z)>1.5e-3))");
    model.result("pg27").set("window", "window1");
    model.result("pg27").feature("hist2")
         .set("expr", "4*(lz(bn,es.normE,moag,5)>.1)*(10+f32energy(bn,es.normE,ang)-f32energy(0,0,pi/4))*(1-(abs(x)>1e-3||abs(y)>1e-3||abs(z)>1.5e-3))");
    model.result("pg27").set("window", "window1");
    model.result("pg27").feature("hist3")
         .set("expr", "4*(lz(bn,es.normE,moag,5)>.1)*(10+f32energy(bn,es.normE,ang)-f32energy(0,0,pi/4))*(1-(abs(x)>1e-3||abs(y)>1e-3||abs(z)>1.5e-3))");
    model.result("pg27").set("window", "window1");
    model.result("pg27").feature("hist4")
         .set("expr", "4*(lz(bn,es.normE,moag,5)>.1)*(10+f32energy(bn,es.normE,ang)-f32energy(0,0,pi/4))*(1-(abs(x)>1e-3||abs(y)>1e-3||abs(z)>1.5e-3))");
    model.result("pg27").set("window", "window1");
    model.result("pg27").run();
    model.result("pg27").set("window", "window1");
    model.result("pg27").feature("hist2").setIndex("looplevelindices", "42", 0);
    model.result("pg27").set("window", "window1");
    model.result("pg27").feature("hist3").setIndex("looplevelindices", "43", 0);
    model.result("pg27").set("window", "window1");
    model.result("pg27").feature("hist4").setIndex("looplevelindices", "44", 0);
    model.result("pg27").set("window", "window1");
    model.result("pg27").run();
    model.result("pg27").set("window", "window1");
    model.result("pg27").feature("hist1").set("limits", "range(0.0001,0.25,35.0001)");
    model.result("pg27").set("window", "window1");
    model.result("pg27").feature("hist2").set("limits", "range(0.0001,0.25,35.0001)");
    model.result("pg27").set("window", "window1");
    model.result("pg27").feature("hist3").set("limits", "range(0.0001,0.25,35.0001)");
    model.result("pg27").set("window", "window1");
    model.result("pg27").run();
    model.result("pg27").feature("hist4").set("limits", "range(0.0001,0.25,35.0001)");
    model.result("pg27").set("window", "window1");
    model.result("pg27").run();
    model.result("pg27").feature("hist4").set("resolution", "normal");
    model.result("pg27").set("window", "window1");
    model.result("pg27").run();
    model.result("pg27").feature("hist4").set("limits", "range(0.0001,0.25,45.0001)");
    model.result("pg27").set("window", "window1");
    model.result("pg27").feature("hist3").set("limits", "range(0.0001,0.25,45.0001)");
    model.result("pg27").set("window", "window1");
    model.result("pg27").feature("hist2").set("limits", "range(0.0001,0.25,65.0001)");
    model.result("pg27").set("window", "window1");
    model.result("pg27").feature("hist1").set("limits", "range(0.0001,0.25,65.0001)");
    model.result("pg27").set("window", "window1");
    model.result("pg27").feature("hist3").set("limits", "range(0.0001,0.25,65.0001)");
    model.result("pg27").set("window", "window1");
    model.result("pg27").feature("hist4").set("limits", "range(0.0001,0.25,65.0001)");
    model.result("pg27").set("window", "window1");
    model.result("pg27").feature("hist2").setIndex("looplevelindices", "43", 0);
    model.result("pg27").set("window", "window1");
    model.result("pg27").feature("hist3").setIndex("looplevelindices", "45", 0);
    model.result("pg27").set("window", "window1");
    model.result("pg27").feature("hist4").setIndex("looplevelindices", "47", 0);
    model.result("pg27").set("window", "window1");
    model.result("pg27").run();
    model.result().report().create("rpt1", "Report");
    model.result().report("rpt1").set("level", "brief");
    model.result().report("rpt1").create("tp1", "TitlePage");
    model.result().report("rpt1").create("toc1", "TableOfContents");
    model.result().report("rpt1").create("sec1", "Section");
    model.result().report("rpt1").feature("sec1").set("source", "custom");
    model.result().report("rpt1").feature("sec1").set("heading", "Global Definitions");
    model.result().report("rpt1").feature("sec1").create("root1", "Model");
    model.result().report("rpt1").feature("sec1").create("sec1", "Section");
    model.result().report("rpt1").feature("sec1").feature("sec1").set("source", "firstchild");
    model.result().report("rpt1").feature("sec1").feature("sec1").set("heading", "Parameters");
    model.result().report("rpt1").feature("sec1").feature("sec1").create("param1", "Parameter");
    model.result().report("rpt1").create("sec2", "Section");
    model.result().report("rpt1").feature("sec2").set("source", "custom");
    model.result().report("rpt1").feature("sec2").set("heading", "Model 1");

    return model;
  }

  public static Model run29(Model model) {
    model.result().report("rpt1").feature("sec2").create("comp1", "ModelNode");
    model.result().report("rpt1").feature("sec2").create("sec1", "Section");
    model.result().report("rpt1").feature("sec2").feature("sec1").set("source", "custom");
    model.result().report("rpt1").feature("sec2").feature("sec1").set("heading", "Definitions");
    model.result().report("rpt1").feature("sec2").feature("sec1").create("sec1", "Section");
    model.result().report("rpt1").feature("sec2").feature("sec1").feature("sec1").set("source", "custom");
    model.result().report("rpt1").feature("sec2").feature("sec1").feature("sec1").set("heading", "Variables");
    model.result().report("rpt1").feature("sec2").feature("sec1").feature("sec1").create("sec1", "Section");
    model.result().report("rpt1").feature("sec2").feature("sec1").feature("sec1").feature("sec1")
         .set("source", "firstchild");
    model.result().report("rpt1").feature("sec2").feature("sec1").feature("sec1").feature("sec1")
         .set("heading", "shortcuts");
    model.result().report("rpt1").feature("sec2").feature("sec1").feature("sec1").feature("sec1")
         .create("var1", "Variables");
    model.result().report("rpt1").feature("sec2").feature("sec1").feature("sec1").feature("sec1").feature("var1")
         .set("noderef", "var1");
    model.result().report("rpt1").feature("sec2").feature("sec1").create("sec2", "Section");
    model.result().report("rpt1").feature("sec2").feature("sec1").feature("sec2").set("source", "custom");
    model.result().report("rpt1").feature("sec2").feature("sec1").feature("sec2").set("heading", "Functions");
    model.result().report("rpt1").feature("sec2").feature("sec1").feature("sec2").create("sec1", "Section");
    model.result().report("rpt1").feature("sec2").feature("sec1").feature("sec2").feature("sec1")
         .set("source", "firstchild");
    model.result().report("rpt1").feature("sec2").feature("sec1").feature("sec2").feature("sec1")
         .set("heading", "Gap pi/2 in MHz");
    model.result().report("rpt1").feature("sec2").feature("sec1").feature("sec2").feature("sec1")
         .create("func1", "Functions");
    model.result().report("rpt1").feature("sec2").feature("sec1").feature("sec2").feature("sec1").feature("func1")
         .set("noderef", "an1");
    model.result().report("rpt1").feature("sec2").feature("sec1").feature("sec2").create("sec2", "Section");
    model.result().report("rpt1").feature("sec2").feature("sec1").feature("sec2").feature("sec2")
         .set("source", "firstchild");
    model.result().report("rpt1").feature("sec2").feature("sec1").feature("sec2").feature("sec2")
         .set("heading", "Highest Quartic Root");
    model.result().report("rpt1").feature("sec2").feature("sec1").feature("sec2").feature("sec2")
         .create("func1", "Functions");
    model.result().report("rpt1").feature("sec2").feature("sec1").feature("sec2").feature("sec2").feature("func1")
         .set("noderef", "an3");
    model.result().report("rpt1").feature("sec2").feature("sec1").feature("sec2").create("sec3", "Section");
    model.result().report("rpt1").feature("sec2").feature("sec1").feature("sec2").feature("sec3")
         .set("source", "firstchild");
    model.result().report("rpt1").feature("sec2").feature("sec1").feature("sec2").feature("sec3")
         .set("heading", "Quartic Coefficient A");
    model.result().report("rpt1").feature("sec2").feature("sec1").feature("sec2").feature("sec3")
         .create("func1", "Functions");
    model.result().report("rpt1").feature("sec2").feature("sec1").feature("sec2").feature("sec3").feature("func1")
         .set("noderef", "an4");
    model.result().report("rpt1").feature("sec2").feature("sec1").feature("sec2").create("sec4", "Section");
    model.result().report("rpt1").feature("sec2").feature("sec1").feature("sec2").feature("sec4")
         .set("source", "firstchild");
    model.result().report("rpt1").feature("sec2").feature("sec1").feature("sec2").feature("sec4")
         .set("heading", "Quartic Coefficient B");
    model.result().report("rpt1").feature("sec2").feature("sec1").feature("sec2").feature("sec4")
         .create("func1", "Functions");
    model.result().report("rpt1").feature("sec2").feature("sec1").feature("sec2").feature("sec4").feature("func1")
         .set("noderef", "an5");
    model.result().report("rpt1").feature("sec2").feature("sec1").feature("sec2").create("sec5", "Section");
    model.result().report("rpt1").feature("sec2").feature("sec1").feature("sec2").feature("sec5")
         .set("source", "firstchild");
    model.result().report("rpt1").feature("sec2").feature("sec1").feature("sec2").feature("sec5")
         .set("heading", "Quartic Coefficient C");
    model.result().report("rpt1").feature("sec2").feature("sec1").feature("sec2").feature("sec5")
         .create("func1", "Functions");
    model.result().report("rpt1").feature("sec2").feature("sec1").feature("sec2").feature("sec5").feature("func1")
         .set("noderef", "an6");
    model.result().report("rpt1").feature("sec2").feature("sec1").feature("sec2").create("sec6", "Section");
    model.result().report("rpt1").feature("sec2").feature("sec1").feature("sec2").feature("sec6")
         .set("source", "firstchild");
    model.result().report("rpt1").feature("sec2").feature("sec1").feature("sec2").feature("sec6")
         .set("heading", "Quartic Coefficient D");
    model.result().report("rpt1").feature("sec2").feature("sec1").feature("sec2").feature("sec6")
         .create("func1", "Functions");
    model.result().report("rpt1").feature("sec2").feature("sec1").feature("sec2").feature("sec6").feature("func1")
         .set("noderef", "an7");
    model.result().report("rpt1").feature("sec2").feature("sec1").feature("sec2").create("sec7", "Section");
    model.result().report("rpt1").feature("sec2").feature("sec1").feature("sec2").feature("sec7")
         .set("source", "firstchild");
    model.result().report("rpt1").feature("sec2").feature("sec1").feature("sec2").feature("sec7")
         .set("heading", "Stark-Zeeman Energy (GHz)");
    model.result().report("rpt1").feature("sec2").feature("sec1").feature("sec2").feature("sec7")
         .create("func1", "Functions");
    model.result().report("rpt1").feature("sec2").feature("sec1").feature("sec2").feature("sec7").feature("func1")
         .set("noderef", "an8");
    model.result().report("rpt1").feature("sec2").feature("sec1").feature("sec2").create("sec8", "Section");
    model.result().report("rpt1").feature("sec2").feature("sec1").feature("sec2").feature("sec8")
         .set("source", "firstchild");
    model.result().report("rpt1").feature("sec2").feature("sec1").feature("sec2").feature("sec8")
         .set("heading", "Boltzmann Weight");
    model.result().report("rpt1").feature("sec2").feature("sec1").feature("sec2").feature("sec8")
         .create("func1", "Functions");
    model.result().report("rpt1").feature("sec2").feature("sec1").feature("sec2").feature("sec8").feature("func1")
         .set("noderef", "an10");
    model.result().report("rpt1").feature("sec2").feature("sec1").feature("sec2").create("sec9", "Section");
    model.result().report("rpt1").feature("sec2").feature("sec1").feature("sec2").feature("sec9")
         .set("source", "firstchild");
    model.result().report("rpt1").feature("sec2").feature("sec1").feature("sec2").feature("sec9")
         .set("heading", "LZ Slope");
    model.result().report("rpt1").feature("sec2").feature("sec1").feature("sec2").feature("sec9")
         .create("func1", "Functions");
    model.result().report("rpt1").feature("sec2").feature("sec1").feature("sec2").feature("sec9").feature("func1")
         .set("noderef", "an11");
    model.result().report("rpt1").feature("sec2").feature("sec1").feature("sec2").create("sec10", "Section");
    model.result().report("rpt1").feature("sec2").feature("sec1").feature("sec2").feature("sec10")
         .set("source", "firstchild");
    model.result().report("rpt1").feature("sec2").feature("sec1").feature("sec2").feature("sec10")
         .set("heading", "LZ Formula");
    model.result().report("rpt1").feature("sec2").feature("sec1").feature("sec2").feature("sec10")
         .create("func1", "Functions");
    model.result().report("rpt1").feature("sec2").feature("sec1").feature("sec2").feature("sec10").feature("func1")
         .set("noderef", "an12");
    model.result().report("rpt1").feature("sec2").feature("sec1").feature("sec2").create("sec11", "Section");
    model.result().report("rpt1").feature("sec2").feature("sec1").feature("sec2").feature("sec11")
         .set("source", "firstchild");
    model.result().report("rpt1").feature("sec2").feature("sec1").feature("sec2").feature("sec11")
         .set("heading", "Magnitude");
    model.result().report("rpt1").feature("sec2").feature("sec1").feature("sec2").feature("sec11")
         .create("func1", "Functions");
    model.result().report("rpt1").feature("sec2").feature("sec1").feature("sec2").feature("sec11").feature("func1")
         .set("noderef", "an13");
    model.result().report("rpt1").feature("sec2").feature("sec1").feature("sec2").create("sec12", "Section");
    model.result().report("rpt1").feature("sec2").feature("sec1").feature("sec2").feature("sec12")
         .set("source", "firstchild");
    model.result().report("rpt1").feature("sec2").feature("sec1").feature("sec2").feature("sec12")
         .set("heading", "LZ Formula 2");
    model.result().report("rpt1").feature("sec2").feature("sec1").feature("sec2").feature("sec12")
         .create("func1", "Functions");
    model.result().report("rpt1").feature("sec2").feature("sec1").feature("sec2").feature("sec12").feature("func1")
         .set("noderef", "an14");
    model.result().report("rpt1").feature("sec2").feature("sec1").create("sec3", "Section");
    model.result().report("rpt1").feature("sec2").feature("sec1").feature("sec3").set("source", "custom");
    model.result().report("rpt1").feature("sec2").feature("sec1").feature("sec3").set("heading", "Probes");
    model.result().report("rpt1").feature("sec2").feature("sec1").feature("sec3").create("sec1", "Section");
    model.result().report("rpt1").feature("sec2").feature("sec1").feature("sec3").feature("sec1")
         .set("source", "firstchild");
    model.result().report("rpt1").feature("sec2").feature("sec1").feature("sec3").feature("sec1")
         .set("heading", "Geometry Center");
    model.result().report("rpt1").feature("sec2").feature("sec1").feature("sec3").feature("sec1")
         .create("prb1", "Probe");
    model.result().report("rpt1").feature("sec2").feature("sec1").feature("sec3").feature("sec1").feature("prb1")
         .set("noderef", "pdom1");
    model.result().report("rpt1").feature("sec2").feature("sec1").create("sec4", "Section");
    model.result().report("rpt1").feature("sec2").feature("sec1").feature("sec4").set("source", "custom");
    model.result().report("rpt1").feature("sec2").feature("sec1").feature("sec4")
         .set("heading", "Coordinate Systems");
    model.result().report("rpt1").feature("sec2").feature("sec1").feature("sec4").create("sec1", "Section");
    model.result().report("rpt1").feature("sec2").feature("sec1").feature("sec4").feature("sec1")
         .set("source", "firstchild");
    model.result().report("rpt1").feature("sec2").feature("sec1").feature("sec4").feature("sec1")
         .set("heading", "Boundary System 1");
    model.result().report("rpt1").feature("sec2").feature("sec1").feature("sec4").feature("sec1")
         .create("csys1", "CoordinateSystem");
    model.result().report("rpt1").feature("sec2").feature("sec1").feature("sec4").feature("sec1").feature("csys1")
         .set("noderef", "sys1");
    model.result().report("rpt1").feature("sec2").create("sec2", "Section");
    model.result().report("rpt1").feature("sec2").feature("sec2").set("source", "firstchild");
    model.result().report("rpt1").feature("sec2").feature("sec2").set("heading", "Geometry 1");
    model.result().report("rpt1").feature("sec2").feature("sec2").create("geom1", "Geometry");
    model.result().report("rpt1").feature("sec2").feature("sec2").feature("geom1").set("noderef", "geom1");
    model.result().report("rpt1").feature("sec2").create("sec3", "Section");
    model.result().report("rpt1").feature("sec2").feature("sec3").set("source", "custom");
    model.result().report("rpt1").feature("sec2").feature("sec3").set("heading", "Materials");
    model.result().report("rpt1").feature("sec2").feature("sec3").create("sec1", "Section");
    model.result().report("rpt1").feature("sec2").feature("sec3").feature("sec1").set("source", "firstchild");
    model.result().report("rpt1").feature("sec2").feature("sec3").feature("sec1").set("heading", "Air");
    model.result().report("rpt1").feature("sec2").feature("sec3").feature("sec1").create("mat1", "Material");
    model.result().report("rpt1").feature("sec2").feature("sec3").feature("sec1").feature("mat1")
         .set("noderef", "mat3");
    model.result().report("rpt1").feature("sec2").create("sec4", "Section");
    model.result().report("rpt1").feature("sec2").feature("sec4").set("source", "custom");
    model.result().report("rpt1").feature("sec2").feature("sec4").set("heading", "Magnetic Fields, No Currents");
    model.result().report("rpt1").feature("sec2").feature("sec4").create("phys1", "Physics");
    model.result().report("rpt1").feature("sec2").feature("sec4").feature("phys1").set("noderef", "mfnc");
    model.result().report("rpt1").feature("sec2").create("sec5", "Section");
    model.result().report("rpt1").feature("sec2").feature("sec5").set("source", "custom");
    model.result().report("rpt1").feature("sec2").feature("sec5").set("heading", "Electrostatics");
    model.result().report("rpt1").feature("sec2").feature("sec5").create("phys1", "Physics");
    model.result().report("rpt1").feature("sec2").feature("sec5").feature("phys1").set("noderef", "es");
    model.result().report("rpt1").feature("sec2").create("sec6", "Section");
    model.result().report("rpt1").feature("sec2").feature("sec6").set("source", "firstchild");
    model.result().report("rpt1").feature("sec2").feature("sec6").set("heading", "Mesh 1");
    model.result().report("rpt1").feature("sec2").feature("sec6").create("mesh1", "Mesh");
    model.result().report("rpt1").feature("sec2").feature("sec6").feature("mesh1").set("noderef", "mesh1");
    model.result().report("rpt1").create("sec3", "Section");
    model.result().report("rpt1").feature("sec3").set("source", "custom");
    model.result().report("rpt1").feature("sec3").set("heading", "Study 1");
    model.result().report("rpt1").feature("sec3").create("std1", "Study");
    model.result().report("rpt1").feature("sec3").feature("std1").set("noderef", "std1");
    model.result().report("rpt1").create("sec4", "Section");
    model.result().report("rpt1").feature("sec4").set("source", "custom");
    model.result().report("rpt1").feature("sec4").set("heading", "Study 2");
    model.result().report("rpt1").feature("sec4").create("std1", "Study");
    model.result().report("rpt1").feature("sec4").feature("std1").set("noderef", "std2");
    model.result().report("rpt1").create("sec5", "Section");
    model.result().report("rpt1").feature("sec5").set("source", "custom");
    model.result().report("rpt1").feature("sec5").set("heading", "Results");
    model.result().report("rpt1").feature("sec5").create("sec1", "Section");
    model.result().report("rpt1").feature("sec5").feature("sec1").set("source", "custom");
    model.result().report("rpt1").feature("sec5").feature("sec1").set("heading", "Data Sets");
    model.result().report("rpt1").feature("sec5").feature("sec1").create("sec1", "Section");
    model.result().report("rpt1").feature("sec5").feature("sec1").feature("sec1").set("source", "firstchild");
    model.result().report("rpt1").feature("sec5").feature("sec1").feature("sec1").set("heading", "YZ");
    model.result().report("rpt1").feature("sec5").feature("sec1").feature("sec1").create("dset1", "DataSet");
    model.result().report("rpt1").feature("sec5").feature("sec1").feature("sec1").feature("dset1")
         .set("noderef", "cpl1");
    model.result().report("rpt1").feature("sec5").feature("sec1").create("sec2", "Section");
    model.result().report("rpt1").feature("sec5").feature("sec1").feature("sec2").set("source", "firstchild");
    model.result().report("rpt1").feature("sec5").feature("sec1").feature("sec2").set("heading", "WZ");
    model.result().report("rpt1").feature("sec5").feature("sec1").feature("sec2").create("dset1", "DataSet");
    model.result().report("rpt1").feature("sec5").feature("sec1").feature("sec2").feature("dset1")
         .set("noderef", "cpl2");
    model.result().report("rpt1").feature("sec5").feature("sec1").create("sec3", "Section");
    model.result().report("rpt1").feature("sec5").feature("sec1").feature("sec3").set("source", "firstchild");
    model.result().report("rpt1").feature("sec5").feature("sec1").feature("sec3").set("heading", "XY");
    model.result().report("rpt1").feature("sec5").feature("sec1").feature("sec3").create("dset1", "DataSet");
    model.result().report("rpt1").feature("sec5").feature("sec1").feature("sec3").feature("dset1")
         .set("noderef", "cpl3");
    model.result().report("rpt1").feature("sec5").feature("sec1").create("sec4", "Section");
    model.result().report("rpt1").feature("sec5").feature("sec1").feature("sec4").set("source", "firstchild");
    model.result().report("rpt1").feature("sec5").feature("sec1").feature("sec4").set("heading", "Z-axis");
    model.result().report("rpt1").feature("sec5").feature("sec1").feature("sec4").create("dset1", "DataSet");
    model.result().report("rpt1").feature("sec5").feature("sec1").feature("sec4").feature("dset1")
         .set("noderef", "cln1");
    model.result().report("rpt1").feature("sec5").feature("sec1").create("sec5", "Section");
    model.result().report("rpt1").feature("sec5").feature("sec1").feature("sec5").set("source", "firstchild");
    model.result().report("rpt1").feature("sec5").feature("sec1").feature("sec5").set("heading", "X-axis");
    model.result().report("rpt1").feature("sec5").feature("sec1").feature("sec5").create("dset1", "DataSet");
    model.result().report("rpt1").feature("sec5").feature("sec1").feature("sec5").feature("dset1")
         .set("noderef", "cln2");
    model.result().report("rpt1").feature("sec5").feature("sec1").create("sec6", "Section");
    model.result().report("rpt1").feature("sec5").feature("sec1").feature("sec6").set("source", "firstchild");
    model.result().report("rpt1").feature("sec5").feature("sec1").feature("sec6").set("heading", "Y-axis");
    model.result().report("rpt1").feature("sec5").feature("sec1").feature("sec6").create("dset1", "DataSet");
    model.result().report("rpt1").feature("sec5").feature("sec1").feature("sec6").feature("dset1")
         .set("noderef", "cln3");
    model.result().report("rpt1").feature("sec5").feature("sec1").create("sec7", "Section");
    model.result().report("rpt1").feature("sec5").feature("sec1").feature("sec7").set("source", "firstchild");
    model.result().report("rpt1").feature("sec5").feature("sec1").feature("sec7").set("heading", "No Solution");
    model.result().report("rpt1").feature("sec5").feature("sec1").feature("sec7").create("dset1", "DataSet");
    model.result().report("rpt1").feature("sec5").feature("sec1").feature("sec7").feature("dset1")
         .set("noderef", "dset2");
    model.result().report("rpt1").feature("sec5").feature("sec1").create("sec8", "Section");
    model.result().report("rpt1").feature("sec5").feature("sec1").feature("sec8").set("source", "firstchild");
    model.result().report("rpt1").feature("sec5").feature("sec1").feature("sec8")
         .set("heading", "Study 1/Parametric Solutions 1");
    model.result().report("rpt1").feature("sec5").feature("sec1").feature("sec8").create("dset1", "DataSet");
    model.result().report("rpt1").feature("sec5").feature("sec1").feature("sec8").feature("dset1")
         .set("noderef", "dset4");
    model.result().report("rpt1").feature("sec5").feature("sec1").create("sec9", "Section");
    model.result().report("rpt1").feature("sec5").feature("sec1").feature("sec9").set("source", "firstchild");
    model.result().report("rpt1").feature("sec5").feature("sec1").feature("sec9").set("heading", "Study 1/Solver 1");
    model.result().report("rpt1").feature("sec5").feature("sec1").feature("sec9").create("dset1", "DataSet");
    model.result().report("rpt1").feature("sec5").feature("sec1").feature("sec9").feature("dset1")
         .set("noderef", "dset6");
    model.result().report("rpt1").feature("sec5").feature("sec1").create("sec10", "Section");
    model.result().report("rpt1").feature("sec5").feature("sec1").feature("sec10").set("source", "firstchild");
    model.result().report("rpt1").feature("sec5").feature("sec1").feature("sec10")
         .set("heading", "Study 2/Solution 47");
    model.result().report("rpt1").feature("sec5").feature("sec1").feature("sec10").create("dset1", "DataSet");
    model.result().report("rpt1").feature("sec5").feature("sec1").feature("sec10").feature("dset1")
         .set("noderef", "dset7");
    model.result().report("rpt1").feature("sec5").feature("sec1").create("sec11", "Section");
    model.result().report("rpt1").feature("sec5").feature("sec1").feature("sec11").set("source", "firstchild");
    model.result().report("rpt1").feature("sec5").feature("sec1").feature("sec11")
         .set("heading", "Probe Solution 8");
    model.result().report("rpt1").feature("sec5").feature("sec1").feature("sec11").create("dset1", "DataSet");
    model.result().report("rpt1").feature("sec5").feature("sec1").feature("sec11").feature("dset1")
         .set("noderef", "dset8");
    model.result().report("rpt1").feature("sec5").feature("sec1").create("sec12", "Section");
    model.result().report("rpt1").feature("sec5").feature("sec1").feature("sec12").set("source", "firstchild");
    model.result().report("rpt1").feature("sec5").feature("sec1").feature("sec12").set("heading", "Geometry Center");
    model.result().report("rpt1").feature("sec5").feature("sec1").feature("sec12").create("dset1", "DataSet");
    model.result().report("rpt1").feature("sec5").feature("sec1").feature("sec12").feature("dset1")
         .set("noderef", "cpt1");
    model.result().report("rpt1").feature("sec5").feature("sec1").create("sec13", "Section");
    model.result().report("rpt1").feature("sec5").feature("sec1").feature("sec13").set("source", "firstchild");
    model.result().report("rpt1").feature("sec5").feature("sec1").feature("sec13").set("heading", "Loss Surface");
    model.result().report("rpt1").feature("sec5").feature("sec1").feature("sec13").create("dset1", "DataSet");
    model.result().report("rpt1").feature("sec5").feature("sec1").feature("sec13").feature("dset1")
         .set("noderef", "iso1");
    model.result().report("rpt1").feature("sec5").create("sec2", "Section");
    model.result().report("rpt1").feature("sec5").feature("sec2").set("source", "custom");
    model.result().report("rpt1").feature("sec5").feature("sec2").set("heading", "Derived Values");
    model.result().report("rpt1").feature("sec5").feature("sec2").create("sec1", "Section");
    model.result().report("rpt1").feature("sec5").feature("sec2").feature("sec1").set("source", "firstchild");
    model.result().report("rpt1").feature("sec5").feature("sec2").feature("sec1").set("heading", "Center Energy 1");
    model.result().report("rpt1").feature("sec5").feature("sec2").feature("sec1").create("num1", "DerivedValues");
    model.result().report("rpt1").feature("sec5").feature("sec2").feature("sec1").feature("num1")
         .set("noderef", "pev1");
    model.result().report("rpt1").feature("sec5").create("sec3", "Section");
    model.result().report("rpt1").feature("sec5").feature("sec3").set("source", "custom");
    model.result().report("rpt1").feature("sec5").feature("sec3").set("heading", "Tables");
    model.result().report("rpt1").feature("sec5").feature("sec3").create("sec1", "Section");
    model.result().report("rpt1").feature("sec5").feature("sec3").feature("sec1").set("source", "firstchild");
    model.result().report("rpt1").feature("sec5").feature("sec3").feature("sec1").set("heading", "150um ++");
    model.result().report("rpt1").feature("sec5").feature("sec3").feature("sec1").create("mtbl1", "Table");
    model.result().report("rpt1").feature("sec5").feature("sec3").feature("sec1").feature("mtbl1")
         .set("noderef", "tbl8");
    model.result().report("rpt1").feature("sec5").feature("sec3").create("sec2", "Section");
    model.result().report("rpt1").feature("sec5").feature("sec3").feature("sec2").set("source", "firstchild");
    model.result().report("rpt1").feature("sec5").feature("sec3").feature("sec2").set("heading", "0G, 2mm, +,-");
    model.result().report("rpt1").feature("sec5").feature("sec3").feature("sec2").create("mtbl1", "Table");
    model.result().report("rpt1").feature("sec5").feature("sec3").feature("sec2").feature("mtbl1")
         .set("noderef", "tbl11");
    model.result().report("rpt1").feature("sec5").feature("sec3").create("sec3", "Section");
    model.result().report("rpt1").feature("sec5").feature("sec3").feature("sec3").set("source", "firstchild");
    model.result().report("rpt1").feature("sec5").feature("sec3").feature("sec3").set("heading", "200G, 2mm, +,-");
    model.result().report("rpt1").feature("sec5").feature("sec3").feature("sec3").create("mtbl1", "Table");
    model.result().report("rpt1").feature("sec5").feature("sec3").feature("sec3").feature("mtbl1")
         .set("noderef", "tbl12");
    model.result().report("rpt1").feature("sec5").feature("sec3").create("sec4", "Section");
    model.result().report("rpt1").feature("sec5").feature("sec3").feature("sec4").set("source", "firstchild");
    model.result().report("rpt1").feature("sec5").feature("sec3").feature("sec4").set("heading", "0G, 7mm, +,-");
    model.result().report("rpt1").feature("sec5").feature("sec3").feature("sec4").create("mtbl1", "Table");
    model.result().report("rpt1").feature("sec5").feature("sec3").feature("sec4").feature("mtbl1")
         .set("noderef", "tbl13");
    model.result().report("rpt1").feature("sec5").feature("sec3").create("sec5", "Section");
    model.result().report("rpt1").feature("sec5").feature("sec3").feature("sec5").set("source", "firstchild");
    model.result().report("rpt1").feature("sec5").feature("sec3").feature("sec5").set("heading", "200G, 7mm, +,-");
    model.result().report("rpt1").feature("sec5").feature("sec3").feature("sec5").create("mtbl1", "Table");
    model.result().report("rpt1").feature("sec5").feature("sec3").feature("sec5").feature("mtbl1")
         .set("noderef", "tbl14");
    model.result().report("rpt1").feature("sec5").feature("sec3").create("sec6", "Section");
    model.result().report("rpt1").feature("sec5").feature("sec3").feature("sec6").set("source", "firstchild");
    model.result().report("rpt1").feature("sec5").feature("sec3").feature("sec6").set("heading", "Probe Table 15");
    model.result().report("rpt1").feature("sec5").feature("sec3").feature("sec6").create("mtbl1", "Table");
    model.result().report("rpt1").feature("sec5").feature("sec3").feature("sec6").feature("mtbl1")
         .set("noderef", "tbl15");
    model.result().report("rpt1").feature("sec5").feature("sec3").create("sec7", "Section");
    model.result().report("rpt1").feature("sec5").feature("sec3").feature("sec7").set("source", "firstchild");
    model.result().report("rpt1").feature("sec5").feature("sec3").feature("sec7")
         .set("heading", "(+,-) 0G, 2mm, Zoom");
    model.result().report("rpt1").feature("sec5").feature("sec3").feature("sec7").create("mtbl1", "Table");
    model.result().report("rpt1").feature("sec5").feature("sec3").feature("sec7").feature("mtbl1")
         .set("noderef", "tbl16");
    model.result().report("rpt1").feature("sec5").feature("sec3").create("sec8", "Section");
    model.result().report("rpt1").feature("sec5").feature("sec3").feature("sec8").set("source", "firstchild");
    model.result().report("rpt1").feature("sec5").feature("sec3").feature("sec8").set("heading", "Evaluation 3D");
    model.result().report("rpt1").feature("sec5").feature("sec3").feature("sec8").create("mtbl1", "Table");
    model.result().report("rpt1").feature("sec5").feature("sec3").feature("sec8").feature("mtbl1")
         .set("noderef", "evl3");
    model.result().report("rpt1").feature("sec5").feature("sec3").create("sec9", "Section");
    model.result().report("rpt1").feature("sec5").feature("sec3").feature("sec9").set("source", "firstchild");
    model.result().report("rpt1").feature("sec5").feature("sec3").feature("sec9").set("heading", "Bfield at 150um");
    model.result().report("rpt1").feature("sec5").feature("sec3").feature("sec9").create("mtbl1", "Table");
    model.result().report("rpt1").feature("sec5").feature("sec3").feature("sec9").feature("mtbl1")
         .set("noderef", "tbl18");
    model.result().report("rpt1").feature("sec5").feature("sec3").create("sec10", "Section");
    model.result().report("rpt1").feature("sec5").feature("sec3").feature("sec10").set("source", "firstchild");
    model.result().report("rpt1").feature("sec5").feature("sec3").feature("sec10")
         .set("heading", "Bfield And Pin Offaets, ++, 200mK");
    model.result().report("rpt1").feature("sec5").feature("sec3").feature("sec10").create("mtbl1", "Table");
    model.result().report("rpt1").feature("sec5").feature("sec3").feature("sec10").feature("mtbl1")
         .set("noderef", "tbl19");
    model.result().report("rpt1").feature("sec5").feature("sec3").create("sec11", "Section");
    model.result().report("rpt1").feature("sec5").feature("sec3").feature("sec11").set("source", "firstchild");
    model.result().report("rpt1").feature("sec5").feature("sec3").feature("sec11")
         .set("heading", "B-offset and Temp at 130um");
    model.result().report("rpt1").feature("sec5").feature("sec3").feature("sec11").create("mtbl1", "Table");
    model.result().report("rpt1").feature("sec5").feature("sec3").feature("sec11").feature("mtbl1")
         .set("noderef", "tbl23");
    model.result().report("rpt1").feature("sec5").feature("sec3").create("sec12", "Section");
    model.result().report("rpt1").feature("sec5").feature("sec3").feature("sec12").set("source", "firstchild");
    model.result().report("rpt1").feature("sec5").feature("sec3").feature("sec12").set("heading", "Normalizations");
    model.result().report("rpt1").feature("sec5").feature("sec3").feature("sec12").create("mtbl1", "Table");
    model.result().report("rpt1").feature("sec5").feature("sec3").feature("sec12").feature("mtbl1")
         .set("noderef", "tbl24");
    model.result().report("rpt1").feature("sec5").feature("sec3").create("sec13", "Section");
    model.result().report("rpt1").feature("sec5").feature("sec3").feature("sec13").set("source", "firstchild");
    model.result().report("rpt1").feature("sec5").feature("sec3").feature("sec13")
         .set("heading", "B-offset and Temp at 100um");
    model.result().report("rpt1").feature("sec5").feature("sec3").feature("sec13").create("mtbl1", "Table");
    model.result().report("rpt1").feature("sec5").feature("sec3").feature("sec13").feature("mtbl1")
         .set("noderef", "tbl25");
    model.result().report("rpt1").feature("sec5").feature("sec3").create("sec14", "Section");
    model.result().report("rpt1").feature("sec5").feature("sec3").feature("sec14").set("source", "firstchild");
    model.result().report("rpt1").feature("sec5").feature("sec3").feature("sec14")
         .set("heading", "B-offset and Temp at 80um");
    model.result().report("rpt1").feature("sec5").feature("sec3").feature("sec14").create("mtbl1", "Table");
    model.result().report("rpt1").feature("sec5").feature("sec3").feature("sec14").feature("mtbl1")
         .set("noderef", "tbl26");
    model.result().report("rpt1").feature("sec5").feature("sec3").create("sec15", "Section");
    model.result().report("rpt1").feature("sec5").feature("sec3").feature("sec15").set("source", "firstchild");
    model.result().report("rpt1").feature("sec5").feature("sec3").feature("sec15")
         .set("heading", "B-offset and Temp at 90um");
    model.result().report("rpt1").feature("sec5").feature("sec3").feature("sec15").create("mtbl1", "Table");
    model.result().report("rpt1").feature("sec5").feature("sec3").feature("sec15").feature("mtbl1")
         .set("noderef", "tbl27");
    model.result().report("rpt1").feature("sec5").create("sec4", "Section");

    return model;
  }

  public static Model run30(Model model) {
    model.result().report("rpt1").feature("sec5").feature("sec4").set("source", "custom");
    model.result().report("rpt1").feature("sec5").feature("sec4").set("heading", "Plot Groups");
    model.result().report("rpt1").feature("sec5").feature("sec4").create("sec1", "Section");
    model.result().report("rpt1").feature("sec5").feature("sec4").feature("sec1").set("source", "firstchild");
    model.result().report("rpt1").feature("sec5").feature("sec4").feature("sec1").set("heading", "XYZaxes");
    model.result().report("rpt1").feature("sec5").feature("sec4").feature("sec1").create("pg1", "PlotGroup");
    model.result().report("rpt1").feature("sec5").feature("sec4").feature("sec1").feature("pg1")
         .set("noderef", "pg6");
    model.result().report("rpt1").feature("sec5").feature("sec4").create("sec2", "Section");
    model.result().report("rpt1").feature("sec5").feature("sec4").feature("sec2").set("source", "firstchild");
    model.result().report("rpt1").feature("sec5").feature("sec4").feature("sec2").set("heading", "CheckCoeffs");
    model.result().report("rpt1").feature("sec5").feature("sec4").feature("sec2").create("pg1", "PlotGroup");
    model.result().report("rpt1").feature("sec5").feature("sec4").feature("sec2").feature("pg1")
         .set("noderef", "pg11");
    model.result().report("rpt1").feature("sec5").feature("sec4").create("sec3", "Section");
    model.result().report("rpt1").feature("sec5").feature("sec4").feature("sec3").set("source", "firstchild");
    model.result().report("rpt1").feature("sec5").feature("sec4").feature("sec3").set("heading", "StarkZeemanAxes");
    model.result().report("rpt1").feature("sec5").feature("sec4").feature("sec3").create("pg1", "PlotGroup");
    model.result().report("rpt1").feature("sec5").feature("sec4").feature("sec3").feature("pg1")
         .set("noderef", "pg12");
    model.result().report("rpt1").feature("sec5").feature("sec4").create("sec4", "Section");
    model.result().report("rpt1").feature("sec5").feature("sec4").feature("sec4").set("source", "firstchild");
    model.result().report("rpt1").feature("sec5").feature("sec4").feature("sec4").set("heading", "W Plot +,+");
    model.result().report("rpt1").feature("sec5").feature("sec4").feature("sec4").create("pg1", "PlotGroup");
    model.result().report("rpt1").feature("sec5").feature("sec4").feature("sec4").feature("pg1")
         .set("noderef", "pg22");
    model.result().report("rpt1").feature("sec5").feature("sec4").create("sec5", "Section");
    model.result().report("rpt1").feature("sec5").feature("sec4").feature("sec5").set("source", "firstchild");
    model.result().report("rpt1").feature("sec5").feature("sec4").feature("sec5").set("heading", "1D Plot Group 26");
    model.result().report("rpt1").feature("sec5").feature("sec4").feature("sec5").create("pg1", "PlotGroup");
    model.result().report("rpt1").feature("sec5").feature("sec4").feature("sec5").feature("pg1")
         .set("noderef", "pg26");
    model.result().report("rpt1").feature("sec5").feature("sec4").create("sec6", "Section");
    model.result().report("rpt1").feature("sec5").feature("sec4").feature("sec6").set("source", "firstchild");
    model.result().report("rpt1").feature("sec5").feature("sec4").feature("sec6").set("heading", "Histogram");
    model.result().report("rpt1").feature("sec5").feature("sec4").feature("sec6").create("pg1", "PlotGroup");
    model.result().report("rpt1").feature("sec5").feature("sec4").feature("sec6").feature("pg1")
         .set("noderef", "pg27");
    model.result().report("rpt1").feature("sec5").feature("sec4").create("sec7", "Section");
    model.result().report("rpt1").feature("sec5").feature("sec4").feature("sec7").set("source", "firstchild");
    model.result().report("rpt1").feature("sec5").feature("sec4").feature("sec7")
         .set("heading", "View Loss Surface");
    model.result().report("rpt1").feature("sec5").feature("sec4").feature("sec7").create("pg1", "PlotGroup");
    model.result().report("rpt1").feature("sec5").feature("sec4").feature("sec7").feature("pg1")
         .set("noderef", "pg28");
    model.result().report("rpt1").label("Histogram Note");
    model.result().report("rpt1").set("webpagewidgetpaths", new String[]{});
    model.result().report("rpt1").set("format", "docx");
    model.result().report("rpt1").set("webpagewidgetpaths", new String[]{});
    model.result().report("rpt1")
         .set("filename", "R:\\COMSOL files\\Magnetoelectrostatic Cloverleaf\\try_reporting.docx");
    model.result().dataset("cpl1").run();
    model.result().dataset("cpl2").run();
    model.result().dataset("cpl3").run();
    model.result().dataset("cln1").run();
    model.result().dataset("cln2").run();
    model.result().dataset("cln3").run();
    model.result().dataset("dset2").run();
    model.result().dataset("dset4").run();
    model.result().dataset("dset6").run();
    model.result().dataset("dset7").run();
    model.result().dataset("dset8").run();
    model.result().dataset("cpt1").run();
    model.result().dataset("iso1").run();
    model.result("pg22").run();
    model.result("pg26").run();
    model.result("pg27").set("window", "window1");
    model.result("pg27").run();
    model.result("pg28").run();
    model.result().report("rpt1").set("openwhenfinished", true);
    model.result().report("rpt1").run();
    model.result().report("rpt1").set("openwhenfinished", true);
    model.result("pg27").set("window", "window1");
    model.result("pg27")
         .comments("I want to make a histogram where each bin is a different trap depth, and the height of the bin is the area of lz loss overlapping that trap depth.\n\nIt hasn't worked, and as far as I can tell this is a resolution sort of issue. I can histogram the trap depth of the whole angle=pi/2 plane, but if I try and restrict my attention to those parts of the plane for which the LZ loss is appreciable, the results no longer make sense. This could be an issue with how COMSOL handles boolean expressions- something smoothing related- but at this point I'm not sure.");
    model.result("pg27").author("Dave Reens");
    model.result("pg27").set("window", "window1");
    model.result().duplicate("pg29", "pg27");
    model.result("pg29").set("window", "window1");
    model.result("pg27").set("window", "window1");
    model.result().remove("pg27");
    model.result("pg29").set("window", "window1");

    model.label("me_rodliteral_losses.mph");

    model.result("pg29").set("window", "window1");

    model.study("std1").feature("param").setIndex("plistarr", "range(0,.1,0.01)", 0);
    model.study("std1").feature("param").setIndex("plistarr", "", 0);
    model.study("std1").feature("param").remove("pname", 0);
    model.study("std1").feature("param").remove("punit", 0);
    model.study("std1").feature("param").remove("plistarr", 0);

    model.result().create("pg30", "PlotGroup3D");
    model.result("pg30").label("Magnetic Flux Density Norm (mfnc)");
    model.result("pg30").set("data", "dset4");
    model.result("pg30").set("oldanalysistype", "noneavailable");
    model.result("pg30").set("oldouteranalysistype", "noneavailable");
    model.result("pg30").set("outertype", "none");
    model.result("pg30").set("outersolnum", 1);
    model.result("pg30").set("showlooplevel", new String[]{"off", "off", "off"});
    model.result("pg30").set("oldanalysistype", "noneavailable");
    model.result("pg30").set("oldouteranalysistype", "noneavailable");
    model.result("pg30").set("outertype", "none");
    model.result("pg30").set("data", "dset4");
    model.result("pg30").feature().create("mslc1", "Multislice");
    model.result("pg30").feature("mslc1").set("oldanalysistype", "noneavailable");
    model.result("pg30").feature("mslc1").set("outertype", "none");
    model.result("pg30").feature("mslc1").set("expr", "mfnc.normB");
    model.result("pg30").feature("mslc1").set("data", "parent");
    model.result().create("pg31", "PlotGroup3D");
    model.result("pg31").label("Electric Potential (es)");
    model.result("pg31").set("data", "dset4");
    model.result("pg31").set("oldanalysistype", "noneavailable");
    model.result("pg31").set("oldouteranalysistype", "noneavailable");
    model.result("pg31").set("outertype", "none");
    model.result("pg31").set("outersolnum", 1);
    model.result("pg31").set("showlooplevel", new String[]{"off", "off", "off"});
    model.result("pg31").set("frametype", "spatial");
    model.result("pg31").set("oldanalysistype", "noneavailable");
    model.result("pg31").set("oldouteranalysistype", "noneavailable");
    model.result("pg31").set("outertype", "none");
    model.result("pg31").set("data", "dset4");
    model.result("pg31").feature().create("mslc1", "Multislice");
    model.result("pg31").feature("mslc1").set("oldanalysistype", "noneavailable");
    model.result("pg31").feature("mslc1").set("outertype", "none");
    model.result("pg31").feature("mslc1").set("expr", "V");
    model.result("pg31").feature("mslc1").set("data", "parent");

    model.probe("pdom1").genResult("none");

    model.result().remove("pg32");
    model.result().remove("pg30");
    model.result().remove("pg31");

    model.param().set("poff", "0");

    model.study("std1").feature().remove("param");
    model.study("std2").feature("stat").set("notsol", "sol1");

    model.result().create("pg30", "PlotGroup3D");
    model.result("pg30").label("Magnetic Flux Density Norm (mfnc)");
    model.result("pg30").set("data", "dset4");
    model.result("pg30").set("oldanalysistype", "noneavailable");
    model.result("pg30").set("outertype", "none");
    model.result("pg30").set("data", "dset4");
    model.result("pg30").feature().create("mslc1", "Multislice");
    model.result("pg30").feature("mslc1").set("oldanalysistype", "noneavailable");
    model.result("pg30").feature("mslc1").set("expr", "mfnc.normB");
    model.result("pg30").feature("mslc1").set("data", "parent");
    model.result().create("pg31", "PlotGroup3D");
    model.result("pg31").label("Electric Potential (es)");
    model.result("pg31").set("data", "dset4");
    model.result("pg31").set("oldanalysistype", "noneavailable");
    model.result("pg31").set("outertype", "none");
    model.result("pg31").set("frametype", "spatial");
    model.result("pg31").set("data", "dset4");
    model.result("pg31").feature().create("mslc1", "Multislice");
    model.result("pg31").feature("mslc1").set("oldanalysistype", "noneavailable");
    model.result("pg31").feature("mslc1").set("expr", "V");
    model.result("pg31").feature("mslc1").set("data", "parent");

    model.probe("pdom1").genResult("none");

    model.result().remove("pg32");
    model.result().remove("pg30");
    model.result().remove("pg31");
    model.result().dataset("dset6").set("solution", "none");
    model.result().dataset("dset8").set("solution", "none");
    model.result().dataset("dset4").set("solution", "none");

    model.sol().remove("sol1");
    model.sol().remove("sol2");
    model.sol().create("sol48");
    model.sol("sol48").study("std1");

    model.study("std1").feature("stat").set("notlistsolnum", 1);
    model.study("std1").feature("stat").set("notsolnum", "1");
    model.study("std1").feature("stat").set("listsolnum", 1);
    model.study("std1").feature("stat").set("solnum", "1");

    model.sol("sol48").create("st1", "StudyStep");
    model.sol("sol48").feature("st1").set("study", "std1");
    model.sol("sol48").feature("st1").set("studystep", "stat");
    model.sol("sol48").create("v1", "Variables");
    model.sol("sol48").feature("v1").set("control", "stat");
    model.sol("sol48").create("s1", "Stationary");
    model.sol("sol48").feature("s1").create("se1", "Segregated");
    model.sol("sol48").feature("s1").feature("se1").feature().remove("ssDef");
    model.sol("sol48").feature("s1").feature("se1").create("ss1", "SegregatedStep");
    model.sol("sol48").feature("s1").feature("se1").feature("ss1").set("segvar", new String[]{"mod1_V"});
    model.sol("sol48").feature("s1").create("i1", "Iterative");
    model.sol("sol48").feature("s1").feature("i1").set("linsolver", "cg");
    model.sol("sol48").feature("s1").feature("i1").create("mg1", "Multigrid");
    model.sol("sol48").feature("s1").feature("i1").feature("mg1").set("prefun", "amg");
    model.sol("sol48").feature("s1").feature("se1").feature("ss1").set("linsolver", "i1");
    model.sol("sol48").feature("s1").feature("se1").create("ss2", "SegregatedStep");
    model.sol("sol48").feature("s1").feature("se1").feature("ss2").set("segvar", new String[]{"mod1_Vm"});
    model.sol("sol48").feature("s1").create("i2", "Iterative");
    model.sol("sol48").feature("s1").feature("i2").set("linsolver", "cg");
    model.sol("sol48").feature("s1").feature("i2").create("mg1", "Multigrid");
    model.sol("sol48").feature("s1").feature("i2").feature("mg1").set("prefun", "amg");
    model.sol("sol48").feature("s1").feature("se1").feature("ss2").set("linsolver", "i2");
    model.sol("sol48").feature("s1").feature().remove("fcDef");
    model.sol("sol48").attach("std1");

    model.batch("p1").detach();

    model.result().create("pg30", "PlotGroup3D");
    model.result("pg30").label("Magnetic Flux Density Norm (mfnc)");
    model.result("pg30").set("data", "dset9");
    model.result("pg30").set("oldanalysistype", "noneavailable");
    model.result("pg30").set("data", "dset9");
    model.result("pg30").feature().create("mslc1", "Multislice");
    model.result("pg30").feature("mslc1").set("oldanalysistype", "noneavailable");
    model.result("pg30").feature("mslc1").set("expr", "mfnc.normB");
    model.result("pg30").feature("mslc1").set("data", "parent");
    model.result().create("pg31", "PlotGroup3D");
    model.result("pg31").label("Electric Potential (es)");
    model.result("pg31").set("data", "dset9");
    model.result("pg31").set("oldanalysistype", "noneavailable");
    model.result("pg31").set("frametype", "spatial");
    model.result("pg31").set("data", "dset9");
    model.result("pg31").feature().create("mslc1", "Multislice");
    model.result("pg31").feature("mslc1").set("oldanalysistype", "noneavailable");
    model.result("pg31").feature("mslc1").set("expr", "V");
    model.result("pg31").feature("mslc1").set("data", "parent");

    model.probe("pdom1").genResult("none");

    model.result().remove("pg32");
    model.result().remove("pg30");
    model.result().remove("pg31");

    model.view("view1").hideObjects().clear();
    model.view("view1").hideEntities().clear();
    model.view("view1").hideEntities().create("hide1");
    model.view("view1").hideEntities("hide1").geom(3);
    model.view("view1").hideEntities("hide1").add(new int[]{1});
    model.view("view1").hideEntities("hide1").add(new int[]{6});
    model.view("view1").hideEntities("hide1").add(new int[]{9});
    model.view("view1").hideObjects().clear();
    model.view("view1").hideEntities().clear();

    model.mesh("mesh1").feature("ref2").set("numrefine", "2");
    model.mesh("mesh1").run();

    model.view("view1").hideObjects().clear();
    model.view("view1").hideEntities().clear();
    model.view("view1").hideEntities().create("hide1");
    model.view("view1").hideEntities("hide1").geom(3);
    model.view("view1").hideEntities("hide1").add(new int[]{1});

    model.sol("sol48").study("std1");

    model.study("std1").feature("stat").set("notlistsolnum", 1);
    model.study("std1").feature("stat").set("notsolnum", "1");
    model.study("std1").feature("stat").set("listsolnum", 1);
    model.study("std1").feature("stat").set("solnum", "1");

    model.sol("sol48").feature().remove("s1");
    model.sol("sol48").feature().remove("v1");
    model.sol("sol48").feature().remove("st1");
    model.sol("sol48").create("st1", "StudyStep");
    model.sol("sol48").feature("st1").set("study", "std1");
    model.sol("sol48").feature("st1").set("studystep", "stat");
    model.sol("sol48").create("v1", "Variables");
    model.sol("sol48").feature("v1").set("control", "stat");
    model.sol("sol48").create("s1", "Stationary");
    model.sol("sol48").feature("s1").create("se1", "Segregated");
    model.sol("sol48").feature("s1").feature("se1").feature().remove("ssDef");
    model.sol("sol48").feature("s1").feature("se1").create("ss1", "SegregatedStep");
    model.sol("sol48").feature("s1").feature("se1").feature("ss1").set("segvar", new String[]{"mod1_V"});
    model.sol("sol48").feature("s1").create("i1", "Iterative");
    model.sol("sol48").feature("s1").feature("i1").set("linsolver", "cg");
    model.sol("sol48").feature("s1").feature("i1").create("mg1", "Multigrid");
    model.sol("sol48").feature("s1").feature("i1").feature("mg1").set("prefun", "amg");
    model.sol("sol48").feature("s1").feature("se1").feature("ss1").set("linsolver", "i1");
    model.sol("sol48").feature("s1").feature("se1").create("ss2", "SegregatedStep");
    model.sol("sol48").feature("s1").feature("se1").feature("ss2").set("segvar", new String[]{"mod1_Vm"});
    model.sol("sol48").feature("s1").create("i2", "Iterative");
    model.sol("sol48").feature("s1").feature("i2").set("linsolver", "cg");
    model.sol("sol48").feature("s1").feature("i2").create("mg1", "Multigrid");
    model.sol("sol48").feature("s1").feature("i2").feature("mg1").set("prefun", "amg");
    model.sol("sol48").feature("s1").feature("se1").feature("ss2").set("linsolver", "i2");
    model.sol("sol48").feature("s1").feature().remove("fcDef");
    model.sol("sol47").feature("v1").set("notsolnum", "from_list");
    model.sol("sol47").feature("v1").set("notsolvertype", "solnum");
    model.sol("sol47").feature("v1").set("notlistsolnum", new String[]{"1"});
    model.sol("sol47").feature("v1").set("notsolnum", "from_list");
    model.sol("sol48").attach("std1");

    model.probe("pdom1").genResult("none");

    model.result().remove("pg30");

    model.param().set("vr3", "12000");
    model.param().set("vr4", "12000");
    model.param().set("vr1", "12000");
    model.param().set("vr2", "12000");

    model.sol("sol48").study("std1");

    model.study("std1").feature("stat").set("notlistsolnum", 1);
    model.study("std1").feature("stat").set("notsolnum", "1");
    model.study("std1").feature("stat").set("listsolnum", 1);
    model.study("std1").feature("stat").set("solnum", "1");

    model.sol("sol48").feature().remove("s1");
    model.sol("sol48").feature().remove("v1");
    model.sol("sol48").feature().remove("st1");
    model.sol("sol48").create("st1", "StudyStep");
    model.sol("sol48").feature("st1").set("study", "std1");
    model.sol("sol48").feature("st1").set("studystep", "stat");
    model.sol("sol48").create("v1", "Variables");
    model.sol("sol48").feature("v1").set("control", "stat");
    model.sol("sol48").create("s1", "Stationary");
    model.sol("sol48").feature("s1").create("se1", "Segregated");
    model.sol("sol48").feature("s1").feature("se1").feature().remove("ssDef");
    model.sol("sol48").feature("s1").feature("se1").create("ss1", "SegregatedStep");
    model.sol("sol48").feature("s1").feature("se1").feature("ss1").set("segvar", new String[]{"mod1_V"});
    model.sol("sol48").feature("s1").create("i1", "Iterative");
    model.sol("sol48").feature("s1").feature("i1").set("linsolver", "cg");
    model.sol("sol48").feature("s1").feature("i1").create("mg1", "Multigrid");
    model.sol("sol48").feature("s1").feature("i1").feature("mg1").set("prefun", "amg");
    model.sol("sol48").feature("s1").feature("se1").feature("ss1").set("linsolver", "i1");
    model.sol("sol48").feature("s1").feature("se1").create("ss2", "SegregatedStep");
    model.sol("sol48").feature("s1").feature("se1").feature("ss2").set("segvar", new String[]{"mod1_Vm"});
    model.sol("sol48").feature("s1").create("i2", "Iterative");
    model.sol("sol48").feature("s1").feature("i2").set("linsolver", "cg");
    model.sol("sol48").feature("s1").feature("i2").create("mg1", "Multigrid");
    model.sol("sol48").feature("s1").feature("i2").feature("mg1").set("prefun", "amg");
    model.sol("sol48").feature("s1").feature("se1").feature("ss2").set("linsolver", "i2");
    model.sol("sol48").feature("s1").feature().remove("fcDef");
    model.sol("sol47").feature("v1").set("notsolnum", "from_list");
    model.sol("sol47").feature("v1").set("notsolvertype", "solnum");
    model.sol("sol47").feature("v1").set("notlistsolnum", new String[]{"1"});
    model.sol("sol47").feature("v1").set("notsolnum", "from_list");
    model.sol("sol48").attach("std1");

    model.probe("pdom1").genResult("none");

    model.result().remove("pg30");

    model.mesh("mesh1").feature("size").set("hauto", "4");
    model.mesh("mesh1").feature("ref1").set("numrefine", "3");
    model.mesh("mesh1").feature("ref2").set("numrefine", "3");
    model.mesh("mesh1").run();
    model.mesh("mesh1").feature("ref2").set("numrefine", "2");
    model.mesh("mesh1").run();
    model.mesh("mesh1").feature("ref2").set("numrefine", "3");
    model.mesh("mesh1").run();

    model.result().dataset("dset8").set("solution", "none");
    model.result().dataset("dset9").set("solution", "none");

    model.sol().remove("sol48");

    model.batch().remove("p1");

    model.sol().create("sol48");
    model.sol("sol48").study("std1");

    model.study("std1").feature("stat").set("notlistsolnum", 1);
    model.study("std1").feature("stat").set("notsolnum", "1");
    model.study("std1").feature("stat").set("listsolnum", 1);
    model.study("std1").feature("stat").set("solnum", "1");

    model.sol("sol48").create("st1", "StudyStep");
    model.sol("sol48").feature("st1").set("study", "std1");
    model.sol("sol48").feature("st1").set("studystep", "stat");
    model.sol("sol48").create("v1", "Variables");
    model.sol("sol48").feature("v1").set("control", "stat");
    model.sol("sol48").create("s1", "Stationary");
    model.sol("sol48").feature("s1").create("se1", "Segregated");
    model.sol("sol48").feature("s1").feature("se1").feature().remove("ssDef");
    model.sol("sol48").feature("s1").feature("se1").create("ss1", "SegregatedStep");
    model.sol("sol48").feature("s1").feature("se1").feature("ss1").set("segvar", new String[]{"mod1_V"});
    model.sol("sol48").feature("s1").create("i1", "Iterative");
    model.sol("sol48").feature("s1").feature("i1").set("linsolver", "cg");
    model.sol("sol48").feature("s1").feature("i1").create("mg1", "Multigrid");
    model.sol("sol48").feature("s1").feature("i1").feature("mg1").set("prefun", "amg");
    model.sol("sol48").feature("s1").feature("se1").feature("ss1").set("linsolver", "i1");
    model.sol("sol48").feature("s1").feature("se1").create("ss2", "SegregatedStep");
    model.sol("sol48").feature("s1").feature("se1").feature("ss2").set("segvar", new String[]{"mod1_Vm"});
    model.sol("sol48").feature("s1").create("i2", "Iterative");
    model.sol("sol48").feature("s1").feature("i2").set("linsolver", "cg");
    model.sol("sol48").feature("s1").feature("i2").create("mg1", "Multigrid");
    model.sol("sol48").feature("s1").feature("i2").feature("mg1").set("prefun", "amg");
    model.sol("sol48").feature("s1").feature("se1").feature("ss2").set("linsolver", "i2");
    model.sol("sol48").feature("s1").feature().remove("fcDef");
    model.sol("sol48").attach("std1");

    model.result().create("pg30", "PlotGroup3D");
    model.result("pg30").label("Magnetic Flux Density Norm (mfnc)");
    model.result("pg30").set("data", "dset10");
    model.result("pg30").set("oldanalysistype", "noneavailable");
    model.result("pg30").set("data", "dset10");
    model.result("pg30").feature().create("mslc1", "Multislice");
    model.result("pg30").feature("mslc1").set("oldanalysistype", "noneavailable");
    model.result("pg30").feature("mslc1").set("expr", "mfnc.normB");
    model.result("pg30").feature("mslc1").set("data", "parent");
    model.result().create("pg31", "PlotGroup3D");
    model.result("pg31").label("Electric Potential (es)");
    model.result("pg31").set("data", "dset10");
    model.result("pg31").set("oldanalysistype", "noneavailable");
    model.result("pg31").set("frametype", "spatial");
    model.result("pg31").set("data", "dset10");
    model.result("pg31").feature().create("mslc1", "Multislice");
    model.result("pg31").feature("mslc1").set("oldanalysistype", "noneavailable");
    model.result("pg31").feature("mslc1").set("expr", "V");
    model.result("pg31").feature("mslc1").set("data", "parent");

    model.probe("pdom1").genResult("none");

    model.sol("sol48").runAll();

    model.variable("var1").remove("deng");
    model.variable("var1").set("en", "es.normE");
    model.variable("var1").set("ang", "acos((es.Ex*mfnc.Bx+es.Ey*mfnc.By+es.Ez*(mfnc.Bz+boffset))/(bn*en+1e-20))");
    model.variable("var1").set("eng", "f32energy(bn,en,ang)");

    model.sol("sol48").study("std1");

    model.study("std1").feature("stat").set("notlistsolnum", 1);
    model.study("std1").feature("stat").set("notsolnum", "1");
    model.study("std1").feature("stat").set("listsolnum", 1);
    model.study("std1").feature("stat").set("solnum", "1");

    model.sol("sol48").feature().remove("s1");
    model.sol("sol48").feature().remove("v1");
    model.sol("sol48").feature().remove("st1");
    model.sol("sol48").create("st1", "StudyStep");
    model.sol("sol48").feature("st1").set("study", "std1");
    model.sol("sol48").feature("st1").set("studystep", "stat");
    model.sol("sol48").create("v1", "Variables");
    model.sol("sol48").feature("v1").set("control", "stat");
    model.sol("sol48").create("s1", "Stationary");
    model.sol("sol48").feature("s1").create("se1", "Segregated");
    model.sol("sol48").feature("s1").feature("se1").feature().remove("ssDef");
    model.sol("sol48").feature("s1").feature("se1").create("ss1", "SegregatedStep");
    model.sol("sol48").feature("s1").feature("se1").feature("ss1").set("segvar", new String[]{"mod1_V"});
    model.sol("sol48").feature("s1").create("i1", "Iterative");
    model.sol("sol48").feature("s1").feature("i1").set("linsolver", "cg");
    model.sol("sol48").feature("s1").feature("i1").create("mg1", "Multigrid");
    model.sol("sol48").feature("s1").feature("i1").feature("mg1").set("prefun", "amg");
    model.sol("sol48").feature("s1").feature("se1").feature("ss1").set("linsolver", "i1");
    model.sol("sol48").feature("s1").feature("se1").create("ss2", "SegregatedStep");
    model.sol("sol48").feature("s1").feature("se1").feature("ss2").set("segvar", new String[]{"mod1_Vm"});
    model.sol("sol48").feature("s1").create("i2", "Iterative");
    model.sol("sol48").feature("s1").feature("i2").set("linsolver", "cg");
    model.sol("sol48").feature("s1").feature("i2").create("mg1", "Multigrid");
    model.sol("sol48").feature("s1").feature("i2").feature("mg1").set("prefun", "amg");
    model.sol("sol48").feature("s1").feature("se1").feature("ss2").set("linsolver", "i2");
    model.sol("sol48").feature("s1").feature().remove("fcDef");
    model.sol("sol47").feature("v1").set("notsolnum", "from_list");
    model.sol("sol47").feature("v1").set("notsolvertype", "solnum");
    model.sol("sol47").feature("v1").set("notlistsolnum", new String[]{"1"});
    model.sol("sol47").feature("v1").set("notsolnum", "from_list");
    model.sol("sol48").attach("std1");

    model.probe("pdom1").genResult("none");

    model.sol("sol48").runAll();

    model.study("std2").feature("stat").setIndex("plistarr", "range(-.021,.001,.021)", 0);
    model.study("std2").feature("stat").setIndex("pname", "rd", 1);
    model.study("std2").feature("stat").setIndex("plistarr", "", 1);
    model.study("std2").feature("stat").setIndex("punit", "", 1);
    model.study("std2").feature("stat").setIndex("pname", "rd", 1);
    model.study("std2").feature("stat").setIndex("plistarr", "", 1);
    model.study("std2").feature("stat").setIndex("punit", "", 1);
    model.study("std2").feature("stat").setIndex("pname", "temp", 1);
    model.study("std2").feature("stat").setIndex("plistarr", "range(.01,.01,.2)", 1);

    model.probe("pdom1").genResult("none");

    model.sol("sol47").runAll();

    model.result("pg30").run();
    model.result("pg31").run();
    model.result("pg31").feature("mslc1").set("expr", "en");
    model.result("pg31").run();
    model.result("pg28").run();
    model.result("pg28").feature("iso1").feature("col1").set("expr", "lz(bn,en,moag,5)");
    model.result("pg28").run();

    model.view("view1").hideEntities("hide1").add(new int[]{5});
    model.view("view1").hideEntities("hide1").add(new int[]{22});
    model.view("view1").hideEntities("hide1").add(new int[]{4});
    model.view("view1").hideEntities("hide1").add(new int[]{23});
    model.view("view1").hideEntities("hide1").add(new int[]{21});
    model.view("view1").hideEntities("hide1").add(new int[]{18});
    model.view("view1").hideEntities("hide1").add(new int[]{2});
    model.view("view1").hideEntities("hide1").add(new int[]{3});
    model.view("view1").hideEntities("hide1").add(new int[]{16});
    model.view("view1").hideEntities("hide1").add(new int[]{17});
    model.view("view1").hideEntities("hide1").add(new int[]{10});
    model.view("view1").hideEntities("hide1").add(new int[]{11});

    model.result("pg28").run();
    model.result().numerical().create("int1", "IntSurface");
    model.result().numerical("int1").set("data", "iso1");
    model.result().numerical("int1").set("innerinput", "first");
    model.result().numerical("int1").set("expr", "lz(bn,en,moag,5)*(abs(z)<1.5e-3)*(abs(x)<2e-3)*(abs(y)<1e-3)");
    model.result("pg30").feature("mslc1").set("expr", "eng");
    model.result("pg30").run();
    model.result().numerical("int1").set("expr", "lz(bn,en,moag,5)*(abs(z)<1.5e-3)*(abs(x)<2.5e-3)*(abs(y)<0.9e-3)");
    model.result().numerical("int1").set("method", "auto");
    model.result().numerical("int1").set("intorderactive", "on");
    model.result().numerical("int1").set("intorder", "1");
    model.result().numerical("int1")
         .set("expr", "lz(bn,en,moag,5)*bw(bn,en,ang,enm,temp)*(abs(z)<1.5e-3)*(abs(x)<2.5e-3)*(abs(y)<0.9e-3)");
    model.result().table().create("tbl28", "Table");
    model.result().table("tbl28")
         .comments("Surface Integration 1 (lz(bn,en,moag,5)*bw(bn,en,ang,enm,temp)*(abs(z)<1.5e-3)*(abs(x)<2.5e-3)*(abs(y)<0.9e-3))");
    model.result().numerical("int1").set("table", "tbl28");
    model.result().numerical("int1").setResult();
    model.result().numerical("int1").set("innerinput", "manual");
    model.result().numerical("int1").set("solnum", new String[]{"370"});
    model.result().numerical("int1").set("table", "tbl28");
    model.result().numerical("int1").appendResult();
    model.result().numerical("int1").set("solnum", new String[]{"420"});
    model.result().numerical("int1").set("table", "tbl28");
    model.result().numerical("int1").appendResult();
    model.result().numerical("int1").set("table", "tbl28");
    model.result().numerical("int1").appendResult();
    model.result().numerical("int1")
         .set("expr", "lz(bn,en,1*moag,5)*bw(bn,en,ang,enm,temp)*(abs(z)<1.5e-3)*(abs(x)<2.5e-3)*(abs(y)<0.9e-3)");
    model.result().numerical("int1").set("table", "tbl28");
    model.result().numerical("int1").appendResult();
    model.result().numerical("int1").set("intorderactive", "off");
    model.result().numerical("int1")
         .set("expr", "lz(bn,en,1*1*moag,5)*bw(bn,en,ang,enm,temp)*(abs(z)<1.5e-3)*(abs(x)<2.5e-3)*(abs(y)<0.9e-3)");
    model.result().table().create("tbl29", "Table");
    model.result().table("tbl29")
         .comments("Surface Integration 1 (lz(bn,en,1*1*moag,5)*bw(bn,en,ang,enm,temp)*(abs(z)<1.5e-3)*(abs(x)<2.5e-3)*(abs(y)<0.9e-3))");
    model.result().numerical("int1").set("table", "tbl29");
    model.result().numerical("int1").setResult();
    model.result().numerical("int1").set("method", "integration");

    return model;
  }

  public static Model run31(Model model) {
    model.result().numerical("int1").set("intorderactive", "on");
    model.result().numerical("int1").set("table", "tbl29");
    model.result().numerical("int1").appendResult();
    model.result().numerical("int1").set("method", "summation");
    model.result().numerical("int1").set("table", "tbl29");
    model.result().numerical("int1").appendResult();
    model.result().numerical("int1").set("method", "integration");
    model.result().numerical("int1").set("solnum", new String[]{"364"});
    model.result().numerical("int1")
         .set("expr", "lz(bn,en,moag,5)*bw(bn,en,ang,enm,temp)*(abs(z)<1.5e-3)*(abs(x)<2.5e-3)*(abs(y)<0.9e-3)");
    model.result().table().create("tbl30", "Table");
    model.result().table("tbl30")
         .comments("Surface Integration 1 (lz(bn,en,moag,5)*bw(bn,en,ang,enm,temp)*(abs(z)<1.5e-3)*(abs(x)<2.5e-3)*(abs(y)<0.9e-3))");
    model.result().numerical("int1").set("table", "tbl30");
    model.result().numerical("int1").setResult();
    model.result().numerical("int1").set("solnum", new String[]{"363"});
    model.result().table().create("tbl31", "Table");
    model.result().table("tbl31")
         .comments("Surface Integration 1 (lz(bn,en,moag,5)*bw(bn,en,ang,enm,temp)*(abs(z)<1.5e-3)*(abs(x)<2.5e-3)*(abs(y)<0.9e-3))");
    model.result().numerical("int1").set("table", "tbl31");
    model.result().numerical("int1").setResult();
    model.result().numerical("int1").set("intorder", "2");
    model.result().numerical("int1").set("table", "tbl31");
    model.result().numerical("int1").appendResult();
    model.result().numerical("int1").set("intorder", "3");
    model.result().numerical("int1").set("table", "tbl31");
    model.result().numerical("int1").appendResult();
    model.result().table().remove("tbl28");
    model.result().table().remove("tbl29");
    model.result().table().remove("tbl30");
    model.result().table().remove("tbl31");
    model.result().numerical("int1").set("innerinput", "all");
    model.result().numerical("int1").set("intorder", "2");
    model.result().table().create("tbl28", "Table");
    model.result().table("tbl28").label("Loss Area v Temp, B-offset, 0 pin offset");
    model.result().numerical("int1").set("descractive", "on");
    model.result().numerical("int1").set("descr", "loss area, square microns");
    model.result().numerical("int1")
         .set("expr", "1e12*lz(bn,en,moag,5)*bw(bn,en,ang,enm,temp)*(abs(z)<1.5e-3)*(abs(x)<2.5e-3)*(abs(y)<0.9e-3)");
    model.result().numerical("int1").set("innerinput", "manual");
    model.result().numerical("int1").set("solnum", new String[]{"620"});
    model.result().table().create("tbl29", "Table");
    model.result().table("tbl29")
         .comments("Surface Integration 1 (1e12*lz(bn,en,moag,5)*bw(bn,en,ang,enm,temp)*(abs(z)<1.5e-3)*(abs(x)<2.5e-3)*(abs(y)<0.9e-3))");
    model.result().numerical("int1").set("table", "tbl29");
    model.result().numerical("int1").setResult();
    model.result().numerical("int1").set("solnum", new String[]{"466"});
    model.result().table().create("tbl30", "Table");
    model.result().table("tbl30")
         .comments("Surface Integration 1 (1e12*lz(bn,en,moag,5)*bw(bn,en,ang,enm,temp)*(abs(z)<1.5e-3)*(abs(x)<2.5e-3)*(abs(y)<0.9e-3))");
    model.result().numerical("int1").set("table", "tbl30");
    model.result().numerical("int1").setResult();
    model.result().numerical("int1").set("solnum", new String[]{"440"});
    model.result().table().create("tbl31", "Table");
    model.result().table("tbl31")
         .comments("Surface Integration 1 (1e12*lz(bn,en,moag,5)*bw(bn,en,ang,enm,temp)*(abs(z)<1.5e-3)*(abs(x)<2.5e-3)*(abs(y)<0.9e-3))");
    model.result().numerical("int1").set("table", "tbl31");
    model.result().numerical("int1").setResult();
    model.result().numerical("int1").set("innerinput", "all");
    model.result().table().remove("tbl29");
    model.result().table().remove("tbl30");
    model.result().table().remove("tbl31");
    model.result().numerical("int1").set("descr", "loss area, um^2");
    model.result().table().create("tbl29", "Table");
    model.result().table("tbl29")
         .comments("Surface Integration 1 (1e12*lz(bn,en,moag,5)*bw(bn,en,ang,enm,temp)*(abs(z)<1.5e-3)*(abs(x)<2.5e-3)*(abs(y)<0.9e-3))");
    model.result().numerical("int1").set("table", "tbl29");
    model.result().table("tbl29").set("storetable", "inmodelandonfile");
    model.result().table("tbl29")
         .set("filename", "R:\\COMSOL files\\Magnetoelectrostatic Cloverleaf\\0pinoff_vary_temp_bfield.txt");
    model.result().table("tbl29").set("needsupdate", false);
    model.result().table("tbl29").set("appliedstoretable", "inmodelandonfile");
    model.result().table("tbl29")
         .set("appliedfilename", "R:\\COMSOL files\\Magnetoelectrostatic Cloverleaf\\0pinoff_vary_temp_bfield.txt");
    model.result().table().remove("tbl28");
    model.result().table("tbl29").label("Loss Area v Temp, B-offset, 0 pin offset");
    model.result().numerical().create("int2", "IntVolume");
    model.result().numerical("int2").label("Trap Volume");
    model.result().numerical("int2").selection().set(new int[]{6});

    model.view("view1").hideEntities("hide1").add(new int[]{6});

    model.result().numerical("int2").selection().set(new int[]{6, 9, 12, 14});
    model.result().numerical("int2")
         .set("expr", "1e18*bw(bn,en,ang,enm,temp)*(abs(z)<1.5e-3)*(abs(x)<2.5e-3)*(abs(y)<0.9e-3)");
    model.result().numerical("int2").set("data", "dset7");
    model.result().numerical("int2").set("innerinput", "manual");
    model.result().numerical("int2")
         .set("solnum", new String[]{"421", "422", "423", "424", "425", "426", "427", "428", "429", "430", 
         "431", "432", "433", "434", "435", "436", "437", "438", "439", "440"});
    model.result().numerical("int2").set("descractive", "on");
    model.result().numerical("int2").set("descr", "boltzmann trap volume");
    model.result().numerical("int2").set("method", "integration");
    model.result().numerical("int2").set("intorderactive", "on");
    model.result().numerical("int2").set("intorder", "2");
    model.result().table().create("tbl30", "Table");
    model.result().table("tbl30")
         .comments("Trap Volume (1e18*bw(bn,en,ang,enm,temp)*(abs(z)<1.5e-3)*(abs(x)<2.5e-3)*(abs(y)<0.9e-3))");
    model.result().numerical("int2").set("table", "tbl30");
    model.result().numerical("int2")
         .set("expr", "bw(bn,en,ang,enm,temp)*(abs(z)<1.5e-3)*(abs(x)<2.5e-3)*(abs(y)<0.9e-3)");
    model.result().table().create("tbl31", "Table");
    model.result().table("tbl31")
         .comments("Trap Volume (bw(bn,en,ang,enm,temp)*(abs(z)<1.5e-3)*(abs(x)<2.5e-3)*(abs(y)<0.9e-3))");
    model.result().numerical("int2").set("table", "tbl31");
    model.result().numerical("int2").set("expr", "1e18*bw(bn,en,ang,enm,temp)");
    model.result().table().create("tbl32", "Table");
    model.result().table("tbl32").comments("Trap Volume (1e18*bw(bn,en,ang,enm,temp))");
    model.result().numerical("int2").set("table", "tbl32");
    model.result().numerical("int2").set("intorderactive", "off");
    model.result().table().create("tbl33", "Table");
    model.result().table("tbl33").comments("Trap Volume (1e18*bw(bn,en,ang,enm,temp))");
    model.result().numerical("int2").set("table", "tbl33");
    model.result().numerical("int2").set("intorderactive", "on");
    model.result().numerical("int2").set("intorder", "1");
    model.result().table().create("tbl34", "Table");
    model.result().table("tbl34").comments("Trap Volume (1e18*bw(bn,en,ang,enm,temp))");
    model.result().numerical("int2").set("table", "tbl34");
    model.result().numerical("int2").set("intorder", "0");
    model.result().table().create("tbl35", "Table");
    model.result().table("tbl35").comments("Trap Volume (1e18*bw(bn,en,ang,enm,temp))");
    model.result().numerical("int2").set("table", "tbl35");
    model.result().numerical("int2").setResult();
    model.result().table().remove("tbl30");
    model.result().table().remove("tbl31");
    model.result().table().remove("tbl32");
    model.result().table().remove("tbl33");
    model.result().table().remove("tbl34");
    model.result().table("tbl35").label("Norms");
    model.result().numerical("int2")
         .set("expr", "1e18*bw(bn,en,ang,enm,temp)*(abs(z)<1.5e-3)*(abs(x)<2.5e-3)*(abs(y)<0.9e-3)");
    model.result().numerical("int2").set("intorderactive", "off");

    model.view("view1").hideObjects().create("hide1");
    model.view("view1").hideObjects("hide1").init(3);
    model.view("view1").hideObjects("hide1").add("fin", new int[]{1});
    model.view("view1").hideObjects("hide1").add("fin", new int[]{6});
    model.view("view1").hideObjects("hide1").add("fin", new int[]{16});
    model.view("view1").hideObjects("hide1").add("fin", new int[]{14});
    model.view("view1").hideObjects("hide1").add("fin", new int[]{12});
    model.view("view1").hideObjects("hide1").add("fin", new int[]{10});
    model.view("view1").hideObjects("hide1").add("fin", new int[]{9});

    model.study("std1").create("param", "Parametric");
    model.study("std1").feature("param").setIndex("pname", "rd", 0);
    model.study("std1").feature("param").setIndex("plistarr", "", 0);
    model.study("std1").feature("param").setIndex("punit", "", 0);
    model.study("std1").feature("param").setIndex("pname", "rd", 0);
    model.study("std1").feature("param").setIndex("plistarr", "", 0);
    model.study("std1").feature("param").setIndex("punit", "", 0);
    model.study("std1").feature("param").setIndex("pname", "poff", 0);
    model.study("std1").feature("param").setIndex("plistarr", "range(1.5e-5,5.0e-5,1.65e-4)", 0);

    model.sol("sol48").study("std1");

    model.study("std1").feature("stat").set("notlistsolnum", 1);
    model.study("std1").feature("stat").set("notsolnum", "1");
    model.study("std1").feature("stat").set("listsolnum", 1);
    model.study("std1").feature("stat").set("solnum", "1");

    model.sol("sol48").feature().remove("s1");
    model.sol("sol48").feature().remove("v1");
    model.sol("sol48").feature().remove("st1");
    model.sol("sol48").create("st1", "StudyStep");
    model.sol("sol48").feature("st1").set("study", "std1");
    model.sol("sol48").feature("st1").set("studystep", "stat");
    model.sol("sol48").create("v1", "Variables");
    model.sol("sol48").feature("v1").set("control", "stat");
    model.sol("sol48").create("s1", "Stationary");
    model.sol("sol48").feature("s1").create("se1", "Segregated");
    model.sol("sol48").feature("s1").feature("se1").feature().remove("ssDef");
    model.sol("sol48").feature("s1").feature("se1").create("ss1", "SegregatedStep");
    model.sol("sol48").feature("s1").feature("se1").feature("ss1").set("segvar", new String[]{"mod1_V"});
    model.sol("sol48").feature("s1").create("i1", "Iterative");
    model.sol("sol48").feature("s1").feature("i1").set("linsolver", "cg");
    model.sol("sol48").feature("s1").feature("i1").create("mg1", "Multigrid");
    model.sol("sol48").feature("s1").feature("i1").feature("mg1").set("prefun", "amg");
    model.sol("sol48").feature("s1").feature("se1").feature("ss1").set("linsolver", "i1");
    model.sol("sol48").feature("s1").feature("se1").create("ss2", "SegregatedStep");
    model.sol("sol48").feature("s1").feature("se1").feature("ss2").set("segvar", new String[]{"mod1_Vm"});
    model.sol("sol48").feature("s1").create("i2", "Iterative");
    model.sol("sol48").feature("s1").feature("i2").set("linsolver", "cg");
    model.sol("sol48").feature("s1").feature("i2").create("mg1", "Multigrid");
    model.sol("sol48").feature("s1").feature("i2").feature("mg1").set("prefun", "amg");
    model.sol("sol48").feature("s1").feature("se1").feature("ss2").set("linsolver", "i2");
    model.sol("sol48").feature("s1").feature().remove("fcDef");
    model.sol("sol47").feature("v1").set("notsolnum", "from_list");
    model.sol("sol47").feature("v1").set("notsolvertype", "solnum");
    model.sol("sol47").feature("v1").set("notlistsolnum", new String[]{"1"});
    model.sol("sol47").feature("v1").set("notsolnum", "from_list");
    model.sol("sol48").attach("std1");

    model.batch().create("p3", "Parametric");
    model.batch("p3").study("std1");
    model.batch("p3").create("so1", "Solutionseq");
    model.batch("p3").feature("so1").set("seq", "sol48");
    model.batch("p3").feature("so1").set("store", "on");
    model.batch("p3").feature("so1").set("clear", "on");
    model.batch("p3").feature("so1").set("psol", "none");
    model.batch("p3").set("pname", new String[]{"poff"});
    model.batch("p3").set("plistarr", new String[]{"range(1.5e-5,5.0e-5,1.65e-4)"});
    model.batch("p3").set("sweeptype", "sparse");
    model.batch("p3").set("probesel", "all");
    model.batch("p3").set("probes", new String[]{"pdom1"});
    model.batch("p3").set("plot", "off");
    model.batch("p3").set("err", "on");
    model.batch("p3").set("pdistrib", "off");
    model.batch("p3").attach("std1");
    model.batch("p3").set("control", "param");

    model.sol().create("sol49");
    model.sol("sol49").study("std1");
    model.sol("sol49").label("Parametric Solutions 1");

    model.batch("p3").feature("so1").set("psol", "sol49");

    model.result().create("pg33", "PlotGroup3D");
    model.result("pg33").label("Magnetic Flux Density Norm (mfnc) 1");
    model.result("pg33").set("data", "dset11");
    model.result("pg33").set("oldanalysistype", "noneavailable");
    model.result("pg33").set("outertype", "none");
    model.result("pg33").set("data", "dset11");
    model.result("pg33").feature().create("mslc1", "Multislice");
    model.result("pg33").feature("mslc1").set("oldanalysistype", "noneavailable");
    model.result("pg33").feature("mslc1").set("expr", "mfnc.normB");
    model.result("pg33").feature("mslc1").set("data", "parent");
    model.result().create("pg34", "PlotGroup3D");
    model.result("pg34").label("Electric Potential (es) 1");
    model.result("pg34").set("data", "dset11");
    model.result("pg34").set("oldanalysistype", "noneavailable");
    model.result("pg34").set("outertype", "none");
    model.result("pg34").set("frametype", "spatial");
    model.result("pg34").set("data", "dset11");
    model.result("pg34").feature().create("mslc1", "Multislice");
    model.result("pg34").feature("mslc1").set("oldanalysistype", "noneavailable");
    model.result("pg34").feature("mslc1").set("expr", "V");
    model.result("pg34").feature("mslc1").set("data", "parent");

    model.probe("pdom1").genResult("none");

    model.batch("p3").run();

    model.study("std2").feature("stat").set("notsol", "sol49");
    model.study("std2").feature("stat").set("notsoluse", "sol50");
    model.study("std2").label("15um");
    model.study().create("std3");
    model.study("std3").create("stat", "Stationary");
    model.study("std3").feature("stat").activate("mfnc", false);
    model.study("std3").feature("stat").activate("es", false);
    model.study().create("std4");
    model.study("std4").create("stat", "Stationary");
    model.study("std4").feature("stat").activate("mfnc", false);
    model.study("std4").feature("stat").activate("es", false);
    model.study().create("std5");
    model.study("std5").create("stat", "Stationary");
    model.study("std5").feature("stat").activate("mfnc", false);
    model.study("std5").feature("stat").activate("es", false);
    model.study("std3").label("65um");
    model.study("std4").label("115um");
    model.study("std5").label("165um");
    model.study("std3").feature("stat").set("usesol", "on");
    model.study("std3").feature("stat").set("notsolmethod", "sol");
    model.study("std3").feature("stat").set("notstudy", "std1");
    model.study("std3").feature("stat").set("notsol", "sol49");
    model.study("std3").feature("stat").set("notsoluse", "sol51");
    model.study("std3").feature("stat").set("useparam", "on");
    model.study("std3").feature("stat").setIndex("pname", "rd", 0);
    model.study("std3").feature("stat").setIndex("plistarr", "", 0);
    model.study("std3").feature("stat").setIndex("punit", "", 0);
    model.study("std3").feature("stat").setIndex("pname", "rd", 0);
    model.study("std3").feature("stat").setIndex("plistarr", "", 0);
    model.study("std3").feature("stat").setIndex("punit", "", 0);
    model.study("std3").feature("stat").setIndex("pname", "boffset", 0);
    model.study("std3").feature("stat").setIndex("plistarr", "range(-210,10,210)", 0);
    model.study("std3").feature("stat").setIndex("pname", "rd", 1);
    model.study("std3").feature("stat").setIndex("plistarr", "", 1);
    model.study("std3").feature("stat").setIndex("punit", "", 1);
    model.study("std3").feature("stat").setIndex("pname", "rd", 1);
    model.study("std3").feature("stat").setIndex("plistarr", "", 1);
    model.study("std3").feature("stat").setIndex("punit", "", 1);
    model.study("std3").feature("stat").setIndex("pname", "temp", 1);
    model.study("std3").feature("stat").setIndex("plistarr", "range(0.02,0.02,0.2)", 1);
    model.study("std2").feature("stat").setIndex("plistarr", "range(.02,.02,.2)", 1);
    model.study("std4").feature("stat").set("usesol", "on");
    model.study("std4").feature("stat").set("notsolmethod", "sol");
    model.study("std4").feature("stat").set("notstudy", "std1");
    model.study("std4").feature("stat").set("notsol", "sol49");
    model.study("std4").feature("stat").set("notsoluse", "sol52");
    model.study("std4").feature("stat").set("useparam", "on");
    model.study("std4").feature("stat").setIndex("pname", "rd", 0);
    model.study("std4").feature("stat").setIndex("plistarr", "", 0);
    model.study("std4").feature("stat").setIndex("punit", "", 0);
    model.study("std4").feature("stat").setIndex("pname", "rd", 0);
    model.study("std4").feature("stat").setIndex("plistarr", "", 0);
    model.study("std4").feature("stat").setIndex("punit", "", 0);
    model.study("std4").feature("stat").setIndex("pname", "boffset", 0);
    model.study("std4").feature("stat").setIndex("plistarr", "range(-0.021,0.001,0.021)", 0);
    model.study("std4").feature("stat").setIndex("pname", "rd", 1);
    model.study("std4").feature("stat").setIndex("plistarr", "", 1);
    model.study("std4").feature("stat").setIndex("punit", "", 1);
    model.study("std4").feature("stat").setIndex("pname", "rd", 1);
    model.study("std4").feature("stat").setIndex("plistarr", "", 1);
    model.study("std4").feature("stat").setIndex("punit", "", 1);
    model.study("std4").feature("stat").setIndex("pname", "temp", 1);
    model.study("std4").feature("stat").setIndex("plistarr", "range(0.02,0.02,0.2)", 1);
    model.study("std5").feature("stat").set("usesol", "on");
    model.study("std5").feature("stat").set("notsolmethod", "sol");
    model.study("std5").feature("stat").set("notstudy", "std1");
    model.study("std5").feature("stat").set("notsol", "sol49");
    model.study("std5").feature("stat").set("notsoluse", "sol53");
    model.study("std5").feature("stat").set("useparam", "on");
    model.study("std5").feature("stat").setIndex("pname", "rd", 0);
    model.study("std5").feature("stat").setIndex("plistarr", "", 0);
    model.study("std5").feature("stat").setIndex("punit", "", 0);
    model.study("std5").feature("stat").setIndex("pname", "rd", 0);
    model.study("std5").feature("stat").setIndex("plistarr", "", 0);
    model.study("std5").feature("stat").setIndex("punit", "", 0);
    model.study("std5").feature("stat").setIndex("pname", "boffset", 0);
    model.study("std5").feature("stat").setIndex("plistarr", "range(-0.021,0.001,0.021)", 0);
    model.study("std5").feature("stat").setIndex("pname", "rd", 1);
    model.study("std5").feature("stat").setIndex("plistarr", "", 1);
    model.study("std5").feature("stat").setIndex("punit", "", 1);
    model.study("std5").feature("stat").setIndex("pname", "rd", 1);
    model.study("std5").feature("stat").setIndex("plistarr", "", 1);
    model.study("std5").feature("stat").setIndex("punit", "", 1);
    model.study("std5").feature("stat").setIndex("pname", "temp", 1);
    model.study("std5").feature("stat").setIndex("plistarr", "range(0.02,0.02,0.2)", 1);
    model.study("std3").feature("stat").setIndex("plistarr", "range(-210e-4,10e-4,210e-4)", 0);

    model.probe("pdom1").genResult("none");

    model.sol("sol47").runAll();
    model.sol().create("sol54");
    model.sol("sol54").study("std3");

    model.study("std3").feature("stat").set("notlistsolnum", 1);
    model.study("std3").feature("stat").set("notsolnum", "auto");
    model.study("std3").feature("stat").set("listsolnum", 1);
    model.study("std3").feature("stat").set("solnum", "1");

    model.sol("sol54").create("st1", "StudyStep");
    model.sol("sol54").feature("st1").set("study", "std3");
    model.sol("sol54").feature("st1").set("studystep", "stat");

    model.study("std3").feature("stat").set("notsoluse", "sol51");

    model.sol("sol54").create("v1", "Variables");
    model.sol("sol54").feature("v1").set("control", "stat");
    model.sol("sol54").create("s1", "Stationary");
    model.sol("sol54").feature("s1").create("p1", "Parametric");
    model.sol("sol54").feature("s1").feature().remove("pDef");
    model.sol("sol54").feature("s1").feature("p1").set("control", "stat");
    model.sol("sol54").feature("s1").set("control", "stat");
    model.sol("sol54").attach("std3");

    model.probe("pdom1").genResult("none");

    model.study("std3").feature("stat").setIndex("plistarr", "range(-0.021,0.001,0.021)", 0);

    model.sol("sol54").study("std3");

    model.study("std3").feature("stat").set("notlistsolnum", 1);
    model.study("std3").feature("stat").set("notsolnum", "auto");
    model.study("std3").feature("stat").set("listsolnum", 1);
    model.study("std3").feature("stat").set("solnum", "1");

    model.sol("sol54").feature().remove("s1");
    model.sol("sol54").feature().remove("v1");
    model.sol("sol54").feature().remove("st1");
    model.sol("sol54").create("st1", "StudyStep");
    model.sol("sol54").feature("st1").set("study", "std3");
    model.sol("sol54").feature("st1").set("studystep", "stat");

    model.study("std3").feature("stat").set("notsoluse", "sol51");

    model.sol("sol54").create("v1", "Variables");
    model.sol("sol54").feature("v1").set("control", "stat");
    model.sol("sol54").create("s1", "Stationary");
    model.sol("sol54").feature("s1").create("p1", "Parametric");
    model.sol("sol54").feature("s1").feature().remove("pDef");
    model.sol("sol54").feature("s1").feature("p1").set("control", "stat");
    model.sol("sol54").feature("s1").set("control", "stat");
    model.sol("sol54").attach("std3");

    model.probe("pdom1").genResult("none");

    model.study("std3").feature("stat").set("sweeptype", "filled");

    model.sol("sol54").study("std3");

    model.study("std3").feature("stat").set("notlistsolnum", 1);
    model.study("std3").feature("stat").set("notsolnum", "auto");
    model.study("std3").feature("stat").set("listsolnum", 1);
    model.study("std3").feature("stat").set("solnum", "1");

    model.sol("sol54").feature().remove("s1");
    model.sol("sol54").feature().remove("v1");
    model.sol("sol54").feature().remove("st1");
    model.sol("sol54").create("st1", "StudyStep");
    model.sol("sol54").feature("st1").set("study", "std3");
    model.sol("sol54").feature("st1").set("studystep", "stat");

    model.study("std3").feature("stat").set("notsoluse", "sol51");

    model.sol("sol54").create("v1", "Variables");
    model.sol("sol54").feature("v1").set("control", "stat");
    model.sol("sol54").create("s1", "Stationary");
    model.sol("sol54").feature("s1").create("p1", "Parametric");
    model.sol("sol54").feature("s1").feature().remove("pDef");
    model.sol("sol54").feature("s1").feature("p1").set("control", "stat");
    model.sol("sol54").feature("s1").set("control", "stat");
    model.sol("sol54").attach("std3");

    model.probe("pdom1").genResult("none");

    model.sol("sol54").runAll();

    model.study("std4").feature("stat").set("sweeptype", "filled");

    model.sol().create("sol55");
    model.sol("sol55").study("std4");

    model.study("std4").feature("stat").set("notlistsolnum", 1);
    model.study("std4").feature("stat").set("notsolnum", "auto");
    model.study("std4").feature("stat").set("listsolnum", 1);
    model.study("std4").feature("stat").set("solnum", "1");

    model.sol("sol55").create("st1", "StudyStep");
    model.sol("sol55").feature("st1").set("study", "std4");
    model.sol("sol55").feature("st1").set("studystep", "stat");

    model.study("std4").feature("stat").set("notsoluse", "sol52");

    model.sol("sol55").create("v1", "Variables");
    model.sol("sol55").feature("v1").set("control", "stat");
    model.sol("sol55").create("s1", "Stationary");
    model.sol("sol55").feature("s1").create("p1", "Parametric");
    model.sol("sol55").feature("s1").feature().remove("pDef");
    model.sol("sol55").feature("s1").feature("p1").set("control", "stat");
    model.sol("sol55").feature("s1").set("control", "stat");
    model.sol("sol55").attach("std4");

    model.probe("pdom1").genResult("none");

    model.sol("sol55").runAll();

    model.study("std5").feature("stat").set("sweeptype", "filled");

    model.sol().create("sol56");
    model.sol("sol56").study("std5");

    model.study("std5").feature("stat").set("notlistsolnum", 1);
    model.study("std5").feature("stat").set("notsolnum", "auto");
    model.study("std5").feature("stat").set("listsolnum", 1);
    model.study("std5").feature("stat").set("solnum", "1");

    model.sol("sol56").create("st1", "StudyStep");
    model.sol("sol56").feature("st1").set("study", "std5");
    model.sol("sol56").feature("st1").set("studystep", "stat");

    model.study("std5").feature("stat").set("notsoluse", "sol53");

    model.sol("sol56").create("v1", "Variables");
    model.sol("sol56").feature("v1").set("control", "stat");
    model.sol("sol56").create("s1", "Stationary");
    model.sol("sol56").feature("s1").create("p1", "Parametric");
    model.sol("sol56").feature("s1").feature().remove("pDef");
    model.sol("sol56").feature("s1").feature("p1").set("control", "stat");
    model.sol("sol56").feature("s1").set("control", "stat");
    model.sol("sol56").attach("std5");

    model.probe("pdom1").genResult("none");

    model.sol("sol56").runAll();

    model.result().dataset().duplicate("iso2", "iso1");
    model.result().dataset("iso2").label("Loss Surface65");
    model.result().dataset().duplicate("iso3", "iso2");
    model.result().dataset("iso3").label("Loss Surface115");
    model.result().dataset("iso1").label("Loss Surface15");
    model.result().dataset().duplicate("iso4", "iso3");
    model.result().dataset("iso4").label("Loss Surface165");
    model.result().dataset("iso4").set("data", "dset14");
    model.result().dataset("iso3").set("data", "dset13");
    model.result().dataset("iso2").set("data", "dset12");
    model.result().numerical("int1").label("15um pin offset");
    model.result().numerical().duplicate("int3", "int1");
    model.result().numerical().duplicate("int4", "int3");
    model.result().numerical().duplicate("int5", "int4");
    model.result().numerical("int3").label("65um");
    model.result().numerical("int4").label("115um");
    model.result().numerical("int5").label("165um");
    model.result().numerical("int1").label("15um");
    model.result().numerical().move("int2", 5);
    model.result().numerical("int1").set("tablecols", "level1");
    model.result().table().create("tbl36", "Table");
    model.result().table("tbl36").label("15um");
    model.result().table().duplicate("tbl37", "tbl36");
    model.result().table().duplicate("tbl38", "tbl36");
    model.result().table().duplicate("tbl39", "tbl36");
    model.result().table("tbl37").label("65um");
    model.result().table("tbl38").label("115um");
    model.result().table("tbl39").label("165um");
    model.result().numerical("int1").set("table", "tbl36");
    model.result().numerical("int3").set("table", "tbl37");
    model.result().numerical().remove("int3");
    model.result().numerical().remove("int4");
    model.result().numerical().remove("int5");
    model.result().numerical().create("int3", "IntSurface");
    model.result().numerical("int1").label("Loss Area");
    model.result().numerical("int3").label("15um");
    model.result().numerical("int3").set("data", "iso1");
    model.result().numerical("int3").set("innerinput", "all");
    model.result().numerical("int3")
         .set("expr", "1e12*lz(bn,en,moag,5)*bw(bn,en,ang,enm,temp)*(abs(z)<1.5e-3)*(abs(x)<2.5e-3)*(abs(y)<0.9e-3)");
    model.result().numerical("int3").set("method", "integration");
    model.result().numerical("int3").set("intorderactive", "on");
    model.result().numerical("int3").set("intorder", "2");
    model.result().numerical("int3").set("table", "tbl36");
    model.result().numerical().duplicate("int4", "int3");
    model.result().numerical().duplicate("int5", "int3");
    model.result().numerical().duplicate("int6", "int3");
    model.result().numerical("int4").label("65um");
    model.result().numerical("int5").label("115um");
    model.result().numerical("int6").label("165um");
    model.result().numerical("int6").set("data", "iso4");
    model.result().numerical("int5").set("data", "iso3");
    model.result().numerical("int4").set("data", "iso2");
    model.result().numerical("int4").set("table", "tbl37");
    model.result().numerical("int5").set("table", "tbl38");
    model.result().numerical("int6").set("table", "tbl39");
    model.result().numerical("int3").set("descractive", "on");
    model.result().numerical("int3").set("descr", "15um");
    model.result().numerical("int4").set("descractive", "on");
    model.result().numerical("int4").set("descr", "65um");
    model.result().numerical("int5").set("descractive", "on");
    model.result().numerical("int5").set("descr", "115um");
    model.result().numerical("int6").set("descractive", "on");
    model.result().numerical("int6").set("descr", "165um");
    model.result().table("tbl36").set("storetable", "inmodelandonfile");
    model.result().table("tbl36")
         .set("filename", "R:\\COMSOL files\\Magnetoelectrostatic Cloverleaf\\15umTable.txt");
    model.result().table("tbl36").set("needsupdate", false);
    model.result().table("tbl36").set("appliedstoretable", "inmodelandonfile");
    model.result().table("tbl36")
         .set("appliedfilename", "R:\\COMSOL files\\Magnetoelectrostatic Cloverleaf\\15umTable.txt");
    model.result().table("tbl37").set("storetable", "inmodelandonfile");
    model.result().table("tbl37")
         .set("filename", "R:\\COMSOL files\\Magnetoelectrostatic Cloverleaf\\65umTable.txt");
    model.result().table("tbl37").set("needsupdate", false);
    model.result().table("tbl37").set("appliedstoretable", "inmodelandonfile");
    model.result().table("tbl37")
         .set("appliedfilename", "R:\\COMSOL files\\Magnetoelectrostatic Cloverleaf\\65umTable.txt");
    model.result().table("tbl38").set("storetable", "inmodelandonfile");
    model.result().table("tbl38")
         .set("filename", "R:\\COMSOL files\\Magnetoelectrostatic Cloverleaf\\115umTable.txt");
    model.result().table("tbl38").set("needsupdate", false);
    model.result().table("tbl38").set("appliedstoretable", "inmodelandonfile");
    model.result().table("tbl38")
         .set("appliedfilename", "R:\\COMSOL files\\Magnetoelectrostatic Cloverleaf\\115umTable.txt");
    model.result().table("tbl39").set("storetable", "inmodelandonfile");
    model.result().table("tbl39")
         .set("filename", "R:\\COMSOL files\\Magnetoelectrostatic Cloverleaf\\165umTable.txt");
    model.result().table("tbl39").set("needsupdate", false);
    model.result().table("tbl39").set("appliedstoretable", "inmodelandonfile");

    return model;
  }

  public static Model run32(Model model) {
    model.result().table("tbl39")
         .set("appliedfilename", "R:\\COMSOL files\\Magnetoelectrostatic Cloverleaf\\165umTable.txt");
    model.result().numerical("int1").active(false);
    model.result().numerical("int2").label("TrapVolume");
    model.result().numerical("int2").active(false);
    model.result().numerical("pev1").set("table", "tbl15");
    model.result().numerical("pev1").active(false);
    model.result().numerical("int3").set("table", "tbl36");
    model.result().numerical("int4").set("table", "tbl37");
    model.result().numerical("int5").set("table", "tbl38");
    model.result().numerical("int6").set("table", "tbl39");

    model.study("std3").feature("stat").set("notsolnum", "from_list");

    model.result("pg28").setIndex("looplevel", "16", 1);
    model.result("pg28").run();

    model.view("view1").hideObjects().clear();
    model.view("view1").hideEntities().clear();
    model.view("view1").hideEntities().create("hide1");
    model.view("view1").hideEntities("hide1").geom(2);
    model.view("view1").hideEntities("hide1").add(new int[]{82});
    model.view("view1").hideObjects().clear();
    model.view("view1").hideEntities().clear();
    model.view("view1").hideEntities().create("hide1");
    model.view("view1").hideEntities("hide1").geom(3);
    model.view("view1").hideEntities("hide1").add(new int[]{1});
    model.view("view1").hideEntities("hide1").add(new int[]{1});
    model.view("view1").hideEntities("hide1").add(new int[]{4});
    model.view("view1").hideEntities("hide1").add(new int[]{23});
    model.view("view1").hideEntities("hide1").add(new int[]{22});
    model.view("view1").hideEntities("hide1").add(new int[]{5});
    model.view("view1").hideEntities("hide1").add(new int[]{21});
    model.view("view1").hideEntities("hide1").add(new int[]{18});
    model.view("view1").hideEntities("hide1").add(new int[]{3});
    model.view("view1").hideEntities("hide1").add(new int[]{2});
    model.view("view1").hideEntities("hide1").add(new int[]{17});
    model.view("view1").hideEntities("hide1").add(new int[]{16});
    model.view("view1").hideEntities("hide1").add(new int[]{11});
    model.view("view1").hideEntities("hide1").add(new int[]{10});
    model.view("view1").hideEntities("hide1").add(new int[]{20});
    model.view("view1").hideEntities("hide1").add(new int[]{15});
    model.view("view1").hideEntities("hide1").add(new int[]{8});
    model.view("view1").hideEntities("hide1").add(new int[]{19});
    model.view("view1").hideEntities("hide1").add(new int[]{7});
    model.view("view1").hideEntities("hide1").add(new int[]{13});

    model.result("pg28").run();
    model.result("pg28").set("data", "dset12");
    model.result("pg28").run();
    model.result("pg28").set("data", "dset13");
    model.result("pg28").run();
    model.result("pg28").set("data", "dset14");
    model.result("pg28").run();
    model.result().table("tbl36").set("storetable", "inmodel");
    model.result().table("tbl36").set("needsupdate", false);
    model.result().table("tbl36").set("appliedstoretable", "inmodel");
    model.result().table("tbl36").set("storetable", "inmodelandonfile");
    model.result().table("tbl36").set("needsupdate", false);
    model.result().table("tbl36").set("appliedstoretable", "inmodelandonfile");
    model.result("pg28").set("data", "dset13");
    model.result("pg28").setIndex("looplevel", "22", 1);
    model.result("pg28").run();
    model.result("pg28").setIndex("looplevel", "36", 1);
    model.result("pg28").run();
    model.result("pg28").setIndex("looplevel", "43", 1);
    model.result("pg28").run();
    model.result("pg28").set("titletype", "manual");
    model.result("pg28").set("title", "Loss Regions at Large B-field (210 Gauss)");
    model.result("pg28").set("legendactive", "on");
    model.result("pg28").set("legendtrailingzeros", "off");
    model.result("pg28").feature("iso1").set("titletype", "manual");
    model.result("pg28").run();
    model.result("pg28").feature("iso1").feature("col1").set("descractive", "on");
    model.result("pg28").feature("iso1").feature("col1").set("descr", "Hop Probability");
    model.result("pg28").run();
    model.result("pg28").feature("iso1").feature("col1").set("titletype", "manual");
    model.result("pg28").feature("iso1").feature("col1").set("title", "Hop Probability");
    model.result("pg28").run();
    model.result("pg28").feature("iso1").feature("col1").set("rangecoloractive", "on");
    model.result("pg28").feature("iso1").feature("col1").set("rangecolormax", "1");
    model.result("pg28").run();
    model.result("pg28").set("allowtableupdate", false);
    model.result("pg28").set("hasbeenplotted", true);
    model.result("pg28").feature("iso1").feature("col1").set("rangeunit", "");
    model.result("pg28").feature("iso1").feature("col1").set("rangedatamin", 0);
    model.result("pg28").feature("iso1").feature("col1").set("rangedatamax", 0.9986546361717124);
    model.result("pg28").feature("iso1").feature("col1").set("rangedataactive", "off");
    model.result("pg28").feature("iso1").feature("col1")
         .set("rangeactualminmax", new double[]{0, 0.9986546361717124});
    model.result("pg28").feature("iso1").set("hasbeenplotted", true);
    model.result("pg28").set("renderdatacached", false);
    model.result("pg28").set("allowtableupdate", true);
    model.result("pg28").set("renderdatacached", true);
    model.result().table("evl3")
         .addRow(new double[]{-0.24985473182450457, 0.24923011764963543, 1.4242554406327173, 0.03541844806685448});
    model.result("pg28").feature("iso1").feature("col1").set("expr", "f32energy(bn,en,ang)+0*lz(bn,en,moag,5)");
    model.result("pg28").run();
    model.result("pg28").feature("iso1").feature("col1").set("rangecoloractive", "off");
    model.result("pg28").run();
    model.result("pg28").set("allowtableupdate", false);
    model.result("pg28").set("hasbeenplotted", true);
    model.result("pg28").feature("iso1").feature("col1").set("rangeunit", "");
    model.result("pg28").feature("iso1").feature("col1").set("rangecolormin", 1.2474860854375254);
    model.result("pg28").feature("iso1").feature("col1").set("rangecolormax", 34.964122306768104);
    model.result("pg28").feature("iso1").feature("col1").set("rangecoloractive", "off");
    model.result("pg28").feature("iso1").feature("col1").set("rangedatamin", 1.2474860854375254);
    model.result("pg28").feature("iso1").feature("col1").set("rangedatamax", 34.964122306768104);
    model.result("pg28").feature("iso1").feature("col1").set("rangedataactive", "off");
    model.result("pg28").feature("iso1").feature("col1")
         .set("rangeactualminmax", new double[]{1.2474860854375254, 34.964122306768104});
    model.result("pg28").feature("iso1").set("hasbeenplotted", true);
    model.result("pg28").set("renderdatacached", false);
    model.result("pg28").set("allowtableupdate", true);
    model.result("pg28").set("renderdatacached", true);
    model.result().table("evl3")
         .addRow(new double[]{-0.3538821970647934, 0.15555634525985673, 1.291823618344707, 10.681399299383884});
    model.result().table("evl3")
         .addRow(new double[]{-0.2661989741878661, 0.15370169141069312, 1.0448974157493627, 9.015276625745345});
    model.result().table("evl3")
         .addRow(new double[]{-0.16381014554113982, 0.23465223841594185, 1.0261697928723974, 8.961250252038758});
    model.result().table("evl3")
         .addRow(new double[]{-0.25533713997891416, 0.17631043013236147, 1.1398535544718937, 9.695968334965764});
    model.result().table("evl3")
         .addRow(new double[]{-0.29745354480875275, 0.2279663597522691, 1.4814880712852438, 11.914225640596488});
    model.result().table("evl3")
         .addRow(new double[]{0.09073510966471998, -0.007561915061962465, -0.06639224107852204, 1.803128318693668});
    model.result().table("evl3")
         .addRow(new double[]{0.09073510966471998, -0.007561915061962465, -0.06639224107852204, 1.803128318693668});
    model.result("pg28").feature("iso1").feature("col1").set("expr", "lz(bn,en,moag,5)");
    model.result("pg28").run();
    model.result("pg28").setIndex("looplevel", "37", 1);
    model.result("pg28").run();
    model.result("pg28").set("allowtableupdate", false);
    model.result("pg28").set("hasbeenplotted", true);
    model.result("pg28").feature("iso1").feature("col1").set("rangeunit", "");
    model.result("pg28").feature("iso1").feature("col1").set("rangecolormin", 0);
    model.result("pg28").feature("iso1").feature("col1").set("rangecolormax", 0.9995954335987365);
    model.result("pg28").feature("iso1").feature("col1").set("rangecoloractive", "off");
    model.result("pg28").feature("iso1").feature("col1").set("rangedatamin", 0);
    model.result("pg28").feature("iso1").feature("col1").set("rangedatamax", 0.9995954335987365);
    model.result("pg28").feature("iso1").feature("col1").set("rangedataactive", "off");
    model.result("pg28").feature("iso1").feature("col1")
         .set("rangeactualminmax", new double[]{0, 0.9995954335987365});
    model.result("pg28").feature("iso1").set("hasbeenplotted", true);
    model.result("pg28").set("renderdatacached", false);
    model.result("pg28").set("allowtableupdate", true);
    model.result("pg28").set("renderdatacached", true);
    model.result().table("evl3")
         .addRow(new double[]{-0.25095855635237196, 0.1794325208280868, 1.4248062131890098, 0.156273606933787});
    model.result("pg28").setIndex("looplevel", "34", 1);
    model.result("pg28").run();
    model.result("pg28").set("allowtableupdate", false);
    model.result("pg28").set("hasbeenplotted", true);
    model.result("pg28").feature("iso1").feature("col1").set("rangeunit", "");
    model.result("pg28").feature("iso1").feature("col1").set("rangecolormin", 0);
    model.result("pg28").feature("iso1").feature("col1").set("rangecolormax", 0.9998112686676299);
    model.result("pg28").feature("iso1").feature("col1").set("rangecoloractive", "off");
    model.result("pg28").feature("iso1").feature("col1").set("rangedatamin", 0);
    model.result("pg28").feature("iso1").feature("col1").set("rangedatamax", 0.9998112686676299);
    model.result("pg28").feature("iso1").feature("col1").set("rangedataactive", "off");
    model.result("pg28").feature("iso1").feature("col1")
         .set("rangeactualminmax", new double[]{0, 0.9998112686676299});
    model.result("pg28").feature("iso1").set("hasbeenplotted", true);
    model.result("pg28").set("renderdatacached", false);
    model.result("pg28").set("allowtableupdate", true);
    model.result("pg28").set("renderdatacached", true);
    model.result().table("evl3")
         .addRow(new double[]{-0.21975026389067054, 0.14673899193950724, 1.3301101806103086, 0.11469884973288286});
    model.result().table("evl3")
         .addRow(new double[]{-0.24405244588901054, 0.1417480362001623, 1.3871085810837034, 0.17836471348197253});
    model.result("pg28").setIndex("looplevel", "22", 1);
    model.result("pg28").run();
    model.result("pg28").setIndex("looplevel", "23", 1);
    model.result("pg28").run();
    model.result("pg28").set("allowtableupdate", false);
    model.result("pg28").set("hasbeenplotted", true);
    model.result("pg28").feature("iso1").feature("col1").set("rangeunit", "");
    model.result("pg28").feature("iso1").feature("col1").set("rangecolormin", 0);
    model.result("pg28").feature("iso1").feature("col1").set("rangecolormax", 0.9999996071179313);
    model.result("pg28").feature("iso1").feature("col1").set("rangecoloractive", "off");
    model.result("pg28").feature("iso1").feature("col1").set("rangedatamin", 0);
    model.result("pg28").feature("iso1").feature("col1").set("rangedatamax", 0.9999996071179313);
    model.result("pg28").feature("iso1").feature("col1").set("rangedataactive", "off");
    model.result("pg28").feature("iso1").feature("col1")
         .set("rangeactualminmax", new double[]{0, 0.9999996071179313});
    model.result("pg28").feature("iso1").set("hasbeenplotted", true);
    model.result("pg28").set("renderdatacached", false);
    model.result("pg28").set("allowtableupdate", true);
    model.result("pg28").set("renderdatacached", true);
    model.result().table("evl3")
         .addRow(new double[]{0.06939356369911964, 0.012638699634752948, -0.5193279376671328, 1.1202286753021354E-4});
    model.result().table("evl3")
         .addRow(new double[]{0.07278372349646478, 0.013339011705004955, -0.5570107266368823, 2.602987793696801E-4});
    model.result().table("evl3")
         .addRow(new double[]{0.10418365409682151, 0.008815196543712878, -0.5543089936076014, 7.459326107307716E-32});
    model.result().table("evl3")
         .addRow(new double[]{0.06939356369911964, 0.012638699634752948, -0.5193279376671328, 1.1202286753021354E-4});
    model.result("pg28").setIndex("looplevel", "24", 1);
    model.result("pg28").run();
    model.result("pg28").set("allowtableupdate", false);
    model.result("pg28").set("hasbeenplotted", true);
    model.result("pg28").feature("iso1").feature("col1").set("rangeunit", "");
    model.result("pg28").feature("iso1").feature("col1").set("rangecolormin", 0);
    model.result("pg28").feature("iso1").feature("col1").set("rangecolormax", 0.9999995071875611);
    model.result("pg28").feature("iso1").feature("col1").set("rangecoloractive", "off");
    model.result("pg28").feature("iso1").feature("col1").set("rangedatamin", 0);
    model.result("pg28").feature("iso1").feature("col1").set("rangedatamax", 0.9999995071875611);
    model.result("pg28").feature("iso1").feature("col1").set("rangedataactive", "off");
    model.result("pg28").feature("iso1").feature("col1")
         .set("rangeactualminmax", new double[]{0, 0.9999995071875611});
    model.result("pg28").feature("iso1").set("hasbeenplotted", true);
    model.result("pg28").set("renderdatacached", false);
    model.result("pg28").set("allowtableupdate", true);
    model.result("pg28").set("renderdatacached", true);
    model.result().table("evl3")
         .addRow(new double[]{0.15565479832868956, 0.01348093362199343, -0.6065716614196688, 2.718693143439375E-256});
    model.result().table("evl3")
         .addRow(new double[]{0.08255415350201378, 0.03220386126407471, -0.8217896379581704, 0.003425858904530621});
    model.result("pg28").setIndex("looplevel", "25", 1);
    model.result("pg28").run();
    model.result("pg28").set("allowtableupdate", false);
    model.result("pg28").set("hasbeenplotted", true);
    model.result("pg28").feature("iso1").feature("col1").set("rangeunit", "");
    model.result("pg28").feature("iso1").feature("col1").set("rangecolormin", 0);
    model.result("pg28").feature("iso1").feature("col1").set("rangecolormax", 0.9999990779840227);
    model.result("pg28").feature("iso1").feature("col1").set("rangecoloractive", "off");
    model.result("pg28").feature("iso1").feature("col1").set("rangedatamin", 0);
    model.result("pg28").feature("iso1").feature("col1").set("rangedatamax", 0.9999990779840227);
    model.result("pg28").feature("iso1").feature("col1").set("rangedataactive", "off");
    model.result("pg28").feature("iso1").feature("col1")
         .set("rangeactualminmax", new double[]{0, 0.9999990779840227});
    model.result("pg28").feature("iso1").set("hasbeenplotted", true);
    model.result("pg28").set("renderdatacached", false);
    model.result("pg28").set("allowtableupdate", true);
    model.result("pg28").set("renderdatacached", true);
    model.result().table("evl3")
         .addRow(new double[]{0.10077746073763638, 0.057319368646633784, -1.028582877626457, 0.07505587307217951});
    model.result("pg28").setIndex("looplevel", "26", 1);
    model.result("pg28").run();
    model.result("pg28").set("allowtableupdate", false);
    model.result("pg28").set("hasbeenplotted", true);
    model.result("pg28").feature("iso1").feature("col1").set("rangeunit", "");
    model.result("pg28").feature("iso1").feature("col1").set("rangecolormin", 0);
    model.result("pg28").feature("iso1").feature("col1").set("rangecolormax", 0.9999974715217224);
    model.result("pg28").feature("iso1").feature("col1").set("rangecoloractive", "off");
    model.result("pg28").feature("iso1").feature("col1").set("rangedatamin", 0);
    model.result("pg28").feature("iso1").feature("col1").set("rangedatamax", 0.9999974715217224);
    model.result("pg28").feature("iso1").feature("col1").set("rangedataactive", "off");
    model.result("pg28").feature("iso1").feature("col1")
         .set("rangeactualminmax", new double[]{0, 0.9999974715217224});
    model.result("pg28").feature("iso1").set("hasbeenplotted", true);
    model.result("pg28").set("renderdatacached", false);
    model.result("pg28").set("allowtableupdate", true);
    model.result("pg28").set("renderdatacached", true);
    model.result().table("evl3")
         .addRow(new double[]{0.11728920724628411, 0.06453697989554197, -1.0838097352230798, 0.027945578559064335});
    model.result("pg28").setIndex("looplevel", "27", 1);
    model.result("pg28").run();
    model.result("pg28").set("allowtableupdate", false);
    model.result("pg28").set("hasbeenplotted", true);
    model.result("pg28").feature("iso1").feature("col1").set("rangeunit", "");
    model.result("pg28").feature("iso1").feature("col1").set("rangecolormin", 0);
    model.result("pg28").feature("iso1").feature("col1").set("rangecolormax", 0.9999936037421076);
    model.result("pg28").feature("iso1").feature("col1").set("rangecoloractive", "off");
    model.result("pg28").feature("iso1").feature("col1").set("rangedatamin", 0);
    model.result("pg28").feature("iso1").feature("col1").set("rangedatamax", 0.9999936037421076);
    model.result("pg28").feature("iso1").feature("col1").set("rangedataactive", "off");
    model.result("pg28").feature("iso1").feature("col1")
         .set("rangeactualminmax", new double[]{0, 0.9999936037421076});
    model.result("pg28").feature("iso1").set("hasbeenplotted", true);
    model.result("pg28").set("renderdatacached", false);
    model.result("pg28").set("allowtableupdate", true);
    model.result("pg28").set("renderdatacached", true);
    model.result().table("evl3")
         .addRow(new double[]{0.1289753694443343, 0.08837148535791517, -1.2150908935427902, 0.09206522873349002});
    model.result("pg28").setIndex("looplevel", "28", 1);
    model.result("pg28").run();
    model.result("pg28").set("allowtableupdate", false);
    model.result("pg28").set("hasbeenplotted", true);
    model.result("pg28").feature("iso1").feature("col1").set("rangeunit", "");
    model.result("pg28").feature("iso1").feature("col1").set("rangecolormin", 0);
    model.result("pg28").feature("iso1").feature("col1").set("rangecolormax", 0.9999928474259894);
    model.result("pg28").feature("iso1").feature("col1").set("rangecoloractive", "off");
    model.result("pg28").feature("iso1").feature("col1").set("rangedatamin", 0);
    model.result("pg28").feature("iso1").feature("col1").set("rangedatamax", 0.9999928474259894);
    model.result("pg28").feature("iso1").feature("col1").set("rangedataactive", "off");
    model.result("pg28").feature("iso1").feature("col1")
         .set("rangeactualminmax", new double[]{0, 0.9999928474259894});
    model.result("pg28").feature("iso1").set("hasbeenplotted", true);
    model.result("pg28").set("renderdatacached", false);
    model.result("pg28").set("allowtableupdate", true);
    model.result("pg28").set("renderdatacached", true);
    model.result().table("evl3")
         .addRow(new double[]{0.1360470469718531, 0.11139886789800979, -1.2897965533962295, 0.11399250423058283});
    model.result("pg28").setIndex("looplevel", "29", 1);
    model.result("pg28").run();
    model.result("pg28").set("allowtableupdate", false);
    model.result("pg28").set("hasbeenplotted", true);
    model.result("pg28").feature("iso1").feature("col1").set("rangeunit", "");
    model.result("pg28").feature("iso1").feature("col1").set("rangecolormin", 0);
    model.result("pg28").feature("iso1").feature("col1").set("rangecolormax", 0.9999791753787285);
    model.result("pg28").feature("iso1").feature("col1").set("rangecoloractive", "off");
    model.result("pg28").feature("iso1").feature("col1").set("rangedatamin", 0);
    model.result("pg28").feature("iso1").feature("col1").set("rangedatamax", 0.9999791753787285);
    model.result("pg28").feature("iso1").feature("col1").set("rangedataactive", "off");
    model.result("pg28").feature("iso1").feature("col1")
         .set("rangeactualminmax", new double[]{0, 0.9999791753787285});
    model.result("pg28").feature("iso1").set("hasbeenplotted", true);
    model.result("pg28").set("renderdatacached", false);
    model.result("pg28").set("allowtableupdate", true);
    model.result("pg28").set("renderdatacached", true);
    model.result().table("evl3")
         .addRow(new double[]{0.15036477575535967, 0.13663016229952163, -1.420639415522579, 0.26140006854913395});
    model.result().table("evl3")
         .addRow(new double[]{0.14307798516062276, 0.1343935824000917, -1.364468793296518, 0.1612223479142032});
    model.result().table("evl3")
         .addRow(new double[]{0.15853504804306118, 0.12126147116697639, -1.3632009164925734, 0.12570493729869947});
    model.result("pg28").setIndex("looplevel", "30", 1);
    model.result("pg28").run();
    model.result("pg28").set("allowtableupdate", false);
    model.result("pg28").set("hasbeenplotted", true);
    model.result("pg28").feature("iso1").feature("col1").set("rangeunit", "");
    model.result("pg28").feature("iso1").feature("col1").set("rangecolormin", 0);
    model.result("pg28").feature("iso1").feature("col1").set("rangecolormax", 0.999961631482178);
    model.result("pg28").feature("iso1").feature("col1").set("rangecoloractive", "off");
    model.result("pg28").feature("iso1").feature("col1").set("rangedatamin", 0);
    model.result("pg28").feature("iso1").feature("col1").set("rangedatamax", 0.999961631482178);
    model.result("pg28").feature("iso1").feature("col1").set("rangedataactive", "off");
    model.result("pg28").feature("iso1").feature("col1")
         .set("rangeactualminmax", new double[]{0, 0.999961631482178});
    model.result("pg28").feature("iso1").set("hasbeenplotted", true);
    model.result("pg28").set("renderdatacached", false);
    model.result("pg28").set("allowtableupdate", true);
    model.result("pg28").set("renderdatacached", true);
    model.result().table("evl3")
         .addRow(new double[]{0.17968497716826937, 0.13096685627605775, -1.4176990990878287, 0.10941553788879901});
    model.result("pg28").setIndex("looplevel", "31", 1);
    model.result("pg28").run();
    model.result("pg28").set("allowtableupdate", false);
    model.result("pg28").set("hasbeenplotted", true);
    model.result("pg28").feature("iso1").feature("col1").set("rangeunit", "");
    model.result("pg28").feature("iso1").feature("col1").set("rangecolormin", 0);
    model.result("pg28").feature("iso1").feature("col1").set("rangecolormax", 0.9999433253690613);
    model.result("pg28").feature("iso1").feature("col1").set("rangecoloractive", "off");
    model.result("pg28").feature("iso1").feature("col1").set("rangedatamin", 0);
    model.result("pg28").feature("iso1").feature("col1").set("rangedatamax", 0.9999433253690613);
    model.result("pg28").feature("iso1").feature("col1").set("rangedataactive", "off");
    model.result("pg28").feature("iso1").feature("col1")
         .set("rangeactualminmax", new double[]{0, 0.9999433253690613});
    model.result("pg28").feature("iso1").set("hasbeenplotted", true);
    model.result("pg28").set("renderdatacached", false);
    model.result("pg28").set("allowtableupdate", true);
    model.result("pg28").set("renderdatacached", true);
    model.result().table("evl3")
         .addRow(new double[]{0.17836276790444527, 0.1511356981136569, -1.4362816418834001, 0.09216193790331828});
    model.result("pg28").setIndex("looplevel", "32", 1);
    model.result("pg28").run();
    model.result("pg28").set("allowtableupdate", false);
    model.result("pg28").set("hasbeenplotted", true);
    model.result("pg28").feature("iso1").feature("col1").set("rangeunit", "");
    model.result("pg28").feature("iso1").feature("col1").set("rangecolormin", 0);
    model.result("pg28").feature("iso1").feature("col1").set("rangecolormax", 0.9999066532532646);
    model.result("pg28").feature("iso1").feature("col1").set("rangecoloractive", "off");
    model.result("pg28").feature("iso1").feature("col1").set("rangedatamin", 0);
    model.result("pg28").feature("iso1").feature("col1").set("rangedatamax", 0.9999066532532646);
    model.result("pg28").feature("iso1").feature("col1").set("rangedataactive", "off");
    model.result("pg28").feature("iso1").feature("col1")
         .set("rangeactualminmax", new double[]{0, 0.9999066532532646});
    model.result("pg28").feature("iso1").set("hasbeenplotted", true);
    model.result("pg28").set("renderdatacached", false);
    model.result("pg28").set("allowtableupdate", true);
    model.result("pg28").set("renderdatacached", true);
    model.result().table("evl3")
         .addRow(new double[]{0.17430363243129587, 0.1895727331664927, -1.5116000982559696, 0.15011949388420653});
    model.result().table("evl3")
         .addRow(new double[]{0.20052703140058137, 0.16138099461156763, -1.4905917805824795, 0.11028077016824175});
    model.result().table("evl3")
         .addRow(new double[]{0.1968762123799599, 0.15997677631820695, -1.472039826687839, 0.08729443847324232});
    model.result("pg28").setIndex("looplevel", "33", 1);
    model.result("pg28").run();
    model.result("pg28").set("allowtableupdate", false);
    model.result("pg28").set("hasbeenplotted", true);
    model.result("pg28").feature("iso1").feature("col1").set("rangeunit", "");
    model.result("pg28").feature("iso1").feature("col1").set("rangecolormin", 0);
    model.result("pg28").feature("iso1").feature("col1").set("rangecolormax", 0.9998554440879135);
    model.result("pg28").feature("iso1").feature("col1").set("rangecoloractive", "off");
    model.result("pg28").feature("iso1").feature("col1").set("rangedatamin", 0);
    model.result("pg28").feature("iso1").feature("col1").set("rangedatamax", 0.9998554440879135);
    model.result("pg28").feature("iso1").feature("col1").set("rangedataactive", "off");
    model.result("pg28").feature("iso1").feature("col1")
         .set("rangeactualminmax", new double[]{0, 0.9998554440879135});
    model.result("pg28").feature("iso1").set("hasbeenplotted", true);
    model.result("pg28").set("renderdatacached", false);
    model.result("pg28").set("allowtableupdate", true);
    model.result("pg28").set("renderdatacached", true);
    model.result().table("evl3")
         .addRow(new double[]{0.20644307276594231, 0.1843057625967055, -1.546248470005452, 0.14384799925378164});
    model.result().table("evl3")
         .addRow(new double[]{0.19631595496488874, 0.18054095188120312, -1.4905110824854453, 0.06222740080013417});
    model.result().table("evl3")
         .addRow(new double[]{0.2008469727554858, 0.18241635831958125, -1.5089505808351107, 0.07391649847991205});
    model.result().table("evl3")
         .addRow(new double[]{0.20384004550456902, 0.18346588351787196, -1.527575854321678, 0.11151805731668993});
    model.result().table("evl3")
         .addRow(new double[]{-0.23260963011668823, 0.11642984133852606, 1.2570000612532526, 0.052155855609337616});
    model.result().numerical().create("min1", "MinSurface");
    model.result().numerical("min1").set("data", "iso1");
    model.result().numerical("min1").set("innerinput", "manual");
    model.result().numerical("min1").set("solnum", new String[]{"1"});
    model.result().numerical("min1").set("innerinput", "manualindices");
    model.result().numerical("min1").set("solnumindices", "range(1,10,421)");
    model.result().numerical("min1").set("expr", "z*(lz(bn,en,moag,5)>0.1)");
    model.result().numerical("min1").set("solnumindices", "1");
    model.result().table().create("tbl40", "Table");
    model.result().table("tbl40").comments("Surface Minimum 1 (z*(lz(bn,en,moag,5)>0.1))");
    model.result().numerical("min1").set("table", "tbl40");
    model.result().numerical("min1").setResult();
    model.result().numerical("min1").set("expr", "z+(lz(bn,en,moag,5)<0.1)*10");
    model.result().numerical("min1").set("table", "tbl40");
    model.result().numerical("min1").appendResult();
    model.result().numerical("min1").set("expr", "abs(z)+(lz(bn,en,moag,5)<0.1)*10");
    model.result().numerical("min1").set("table", "tbl40");
    model.result().numerical("min1").appendResult();
    model.result().numerical("min1").set("expr", "abs(z)+(lz(bn,en,moag,5)<0.1)*10+(abs(x)>2)*10+(abs(y)>1)*10");
    model.result().numerical("min1").set("table", "tbl40");
    model.result().numerical("min1").appendResult();
    model.result().numerical("min1").set("refine", "1");
    model.result().numerical("min1").set("table", "tbl40");
    model.result().numerical("min1").appendResult();
    model.result().numerical("min1").set("expr", "abs(1+z)+(lz(bn,en,moag,5)<0.1)*10+(abs(x)>2)*10+(abs(y)>1)*10");
    model.result().numerical("min1").set("table", "tbl40");
    model.result().numerical("min1").appendResult();
    model.result().numerical("min1")
         .set("expr", "abs(z)+(lz(bn,en,moag,5)<0.1)*10+(abs(x)>.002)*10+(abs(y)>.001)*10");
    model.result().numerical("min1").set("table", "tbl40");
    model.result().numerical("min1").appendResult();
    model.result().numerical("min1").set("solnumindices", "range(1,10,421)");
    model.result().table().create("tbl41", "Table");
    model.result().table("tbl41")
         .comments("Surface Minimum 1 (abs(z)+(lz(bn,en,moag,5)<0.1)*10+(abs(x)>.002)*10+(abs(y)>.001)*10)");
    model.result().numerical("min1").set("table", "tbl41");
    model.result().numerical("min1").setResult();
    model.result().create("pg35", 1);
    model.result("pg35").set("data", "none");
    model.result("pg35").create("tblp1", "Table");
    model.result("pg35").feature("tblp1").set("table", "tbl41");
    model.result("pg35").feature("tblp1").set("xaxisdata", "2");
    model.result("pg35").feature("tblp1").set("plotcolumninput", "manual");
    model.result("pg35").feature("tblp1").set("plotcolumns", new String[]{"3"});
    model.result("pg35").run();
    model.result().numerical("min1").set("refine", "3");
    model.result("pg35").label("Loss Location");
    model.result("pg35").set("xlabelactive", "on");
    model.result("pg35").set("ylabelactive", "on");
    model.result("pg35").set("ylabel", "z-axis distance (mm)");
    model.result("pg35").set("titletype", "manual");
    model.result("pg35").set("title", "Loss Distance from Center");
    model.result("pg35").run();
    model.result("pg35").feature("tblp1").set("preprocx", "linear");
    model.result("pg35").feature("tblp1").set("scalingx", "1e4");
    model.result("pg35").run();
    model.result("pg35").set("xlabel", "Offset B (Gauss)");
    model.result("pg35").run();
    model.result("pg35").feature("tblp1").set("legendmethod", "manual");
    model.result("pg35").feature("tblp1").setIndex("legends", "Zero Pin Offset", 0);
    model.result("pg35").run();
    model.result("pg35").feature("tblp1").set("legend", "on");
    model.result("pg35").run();

    model.study("std1").feature("param").setIndex("plistarr", "range(1.5e-2,5.0e-2,1.65e-2)", 0);

    model.sol("sol48").study("std1");

    model.study("std1").feature("stat").set("notlistsolnum", 1);
    model.study("std1").feature("stat").set("notsolnum", "1");
    model.study("std1").feature("stat").set("listsolnum", 1);
    model.study("std1").feature("stat").set("solnum", "1");

    model.sol("sol48").feature().remove("s1");
    model.sol("sol48").feature().remove("v1");
    model.sol("sol48").feature().remove("st1");
    model.sol("sol48").create("st1", "StudyStep");
    model.sol("sol48").feature("st1").set("study", "std1");
    model.sol("sol48").feature("st1").set("studystep", "stat");
    model.sol("sol48").create("v1", "Variables");

    return model;
  }

  public static Model run33(Model model) {
    model.sol("sol48").feature("v1").set("control", "stat");
    model.sol("sol48").create("s1", "Stationary");
    model.sol("sol48").feature("s1").create("se1", "Segregated");
    model.sol("sol48").feature("s1").feature("se1").feature().remove("ssDef");
    model.sol("sol48").feature("s1").feature("se1").create("ss1", "SegregatedStep");
    model.sol("sol48").feature("s1").feature("se1").feature("ss1").set("segvar", new String[]{"mod1_V"});
    model.sol("sol48").feature("s1").create("i1", "Iterative");
    model.sol("sol48").feature("s1").feature("i1").set("linsolver", "cg");
    model.sol("sol48").feature("s1").feature("i1").create("mg1", "Multigrid");
    model.sol("sol48").feature("s1").feature("i1").feature("mg1").set("prefun", "amg");
    model.sol("sol48").feature("s1").feature("se1").feature("ss1").set("linsolver", "i1");
    model.sol("sol48").feature("s1").feature("se1").create("ss2", "SegregatedStep");
    model.sol("sol48").feature("s1").feature("se1").feature("ss2").set("segvar", new String[]{"mod1_Vm"});
    model.sol("sol48").feature("s1").create("i2", "Iterative");
    model.sol("sol48").feature("s1").feature("i2").set("linsolver", "cg");
    model.sol("sol48").feature("s1").feature("i2").create("mg1", "Multigrid");
    model.sol("sol48").feature("s1").feature("i2").feature("mg1").set("prefun", "amg");
    model.sol("sol48").feature("s1").feature("se1").feature("ss2").set("linsolver", "i2");
    model.sol("sol48").feature("s1").feature().remove("fcDef");
    model.sol("sol48").attach("std1");

    model.batch("p3").feature().remove("so1");
    model.batch("p3").create("so1", "Solutionseq");
    model.batch("p3").feature("so1").set("seq", "sol48");
    model.batch("p3").feature("so1").set("store", "on");
    model.batch("p3").feature("so1").set("clear", "on");
    model.batch("p3").feature("so1").set("psol", "sol49");
    model.batch("p3").set("pname", new String[]{"poff"});
    model.batch("p3").set("plistarr", new String[]{"range(1.5e-2,5.0e-2,1.65e-2)"});
    model.batch("p3").set("sweeptype", "sparse");
    model.batch("p3").set("probesel", "all");
    model.batch("p3").set("probes", new String[]{"pdom1"});
    model.batch("p3").set("plot", "off");
    model.batch("p3").set("err", "on");
    model.batch("p3").set("pdistrib", "off");
    model.batch("p3").attach("std1");
    model.batch("p3").set("control", "param");

    model.probe("pdom1").genResult("none");

    model.batch("p3").run();

    model.study("std2").feature("stat").set("notsoluse", "sol57");
    model.study("std1").feature("param").setIndex("plistarr", "range(.015,.05,.165)", 0);

    model.geom("geom1").run();

    model.param().set("poff", ".015");

    model.geom("geom1").run("fin");

    model.mesh("mesh1").run();

    model.view("view1").hideEntities("hide1").add(new int[]{13});
    model.view("view1").hideEntities("hide1").add(new int[]{11});

    model.mesh("mesh1").feature("ref1").selection().set(new int[]{6, 7, 8, 9, 10, 16, 18, 21});

    model.view("view1").hideEntities("hide1").add(new int[]{6});
    model.view("view1").hideObjects().clear();
    model.view("view1").hideEntities().clear();
    model.view("view1").hideEntities().create("hide1");
    model.view("view1").hideEntities("hide1").geom(3);
    model.view("view1").hideEntities("hide1").add(new int[]{1});
    model.view("view1").hideEntities("hide1").add(new int[]{23});
    model.view("view1").hideEntities("hide1").add(new int[]{4});
    model.view("view1").hideEntities("hide1").add(new int[]{5});
    model.view("view1").hideEntities("hide1").add(new int[]{22});
    model.view("view1").hideEntities("hide1").add(new int[]{19});
    model.view("view1").hideEntities("hide1").add(new int[]{20});
    model.view("view1").hideEntities("hide1").add(new int[]{2});
    model.view("view1").hideEntities("hide1").add(new int[]{3});
    model.view("view1").hideEntities("hide1").add(new int[]{13});
    model.view("view1").hideEntities("hide1").add(new int[]{12});
    model.view("view1").hideEntities("hide1").add(new int[]{15});
    model.view("view1").hideEntities("hide1").add(new int[]{14});

    model.mesh("mesh1").feature("ref1").selection().set(new int[]{6, 7, 8, 9, 10, 11, 16, 17, 18, 21});
    model.mesh("mesh1").run();

    model.sol("sol48").study("std1");

    model.study("std1").feature("stat").set("notlistsolnum", 1);
    model.study("std1").feature("stat").set("notsolnum", "1");
    model.study("std1").feature("stat").set("listsolnum", 1);
    model.study("std1").feature("stat").set("solnum", "1");

    model.sol("sol48").feature().remove("s1");
    model.sol("sol48").feature().remove("v1");
    model.sol("sol48").feature().remove("st1");
    model.sol("sol48").create("st1", "StudyStep");
    model.sol("sol48").feature("st1").set("study", "std1");
    model.sol("sol48").feature("st1").set("studystep", "stat");
    model.sol("sol48").create("v1", "Variables");
    model.sol("sol48").feature("v1").set("control", "stat");
    model.sol("sol48").create("s1", "Stationary");
    model.sol("sol48").feature("s1").create("se1", "Segregated");
    model.sol("sol48").feature("s1").feature("se1").feature().remove("ssDef");
    model.sol("sol48").feature("s1").feature("se1").create("ss1", "SegregatedStep");
    model.sol("sol48").feature("s1").feature("se1").feature("ss1").set("segvar", new String[]{"mod1_V"});
    model.sol("sol48").feature("s1").create("i1", "Iterative");
    model.sol("sol48").feature("s1").feature("i1").set("linsolver", "cg");
    model.sol("sol48").feature("s1").feature("i1").create("mg1", "Multigrid");
    model.sol("sol48").feature("s1").feature("i1").feature("mg1").set("prefun", "amg");
    model.sol("sol48").feature("s1").feature("se1").feature("ss1").set("linsolver", "i1");
    model.sol("sol48").feature("s1").feature("se1").create("ss2", "SegregatedStep");
    model.sol("sol48").feature("s1").feature("se1").feature("ss2").set("segvar", new String[]{"mod1_Vm"});
    model.sol("sol48").feature("s1").create("i2", "Iterative");
    model.sol("sol48").feature("s1").feature("i2").set("linsolver", "cg");
    model.sol("sol48").feature("s1").feature("i2").create("mg1", "Multigrid");
    model.sol("sol48").feature("s1").feature("i2").feature("mg1").set("prefun", "amg");
    model.sol("sol48").feature("s1").feature("se1").feature("ss2").set("linsolver", "i2");
    model.sol("sol48").feature("s1").feature().remove("fcDef");
    model.sol("sol48").attach("std1");

    model.batch("p3").feature().remove("so1");
    model.batch("p3").create("so1", "Solutionseq");
    model.batch("p3").feature("so1").set("seq", "sol48");
    model.batch("p3").feature("so1").set("store", "on");
    model.batch("p3").feature("so1").set("clear", "on");
    model.batch("p3").feature("so1").set("psol", "sol49");
    model.batch("p3").set("pname", new String[]{"poff"});
    model.batch("p3").set("plistarr", new String[]{"range(.015,.05,.165)"});
    model.batch("p3").set("sweeptype", "sparse");
    model.batch("p3").set("probesel", "all");
    model.batch("p3").set("probes", new String[]{"pdom1"});
    model.batch("p3").set("plot", "off");
    model.batch("p3").set("err", "on");
    model.batch("p3").set("pdistrib", "off");
    model.batch("p3").attach("std1");
    model.batch("p3").set("control", "param");

    model.probe("pdom1").genResult("none");

    model.batch().remove("p3");

    model.result().dataset("dset8").set("solution", "none");
    model.result().dataset("dset10").set("solution", "none");
    model.result().dataset("dset11").set("solution", "none");

    model.sol().remove("sol48");
    model.sol().remove("sol49");

    model.view("view1").hideObjects().clear();
    model.view("view1").hideEntities().clear();

    model.physics("es").feature("pot1").selection().set(new int[]{21, 22, 23, 24, 25, 26});

    model.view("view1").hideEntities().create("hide1");
    model.view("view1").hideEntities("hide1").geom(3);
    model.view("view1").hideEntities("hide1").add(new int[]{1});
    model.view("view1").hideEntities("hide1").add(new int[]{6});
    model.view("view1").hideEntities("hide1").add(new int[]{14});
    model.view("view1").hideEntities("hide1").add(new int[]{10});
    model.view("view1").hideEntities("hide1").add(new int[]{9});
    model.view("view1").hideEntities("hide1").add(new int[]{12});
    model.view("view1").hideEntities("hide1").add(new int[]{16});

    model.sol().create("sol57");
    model.sol("sol57").study("std1");

    model.study("std1").feature("stat").set("notlistsolnum", 1);
    model.study("std1").feature("stat").set("notsolnum", "1");
    model.study("std1").feature("stat").set("listsolnum", 1);
    model.study("std1").feature("stat").set("solnum", "1");

    model.sol("sol57").create("st1", "StudyStep");
    model.sol("sol57").feature("st1").set("study", "std1");
    model.sol("sol57").feature("st1").set("studystep", "stat");
    model.sol("sol57").create("v1", "Variables");
    model.sol("sol57").feature("v1").set("control", "stat");
    model.sol("sol57").create("s1", "Stationary");
    model.sol("sol57").feature("s1").create("se1", "Segregated");
    model.sol("sol57").feature("s1").feature("se1").feature().remove("ssDef");
    model.sol("sol57").feature("s1").feature("se1").create("ss1", "SegregatedStep");
    model.sol("sol57").feature("s1").feature("se1").feature("ss1").set("segvar", new String[]{"mod1_V"});
    model.sol("sol57").feature("s1").create("i1", "Iterative");
    model.sol("sol57").feature("s1").feature("i1").set("linsolver", "cg");
    model.sol("sol57").feature("s1").feature("i1").create("mg1", "Multigrid");
    model.sol("sol57").feature("s1").feature("i1").feature("mg1").set("prefun", "amg");
    model.sol("sol57").feature("s1").feature("se1").feature("ss1").set("linsolver", "i1");
    model.sol("sol57").feature("s1").feature("se1").create("ss2", "SegregatedStep");
    model.sol("sol57").feature("s1").feature("se1").feature("ss2").set("segvar", new String[]{"mod1_Vm"});
    model.sol("sol57").feature("s1").create("i2", "Iterative");
    model.sol("sol57").feature("s1").feature("i2").set("linsolver", "cg");
    model.sol("sol57").feature("s1").feature("i2").create("mg1", "Multigrid");
    model.sol("sol57").feature("s1").feature("i2").feature("mg1").set("prefun", "amg");
    model.sol("sol57").feature("s1").feature("se1").feature("ss2").set("linsolver", "i2");
    model.sol("sol57").feature("s1").feature().remove("fcDef");
    model.sol("sol57").attach("std1");

    model.batch().create("p3", "Parametric");
    model.batch("p3").study("std1");
    model.batch("p3").create("so1", "Solutionseq");
    model.batch("p3").feature("so1").set("seq", "sol57");
    model.batch("p3").feature("so1").set("store", "on");
    model.batch("p3").feature("so1").set("clear", "on");
    model.batch("p3").feature("so1").set("psol", "none");
    model.batch("p3").set("pname", new String[]{"poff"});
    model.batch("p3").set("plistarr", new String[]{"range(.015,.05,.165)"});
    model.batch("p3").set("sweeptype", "sparse");
    model.batch("p3").set("probesel", "all");
    model.batch("p3").set("probes", new String[]{"pdom1"});
    model.batch("p3").set("plot", "off");
    model.batch("p3").set("err", "on");
    model.batch("p3").set("pdistrib", "off");
    model.batch("p3").attach("std1");
    model.batch("p3").set("control", "param");

    model.sol().create("sol58");
    model.sol("sol58").study("std1");
    model.sol("sol58").label("Parametric Solutions 1");

    model.batch("p3").feature("so1").set("psol", "sol58");

    model.result().create("pg36", "PlotGroup3D");
    model.result("pg36").label("Magnetic Flux Density Norm (mfnc) 2");
    model.result("pg36").set("data", "dset16");
    model.result("pg36").set("oldanalysistype", "noneavailable");
    model.result("pg36").set("outertype", "none");
    model.result("pg36").set("data", "dset16");
    model.result("pg36").feature().create("mslc1", "Multislice");
    model.result("pg36").feature("mslc1").set("oldanalysistype", "noneavailable");
    model.result("pg36").feature("mslc1").set("expr", "mfnc.normB");
    model.result("pg36").feature("mslc1").set("data", "parent");
    model.result().create("pg37", "PlotGroup3D");
    model.result("pg37").label("Electric Potential (es) 2");
    model.result("pg37").set("data", "dset16");
    model.result("pg37").set("oldanalysistype", "noneavailable");
    model.result("pg37").set("outertype", "none");
    model.result("pg37").set("frametype", "spatial");
    model.result("pg37").set("data", "dset16");
    model.result("pg37").feature().create("mslc1", "Multislice");
    model.result("pg37").feature("mslc1").set("oldanalysistype", "noneavailable");
    model.result("pg37").feature("mslc1").set("expr", "V");
    model.result("pg37").feature("mslc1").set("data", "parent");

    model.probe("pdom1").genResult("none");

    model.batch("p3").run();

    model.study("std2").feature("stat").set("notsol", "sol58");
    model.study("std2").feature("stat").set("notsoluse", "sol59");
    model.study("std2").feature("stat").set("notsolnum", "1");
    model.study("std3").feature("stat").set("notsol", "sol58");
    model.study("std3").feature("stat").set("notsoluse", "sol60");
    model.study("std3").feature("stat").set("notsolnum", "1");
    model.study("std4").feature("stat").set("notsol", "sol58");
    model.study("std4").feature("stat").set("notsoluse", "sol61");
    model.study("std4").feature("stat").set("notsolnum", "1");
    model.study("std5").feature("stat").set("notsol", "sol58");
    model.study("std5").feature("stat").set("notsoluse", "sol62");
    model.study("std5").feature("stat").set("notsolnum", "1");

    model.probe("pdom1").genResult("none");

    model.sol("sol47").runAll();

    model.result("pg28").run();

    model.view("view1").hideObjects().clear();
    model.view("view1").hideEntities().clear();
    model.view("view1").hideEntities().create("hide1");
    model.view("view1").hideEntities("hide1").geom(3);
    model.view("view1").hideEntities("hide1").add(new int[]{1});
    model.view("view1").hideEntities("hide1").add(new int[]{5});
    model.view("view1").hideEntities("hide1").add(new int[]{22});
    model.view("view1").hideEntities("hide1").add(new int[]{2});
    model.view("view1").hideEntities("hide1").add(new int[]{4});
    model.view("view1").hideEntities("hide1").add(new int[]{23});
    model.view("view1").hideEntities("hide1").add(new int[]{3});
    model.view("view1").hideEntities("hide1").add(new int[]{12});
    model.view("view1").hideEntities("hide1").add(new int[]{13});
    model.view("view1").hideEntities("hide1").add(new int[]{15});
    model.view("view1").hideEntities("hide1").add(new int[]{14});
    model.view("view1").hideEntities("hide1").add(new int[]{20});
    model.view("view1").hideEntities("hide1").add(new int[]{19});
    model.view("view1").hideEntities("hide1").add(new int[]{8});
    model.view("view1").hideEntities("hide1").add(new int[]{7});
    model.view("view1").hideEntities("hide1").add(new int[]{17});
    model.view("view1").hideEntities("hide1").add(new int[]{21});
    model.view("view1").hideEntities("hide1").add(new int[]{18});
    model.view("view1").hideEntities("hide1").add(new int[]{11});

    model.result("pg28").run();
    model.result("pg28").set("data", "dset7");
    model.result("pg28").run();
    model.result("pg28").setIndex("looplevel", "22", 1);
    model.result("pg28").run();
    model.result("pg28").set("data", "dset12");
    model.result("pg28").run();
    model.result("pg28").set("data", "dset13");

    model.probe("pdom1").genResult("none");

    model.sol("sol54").runAll();

    model.probe("pdom1").genResult("none");

    model.sol("sol55").runAll();

    model.probe("pdom1").genResult("none");

    model.sol("sol56").runAll();

    model.result("pg28").run();
    model.result("pg28").set("data", "dset14");
    model.result("pg28").run();
    model.result("pg28").set("data", "dset16");
    model.result("pg28").setIndex("looplevel", "1", 0);
    model.result("pg28").run();
    model.result("pg28").set("data", "dset7");
    model.result("pg28").run();
    model.result("pg28").setIndex("looplevel", "24", 1);
    model.result("pg28").run();

    model.study().create("std6");
    model.study("std6").create("stat", "Stationary");
    model.study("std6").feature("stat").activate("mfnc", true);
    model.study("std6").feature("stat").activate("es", true);
    model.study("std6").feature("stat").label("Add Efield");
    model.study("std6").create("param", "Parametric");
    model.study("std6").feature("param").setIndex("pname", "rd", 0);
    model.study("std6").feature("param").setIndex("plistarr", "", 0);
    model.study("std6").feature("param").setIndex("punit", "", 0);
    model.study("std6").feature("param").setIndex("pname", "rd", 0);
    model.study("std6").feature("param").setIndex("plistarr", "", 0);
    model.study("std6").feature("param").setIndex("punit", "", 0);
    model.study("std6").feature("param").setIndex("pname", "vm1", 0);
    model.study("std6").feature("param").setIndex("plistarr", "range(20,20,20)", 0);

    model.view("view1").hideObjects().clear();
    model.view("view1").hideEntities().clear();
    model.view("view1").hideEntities().create("hide1");
    model.view("view1").hideEntities("hide1").geom(3);
    model.view("view1").hideEntities("hide1").add(new int[]{1});

    model.result().table().remove("tbl36");
    model.result().table().remove("tbl37");
    model.result().table().remove("tbl38");
    model.result().table().remove("tbl39");
    model.result().table().remove("tbl40");
    model.result().table("tbl41").label("Loss Minima");
    model.result().table().create("tbl42", "Table");
    model.result().table().remove("tbl42");
    model.result().numerical("int3").set("tablecols", "level1");
    model.result().table().create("tbl42", "Table");
    model.result().table("tbl42")
         .comments("15um (1e12*lz(bn,en,moag,5)*bw(bn,en,ang,enm,temp)*(abs(z)<1.5e-3)*(abs(x)<2.5e-3)*(abs(y)<0.9e-3))");
    model.result().numerical("int3").set("table", "tbl42");
    model.result().table().create("tbl43", "Table");
    model.result().table("tbl43")
         .comments("15um (1e12*lz(bn,en,moag,5)*bw(bn,en,ang,enm,temp)*(abs(z)<1.5e-3)*(abs(x)<2.5e-3)*(abs(y)<0.9e-3))");
    model.result().numerical("int3").set("table", "tbl43");
    model.result().table().remove("tbl42");
    model.result().table("tbl43").label("15um");
    model.result().table("tbl43").set("storetable", "inmodelandonfile");
    model.result().table("tbl43")
         .set("filename", "R:\\COMSOL files\\Magnetoelectrostatic Cloverleaf\\15umTable.txt");
    model.result().table("tbl43").set("needsupdate", false);
    model.result().table("tbl43").set("appliedstoretable", "inmodelandonfile");
    model.result().table("tbl43")
         .set("appliedfilename", "R:\\COMSOL files\\Magnetoelectrostatic Cloverleaf\\15umTable.txt");
    model.result().table().create("tbl44", "Table");
    model.result().table("tbl44")
         .comments("15um (1e12*lz(bn,en,moag,5)*bw(bn,en,ang,enm,temp)*(abs(z)<1.5e-3)*(abs(x)<2.5e-3)*(abs(y)<0.9e-3))");
    model.result().numerical("int3").set("table", "tbl44");
    model.result().table().remove("tbl44");

    model.study().create("std7");
    model.study("std7").create("stat", "Stationary");
    model.study("std7").feature("stat").activate("mfnc", true);
    model.study("std7").feature("stat").activate("es", true);
    model.study("std7").feature("stat").set("physselection", "mfnc");
    model.study("std7").feature("stat").set("activate", new String[]{"mfnc", "off", "es", "on"});
    model.study("std7").feature("stat").set("physselection", "mfnc");
    model.study("std7").feature("stat").set("activate", new String[]{"mfnc", "off", "es", "off"});
    model.study("std7").feature("stat").set("usesol", "on");
    model.study("std7").feature("stat").set("notsolmethod", "sol");
    model.study("std7").feature("stat").set("notstudy", "std6");

    model.sol().create("sol63");
    model.sol("sol63").study("std6");

    model.study("std6").feature("stat").set("notlistsolnum", 1);
    model.study("std6").feature("stat").set("notsolnum", "1");
    model.study("std6").feature("stat").set("listsolnum", 1);
    model.study("std6").feature("stat").set("solnum", "1");

    model.sol("sol63").create("st1", "StudyStep");
    model.sol("sol63").feature("st1").set("study", "std6");
    model.sol("sol63").feature("st1").set("studystep", "stat");
    model.sol("sol63").create("v1", "Variables");
    model.sol("sol63").feature("v1").set("control", "stat");
    model.sol("sol63").create("s1", "Stationary");
    model.sol("sol63").feature("s1").create("p1", "Parametric");
    model.sol("sol63").feature("s1").feature("p1").set("pname", new String[]{"vm1"});
    model.sol("sol63").feature("s1").feature("p1").set("plistarr", new String[]{"range(20,20,20)"});
    model.sol("sol63").feature("s1").feature("p1").set("punit", new String[]{""});
    model.sol("sol63").feature("s1").feature("p1").set("sweeptype", "sparse");
    model.sol("sol63").feature("s1").feature("p1").set("preusesol", "no");
    model.sol("sol63").feature("s1").feature("p1").set("pcontinuationmode", "no");
    model.sol("sol63").feature("s1").feature("p1").set("plot", "off");
    model.sol("sol63").feature("s1").feature("p1").set("plotgroup", "pg6");
    model.sol("sol63").feature("s1").feature("p1").set("probesel", "all");
    model.sol("sol63").feature("s1").feature("p1").set("probes", new String[]{"pdom1"});
    model.sol("sol63").feature("s1").feature("p1").set("control", "param");
    model.sol("sol63").feature("s1").set("control", "stat");
    model.sol("sol63").feature("s1").create("se1", "Segregated");
    model.sol("sol63").feature("s1").feature("se1").feature().remove("ssDef");
    model.sol("sol63").feature("s1").feature("se1").create("ss1", "SegregatedStep");
    model.sol("sol63").feature("s1").feature("se1").feature("ss1").set("segvar", new String[]{"mod1_V"});
    model.sol("sol63").feature("s1").create("i1", "Iterative");
    model.sol("sol63").feature("s1").feature("i1").set("linsolver", "cg");
    model.sol("sol63").feature("s1").feature("i1").create("mg1", "Multigrid");
    model.sol("sol63").feature("s1").feature("i1").feature("mg1").set("prefun", "amg");
    model.sol("sol63").feature("s1").feature("se1").feature("ss1").set("linsolver", "i1");
    model.sol("sol63").feature("s1").feature("se1").create("ss2", "SegregatedStep");
    model.sol("sol63").feature("s1").feature("se1").feature("ss2").set("segvar", new String[]{"mod1_Vm"});
    model.sol("sol63").feature("s1").create("i2", "Iterative");
    model.sol("sol63").feature("s1").feature("i2").set("linsolver", "cg");
    model.sol("sol63").feature("s1").feature("i2").create("mg1", "Multigrid");
    model.sol("sol63").feature("s1").feature("i2").feature("mg1").set("prefun", "amg");
    model.sol("sol63").feature("s1").feature("se1").feature("ss2").set("linsolver", "i2");
    model.sol("sol63").feature("s1").feature().remove("fcDef");
    model.sol("sol63").attach("std6");

    model.result().create("pg38", "PlotGroup3D");
    model.result("pg38").label("Magnetic Flux Density Norm (mfnc) 3");
    model.result("pg38").set("data", "dset17");
    model.result("pg38").set("oldanalysistype", "noneavailable");
    model.result("pg38").set("data", "dset17");
    model.result("pg38").feature().create("mslc1", "Multislice");
    model.result("pg38").feature("mslc1").set("oldanalysistype", "noneavailable");
    model.result("pg38").feature("mslc1").set("expr", "mfnc.normB");
    model.result("pg38").feature("mslc1").set("data", "parent");
    model.result().create("pg39", "PlotGroup3D");
    model.result("pg39").label("Electric Potential (es) 3");
    model.result("pg39").set("data", "dset17");
    model.result("pg39").set("oldanalysistype", "noneavailable");
    model.result("pg39").set("frametype", "spatial");
    model.result("pg39").set("data", "dset17");
    model.result("pg39").feature().create("mslc1", "Multislice");
    model.result("pg39").feature("mslc1").set("oldanalysistype", "noneavailable");
    model.result("pg39").feature("mslc1").set("expr", "V");
    model.result("pg39").feature("mslc1").set("data", "parent");

    model.probe("pdom1").genResult("none");

    model.sol("sol63").runAll();

    model.study("std7").feature("stat").set("notsolnum", "1");

    model.sol().create("sol64");
    model.sol("sol64").study("std7");

    model.study("std7").feature("stat").set("notlistsolnum", 1);
    model.study("std7").feature("stat").set("notsolnum", "1");
    model.study("std7").feature("stat").set("listsolnum", 1);
    model.study("std7").feature("stat").set("solnum", "1");

    model.sol("sol64").create("st1", "StudyStep");
    model.sol("sol64").feature("st1").set("study", "std7");
    model.sol("sol64").feature("st1").set("studystep", "stat");
    model.sol("sol64").create("v1", "Variables");
    model.sol("sol64").feature("v1").set("control", "stat");
    model.sol("sol64").create("s1", "Stationary");
    model.sol("sol64").attach("std7");

    model.probe("pdom1").genResult("none");

    model.sol("sol64").runAll();

    model.study("std7").feature("stat").set("useparam", "on");
    model.study("std7").feature("stat").setIndex("pname", "rd", 0);
    model.study("std7").feature("stat").setIndex("plistarr", "", 0);
    model.study("std7").feature("stat").setIndex("punit", "", 0);
    model.study("std7").feature("stat").setIndex("pname", "rd", 0);
    model.study("std7").feature("stat").setIndex("plistarr", "", 0);
    model.study("std7").feature("stat").setIndex("punit", "", 0);
    model.study("std7").feature("stat").setIndex("pname", "boffset", 0);
    model.study("std7").feature("stat").setIndex("plistarr", "range(-0.021,0.001,0.021)", 0);

    model.sol("sol64").study("std7");

    model.study("std7").feature("stat").set("notlistsolnum", 1);
    model.study("std7").feature("stat").set("notsolnum", "1");
    model.study("std7").feature("stat").set("listsolnum", 1);
    model.study("std7").feature("stat").set("solnum", "1");

    model.sol("sol64").feature().remove("s1");
    model.sol("sol64").feature().remove("v1");
    model.sol("sol64").feature().remove("st1");
    model.sol("sol64").create("st1", "StudyStep");
    model.sol("sol64").feature("st1").set("study", "std7");
    model.sol("sol64").feature("st1").set("studystep", "stat");
    model.sol("sol64").create("v1", "Variables");
    model.sol("sol64").feature("v1").set("control", "stat");
    model.sol("sol64").create("s1", "Stationary");
    model.sol("sol64").feature("s1").create("p1", "Parametric");
    model.sol("sol64").feature("s1").feature().remove("pDef");
    model.sol("sol64").feature("s1").feature("p1").set("control", "stat");
    model.sol("sol64").feature("s1").set("control", "stat");
    model.sol("sol64").attach("std7");

    model.probe("pdom1").genResult("none");

    model.study("std7").feature("stat").setIndex("pname", "rd", 1);
    model.study("std7").feature("stat").setIndex("plistarr", "", 1);
    model.study("std7").feature("stat").setIndex("punit", "", 1);
    model.study("std7").feature("stat").setIndex("pname", "rd", 1);
    model.study("std7").feature("stat").setIndex("plistarr", "", 1);
    model.study("std7").feature("stat").setIndex("punit", "", 1);
    model.study("std7").feature("stat").setIndex("pname", "temp", 1);
    model.study("std7").feature("stat").setIndex("pname", "rd", 2);
    model.study("std7").feature("stat").setIndex("plistarr", "", 2);
    model.study("std7").feature("stat").setIndex("punit", "", 2);
    model.study("std7").feature("stat").setIndex("pname", "rd", 2);
    model.study("std7").feature("stat").setIndex("plistarr", "", 2);
    model.study("std7").feature("stat").setIndex("punit", "", 2);
    model.study("std7").feature("stat").remove("pname", 2);
    model.study("std7").feature("stat").remove("punit", 2);
    model.study("std7").feature("stat").remove("plistarr", 2);
    model.study("std7").feature("stat").setIndex("plistarr", "range(.02,.02,.2)", 1);

    model.sol("sol64").study("std7");

    model.study("std7").feature("stat").set("notlistsolnum", 1);
    model.study("std7").feature("stat").set("notsolnum", "1");
    model.study("std7").feature("stat").set("listsolnum", 1);
    model.study("std7").feature("stat").set("solnum", "1");

    model.sol("sol64").feature().remove("s1");
    model.sol("sol64").feature().remove("v1");
    model.sol("sol64").feature().remove("st1");
    model.sol("sol64").create("st1", "StudyStep");
    model.sol("sol64").feature("st1").set("study", "std7");
    model.sol("sol64").feature("st1").set("studystep", "stat");
    model.sol("sol64").create("v1", "Variables");
    model.sol("sol64").feature("v1").set("control", "stat");
    model.sol("sol64").create("s1", "Stationary");
    model.sol("sol64").feature("s1").create("p1", "Parametric");
    model.sol("sol64").feature("s1").feature().remove("pDef");
    model.sol("sol64").feature("s1").feature("p1").set("control", "stat");
    model.sol("sol64").feature("s1").set("control", "stat");
    model.sol("sol64").attach("std7");

    model.probe("pdom1").genResult("none");

    model.study("std7").feature("stat").set("sweeptype", "filled");

    model.sol("sol64").study("std7");

    model.study("std7").feature("stat").set("notlistsolnum", 1);
    model.study("std7").feature("stat").set("notsolnum", "1");
    model.study("std7").feature("stat").set("listsolnum", 1);
    model.study("std7").feature("stat").set("solnum", "1");

    model.sol("sol64").feature().remove("s1");
    model.sol("sol64").feature().remove("v1");
    model.sol("sol64").feature().remove("st1");
    model.sol("sol64").create("st1", "StudyStep");
    model.sol("sol64").feature("st1").set("study", "std7");
    model.sol("sol64").feature("st1").set("studystep", "stat");
    model.sol("sol64").create("v1", "Variables");
    model.sol("sol64").feature("v1").set("control", "stat");
    model.sol("sol64").create("s1", "Stationary");
    model.sol("sol64").feature("s1").create("p1", "Parametric");
    model.sol("sol64").feature("s1").feature().remove("pDef");
    model.sol("sol64").feature("s1").feature("p1").set("control", "stat");
    model.sol("sol64").feature("s1").set("control", "stat");
    model.sol("sol64").attach("std7");

    model.probe("pdom1").genResult("none");

    model.sol("sol64").runAll();

    model.result().dataset().create("dset19", "Solution");
    model.result().dataset().create("dset20", "Solution");
    model.result().dataset().remove("dset19");
    model.result().dataset().remove("dset20");
    model.result().dataset().create("join1", "Join");
    model.result().dataset("join1").set("data", "dset18");
    model.result().dataset("join1").set("data2", "dset7");
    model.result("pg28").set("data", "dset18");
    model.result("pg28").run();

    model.view("view1").hideEntities("hide1").add(new int[]{23});
    model.view("view1").hideEntities("hide1").add(new int[]{4});
    model.view("view1").hideEntities("hide1").add(new int[]{2});
    model.view("view1").hideEntities("hide1").add(new int[]{20});
    model.view("view1").hideEntities("hide1").add(new int[]{14});
    model.view("view1").hideEntities("hide1").add(new int[]{15});
    model.view("view1").hideEntities("hide1").add(new int[]{22});
    model.view("view1").hideEntities("hide1").add(new int[]{5});
    model.view("view1").hideEntities("hide1").add(new int[]{3});
    model.view("view1").hideEntities("hide1").add(new int[]{19});
    model.view("view1").hideEntities("hide1").add(new int[]{12});
    model.view("view1").hideEntities("hide1").add(new int[]{13});

    return model;
  }

  public static Model run34(Model model) {

    model.result("pg28").run();
    model.result("pg28").setIndex("looplevel", "32", 1);
    model.result("pg28").run();
    model.result("pg28").set("data", "dset7");
    model.result("pg28").run();
    model.result("pg28").set("data", "dset18");
    model.result("pg28").run();
    model.result().dataset("join1").set("solutions", "all");
    model.result("pg28").set("title", "Loss Regions Comparing");
    model.result("pg28").feature().duplicate("iso2", "iso1");
    model.result("pg28").feature("iso2").set("data", "dset18");
    model.result("pg28").feature("iso2").setIndex("looplevel", "32", 1);
    model.result("pg29").set("window", "window1");
    model.result("pg28").feature("iso1").set("data", "dset7");
    model.result("pg28").run();
    model.result("pg28").feature("iso1").setIndex("looplevel", "32", 1);
    model.result("pg28").run();
    model.result("pg28").feature("iso1").setIndex("looplevel", "33", 1);
    model.result("pg28").run();
    model.result("pg28").set("title", "Loss Regions Adding 20V offset, 100G bias");
    model.result("pg28").run();
    model.result("pg28").feature("iso1").feature("col1").set("colorlegend", "off");
    model.result("pg28").run();
    model.result().numerical("int3").set("expr", "0");
    model.result().numerical("int3").set("intorder", "1");
    model.result().table().create("tbl44", "Table");
    model.result().table("tbl44").comments("15um (0)");
    model.result().numerical("int3").set("table", "tbl44");
    model.result().numerical("int3").setResult();
    model.result().table().duplicate("tbl45", "tbl44");
    model.result().numerical("int4").set("table", "tbl45");
    model.result().numerical("int4").set("tablecols", "level1");
    model.result().numerical("int4").set("table", "tbl45");
    model.result().numerical("int3")
         .set("expr", "1e12*lz(bn,en,moag,5)*bw(bn,en,ang,enm,temp)*(abs(z)<1.5e-3)*(abs(x)<2.5e-3)*(abs(y)<0.9e-3)");
    model.result().numerical("int6").set("tablecols", "level1");
    model.result().numerical("int5").set("tablecols", "level1");
    model.result().table().create("tbl46", "Table");
    model.result().table("tbl46")
         .comments("65um (1e12*lz(bn,en,moag,5)*bw(bn,en,ang,enm,temp)*(abs(z)<1.5e-3)*(abs(x)<2.5e-3)*(abs(y)<0.9e-3))");
    model.result().numerical("int4").set("table", "tbl46");
    model.result().table().create("tbl47", "Table");
    model.result().table("tbl47")
         .comments("15um (1e12*lz(bn,en,moag,5)*bw(bn,en,ang,enm,temp)*(abs(z)<1.5e-3)*(abs(x)<2.5e-3)*(abs(y)<0.9e-3))");
    model.result().numerical("int3").set("table", "tbl47");
    model.result().table().remove("tbl44");
    model.result().table().remove("tbl45");
    model.result().table().remove("tbl46");
    model.result().table().remove("tbl47");
    model.result().table().remove("tbl43");
    model.result().numerical("pev1").set("table", "tbl15");
    model.result().numerical("pev1").active(false);
    model.result().table().create("tbl42", "Table");
    model.result().table("tbl42")
         .comments("15um (1e12*lz(bn,en,moag,5)*bw(bn,en,ang,enm,temp)*(abs(z)<1.5e-3)*(abs(x)<2.5e-3)*(abs(y)<0.9e-3))");
    model.result().numerical("int3").set("table", "tbl42");
    model.result().numerical("int3").setResult();
    model.result().table().create("tbl43", "Table");
    model.result().table("tbl43")
         .comments("65um (1e12*lz(bn,en,moag,5)*bw(bn,en,ang,enm,temp)*(abs(z)<1.5e-3)*(abs(x)<2.5e-3)*(abs(y)<0.9e-3))");
    model.result().numerical("int4").set("table", "tbl43");
    model.result().numerical("int4").setResult();
    model.result().table().create("tbl44", "Table");
    model.result().table("tbl44")
         .comments("115um (1e12*lz(bn,en,moag,5)*bw(bn,en,ang,enm,temp)*(abs(z)<1.5e-3)*(abs(x)<2.5e-3)*(abs(y)<0.9e-3))");
    model.result().numerical("int5").set("table", "tbl44");
    model.result().numerical("int5").setResult();
    model.result().table().create("tbl45", "Table");
    model.result().table("tbl45")
         .comments("165um (1e12*lz(bn,en,moag,5)*bw(bn,en,ang,enm,temp)*(abs(z)<1.5e-3)*(abs(x)<2.5e-3)*(abs(y)<0.9e-3))");
    model.result().numerical("int6").set("table", "tbl45");
    model.result().numerical("int6").setResult();
    model.result().numerical("min1").set("table", "tbl41");
    model.result().numerical("min1").appendResult();
    model.result().table("tbl42").label("15um");
    model.result().table("tbl42").set("storetable", "inmodelandonfile");
    model.result().table("tbl42")
         .set("filename", "R:\\COMSOL files\\Magnetoelectrostatic Cloverleaf\\15umTable.txt");
    model.result().table("tbl42").set("needsupdate", false);
    model.result().table("tbl42").set("appliedstoretable", "inmodelandonfile");
    model.result().table("tbl42")
         .set("appliedfilename", "R:\\COMSOL files\\Magnetoelectrostatic Cloverleaf\\15umTable.txt");
    model.result().table("tbl43").label("65um");
    model.result().table("tbl43").set("storetable", "inmodelandonfile");
    model.result().table("tbl43")
         .set("filename", "R:\\COMSOL files\\Magnetoelectrostatic Cloverleaf\\65umTable.txt");
    model.result().table("tbl43").set("needsupdate", false);
    model.result().table("tbl43").set("appliedstoretable", "inmodelandonfile");
    model.result().table("tbl43")
         .set("appliedfilename", "R:\\COMSOL files\\Magnetoelectrostatic Cloverleaf\\65umTable.txt");
    model.result().table("tbl44").label("115um");
    model.result().table("tbl44").set("storetable", "inmodelandonfile");
    model.result().table("tbl44")
         .set("filename", "R:\\COMSOL files\\Magnetoelectrostatic Cloverleaf\\115umTable.txt");
    model.result().table("tbl44").set("needsupdate", false);
    model.result().table("tbl44").set("appliedstoretable", "inmodelandonfile");
    model.result().table("tbl44")
         .set("appliedfilename", "R:\\COMSOL files\\Magnetoelectrostatic Cloverleaf\\115umTable.txt");
    model.result().table("tbl45").label("165um");
    model.result().table("tbl45").set("storetable", "inmodelandonfile");
    model.result().table("tbl45")
         .set("filename", "R:\\COMSOL files\\Magnetoelectrostatic Cloverleaf\\165umTable.txt");
    model.result().table("tbl45").set("needsupdate", false);
    model.result().table("tbl45").set("appliedstoretable", "inmodelandonfile");
    model.result().table("tbl45")
         .set("appliedfilename", "R:\\COMSOL files\\Magnetoelectrostatic Cloverleaf\\165umTable.txt");
    model.result().export().create("data1", "Data");
    model.result().export("data1").set("data", "dset16");
    model.result().export("data1").setIndex("expr", "en", 0);
    model.result().export("data1").setIndex("expr", "bn", 0);
    model.result().export("data1").setIndex("expr", "en", 1);
    model.result().export("data1").setIndex("expr", "ang", 2);
    model.result().export("data1").set("location", "regulargrid");
    model.result().export("data1").set("gridstruct", "grid");
    model.result().export("data1").set("location", "grid");
    model.result().export("data1").set("gridx3", "range(-3,0.05,3)");
    model.result().export("data1").set("gridy3", "range(-1.5,0.05,1.5)");
    model.result().export("data1").set("gridz3", "range(-1.5,0.05,1.5)");
    model.result().export("data1").set("fullprec", "off");
    model.result().export("data1").set("gridz3", "range(-2,0.05,2)");
    model.result().export("data1").set("gridy3", "range(-2,0.05,2)");
    model.result().export("data1")
         .set("filename", "R:\\COMSOL files\\Magnetoelectrostatic Cloverleaf\\3D Field Files\\Broad322DynamicsNormOnly.dat");
    model.result().export("data1").set("gridz3", "range(-2.5,0.05,2.5)");
    model.result().export("data1").run();
    model.result().export("data1").set("gridx3", "range(0,0.05,3)");
    model.result().export("data1").set("gridy3", "range(0,0.05,2)");
    model.result().export("data1").set("allowdescrupdate", false);
    model.result().export("data1").move("expr", 0, 1, 1);
    model.result().export("data1").move("unit", 0, 1, 1);
    model.result().export("data1").move("descr", 0, 1, 1);
    model.result().export("data1").set("allowdescrupdate", true);
    model.result().remove("pg36");
    model.result().remove("pg37");
    model.result().remove("pg38");
    model.result().remove("pg39");
    model.result().remove("pg33");
    model.result().remove("pg34");
    model.result().create("pg36", "PlotGroup2D");
    model.result("pg36").create("surf1", "Surface");
    model.result("pg36").feature("surf1").set("data", "cpl1");
    model.result("pg36").feature("surf1").set("expr", "dom");
    model.result("pg36").run();
    model.result("pg36").set("allowtableupdate", false);
    model.result("pg36").set("title", "430: temp=0.2, boffset=0.021 Surface: Entity index");
    model.result("pg36").set("xlabel", "");
    model.result("pg36").set("ylabel", "");
    model.result("pg36").set("hasbeenplotted", true);
    model.result("pg36").feature("surf1").set("rangeunit", "");
    model.result("pg36").feature("surf1").set("rangecolormin", 5.999999999999999);
    model.result("pg36").feature("surf1").set("rangecolormax", 17.000000000000004);
    model.result("pg36").feature("surf1").set("rangecoloractive", "off");
    model.result("pg36").feature("surf1").set("rangedatamin", 5.999999999999999);
    model.result("pg36").feature("surf1").set("rangedatamax", 17.000000000000004);
    model.result("pg36").feature("surf1").set("rangedataactive", "off");
    model.result("pg36").feature("surf1")
         .set("rangeactualminmax", new double[]{5.999999999999999, 17.000000000000004});
    model.result("pg36").feature("surf1").set("hasbeenplotted", true);
    model.result("pg36").set("renderdatacached", false);
    model.result("pg36").set("allowtableupdate", true);
    model.result("pg36").set("renderdatacached", true);
    model.result().table().create("evl2", "Table");
    model.result().table("evl2").comments("Interactive 2D values");
    model.result().table("evl2").label("Evaluation 2D");
    model.result().table("evl2").addRow(new double[]{-0.10035848617553711, 0.5591397285461426, 9});
    model.result().table("evl2").addRow(new double[]{0, 1.9068100452423096, 6});
    model.result().table("evl2").addRow(new double[]{-1.1182794570922852, 1.3906810283660889, 16});
    model.result().table("evl2").addRow(new double[]{1.06093168258667, 1.5053761005401611, 10});
    model.result("pg36").set("showhiddenobjects", "on");
    model.result("pg36").run();
    model.result("pg36").set("allowtableupdate", false);
    model.result("pg36").set("title", "430: temp=0.2, boffset=0.021 Surface: Entity index");
    model.result("pg36").set("xlabel", "");
    model.result("pg36").set("ylabel", "");
    model.result("pg36").set("hasbeenplotted", true);
    model.result("pg36").feature("surf1").set("rangeunit", "");
    model.result("pg36").feature("surf1").set("rangecolormin", 1);
    model.result("pg36").feature("surf1").set("rangecolormax", 17.000000000000004);
    model.result("pg36").feature("surf1").set("rangecoloractive", "off");
    model.result("pg36").feature("surf1").set("rangedatamin", 1);
    model.result("pg36").feature("surf1").set("rangedatamax", 17.000000000000004);
    model.result("pg36").feature("surf1").set("rangedataactive", "off");
    model.result("pg36").feature("surf1").set("rangeactualminmax", new double[]{1, 17.000000000000004});
    model.result("pg36").feature("surf1").set("hasbeenplotted", true);
    model.result("pg36").set("renderdatacached", false);
    model.result("pg36").set("allowtableupdate", true);
    model.result("pg36").set("renderdatacached", true);
    model.result().table("evl2").addRow(new double[]{-0.28673839569091797, -3.2544801235198975, 1});
    model.result("pg36").feature("surf1").set("expr", "dom==1||dom==9||dom==10||dom==6||dom==16");
    model.result("pg36").run();
    model.result("pg36").feature("surf1").set("expr", "dom");
    model.result("pg36").run();
    model.result("pg36").set("allowtableupdate", false);
    model.result("pg36").set("title", "430: temp=0.2, boffset=0.021 Surface: Entity index");
    model.result("pg36").set("xlabel", "");
    model.result("pg36").set("ylabel", "");
    model.result("pg36").set("hasbeenplotted", true);
    model.result("pg36").feature("surf1").set("rangeunit", "");
    model.result("pg36").feature("surf1").set("rangecolormin", 1);
    model.result("pg36").feature("surf1").set("rangecolormax", 17.000000000000004);
    model.result("pg36").feature("surf1").set("rangecoloractive", "off");
    model.result("pg36").feature("surf1").set("rangedatamin", 1);
    model.result("pg36").feature("surf1").set("rangedatamax", 17.000000000000004);
    model.result("pg36").feature("surf1").set("rangedataactive", "off");
    model.result("pg36").feature("surf1").set("rangeactualminmax", new double[]{1, 17.000000000000004});
    model.result("pg36").feature("surf1").set("hasbeenplotted", true);
    model.result("pg36").set("renderdatacached", false);
    model.result("pg36").set("allowtableupdate", true);
    model.result("pg36").set("renderdatacached", true);
    model.result().table("evl2").addRow(new double[]{-3.9543726444244385, -1.475285291671753, 14});
    model.result().table("evl2").addRow(new double[]{4.076045036315918, -1.3231940269470215, 12});
    model.result("pg36").feature("surf1").set("expr", "dom==1||dom==9||dom==10||dom==6||dom==16||dom==12||dom==14");
    model.result("pg36").run();
    model.result("pg36").feature("surf1")
         .set("expr", "!(dom==1||dom==9||dom==10||dom==6||dom==16||dom==12||dom==14)");
    model.result("pg36").run();
    model.result().export("data1")
         .setIndex("expr", "!(dom==1||dom==9||dom==10||dom==6||dom==16||dom==12||dom==14)", 3);
    model.result().export("data1").setIndex("descr", "mask", 3);
    model.result().export("data1").set("allowdescrupdate", false);
    model.result().export("data1").move("expr", 3, 4, 2);
    model.result().export("data1").move("unit", 3, 4, 2);
    model.result().export("data1").move("descr", 3, 4, 2);
    model.result().export("data1").set("allowdescrupdate", false);
    model.result().export("data1").move("expr", 2, 3, 1);
    model.result().export("data1").move("unit", 2, 3, 1);
    model.result().export("data1").move("descr", 2, 3, 1);
    model.result().export("data1").set("allowdescrupdate", false);
    model.result().export("data1").move("expr", 1, 2, 0);
    model.result().export("data1").move("unit", 1, 2, 0);
    model.result().export("data1").move("descr", 1, 2, 0);
    model.result().export("data1").set("allowdescrupdate", true);
    model.result().export("data1").run();
    model.result().export("data1").set("gridstruct", "spreadsheet");
    model.result().export("data1").set("location", "grid");
    model.result().export("data1").run();

    model.label("me_rodliteral_losses.mph");

    model.result().export("data1").set("gridz3", "range(-(rg+rd)/2,(rg+rd)/100,(rg+rd)/2)");
    model.result().export("data1").run();

    model.label("me_rodliteral_losses.mph");

    model.result().numerical().create("int7", "IntVolume");
    model.result().numerical("int7").label("Spectroscopy");
    model.result().numerical("int7").set("data", "dset16");
    model.result().numerical("int7").set("outerinput", "manual");
    model.result().numerical("int7").set("outersolnum", new String[]{"1"});

    model.view("view1").hideEntities("hide1").add(new int[]{6});
    model.view("view1").hideObjects().clear();
    model.view("view1").hideEntities().clear();

    model.result().numerical("int7").selection().all();
    model.result().numerical("int7").selection().set(new int[]{});
    model.result().numerical("int7").selection().all();
    model.result().numerical("int7").selection().set(new int[]{6, 9, 10, 16});

    model.label("me_rodliteral_losses.mph");

    model.study("std2").feature("stat").set("showdistribute", false);

    model.result("pg28").run();
    model.result("pg28").feature("iso2").active(false);
    model.result().dataset().create("iso5", "Isosurface");
    model.result().dataset().remove("iso5");
    model.result().remove("pg30");
    model.result().remove("pg31");
    model.result().duplicate("pg37", "pg28");
    model.result("pg37").label("View Loss Regions Only");
    model.result("pg37").feature().remove("iso1");
    model.result("pg37").feature().remove("iso2");
    model.result("pg37").create("iso1", "Isosurface");
    model.result("pg37").feature("iso1").set("expr", "angap(bn,en)+abs(ang-pi/2)*1000");
    model.result("pg37").feature("iso1").set("levelmethod", "levels");
    model.result("pg37").feature("iso1").set("levels", "1");
    model.result("pg37").feature("iso1").set("expr", "angap(bn,en)+abs(ang-pi/2)*100");
    model.result("pg28").feature("iso1").feature("col1").active(false);

    model.view("view1").hideEntities().create("hide1");
    model.view("view1").hideEntities("hide1").geom(3);
    model.view("view1").hideEntities("hide1").add(new int[]{1});
    model.view("view1").hideEntities("hide1").add(new int[]{5});
    model.view("view1").hideEntities("hide1").add(new int[]{22});
    model.view("view1").hideEntities("hide1").add(new int[]{4});
    model.view("view1").hideEntities("hide1").add(new int[]{23});
    model.view("view1").hideEntities("hide1").add(new int[]{2});
    model.view("view1").hideEntities("hide1").add(new int[]{15});
    model.view("view1").hideEntities("hide1").add(new int[]{14});
    model.view("view1").hideEntities("hide1").add(new int[]{20});
    model.view("view1").hideEntities("hide1").add(new int[]{3});
    model.view("view1").hideEntities("hide1").add(new int[]{12});
    model.view("view1").hideEntities("hide1").add(new int[]{13});
    model.view("view1").hideEntities("hide1").add(new int[]{19});
    model.view("view1").hideEntities("hide1").add(new int[]{8});
    model.view("view1").hideEntities("hide1").add(new int[]{11});
    model.view("view1").hideEntities("hide1").add(new int[]{18});
    model.view("view1").hideEntities("hide1").add(new int[]{7});
    model.view("view1").hideEntities("hide1").add(new int[]{21});
    model.view("view1").hideEntities("hide1").add(new int[]{17});

    model.result("pg37").set("edges", "on");
    model.result("pg37").feature("iso1").set("interactive", "on");
    model.result("pg37").run();
    model.result("pg37").feature("iso1").set("shift", "10");
    model.result("pg37").feature("iso1").set("expr", "lz(bn,en,moag,5)+2*(abs(ang-pi/2)>pi/100)");
    model.result("pg37").run();
    model.result("pg37").feature("iso1").set("shift", "-1");
    model.result("pg37").feature("iso1").set("expr", "-lz(bn,en,moag,5)+abs(ang-pi/2)");
    model.result("pg37").feature("iso1").set("levels", "-0.5");
    model.result("pg37").feature("iso1").set("interactive", "off");
    model.result("pg37").run();
    model.result("pg37").feature("iso1").set("interactive", "on");
    model.result("pg37").feature("iso1").set("shift", "-0.3");
    model.result("pg37").feature("iso1").set("expr", "-lz(bn,en,moag,5)+abs(ang-pi/2)");
    model.result("pg37").feature("iso1").set("shift", "0.4");
    model.result("pg37").feature("iso1").set("expr", "-lz(bn,en,moag,5)+abs(ang-pi/2)+max(abs(z*1000)-1.5,0)");
    model.result("pg37").run();
    model.result("pg37").feature("iso1").set("shift", "-0.328594537898427");
    model.result("pg37").feature("iso1")
         .set("expr", "-lz(bn,en,moag,5)+abs(ang-pi/2)+2*max(abs(z*1000)-1.5,0)+2*max(abs(y*1000)-1,0)");
    model.result("pg37").run();
    model.result("pg37").feature("iso1").set("shift", "0");
    model.result("pg37").feature("iso1").set("data", "dset7");
    model.result("pg37").feature("iso1").setIndex("looplevel", "27", 1);
    model.result("pg37").feature("iso1").set("levelmethod", "levels");
    model.result("pg37").feature("iso1").set("interactive", "off");
    model.result("pg37").setIndex("looplevel", "23", 1);
    model.result("pg37").setIndex("looplevel", "27", 1);
    model.result("pg37").set("data", "none");
    model.result("pg37").feature().duplicate("iso2", "iso1");
    model.result("pg37").feature().duplicate("iso3", "iso1");
    model.result("pg37").feature("iso2").setIndex("looplevel", "32", 1);
    model.result("pg37").feature("iso3").setIndex("looplevel", "32", 1);
    model.result("pg37").feature("iso2").setIndex("looplevel", "29", 1);
    model.result("pg37").feature().duplicate("iso4", "iso1");
    model.result("pg37").feature("iso1").setIndex("looplevel", "25", 1);
    model.result("pg37").feature("iso2").setIndex("looplevel", "27", 1);
    model.result("pg37").feature("iso3").setIndex("looplevel", "29", 1);
    model.result("pg37").feature("iso4").setIndex("looplevel", "32", 1);
    model.result("pg37").run();
    model.result("pg37").feature("iso2").set("colorlegend", "off");
    model.result("pg37").feature("iso3").set("colorlegend", "off");
    model.result("pg37").feature("iso4").set("colorlegend", "off");
    model.result("pg37").feature("iso1").set("recover", "off");
    model.result("pg37").feature("iso1").set("useder", "off");
    model.result("pg37").feature("iso1").set("inheritrange", "off");
    model.result("pg37").feature().remove("iso2");
    model.result("pg37").feature().remove("iso3");
    model.result("pg37").feature().remove("iso4");
    model.result("pg37").feature("iso1").set("expr", "bn");
    model.result("pg37").feature("iso1").set("interactive", "on");
    model.result("pg37").feature("iso1").set("levels", "0");
    model.result("pg37").run();
    model.result("pg37").feature("iso1").set("shift", "0.1");
    model.result("pg37").feature("iso1").set("expr", "bn+nan");
    model.result("pg37").run();
    model.result("pg37").feature("iso1").set("shift", "0");
    model.result("pg37").feature("iso1").set("expr", "bn+nan*0");
    model.result("pg37").run();
    model.result("pg37").run();
    model.result("pg37").feature("iso1").set("expr", "bn+0");
    model.result("pg37").run();
    model.result("pg37").feature("iso1").set("expr", "bn+inf");
    model.result("pg37").run();
    model.result("pg37").feature("iso1").set("shift", "0.11");
    model.result("pg37").run();
    model.result("pg37").feature("iso1").set("expr", "bn+0*inf");
    model.result("pg37").run();
    model.result("pg37").feature("iso1").set("shift", "0");
    model.result("pg37").feature("iso1").set("expr", "bn+min(inf,0)");
    model.result("pg37").run();
    model.result("pg37").feature("iso1").set("shift", "0.00163912049217122");
    model.result("pg37").feature("iso1").set("expr", "bn+if(z>1.5e-3,inf,0)");
    model.result("pg37").run();
    model.result("pg37").feature("iso1").set("shift", "0.00163912049217122");
    model.result("pg37").feature("iso1").set("expr", "bn+if(z>1.5e-3,nan,0)");
    model.result("pg37").run();
    model.result("pg37").feature("iso1").set("shift", "0.22");
    model.result("pg37").feature("iso1").set("expr", "bn+if(abs(z)>1.5e-3,nan,0)");
    model.result("pg37").run();
    model.result("pg37").feature("iso1").set("shift", "0.06");
    model.result("pg37").set("showhiddenobjects", "off");
    model.result("pg37").set("data", "iso1");
    model.result("pg37").run();
    model.result("pg37").set("data", "dset7");
    model.result("pg37").run();
    model.result("pg37").feature("iso1").set("shift", "0.14");
    model.result("pg37").feature("iso1").set("expr", "bn");
    model.result("pg37").run();
    model.result("pg37").feature("iso1").set("shift", "0.16");
    model.result("pg37").feature("iso1").set("expr", "ang");
    model.result("pg37").feature("iso1").set("data", "dset7");
    model.result("pg37").feature("iso1").set("expr", "ang + if(bn<0.1,0,nan)");
    model.result("pg37").run();
    model.result("pg37").feature("iso1").set("shift", "1.6");
    model.result("pg37").feature("iso1").set("levels", "0");
    model.result("pg37").feature("iso1").set("shift", "pi/2");
    model.result("pg37").feature("iso1").set("expr", "ang + if(bn<0.1||abs(z)>1e-3,0,nan)");
    model.result("pg37").run();
    model.result("pg37").feature("iso1").set("expr", "ang + if(bn<0.1||abs(z)<1e-3,0,nan)");
    model.result("pg37").run();
    model.result("pg37").feature("iso1").set("expr", "ang + if(bn<0.1&&abs(z)<1e-3,0,nan)");
    model.result("pg37").run();
    model.result("pg37").feature("iso1").set("expr", "ang + if(angap(bn,en)<5&&abs(z)<1.5e-3,0,nan)");
    model.result("pg37").run();
    model.result("pg37").feature("iso1").set("solnum", "215");
    model.result("pg37").run();
    model.result("pg37").feature("iso1").set("solnum", "224");
    model.result("pg37").run();
    model.result("pg37").feature("iso1").set("solnum", "234");
    model.result("pg37").run();
    model.result("pg37").feature("iso1").set("data", "dset14");
    model.result("pg37").run();
    model.result("pg37").feature("iso1").set("solnum", "243");
    model.result("pg37").run();
    model.result("pg37").feature("iso1").set("solnum", "273");
    model.result("pg37").run();
    model.result("pg37").feature("iso1").set("solnum", "294");
    model.result("pg37").run();
    model.result("pg37").feature("iso1").set("solnum", "318");
    model.result("pg37").run();
    model.result("pg37").feature("iso1").set("solnum", "333");
    model.result("pg37").run();
    model.result("pg37").feature("iso1").set("solnum", "354");
    model.result("pg37").run();
    model.result("pg37").feature("iso1").set("solnum", "383");
    model.result("pg37").run();
    model.result("pg37").feature("iso1").set("solnum", "426");
    model.result("pg37").run();
    model.result("pg37").feature("iso1").set("solnum", "215");
    model.result("pg37").run();
    model.result("pg37").feature("iso1").set("data", "dset7");
    model.result("pg37").run();
    model.result("pg37").feature("iso1").set("resolution", "finer");
    model.result("pg37").run();
    model.result("pg37").setIndex("looplevel", "22", 1);
    model.result("pg37").feature("iso1").set("solnum", "222");
    model.result("pg37").run();
    model.result("pg37").feature("iso1").set("solnum", "233");
    model.result("pg37").run();
    model.result("pg37").feature("iso1").set("solnum", "246");
    model.result("pg37").run();
    model.result("pg37").feature("iso1").set("solnum", "274");
    model.result("pg37").run();
    model.result("pg37").feature().duplicate("iso2", "iso1");
    model.result("pg37").feature().duplicate("iso3", "iso1");
    model.result("pg37").feature().duplicate("iso4", "iso1");
    model.result("pg37").feature().duplicate("iso5", "iso1");
    model.result("pg37").feature("iso1").set("expr", "ang + if(angap(bn,en)<5&&abs(z)<1.5e-3,0,nan) - pi/2");
    model.result("pg37").feature("iso1").set("interactive", "off");
    model.result("pg37").feature("iso1").set("solnum", "215");
    model.result("pg37").feature().duplicate("iso6", "iso1");
    model.result("pg37").feature("iso6").set("expr", "nan");
    model.result("pg37").feature("iso6").set("levels", "range(0,25,100)");
    model.result("pg37").feature("iso1").set("colorlegend", "off");
    model.result("pg37").feature("iso2").set("expr", "ang + if(angap(bn,en)<5&&abs(z)<1.5e-3,0,nan)-pi/2 -25");
    model.result("pg37").feature("iso2").set("levels", "25");
    model.result("pg37").feature("iso2").set("solnum", "245");
    model.result("pg37").feature("iso2").set("expr", "ang + if(angap(bn,en)<5&&abs(z)<1.5e-3,0,nan)-pi/2 -30");
    model.result("pg37").feature("iso2").set("levels", "30");
    model.result("pg37").feature("iso6").set("levels", "range(0,30,120)");
    model.result("pg37").feature("iso3").set("expr", "ang + if(angap(bn,en)<5&&abs(z)<1.5e-3,0,nan)-pi/2 - 60");
    model.result("pg37").feature("iso3").set("levels", "60");
    model.result("pg37").feature("iso4").set("expr", "ang + if(angap(bn,en)<5&&abs(z)<1.5e-3,0,nan)-pi/2-90");
    model.result("pg37").feature("iso4").set("levels", "90");
    model.result("pg37").feature("iso4").set("solnum", "305");
    model.result("pg37").feature("iso5").set("expr", "ang + if(angap(bn,en)<5&&abs(z)<1.5e-3,0,nan)-pi/2-120");
    model.result("pg37").feature("iso5").set("levels", "120");
    model.result("pg37").feature("iso5").set("solnum", "332");
    model.result("pg37").feature("iso1").active(false);
    model.result("pg37").feature("iso2").active(false);
    model.result("pg37").feature("iso3").active(false);
    model.result("pg37").feature("iso4").active(false);
    model.result("pg37").run();
    model.result("pg37").feature("iso5").set("shift", "0");
    model.result("pg37").feature("iso5").set("expr", "ang + if(angap(bn,en)<5&&abs(z)<1.5e-3,0,nan)-pi/2+120");
    model.result("pg37").feature("iso2").set("expr", "ang + if(angap(bn,en)<5&&abs(z)<1.5e-3,0,nan)-pi/2 +30");
    model.result("pg37").feature("iso3").set("expr", "ang + if(angap(bn,en)<5&&abs(z)<1.5e-3,0,nan)-pi/2 + 60");
    model.result("pg37").feature("iso4").set("expr", "ang + if(angap(bn,en)<5&&abs(z)<1.5e-3,0,nan)-pi/2 + 90");
    model.result("pg37").run();
    model.result("pg37").feature("iso6").set("expr", "x*60000+if((1000*y-1)^2+1e6*z^2<.1,0,inf)");
    model.result("pg37").run();
    model.result("pg37").feature("iso6").set("expr", "x*60000+if(y^2+z^2<1e-6,0,inf)");
    model.result("pg37").run();
    model.result("pg37").feature("iso6").set("resolution", "normal");
    model.result("pg37").feature("iso5").active(false);
    model.result("pg37").run();
    model.result("pg37").feature("iso6").set("expr", "x*60000+if(y^2+z^2<1e-6,0,nan)");
    model.result("pg37").run();
    model.result("pg37").feature("iso6").set("expr", "x*1000+if(y^2+z^2<1e-6,0,nan)");
    model.result("pg37").run();
    model.result("pg37").feature("iso6").set("expr", "x*1+if(y^2+z^2<1e-6,0,nan)");
    model.result("pg37").run();
    model.result("pg37").feature("iso6").set("expr", "x*1000+if(y^2+z^2<1e-6,0,nan)");
    model.result("pg37").run();
    model.result("pg37").feature("iso6").set("expr", "x*100+if(y^2+z^2<1e-6,0,nan)");
    model.result("pg37").run();
    model.result("pg37").feature("iso6").set("expr", "x*120+if(y^2+z^2<1e-8,0,nan)");
    model.result("pg37").run();
    model.result("pg37").feature("iso6").set("expr", "x*120+if(y^2+(z-1e-3)^2<1e-8,0,nan)");
    model.result("pg37").run();
    model.result("pg37").feature("iso6").set("expr", "x*120+if(y^2+(z-2e-3)^2<1e-8,0,nan)");
    model.result("pg37").run();
    model.result("pg37").feature("iso6").set("expr", "x*1000+if(y^2+(z-2.5e-3)^2<1e-8,0,nan)");
    model.result("pg37").run();
    model.result("pg37").feature("iso6").set("expr", "x*1000+if(y^2+(z-2.1e-3)^2<1e-8,0,nan)");
    model.result("pg37").run();
    model.result("pg37").feature("iso6").set("expr", "x*1000+if(y^2+(z-2.1e-3)^2<1e-8,0,nan)+100");
    model.result("pg37").run();
    model.result("pg37").feature("iso6").set("expr", "x*1000+if(y^2+(z-2.1e-3)^2<1e-8,0,nan)+10");
    model.result("pg37").run();
    model.result("pg37").feature("iso6").set("expr", "x*1000+if(y^2+(z-2.1e-3)^2<1e-8,0,nan)+1");
    model.result("pg37").run();
    model.result("pg37").feature("iso6").set("expr", "x*1000+if(y^2+(z-2.1e-3)^2<1e-8,0,nan)+2.1");
    model.result("pg37").run();
    model.result("pg37").feature("iso6").set("expr", "x*1000+if((y-2.1e-3)^2+(z-2.1e-3)^2<1e-8,0,nan)+2.1");
    model.result("pg37").run();
    model.result("pg37").feature("iso6").set("expr", "x*1000+if((y-2.3e-3)^2+(z-2.3e-3)^2<1e-8,0,nan)+2.1");
    model.result("pg37").run();
    model.result("pg37").feature("iso5").active(true);
    model.result("pg37").run();
    model.result("pg37").feature("iso5").set("levels", "0");
    model.result("pg37").feature("iso5").set("shift", "120");
    model.result("pg37").run();
    model.result("pg37").feature("iso5").set("interactive", "off");
    model.result("pg37").feature("iso5").set("levels", "120");
    model.result("pg37").feature("iso5").set("coloring", "uniform");

    return model;
  }

  public static Model run35(Model model) {
    model.result("pg37").feature("iso5").set("color", "green");
    model.result("pg37").feature("iso5").set("colorlegend", "off");
    model.result("pg37").feature("iso4").set("colorlegend", "off");
    model.result("pg37").feature("iso4").set("coloring", "uniform");
    model.result("pg37").feature("iso3").set("colorlegend", "off");
    model.result("pg37").feature("iso3").set("coloring", "uniform");
    model.result("pg37").feature("iso2").set("coloring", "uniform");
    model.result("pg37").feature("iso2").set("colorlegend", "off");
    model.result("pg37").feature("iso1").set("coloring", "uniform");
    model.result("pg37").feature("iso5").active(false);
    model.result("pg37").run();
    model.result("pg37").feature("iso1").set("color", "custom");
    model.result("pg37").feature("iso1")
         .set("customcolor", new double[]{0.062745101749897, 0.12156862765550613, 0.33725491166114807});
    model.result("pg37").feature("iso2").set("color", "custom");
    model.result("pg37").feature("iso2").set("customcolor", new double[]{0, 0.3333333432674408, 0.5882353186607361});
    model.result("pg37").feature("iso3").set("color", "custom");
    model.result("pg37").feature("iso3")
         .set("customcolor", new double[]{0.6431372761726379, 0.7921568751335144, 0.33725491166114807});
    model.result("pg37").feature("iso4").set("color", "custom");
    model.result("pg37").feature("iso4")
         .set("customcolor", new double[]{0.9490196108818054, 0.3960784375667572, 0.13333334028720856});
    model.result("pg37").feature("iso5").set("color", "custom");
    model.result("pg37").feature("iso5")
         .set("customcolor", new double[]{0.2666666805744171, 0.062745101749897, 0.1411764770746231});
    model.result("pg37").feature("iso1").active(true);
    model.result("pg37").feature("iso2").active(true);
    model.result("pg37").feature("iso3").active(true);
    model.result("pg37").feature("iso4").active(true);
    model.result("pg37").feature("iso5").active(true);
    model.result("pg37").run();
    model.result("pg37").feature("iso1").active(false);
    model.result("pg37").run();
    model.result("pg37").feature("iso4").set("shift", "0");
    model.result("pg37").feature("iso3").set("shift", "0");
    model.result("pg37").feature("iso2").set("shift", "0");
    model.result("pg37").feature("iso5").set("interactive", "on");
    model.result("pg37").feature("iso5").set("shift", "0");
    model.result("pg37").feature("iso1").set("interactive", "on");
    model.result("pg37").feature("iso1").set("shift", "0");
    model.result("pg37").feature("iso1").active(true);
    model.result("pg37").run();
    model.result("pg37").set("allowtableupdate", false);
    model.result("pg37").set("hasbeenplotted", true);
    model.result("pg37").feature("iso1").set("hasbeenplotted", true);
    model.result("pg37").feature("iso2").set("hasbeenplotted", true);
    model.result("pg37").feature("iso3").set("hasbeenplotted", true);
    model.result("pg37").feature("iso4").set("hasbeenplotted", true);
    model.result("pg37").feature("iso5").set("hasbeenplotted", true);
    model.result("pg37").feature("iso6").set("hasbeenplotted", true);
    model.result("pg37").set("renderdatacached", false);
    model.result("pg37").set("allowtableupdate", true);
    model.result("pg37").set("renderdatacached", true);
    model.result("pg37").feature("iso1").set("solnum", "221");
    model.result("pg37").run();
    model.result("pg37").set("allowtableupdate", false);
    model.result("pg37").set("hasbeenplotted", true);
    model.result("pg37").feature("iso1").set("hasbeenplotted", true);
    model.result("pg37").feature("iso2").set("hasbeenplotted", true);
    model.result("pg37").feature("iso3").set("hasbeenplotted", true);
    model.result("pg37").feature("iso4").set("hasbeenplotted", true);
    model.result("pg37").feature("iso5").set("hasbeenplotted", true);
    model.result("pg37").feature("iso6").set("hasbeenplotted", true);
    model.result("pg37").set("renderdatacached", false);
    model.result("pg37").set("allowtableupdate", true);
    model.result("pg37").set("renderdatacached", true);

    model.study("std6").feature("param").set("showdistribute", false);
    model.study("std7").feature("stat").set("showdistribute", false);
    model.study("std1").feature("param").set("showdistribute", false);

    model.result("pg37").set("edges", "off");
    model.result("pg37").feature("iso1").active(false);
    model.result("pg37").feature("iso6").set("levels", "range(30,30,120)");
    model.result("pg37").feature("iso2").active(false);
    model.result("pg37").feature("iso3").active(false);
    model.result("pg37").feature("iso4").active(false);
    model.result("pg37").feature("iso5").active(false);
    model.result("pg37").run();
    model.result("pg37").feature("iso6").set("colortable", "Thermal");
    model.result("pg37").run();
    model.result("pg37").feature("iso6").set("colortable", "ThermalLight");
    model.result("pg37").run();
    model.result("pg37").feature("iso6").set("colortable", "ThermalEquidistant");
    model.result("pg37").run();
    model.result("pg37").feature("iso6").set("colortable", "RainbowLight");
    model.result("pg37").run();
    model.result("pg37").feature("iso6").set("colortable", "Wave");
    model.result("pg37").run();
    model.result("pg37").feature("iso6").set("colortable", "Rainbow");
    model.result("pg37").run();
    model.result("pg37").feature("iso2").set("customcolor", new double[]{0, 0, 0.545098066329956});
    model.result("pg37").feature("iso3")
         .set("customcolor", new double[]{0.250980406999588, 0.8784313797950745, 0.8156862854957581});
    model.result("pg37").feature("iso4")
         .set("customcolor", new double[]{0.9921568632125854, 0.7254902124404907, 0.07450980693101883});
    model.result("pg37").feature("iso5")
         .set("customcolor", new double[]{0.4000000059604645, 0.125490203499794, 0.05882352963089943});
    model.result("pg37").create("iso7", "Isosurface");
    model.result("pg37").feature().remove("iso7");
    model.result("pg37").create("vol1", "Volume");
    model.result("pg37").feature().remove("vol1");
    model.result("pg37").create("con1", "Contour");
    model.result("pg37").feature("con1").set("data", "cpl1");
    model.result("pg37").feature("con1").setIndex("looplevel", "22", 1);
    model.result("pg37").feature("con1").set("expr", "f32energy(bn,en,ang)");
    model.result("pg37").feature("con1").set("levelmethod", "levels");
    model.result("pg37").feature("con1").set("levels", "range(2,2,10)");
    model.result("pg37").feature("con1").set("colorlegend", "off");
    model.result("pg37").feature("con1").set("coloring", "uniform");
    model.result("pg37").feature("con1").set("color", "gray");
    model.result("pg37").run();
    model.result("pg37").feature("iso2").active(true);
    model.result("pg37").feature("iso3").active(true);
    model.result("pg37").feature("iso4").active(true);
    model.result("pg37").feature("iso5").active(true);
    model.result("pg37").feature().duplicate("con2", "con1");
    model.result("pg37").feature("con2").set("data", "cpl3");
    model.result("pg37").feature("iso2").active(false);
    model.result("pg37").feature("iso3").active(false);
    model.result("pg37").feature("iso4").active(false);
    model.result("pg37").feature("iso5").active(false);
    model.result("pg37").run();
    model.result("pg37").feature("con2").set("color", "custom");
    model.result("pg37").feature("con2")
         .set("customcolor", new double[]{0.4117647111415863, 0.4117647111415863, 0.4117647111415863});
    model.result("pg37").feature("con1").set("color", "custom");
    model.result("pg37").feature("con1")
         .set("customcolor", new double[]{0.5176470875740051, 0.7607843279838562, 0.9176470637321472});
    model.result("pg37").feature("con2")
         .set("customcolor", new double[]{0.6431372761726379, 0.7921568751335144, 0.33725491166114807});
    model.result("pg37").feature("iso2").active(true);
    model.result("pg37").feature("iso3").active(true);
    model.result("pg37").feature("iso4").active(true);
    model.result("pg37").feature("iso5").active(true);
    model.result("pg37").run();
    model.result().dataset().duplicate("cpl4", "cpl1");
    model.result().dataset("cpl4").label("XZ");
    model.result().dataset("cpl4").set("quickplane", "zx");
    model.result("pg37").feature("con2").set("data", "cpl4");
    model.result("pg37").feature("con2")
         .set("customcolor", new double[]{0.6549019813537598, 0.6901960968971252, 0.7568627595901489});
    model.result("pg37").run();

    model.view("view1").set("showgrid", false);
    model.view("view1").set("showaxisorientation", false);
    model.view("view1").set("scenelight", "off");
    model.view("view1").set("transparency", "off");

    model.result("pg37").set("allowtableupdate", false);
    model.result("pg37").set("hasbeenplotted", true);
    model.result("pg37").feature("iso2").set("hasbeenplotted", true);
    model.result("pg37").feature("iso3").set("hasbeenplotted", true);
    model.result("pg37").feature("iso4").set("hasbeenplotted", true);
    model.result("pg37").feature("iso5").set("hasbeenplotted", true);
    model.result("pg37").feature("iso6").set("hasbeenplotted", true);
    model.result("pg37").feature("con1").set("hasbeenplotted", true);
    model.result("pg37").feature("con2").set("hasbeenplotted", true);
    model.result("pg37").set("renderdatacached", false);
    model.result("pg37").set("allowtableupdate", true);
    model.result("pg37").set("renderdatacached", true);

    model.view("view1").set("showaxisorientation", true);
    model.view("view1").set("transparency", "on");

    model.result("pg37").feature("iso2").set("recover", "ppr");
    model.result("pg37").run();
    model.result("pg37").feature("iso2").set("recover", "off");
    model.result("pg37").feature("iso2").set("resolution", "extrafine");
    model.result("pg37").run();
    model.result("pg37").feature("iso3").set("resolution", "extrafine");
    model.result("pg37").feature("iso4").set("resolution", "extrafine");
    model.result("pg37").feature("iso5").set("resolution", "extrafine");
    model.result("pg37").run();
    model.result("pg37").feature("con2").set("contourtype", "tubes");
    model.result("pg37").feature("con2").set("radiusexpr", "1/50");
    model.result("pg37").feature("con2").set("expr", "f32energy(bn,en,ang)-enm");
    model.result("pg37").feature("con1").set("expr", "f32energy(bn,en,ang)-enm");
    model.result("pg37").feature("con1").set("contourtype", "tubes");
    model.result("pg37").feature("con1").set("radiusexpr", "1/50");
    model.result("pg37").run();
    model.result("pg37").feature("con1").set("radiusexpr", "1/200");
    model.result("pg37").feature("con2").set("radiusexpr", "1/200");
    model.result("pg37").run();
    model.result("pg37").run();
    model.result("pg37").feature("con1").set("tuberadiusscaleactive", "on");
    model.result("pg37").feature("con1").set("tuberadiusscale", "1");
    model.result("pg37").feature("con2").set("tuberadiusscaleactive", "on");
    model.result("pg37").feature("con2").set("tuberadiusscale", "1");
    model.result("pg37").run();
    model.result("pg37").set("title", "Loss Regions");
    model.result("pg37").run();

    model.view("view1").set("transparency", "off");

    model.result("pg37").feature("con1")
         .set("customcolor", new double[]{0.501960813999176, 0.501960813999176, 0.501960813999176});
    model.result("pg37").run();
    model.result("pg37").set("allowtableupdate", false);
    model.result("pg37").set("hasbeenplotted", true);
    model.result("pg37").feature("iso2").set("hasbeenplotted", true);
    model.result("pg37").feature("iso3").set("hasbeenplotted", true);
    model.result("pg37").feature("iso4").set("hasbeenplotted", true);
    model.result("pg37").feature("iso5").set("hasbeenplotted", true);
    model.result("pg37").feature("iso6").set("hasbeenplotted", true);
    model.result("pg37").feature("con1").set("hasbeenplotted", true);
    model.result("pg37").feature("con2").set("hasbeenplotted", true);
    model.result("pg37").set("renderdatacached", false);
    model.result("pg37").set("allowtableupdate", true);
    model.result("pg37").set("renderdatacached", true);
    model.result("pg37").active(false);
    model.result().duplicate("pg38", "pg37");
    model.result("pg38").label("View Loss Regions minus, plus Bias");
    model.result("pg38").feature().remove("iso3");
    model.result("pg38").feature().remove("iso4");
    model.result("pg38").feature().remove("iso5");
    model.result("pg38").feature("iso1").set("solnum", "17");
    model.result("pg38").feature("iso2").set("solnum", "413");
    model.result("pg38").feature("iso2").set("expr", "ang + if(angap(bn,en)<5&&abs(z)<1.5e-3,0,nan)-pi/2");
    model.result("pg38").feature("iso2").set("levels", "0");
    model.result("pg38").feature("iso1").set("customcolor", new double[]{0, 0.3333333432674408, 0.5882353186607361});
    model.result("pg38").feature("iso2")
         .set("customcolor", new double[]{0.4745098054409027, 0.08627451211214066, 0.23137255012989044});
    model.result("pg38").feature().remove("iso6");
    model.result("pg38").feature("iso1").set("resolution", "fine");
    model.result("pg38").feature("iso2").set("resolution", "fine");
    model.result("pg38").active(true);
    model.result("pg38").run();
    model.result("pg38").feature("iso1").set("expr", "ang + if(angap(bn,en)<5&&abs(z)<1.8e-3,0,nan) - pi/2");
    model.result("pg38").feature("iso2").set("expr", "ang + if(angap(bn,en)<5&&abs(z)<1.8e-3,0,nan)-pi/2");
    model.result("pg38").run();
    model.result("pg38").feature("iso2").set("data", "dset13");
    model.result("pg38").feature("iso1").set("data", "dset13");
    model.result("pg38").run();
    model.result("pg38").feature("iso1")
         .set("expr", "ang + if(angap(bn,en)<5&&abs(z)<1.8e-3&&abs(y)<1e-3,0,nan) - pi/2");
    model.result("pg38").feature("iso2")
         .set("expr", "ang + if(angap(bn,en)<5&&abs(z)<1.8e-3&&abs(y)<1e-3,0,nan)-pi/2");
    model.result("pg38").run();
    model.result("pg38").feature("iso2").set("solnum", "367");
    model.result("pg38").feature("iso1").set("solnum", "412");
    model.result("pg38").run();
    model.result("pg38").feature("iso1").set("data", "dset7");
    model.result("pg38").feature("iso2").set("data", "dset7");
    model.result("pg38").feature("iso2").set("solnum", "18");
    model.result("pg38").run();
    model.result("pg38").feature("iso2").set("data", "dset12");
    model.result("pg38").feature("iso1").set("data", "dset12");
    model.result("pg38").run();
    model.result("pg38").set("showlegends", true);

    model.view("view1").set("showgrid", true);

    model.label("me_rodliteral_losses.mph");

    model.func().duplicate("an15", "an3");
    model.func().duplicate("an16", "an3");
    model.func().duplicate("an17", "an3");
    model.func().remove("an16");
    model.func().remove("an17");
    model.func("an15").set("funcname", "qr1");
    model.func("an15").label("First Quartic Root");
    model.func("an15")
         .set("expr", "-a/4 + Rq(a,b,c,d)/2 + sqrt(3*a^2/4 - Rq(a,b,c,d)^2 - 2*b + (a*b-2*c-a^3/4)/Rq(a,b,c,d))/2");
    model.func().duplicate("an16", "an15");
    model.func().duplicate("an17", "an15");
    model.func().duplicate("an18", "an15");
    model.func("an16").label("Second Quartic Root");
    model.func("an17").label("Third Quartic Root");
    model.func("an18").label("Fourth Quartic Root");
    model.func("an16").set("funcname", "qr2");
    model.func("an16")
         .set("expr", "-a/4 + Rq(a,b,c,d)/2 - sqrt(3*a^2/4 - Rq(a,b,c,d)^2 - 2*b + (a*b-2*c-a^3/4)/Rq(a,b,c,d))/2");
    model.func("an17").set("funcname", "qr3");
    model.func("an17")
         .set("expr", "-a/4 - Rq(a,b,c,d)/2 + sqrt(3*a^2/4 - Rq(a,b,c,d)^2 - 2*b - (a*b-2*c-a^3/4)/Rq(a,b,c,d))/2");
    model.func("an18")
         .set("expr", "-a/4 - Rq(a,b,c,d)/2 - sqrt(3*a^2/4 - Rq(a,b,c,d)^2 - 2*b - (a*b-2*c-a^3/4)/Rq(a,b,c,d))/2");
    model.func("an18").set("funcname", "qr4");
    model.func().create("an19", "Analytic");
    model.func("an19").model("mod1");
    model.func("an19").set("funcname", "Rq");
    model.func("an19").label("Quartic Helper Function");
    model.func("an19").set("expr", "");
    model.func("an19").set("args", "a,b,c,d");
    model.func("an19").set("expr", "sqrt(a^2/4 - b + cr(-b,a*c-4*d,4*b*d-c^2-a^2*d))");
    model.func().create("an20", "Analytic");
    model.func("an20").model("mod1");
    model.func("an20").label("Highest Cubic Root");
    model.func("an20").set("funcname", "cr");
    model.func("an20").set("expr", "");
    model.func("an20").set("args", "a,b,c");
    model.func("an20").set("expr", "-(a + (-a^2+3*b)/Rc(a,b,c) - Rc(a,b,c) )/3");
    model.func().duplicate("an21", "an20");
    model.func("an21").label("Cubic Root Helper");
    model.func("an21").set("funcname", "Rc");
    model.func("an21")
         .set("expr", "((-2*a^3 + 9*a*b - 27*c + 3*sqrt(3)*sqrt(-a^2*b^2 + 4*b^3 + 4*a^3*c - 18*a*b*c + 27*c^2))/2)^(1/3)");
    model.func("an8").set("funcname", "f32");
    model.func("an8").set("expr", "0.1*sqrt(real(qr1(f32a(b,e,t),f32b(b,e,t),f32c(b,e,t),f32d(b,e,t))))");
    model.func("an8").label("Highest Stark-Zeeman Energy (GHz)");
    model.func("an8").label("Highest Stark-Zeeman Energy");
    model.func().move("an8", 18);
    model.func().duplicate("an22", "an8");
    model.func().duplicate("an23", "an8");
    model.func().duplicate("an24", "an8");
    model.func("an22").label("Second Stark-Zeeman Energy");
    model.func("an22").set("funcname", "e32");
    model.func("an23").label("Third Stark-Zeeman Energy");
    model.func("an23").set("funcname", "f12");
    model.func("an24").set("funcname", "e12");
    model.func("an8").set("funcname", "a");
    model.func("an22").set("funcname", "b");
    model.func("an23").set("funcname", "c");
    model.func("an24").set("funcname", "d");
    model.func("an8").set("funcname", "g1");
    model.func("an22").set("funcname", "g2");
    model.func("an23").set("funcname", "g3");
    model.func("an24").set("funcname", "g4");
    model.func("an24").label("Fourth Stark-Zeeman Energy");
    model.func("an22").set("expr", "0.1*sqrt(real(qr2(f32a(b,e,t),f32b(b,e,t),f32c(b,e,t),f32d(b,e,t))))");
    model.func("an23").set("expr", "0.1*sqrt(real(qr3(f32a(b,e,t),f32b(b,e,t),f32c(b,e,t),f32d(b,e,t))))");
    model.func("an24").set("expr", "0.1*sqrt(real(qr4(f32a(b,e,t),f32b(b,e,t),f32c(b,e,t),f32d(b,e,t))))");

    model.study("std6").label("Zero um");
    model.study("std7").label("0um vary Bfield");
    model.study("std7").feature("stat").set("showdistribute", false);
    model.study("std7").feature("stat").setIndex("plistarr", "range(-0.05,0.001,0.05)", 0);
    model.study("std7").feature("stat").remove("pname", 1);
    model.study("std7").feature("stat").remove("punit", 1);
    model.study("std7").feature("stat").remove("plistarr", 1);
    model.study("std6").feature("param").set("showdistribute", false);
    model.study("std6").feature("param").setIndex("plistarr", "0", 0);
    model.study("std6").feature("stat").set("showdistribute", false);

    model.param().set("poff", "0");
    model.param().set("boffset", "0");

    model.sol("sol63").study("std6");

    model.study("std6").feature("stat").set("notlistsolnum", 1);
    model.study("std6").feature("stat").set("notsolnum", "1");
    model.study("std6").feature("stat").set("listsolnum", 1);
    model.study("std6").feature("stat").set("solnum", "1");

    model.sol("sol63").feature().remove("s1");
    model.sol("sol63").feature().remove("v1");
    model.sol("sol63").feature().remove("st1");
    model.sol("sol63").create("st1", "StudyStep");
    model.sol("sol63").feature("st1").set("study", "std6");
    model.sol("sol63").feature("st1").set("studystep", "stat");
    model.sol("sol63").create("v1", "Variables");
    model.sol("sol63").feature("v1").set("control", "stat");
    model.sol("sol63").create("s1", "Stationary");
    model.sol("sol63").feature("s1").create("p1", "Parametric");
    model.sol("sol63").feature("s1").feature("p1").set("pname", new String[]{"vm1"});
    model.sol("sol63").feature("s1").feature("p1").set("plistarr", new String[]{"0"});
    model.sol("sol63").feature("s1").feature("p1").set("punit", new String[]{""});
    model.sol("sol63").feature("s1").feature("p1").set("sweeptype", "sparse");
    model.sol("sol63").feature("s1").feature("p1").set("preusesol", "no");
    model.sol("sol63").feature("s1").feature("p1").set("pcontinuationmode", "no");
    model.sol("sol63").feature("s1").feature("p1").set("plot", "off");
    model.sol("sol63").feature("s1").feature("p1").set("plotgroup", "pg6");
    model.sol("sol63").feature("s1").feature("p1").set("probesel", "all");
    model.sol("sol63").feature("s1").feature("p1").set("probes", new String[]{"pdom1"});
    model.sol("sol63").feature("s1").feature("p1").set("control", "param");
    model.sol("sol63").feature("s1").set("control", "stat");
    model.sol("sol63").feature("s1").create("se1", "Segregated");
    model.sol("sol63").feature("s1").feature("se1").feature().remove("ssDef");
    model.sol("sol63").feature("s1").feature("se1").create("ss1", "SegregatedStep");
    model.sol("sol63").feature("s1").feature("se1").feature("ss1").set("segvar", new String[]{"mod1_V"});
    model.sol("sol63").feature("s1").create("i1", "Iterative");
    model.sol("sol63").feature("s1").feature("i1").set("linsolver", "cg");
    model.sol("sol63").feature("s1").feature("i1").create("mg1", "Multigrid");
    model.sol("sol63").feature("s1").feature("i1").feature("mg1").set("prefun", "amg");
    model.sol("sol63").feature("s1").feature("se1").feature("ss1").set("linsolver", "i1");
    model.sol("sol63").feature("s1").feature("se1").create("ss2", "SegregatedStep");
    model.sol("sol63").feature("s1").feature("se1").feature("ss2").set("segvar", new String[]{"mod1_Vm"});
    model.sol("sol63").feature("s1").create("i2", "Iterative");
    model.sol("sol63").feature("s1").feature("i2").set("linsolver", "cg");
    model.sol("sol63").feature("s1").feature("i2").create("mg1", "Multigrid");
    model.sol("sol63").feature("s1").feature("i2").feature("mg1").set("prefun", "amg");
    model.sol("sol63").feature("s1").feature("se1").feature("ss2").set("linsolver", "i2");
    model.sol("sol63").feature("s1").feature().remove("fcDef");

    model.study("std7").feature("stat").set("notsolnum", "auto");
    model.study("std7").feature("stat").set("notsolvertype", "solnum");
    model.study("std7").feature("stat").set("notlistsolnum", new String[]{"1"});
    model.study("std7").feature("stat").set("notsolnum", 1);
    model.study("std7").feature("stat").set("notsolnumhide", "off");
    model.study("std7").feature("stat").set("notstudyhide", "on");
    model.study("std7").feature("stat").set("notsolhide", "on");

    model.sol("sol64").feature("v1").set("notsolnum", "auto");
    model.sol("sol64").feature("v1").set("notsolvertype", "solnum");
    model.sol("sol64").feature("v1").set("notlistsolnum", new String[]{"1"});
    model.sol("sol64").feature("v1").set("notsolnum", 1);
    model.sol("sol64").feature("v1").set("control", "stat");
    model.sol("sol63").attach("std6");

    model.result().create("pg39", "PlotGroup3D");
    model.result("pg39").label("Magnetic Flux Density Norm (mfnc)");
    model.result("pg39").set("data", "dset17");
    model.result("pg39").set("oldanalysistype", "noneavailable");
    model.result("pg39").set("solvertype", "none");
    model.result("pg39").set("showlooplevel", new String[]{"off", "off", "off"});
    model.result("pg39").set("data", "dset17");
    model.result("pg39").feature().create("mslc1", "Multislice");
    model.result("pg39").feature("mslc1").set("oldanalysistype", "noneavailable");
    model.result("pg39").feature("mslc1").set("solvertype", "none");
    model.result("pg39").feature("mslc1").set("expr", "mfnc.normB");
    model.result("pg39").feature("mslc1").set("data", "parent");
    model.result().create("pg40", "PlotGroup3D");
    model.result("pg40").label("Electric Potential (es)");
    model.result("pg40").set("data", "dset17");
    model.result("pg40").set("oldanalysistype", "noneavailable");
    model.result("pg40").set("solvertype", "none");
    model.result("pg40").set("showlooplevel", new String[]{"off", "off", "off"});
    model.result("pg40").set("frametype", "spatial");
    model.result("pg40").set("data", "dset17");
    model.result("pg40").feature().create("mslc1", "Multislice");
    model.result("pg40").feature("mslc1").set("oldanalysistype", "noneavailable");
    model.result("pg40").feature("mslc1").set("solvertype", "none");
    model.result("pg40").feature("mslc1").set("expr", "V");
    model.result("pg40").feature("mslc1").set("data", "parent");

    model.probe("pdom1").genResult("none");

    model.result().remove("pg39");
    model.result().remove("pg40");

    model.func().duplicate("an25", "an8");
    model.func("an25").set("funcname", "f32energy");
    model.func("an25").label("Highest Stark-Zeeman Energy Old Syntax");

    model.study("std6").feature("param").set("showdistribute", false);
    model.study("std6").feature("param").setIndex("plistarr", "", 0);
    model.study("std6").feature("param").setIndex("plistarr", "range(0,20,0)", 0);

    model.sol("sol63").study("std6");

    model.study("std6").feature("stat").set("notlistsolnum", 1);
    model.study("std6").feature("stat").set("notsolnum", "1");
    model.study("std6").feature("stat").set("listsolnum", 1);
    model.study("std6").feature("stat").set("solnum", "1");

    model.sol("sol63").feature().remove("s1");
    model.sol("sol63").feature().remove("v1");
    model.sol("sol63").feature().remove("st1");
    model.sol("sol63").create("st1", "StudyStep");
    model.sol("sol63").feature("st1").set("study", "std6");
    model.sol("sol63").feature("st1").set("studystep", "stat");
    model.sol("sol63").create("v1", "Variables");
    model.sol("sol63").feature("v1").set("control", "stat");
    model.sol("sol63").create("s1", "Stationary");
    model.sol("sol63").feature("s1").create("p1", "Parametric");
    model.sol("sol63").feature("s1").feature("p1").set("pname", new String[]{"vm1"});
    model.sol("sol63").feature("s1").feature("p1").set("plistarr", new String[]{"range(0,20,0)"});
    model.sol("sol63").feature("s1").feature("p1").set("punit", new String[]{""});
    model.sol("sol63").feature("s1").feature("p1").set("sweeptype", "sparse");
    model.sol("sol63").feature("s1").feature("p1").set("preusesol", "no");
    model.sol("sol63").feature("s1").feature("p1").set("pcontinuationmode", "no");
    model.sol("sol63").feature("s1").feature("p1").set("plot", "off");
    model.sol("sol63").feature("s1").feature("p1").set("plotgroup", "pg6");
    model.sol("sol63").feature("s1").feature("p1").set("probesel", "all");
    model.sol("sol63").feature("s1").feature("p1").set("probes", new String[]{"pdom1"});
    model.sol("sol63").feature("s1").feature("p1").set("control", "param");
    model.sol("sol63").feature("s1").set("control", "stat");
    model.sol("sol63").feature("s1").create("se1", "Segregated");
    model.sol("sol63").feature("s1").feature("se1").feature().remove("ssDef");
    model.sol("sol63").feature("s1").feature("se1").create("ss1", "SegregatedStep");
    model.sol("sol63").feature("s1").feature("se1").feature("ss1").set("segvar", new String[]{"mod1_V"});
    model.sol("sol63").feature("s1").create("i1", "Iterative");
    model.sol("sol63").feature("s1").feature("i1").set("linsolver", "cg");
    model.sol("sol63").feature("s1").feature("i1").create("mg1", "Multigrid");
    model.sol("sol63").feature("s1").feature("i1").feature("mg1").set("prefun", "amg");
    model.sol("sol63").feature("s1").feature("se1").feature("ss1").set("linsolver", "i1");
    model.sol("sol63").feature("s1").feature("se1").create("ss2", "SegregatedStep");
    model.sol("sol63").feature("s1").feature("se1").feature("ss2").set("segvar", new String[]{"mod1_Vm"});
    model.sol("sol63").feature("s1").create("i2", "Iterative");
    model.sol("sol63").feature("s1").feature("i2").set("linsolver", "cg");
    model.sol("sol63").feature("s1").feature("i2").create("mg1", "Multigrid");
    model.sol("sol63").feature("s1").feature("i2").feature("mg1").set("prefun", "amg");
    model.sol("sol63").feature("s1").feature("se1").feature("ss2").set("linsolver", "i2");
    model.sol("sol63").feature("s1").feature().remove("fcDef");

    model.study("std7").feature("stat").set("notsolnum", "auto");
    model.study("std7").feature("stat").set("notsolvertype", "solnum");
    model.study("std7").feature("stat").set("notlistsolnum", new String[]{"1"});
    model.study("std7").feature("stat").set("notsolnum", 1);
    model.study("std7").feature("stat").set("notsolnumhide", "off");
    model.study("std7").feature("stat").set("notstudyhide", "on");
    model.study("std7").feature("stat").set("notsolhide", "on");

    model.sol("sol64").feature("v1").set("notsolnum", "auto");
    model.sol("sol64").feature("v1").set("notsolvertype", "solnum");
    model.sol("sol64").feature("v1").set("notlistsolnum", new String[]{"1"});
    model.sol("sol64").feature("v1").set("notsolnum", 1);
    model.sol("sol64").feature("v1").set("control", "stat");
    model.sol("sol63").attach("std6");

    model.probe("pdom1").genResult("none");

    model.sol("sol63").runAll();

    model.study("std7").feature("stat").set("showdistribute", false);
    model.study("std7").feature("stat").set("notstudy", "std6");
    model.study("std7").feature("stat").set("showdistribute", false);

    model.sol("sol64").study("std7");

    model.study("std7").feature("stat").set("notlistsolnum", 1);
    model.study("std7").feature("stat").set("notsolnum", "auto");
    model.study("std7").feature("stat").set("listsolnum", 1);
    model.study("std7").feature("stat").set("solnum", "1");

    model.sol("sol64").feature().remove("s1");
    model.sol("sol64").feature().remove("v1");
    model.sol("sol64").feature().remove("st1");
    model.sol("sol64").create("st1", "StudyStep");
    model.sol("sol64").feature("st1").set("study", "std7");
    model.sol("sol64").feature("st1").set("studystep", "stat");
    model.sol("sol64").create("v1", "Variables");
    model.sol("sol64").feature("v1").set("control", "stat");
    model.sol("sol64").create("s1", "Stationary");
    model.sol("sol64").feature("s1").create("p1", "Parametric");
    model.sol("sol64").feature("s1").feature().remove("pDef");
    model.sol("sol64").feature("s1").feature("p1").set("control", "stat");
    model.sol("sol64").feature("s1").set("control", "stat");
    model.sol("sol64").attach("std7");

    model.probe("pdom1").genResult("none");

    model.sol("sol64").runAll();

    model.result("pg36").label("Plot Secondary State Gap Info");
    model.result("pg36").feature("surf1").set("data", "cpl3");
    model.result().dataset("cpl3").set("data", "dset18");
    model.result("pg36").set("data", "cpl3");
    model.result().duplicate("pg39", "pg36");
    model.result("pg39").label("View domains");
    model.result("pg39").feature("surf1").set("data", "cpl1");
    model.result("pg36").feature("surf1").set("expr", "g2(bn,en,ang)");
    model.result("pg36").run();
    model.result("pg36").feature("surf1").set("rangedataactive", "on");
    model.result("pg36").feature("surf1").set("rangedatamin", "1");
    model.result("pg36").feature("surf1").set("rangedatamax", "10");
    model.result("pg36").run();
    model.result("pg36").feature("surf1").set("rangedataactive", "off");
    model.result("pg36").feature("surf1").set("rangecoloractive", "on");
    model.result("pg36").feature("surf1").set("rangecolormin", "1");

    return model;
  }

  public static Model run36(Model model) {
    model.result("pg36").feature("surf1").set("rangecolormax", "10");
    model.result("pg36").run();
    model.result("pg36").create("con1", "Contour");
    model.result("pg36").feature("con1").label("Energy");
    model.result("pg36").feature("con1").set("expr", "g2(bn,en,ang)");
    model.result("pg36").feature("surf1").set("expr", "g2(bn,en,ang)-g3(bn,en,ang)");
    model.result("pg36").run();
    model.result("pg36").feature("surf1").set("rangecolormin", "0");
    model.result("pg36").feature("surf1").set("rangecolormax", "1");
    model.result("pg36").feature("surf1").set("rangecolormin", "1");
    model.result("pg36").feature("surf1").set("rangecolormax", "10");
    model.result("pg36").feature("surf1").set("expr", "g2(bn,en,ang)");
    model.result("pg36").run();
    model.result("pg36").feature("con1").set("expr", "g2(bn,en,ang)-g3(bn,en,ang)");
    model.result("pg36").feature("con1").set("data", "cpl3");
    model.result("pg36").feature("con1").setIndex("looplevel", "51", 0);
    model.result("pg36").feature("con1").set("levelmethod", "levels");
    model.result("pg36").feature("con1").set("levels", "0.1");
    model.result("pg36").run();
    model.result("pg36").feature("con1").set("coloring", "uniform");
    model.result("pg36").feature("con1").set("color", "black");
    model.result("pg36").feature("con1").set("contourtype", "tubes");
    model.result("pg36").feature("con1").set("radiusexpr", ".01");
    model.result("pg36").feature("con1").set("levels", "range(0,0.25,1)");
    model.result("pg36").run();
    model.result("pg36").feature("con1").set("levels", ".25");
    model.result("pg36").run();
    model.result("pg36").set("edges", "off");
    model.result("pg36").run();
    model.result("pg36").feature("con1").set("colorlegend", "off");
    model.result("pg36").feature("con1").set("radiusexpr", ".003");
    model.result("pg36").run();
    model.result("pg36").feature("con1").set("contourtype", "lines");
    model.result("pg36").run();
    model.result("pg36").feature("con1").setIndex("looplevel", "73", 0);
    model.result("pg36").run();
    model.result().create("pg40", "PlotGroup3D");
    model.result("pg40").label("Second State LZ");
    model.result("pg40").create("con1", "Contour");
    model.result("pg40").feature("con1").set("expr", "g2(bn,en,ang)");
    model.result("pg40").run();
    model.result("pg40").run();
    model.result("pg40").set("data", "dset18");
    model.result("pg40").run();
    model.result("pg40").feature("con1").set("data", "cpl3");
    model.result("pg40").set("edges", "off");

    model.view("view1").hideEntities("hide1").add(new int[]{17});
    model.view("view1").hideEntities("hide1").add(new int[]{15});

    model.result("pg36").run();
    model.result("pg40").run();

    model.view("view1").hideObjects().clear();
    model.view("view1").hideEntities().clear();
    model.view("view1").hideEntities().create("hide1");
    model.view("view1").hideEntities("hide1").geom(3);
    model.view("view1").hideEntities("hide1").add(new int[]{1});
    model.view("view1").hideEntities("hide1").add(new int[]{23});
    model.view("view1").hideEntities("hide1").add(new int[]{18});
    model.view("view1").hideEntities("hide1").add(new int[]{21});
    model.view("view1").hideEntities("hide1").add(new int[]{11});
    model.view("view1").hideEntities("hide1").add(new int[]{10});
    model.view("view1").hideEntities("hide1").add(new int[]{2});
    model.view("view1").hideEntities("hide1").add(new int[]{3});
    model.view("view1").hideEntities("hide1").add(new int[]{5});
    model.view("view1").hideEntities("hide1").add(new int[]{16});
    model.view("view1").hideEntities("hide1").add(new int[]{17});
    model.view("view1").hideEntities("hide1").add(new int[]{4});
    model.view("view1").hideEntities("hide1").add(new int[]{22});

    model.result("pg40").run();
    model.result("pg40").create("iso1", "Isosurface");
    model.result("pg40").feature("iso1").label("Gap To Third");
    model.result("pg40").feature("iso1").set("expr", "g2(bn,en,ang)-g3(bn,en,ang)");
    model.result("pg40").feature("iso1").set("levelmethod", "levels");
    model.result("pg40").feature("iso1").set("interactive", "off");
    model.result("pg40").feature("iso1").set("levels", ".1");
    model.result("pg40").run();
    model.result("pg40").feature("iso1").set("expr", "g2(bn,en,ang)-g3(bn,en,ang)+if(x>2e-3||y>9e-2||z>1.5e-3,1,0)");
    model.result("pg40").run();
    model.result("pg40").feature("iso1").set("expr", "g2(bn,en,ang)-g3(bn,en,ang)+if(x>2e-3||y>8e-4||z>1.5e-3,1,0)");
    model.result("pg40").run();
    model.result("pg40").feature("iso1")
         .set("expr", "g2(bn,en,ang)-g3(bn,en,ang)+if(abs(x)>2e-3||abs(y)>8e-4||abs(z)>1.5e-3,1,0)");
    model.result("pg40").run();
    model.result("pg40").feature("iso1").set("colorlegend", "off");
    model.result("pg40").run();
    model.result("pg40").feature("con1").set("levelmethod", "levels");
    model.result("pg40").feature("con1").set("levels", "range(1,1,10)");
    model.result("pg40").feature().duplicate("iso2", "iso1");
    model.result("pg40").feature("iso2").set("data", "dset18");
    model.result("pg40").feature("iso1").set("data", "dset18");
    model.result("pg40").feature("iso1").setIndex("looplevel", "51", 0);
    model.result("pg40").feature("iso2").label("Gap To Third 100G");
    model.result("pg40").feature("iso1").label("Gap To Third 0G");
    model.result("pg40").feature("iso2").set("coloring", "uniform");
    model.result("pg40").feature("iso1").set("coloring", "uniform");
    model.result("pg40").feature("iso1").set("color", "custom");
    model.result("pg40").feature("iso1").set("customcolor", new double[]{0, 0.3333333432674408, 0.5882353186607361});
    model.result("pg40").feature("iso2").set("color", "custom");
    model.result("pg40").feature("iso2")
         .set("customcolor", new double[]{0.7490196228027344, 0.1411764770746231, 0.3686274588108063});
    model.result("pg40").feature().duplicate("iso3", "iso2");
    model.result("pg40").feature().duplicate("iso4", "iso3");
    model.result("pg40").feature().duplicate("iso5", "iso4");
    model.result("pg40").feature("iso3").label("Gap To Third 200G");
    model.result("pg40").feature("iso3")
         .set("customcolor", new double[]{0.43921568989753723, 0.686274528503418, 0.10196078568696976});
    model.result("pg40").feature("iso4").label("Gap To Third 300G");
    model.result("pg40").feature("iso4")
         .set("customcolor", new double[]{0.9921568632125854, 0.7254902124404907, 0.07450980693101883});
    model.result("pg40").feature("iso5").label("Gap To Third 400G");
    model.result("pg40").feature("iso5")
         .set("customcolor", new double[]{0.9490196108818054, 0.3960784375667572, 0.13333334028720856});
    model.result("pg40").feature("iso2")
         .set("customcolor", new double[]{0.03529411926865578, 0.4627451002597809, 0.03529411926865578});
    model.result("pg40").feature("iso3")
         .set("customcolor", new double[]{0.9921568632125854, 0.7254902124404907, 0.07450980693101883});
    model.result("pg40").feature("iso4")
         .set("customcolor", new double[]{0.9490196108818054, 0.3960784375667572, 0.13333334028720856});
    model.result("pg40").feature("iso5")
         .set("customcolor", new double[]{0.7490196228027344, 0.1411764770746231, 0.3686274588108063});
    model.result("pg40").feature("iso2").setIndex("looplevel", "61", 0);
    model.result("pg40").feature("iso3").setIndex("looplevel", "71", 0);
    model.result("pg40").feature("iso4").setIndex("looplevel", "81", 0);
    model.result("pg40").feature("iso5").setIndex("looplevel", "91", 0);
    model.result("pg40").run();
    model.result("pg40").set("allowtableupdate", false);
    model.result("pg40")
         .set("title", "Contour: g2(bn,en,ang) Isosurface: g2(bn,en,ang)-g3(bn,en,ang)+if(abs(x)>2e-3||abs(y)>8e-4||abs(z)>1.5e-3,1,0) Isosurface: g2(bn,en,ang)-g3(bn,en,ang)+if(abs(x)>2e-3||abs(y)>8e-4||abs(z)>1.5e-3,1,0) Isosurface: g2(bn,en,ang)-g3(bn,en,ang)+if(abs(x)>2e-3||abs(y)>8e-4||abs(z)>1.5e-3,1,0) Isosurface: g2(bn,en,ang)-g3(bn,en,ang)+if(abs(x)>2e-3||abs(y)>8e-4||abs(z)>1.5e-3,1,0) Isosurface: g2(bn,en,ang)-g3(bn,en,ang)+if(abs(x)>2e-3||abs(y)>8e-4||abs(z)>1.5e-3,1,0)");
    model.result("pg40").set("hasbeenplotted", true);
    model.result("pg40").feature("con1").set("hasbeenplotted", true);
    model.result("pg40").feature("iso1").set("hasbeenplotted", true);
    model.result("pg40").feature("iso2").set("hasbeenplotted", true);
    model.result("pg40").feature("iso3").set("hasbeenplotted", true);
    model.result("pg40").feature("iso4").set("hasbeenplotted", true);
    model.result("pg40").feature("iso5").set("hasbeenplotted", true);
    model.result("pg40").set("renderdatacached", false);
    model.result("pg40").set("allowtableupdate", true);
    model.result("pg40").set("renderdatacached", true);
    model.result("pg40").set("titletype", "manual");
    model.result("pg40").set("title", "A Hoosh Title");
    model.result("pg40").run();
    model.result("pg40").set("allowtableupdate", false);
    model.result("pg40").set("hasbeenplotted", true);
    model.result("pg40").feature("con1").set("hasbeenplotted", true);
    model.result("pg40").feature("iso1").set("hasbeenplotted", true);
    model.result("pg40").feature("iso2").set("hasbeenplotted", true);
    model.result("pg40").feature("iso3").set("hasbeenplotted", true);
    model.result("pg40").feature("iso4").set("hasbeenplotted", true);
    model.result("pg40").feature("iso5").set("hasbeenplotted", true);
    model.result("pg40").set("renderdatacached", false);
    model.result("pg40").set("allowtableupdate", true);
    model.result("pg40").set("renderdatacached", true);
    model.result("pg40").feature("con1").set("coloring", "uniform");
    model.result("pg40").feature("con1").set("color", "gray");
    model.result("pg40").feature("con1").set("contourtype", "tubes");
    model.result("pg40").feature("con1").set("radiusexpr", ".002");
    model.result("pg40").run();
    model.result("pg40").feature("con1").set("radiusexpr", ".0002");
    model.result("pg40").run();
    model.result("pg40").run();
    model.result("pg40").run();
    model.result("pg40").feature("con1").set("tuberadiusscaleactive", "on");
    model.result("pg40").feature("con1").set("radiusexpr", ".001");
    model.result("pg40").feature("con1").set("tuberadiusscale", "1");
    model.result("pg40").run();
    model.result("pg40").feature("con1").set("radiusexpr", ".01");
    model.result("pg40").run();
    model.result("pg40").feature("con1").set("radiusexpr", ".002");
    model.result("pg40").run();
    model.result("pg40").feature("con1").set("colorlegend", "off");
    model.result("pg40").run();
    model.result("pg40").feature("con1").set("expr", "g2(bn,en,ang) + if(abs(y)>1e-3,10,0)");
    model.result("pg40").run();
    model.result("pg40").feature("con1").set("expr", "g2(bn,en,ang) + if(abs(y)>1.1e-3,10,0)");
    model.result("pg40").run();
    model.result("pg40").feature("con1").set("expr", "g2(bn,en,ang) + if(abs(y)>1.25e-3,10,0)");
    model.result("pg40").run();
    model.result("pg40").feature().duplicate("con2", "con1");
    model.result("pg40").feature("con2").set("expr", "g1(bn,en,ang) + if(abs(y)>1.25e-3,10,0)");
    model.result("pg40").feature("con2").set("color", "black");
    model.result("pg40").run();
    model.result("pg40").feature("con2").setIndex("looplevel", "79", 0);
    model.result("pg40").feature("con2").setIndex("looplevel", "51", 0);
    model.result("pg40").feature("con1").setIndex("looplevel", "51", 0);
    model.result("pg40").run();
    model.result("pg40").feature().move("con2", 1);
    model.result().dataset("cpl3").set("quickz", ".09");
    model.result("pg40").run();
    model.result().dataset("cpl3").set("quickz", "-.09");
    model.result("pg40").run();
    model.result("pg40").feature("con2").set("color", "custom");
    model.result("pg40").feature("con2")
         .set("customcolor", new double[]{0.4117647111415863, 0.4117647111415863, 0.4117647111415863});
    model.result("pg40").run();
    model.result("pg40").feature("con2").active(false);
    model.result("pg40").feature("con2").active(true);
    model.result("pg40").run();
    model.result("pg40").feature("con2").active(false);
    model.result("pg40").run();
    model.result("pg40").feature("con1").set("levels", "range(1,2,11)");
    model.result("pg40").run();
    model.result("pg40").feature().duplicate("con3", "con1");
    model.result("pg40").feature().move("con3", 1);
    model.result("pg40").feature("con3").set("data", "cpl4");
    model.result().dataset().move("cpl4", 7);
    model.result().dataset().move("cpl4", 3);
    model.result().dataset("cpl4").set("data", "dset18");
    model.result("pg40").run();
    model.result("pg40").feature("con3").set("color", "custom");
    model.result("pg40").feature("con3")
         .set("customcolor", new double[]{0.5176470875740051, 0.7607843279838562, 0.9176470637321472});
    model.result("pg40").run();
    model.result("pg40").set("title", "Majorana from Secondary State");
    model.result("pg40").run();
    model.result("pg40").feature("iso5").set("levels", ".01");
    model.result("pg40").feature("iso5").set("interactive", "on");
    model.result("pg40").feature("iso5").set("levels", "0");
    model.result("pg40").run();
    model.result("pg40").feature("iso5").set("shift", "0.05");
    model.result("pg40").feature("iso5").set("levels", "0.1");
    model.result("pg40").feature("iso5").set("interactive", "off");
    model.result("pg40").run();
    model.result("pg40").set("allowtableupdate", false);
    model.result("pg40").set("hasbeenplotted", true);
    model.result("pg40").feature("con1").set("hasbeenplotted", true);
    model.result("pg40").feature("con3").set("hasbeenplotted", true);
    model.result("pg40").feature("iso1").set("hasbeenplotted", true);
    model.result("pg40").feature("iso2").set("hasbeenplotted", true);
    model.result("pg40").feature("iso3").set("hasbeenplotted", true);
    model.result("pg40").feature("iso4").set("hasbeenplotted", true);
    model.result("pg40").feature("iso5").set("hasbeenplotted", true);
    model.result("pg40").set("renderdatacached", false);
    model.result("pg40").set("allowtableupdate", true);
    model.result("pg40").set("renderdatacached", true);
    model.result("pg40")
         .set("title", "Majorana from Secondary State.\nTrapping Contours every 1kG for secondary state.\nLoss regions for 0,100,200,300,400G Bias, zero pin offset.");
    model.result("pg40").run();
    model.result("pg40").set("title", "Majorana from Secondary State.");
    model.result("pg40").feature("iso2").label("Gap To Third 25G");
    model.result("pg40").feature("iso3").label("Gap To Third 50G");
    model.result("pg40").feature("iso4").label("Gap To Third 75G");
    model.result("pg40").feature("iso5").label("Gap To Third 100G");
    model.result("pg40").feature("iso2").setIndex("looplevel", "54", 0);
    model.result("pg40").feature("iso2").label("Gap To Third 30G");
    model.result("pg40").feature("iso3").setIndex("looplevel", "56", 0);
    model.result("pg40").feature("iso4").label("Gap To Third 80G");
    model.result("pg40").feature("iso4").setIndex("looplevel", "59", 0);
    model.result("pg40").feature("iso5").setIndex("looplevel", "61", 0);
    model.result("pg40").run();
    model.result("pg40").feature("iso2").setIndex("looplevel", "48", 0);
    model.result("pg40").feature("iso3").setIndex("looplevel", "46", 0);
    model.result("pg40").feature("iso4").setIndex("looplevel", "43", 0);
    model.result("pg40").feature("iso5").setIndex("looplevel", "41", 0);
    model.result("pg40").run();

    model.label("me_rodliteral_losses.mph");

    model.study("std2").feature("stat").set("showdistribute", false);
    model.study("std3").feature("stat").set("showdistribute", false);
    model.study("std2").feature("stat").set("showdistribute", false);
    model.study("std4").feature("stat").set("showdistribute", false);
    model.study("std2").feature("stat").set("showdistribute", false);

    model.result().numerical("int3").setIndex("looplevelinput", "manual", 1);
    model.result().numerical("int3").setIndex("looplevelinput", "manualindices", 1);
    model.result().numerical("int3").setIndex("looplevelinput", "all", 1);
    model.result().numerical("int3").setIndex("looplevelinput", "manual", 0);

    model.study("std2").feature("stat").set("showdistribute", false);

    model.result().numerical("int6")
         .set("expr", "1e12*lz(0.9*bn,en,moag,6)*bw(0.9*bn,en,ang,enm,temp)*(abs(z)<1.5e-3)*(abs(x)<2.5e-3)*(abs(y)<0.9e-3)");
    model.result().table().create("tbl46", "Table");
    model.result().table("tbl46")
         .comments("165um (1e12*lz(0.9*bn,en,moag,6)*bw(0.9*bn,en,ang,enm,temp)*(abs(z)<1.5e-3)*(abs(x)<2.5e-3)*(abs(y)<0.9e-3))");
    model.result().numerical("int6").set("table", "tbl46");
    model.result().numerical("int6").setIndex("looplevelinput", "manual", 0);
    model.result().numerical("int6").setIndex("looplevel", "8", 0);
    model.result().table().create("tbl47", "Table");
    model.result().table("tbl47")
         .comments("165um (1e12*lz(0.9*bn,en,moag,6)*bw(0.9*bn,en,ang,enm,temp)*(abs(z)<1.5e-3)*(abs(x)<2.5e-3)*(abs(y)<0.9e-3))");
    model.result().numerical("int6").set("table", "tbl47");
    model.result().numerical("int6").setResult();
    model.result().table("tbl47")
         .save("R:\\COMSOL files\\Magnetoelectrostatic Cloverleaf\\TimPlot\\6ms\\165_0.9_2.txt");
    model.result().numerical("int6")
         .set("expr", "1e12*lz(1.1*bn,en,moag,6)*bw(1.1*bn,en,ang,enm,temp)*(abs(z)<1.5e-3)*(abs(x)<2.5e-3)*(abs(y)<0.9e-3)");
    model.result().table().create("tbl48", "Table");
    model.result().table("tbl48")
         .comments("165um (1e12*lz(1.1*bn,en,moag,6)*bw(1.1*bn,en,ang,enm,temp)*(abs(z)<1.5e-3)*(abs(x)<2.5e-3)*(abs(y)<0.9e-3))");
    model.result().numerical("int6").set("table", "tbl48");
    model.result().numerical("int6").setResult();
    model.result().table("tbl48")
         .save("R:\\COMSOL files\\Magnetoelectrostatic Cloverleaf\\TimPlot\\6ms\\165_1.1.txt");
    model.result().numerical("int6")
         .set("expr", "1e12*lz(1.1*bn,en,moag,8.5)*bw(1.1*bn,en,ang,enm,temp)*(abs(z)<1.5e-3)*(abs(x)<2.5e-3)*(abs(y)<0.9e-3)");
    model.result().numerical("int6").setIndex("looplevel", "10", 0);
    model.result().table().create("tbl49", "Table");
    model.result().table("tbl49")
         .comments("165um (1e12*lz(1.1*bn,en,moag,8.5)*bw(1.1*bn,en,ang,enm,temp)*(abs(z)<1.5e-3)*(abs(x)<2.5e-3)*(abs(y)<0.9e-3))");
    model.result().numerical("int6").set("table", "tbl49");
    model.result().numerical("int6").setResult();
    model.result().table("tbl49")
         .save("R:\\COMSOL files\\Magnetoelectrostatic Cloverleaf\\TimPlot\\200mK_8.5m_p_s\\165_200_1.1");
    model.result().numerical("int6")
         .set("expr", "1e12*lz(0.9*bn,en,moag,8.5)*bw(0.9*bn,en,ang,enm,temp)*(abs(z)<1.5e-3)*(abs(x)<2.5e-3)*(abs(y)<0.9e-3)");
    model.result().table().create("tbl50", "Table");
    model.result().table("tbl50")
         .comments("165um (1e12*lz(0.9*bn,en,moag,8.5)*bw(0.9*bn,en,ang,enm,temp)*(abs(z)<1.5e-3)*(abs(x)<2.5e-3)*(abs(y)<0.9e-3))");
    model.result().numerical("int6").set("table", "tbl50");
    model.result().numerical("int6").setResult();
    model.result().table("tbl50")
         .save("R:\\COMSOL files\\Magnetoelectrostatic Cloverleaf\\TimPlot\\200mK_8.5m_p_s\\165_200_0.9.txt");
    model.result().numerical("int2").active(true);
    model.result().numerical("int2").setIndex("looplevel", "2", 1);
    model.result().numerical("int2").setIndex("looplevel", "2,7", 1);
    model.result().numerical("int2").setIndex("looplevel", "12", 1);
    model.result().numerical("int2").setIndex("looplevel", "12,22", 1);
    model.result().numerical("int2").setIndex("looplevel", "12,22,32", 1);
    model.result().numerical("int2").setIndex("looplevel", "12,22,32,37", 1);
    model.result().numerical("int2").setIndex("looplevel", "12,22,32,37,42", 1);
    model.result().numerical("int2").setIndex("looplevel", "10", 0);
    model.result().table().create("tbl51", "Table");
    model.result().table("tbl51")
         .comments("TrapVolume (1e18*bw(bn,en,ang,enm,temp)*(abs(z)<1.5e-3)*(abs(x)<2.5e-3)*(abs(y)<0.9e-3))");
    model.result().numerical("int2").set("table", "tbl51");
    model.result().numerical("int2").setResult();
    model.result().numerical("int2")
         .set("expr", "1e18*bw(0.9*bn,en,ang,enm,temp)*(abs(z)<1.5e-3)*(abs(x)<2.5e-3)*(abs(y)<0.9e-3)");
    model.result().table().create("tbl52", "Table");
    model.result().table("tbl52")
         .comments("TrapVolume (1e18*bw(0.9*bn,en,ang,enm,temp)*(abs(z)<1.5e-3)*(abs(x)<2.5e-3)*(abs(y)<0.9e-3))");
    model.result().numerical("int2").set("table", "tbl52");
    model.result().numerical("int2").setResult();
    model.result().table("tbl52")
         .save("R:\\COMSOL files\\Magnetoelectrostatic Cloverleaf\\TimPlot\\200mK_8.5m_p_s\\TrapVolume0.9.txt");
    model.result().numerical("int2")
         .setIndex("looplevel", "2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42", 1);
    model.result().numerical("int2").setIndex("looplevel", "2", 1);
    model.result().numerical("int2").setIndex("looplevel", "1", 1);
    model.result().numerical("int2").setIndex("looplevel", "2", 1);
    model.result().numerical("int2").setIndex("looplevelinput", "all", 1);
    model.result().table().create("tbl53", "Table");
    model.result().table("tbl53")
         .comments("TrapVolume (1e18*bw(0.9*bn,en,ang,enm,temp)*(abs(z)<1.5e-3)*(abs(x)<2.5e-3)*(abs(y)<0.9e-3))");
    model.result().numerical("int2").set("table", "tbl53");
    model.result().numerical("int2").setResult();
    model.result().table("tbl53")
         .save("R:\\COMSOL files\\Magnetoelectrostatic Cloverleaf\\TimPlot\\200mK_8.5m_p_s\\TrapVolume0.9.txt");
    model.result().numerical("int2")
         .set("expr", "1e18*bw(1.1*bn,en,ang,enm,temp)*(abs(z)<1.5e-3)*(abs(x)<2.5e-3)*(abs(y)<0.9e-3)");
    model.result().table().create("tbl54", "Table");
    model.result().table("tbl54")
         .comments("TrapVolume (1e18*bw(1.1*bn,en,ang,enm,temp)*(abs(z)<1.5e-3)*(abs(x)<2.5e-3)*(abs(y)<0.9e-3))");
    model.result().numerical("int2").set("table", "tbl54");
    model.result().numerical("int2").setResult();
    model.result().table("tbl54")
         .save("R:\\COMSOL files\\Magnetoelectrostatic Cloverleaf\\TimPlot\\200mK_8.5m_p_s\\TrapVolume1.1.txt");
    model.result().numerical("int3")
         .set("expr", "1e12*lz(0.9*bn,en,moag,5)*bw(bn,en,ang,enm,temp)*(abs(z)<1.5e-3)*(abs(x)<2.5e-3)*(abs(y)<0.9e-3)");
    model.result().numerical("int3").setIndex("looplevel", "10", 0);
    model.result().numerical("int3")
         .set("expr", "1e12*lz(0.9*bn,en,moag,5)*bw(0.9*bn,en,ang,enm,temp)*(abs(z)<1.5e-3)*(abs(x)<2.5e-3)*(abs(y)<0.9e-3)");
    model.result().table().create("tbl55", "Table");
    model.result().table("tbl55")
         .comments("15um (1e12*lz(0.9*bn,en,moag,5)*bw(0.9*bn,en,ang,enm,temp)*(abs(z)<1.5e-3)*(abs(x)<2.5e-3)*(abs(y)<0.9e-3))");
    model.result().numerical("int3").set("table", "tbl55");
    model.result().numerical("int3").setResult();
    model.result().table("tbl55")
         .save("R:\\COMSOL files\\Magnetoelectrostatic Cloverleaf\\TimPlot\\200mK_8.5m_p_s\\15_200_0.9.txt");
    model.result().numerical("int3")
         .set("expr", "1e12*lz(1.1*bn,en,moag,5)*bw(1.1*bn,en,ang,enm,temp)*(abs(z)<1.5e-3)*(abs(x)<2.5e-3)*(abs(y)<0.9e-3)");
    model.result().table().create("tbl56", "Table");
    model.result().table("tbl56")
         .comments("15um (1e12*lz(1.1*bn,en,moag,5)*bw(1.1*bn,en,ang,enm,temp)*(abs(z)<1.5e-3)*(abs(x)<2.5e-3)*(abs(y)<0.9e-3))");
    model.result().numerical("int3").set("table", "tbl56");
    model.result().numerical("int3").setResult();
    model.result().table("tbl56")
         .save("R:\\COMSOL files\\Magnetoelectrostatic Cloverleaf\\TimPlot\\200mK_8.5m_p_s\\15_200_1.1.txt");

    model.label("me_rodliteral_losses.mph");

    model.result("pg37").active(true);
    model.result("pg37").feature("iso1").set("solnum", "213");
    model.result("pg37").feature("iso1").set("resolution", "fine");
    model.result("pg37").feature("iso2").set("solnum", "317");
    model.result("pg37").feature("iso2").set("resolution", "fine");
    model.result("pg37").feature("iso3").set("resolution", "fine");
    model.result("pg37").feature("iso3").set("solnum", "418");
    model.result("pg37").feature("iso4").active(false);
    model.result("pg37").feature("iso5").active(false);
    model.result("pg37").feature("iso6").active(false);
    model.result("pg37").feature("iso1").active(true);
    model.result("pg37").run();
    model.result("pg37").feature("iso1").set("data", "dset18");
    model.result("pg37").feature("iso1").set("solnum", "51");
    model.result("pg37").run();
    model.result("pg37").feature("iso1").set("expr", "ang + if(angap(bn,en)<10&&abs(z)<1.5e-3,0,nan) - pi/2");
    model.result("pg37").run();
    model.result("pg37").feature("iso2").set("data", "dset18");
    model.result("pg37").feature("iso2").set("solnum", "61");
    model.result("pg37").feature("iso2").set("expr", "ang + if(angap(bn,en)<10&&abs(z)<1.5e-3,0,nan)-pi/2 +30");
    model.result("pg37").feature("iso3").set("data", "dset18");
    model.result("pg37").feature("iso3").set("solnum", "71");
    model.result("pg37").feature("iso3").set("expr", "ang + if(angap(bn,en)<10&&abs(z)<1.5e-3,0,nan)-pi/2 + 60");
    model.result("pg37").run();
    model.result("pg37").feature("iso1").set("customcolor", new double[]{0, 0, 0});
    model.result("pg37").feature("iso2")
         .set("customcolor", new double[]{0.545098066329956, 0, 0.007843137718737125});
    model.result("pg37").feature("iso3")
         .set("customcolor", new double[]{0.9921568632125854, 0.7254902124404907, 0.07450980693101883});
    model.result("pg37").create("surf1", "Surface");
    model.result("pg39").run();
    model.result("pg39").set("allowtableupdate", false);
    model.result("pg39").set("allowevalintitle", false);
    model.result("pg39")
         .set("title", "boffset(101)=0.05 Surface: !(dom==1||dom==9||dom==10||dom==6||dom==16||dom==12||dom==14)");
    model.result("pg39").set("xlabel", "");
    model.result("pg39").set("ylabel", "");
    model.result("pg39").set("hasbeenplotted", true);
    model.result("pg39").feature("surf1").set("rangeunit", "");
    model.result("pg39").feature("surf1").set("rangecolormin", 0);
    model.result("pg39").feature("surf1").set("rangecolormax", 1);
    model.result("pg39").feature("surf1").set("rangecoloractive", "off");
    model.result("pg39").feature("surf1").set("rangedatamin", 0);
    model.result("pg39").feature("surf1").set("rangedatamax", 1);
    model.result("pg39").feature("surf1").set("rangedataactive", "off");
    model.result("pg39").feature("surf1").set("rangeactualminmax", new double[]{0, 1});
    model.result("pg39").feature("surf1").set("hasbeenplotted", true);
    model.result("pg39").set("renderdatacached", false);
    model.result("pg39").set("allowtableupdate", true);
    model.result("pg39").set("renderdatacached", true);
    model.result().table("evl2")
         .addRow(new double[]{1.3846890926361084, 0.16668391227722168, 1}, new double[]{0, 0, 0});
    model.result().table("evl2")
         .addRow(new double[]{1.3650774955749512, 0.16668391227722168, 1}, new double[]{0, 0, 0});
    model.result("pg37").feature("surf1")
         .set("expr", "!(dom==1||dom==9||dom==10||dom==6||dom==16||dom==12||dom==14)");
    model.result("pg37").feature().remove("surf1");
    model.result("pg37").feature().duplicate("iso7", "iso3");
    model.result("pg37").feature("iso7")
         .set("expr", "!(dom==1||dom==9||dom==10||dom==6||dom==16||dom==12||dom==14)");
    model.result("pg37").feature("iso7").set("levels", "0.5");
    model.result("pg37").feature("iso7")
         .set("customcolor", new double[]{0.21176470816135406, 0.5490196347236633, 0.7960784435272217});
    model.result("pg37").feature("con1").active(false);
    model.result("pg37").feature("con2").active(false);
    model.result("pg37").run();
    model.result("pg37").set("showhiddenobjects", "off");
    model.result().duplicate("pg41", "pg37");
    model.result("pg41").label("Show Pins");
    model.result("pg41").feature().remove("iso1");
    model.result("pg41").feature().remove("iso2");
    model.result("pg41").feature().remove("iso3");
    model.result("pg41").feature().remove("iso4");
    model.result("pg41").feature().remove("iso5");
    model.result("pg41").feature().remove("iso6");
    model.result("pg41").feature().remove("con1");
    model.result("pg41").feature().remove("con2");
    model.result("pg41").set("showhiddenobjects", "on");
    model.result("pg41").set("data", "dset18");
    model.result("pg41").setIndex("looplevel", "51", 0);
    model.result("pg41").run();
    model.result("pg41").feature("iso7").set("shift", "0");
    model.result("pg41").feature("iso7").set("expr", "dom");
    model.result("pg41").feature("iso7").set("levels", "10");
    model.result("pg41").run();
    model.result("pg41").feature("iso7").set("shift", "0");
    model.result("pg41").feature("iso7").set("levels", "0");
    model.result("pg41").run();
    model.result("pg41").feature("iso7").set("expr", "");
    model.result("pg41").create("vol1", "Volume");
    model.result("pg41").feature("vol1").set("expr", "dom");
    model.result("pg41").feature("iso7").active(false);
    model.result("pg41").run();
    model.result("pg41").feature("vol1")
         .set("expr", "if(!(dom==1||dom==9||dom==10||dom==6||dom==16||dom==12||dom==14),0,nan)");
    model.result("pg41").run();
    model.result("pg41").feature("vol1").create("filt1", "Filter");
    model.result("pg41").feature("vol1").feature("filt1")
         .set("expr", "!(dom==1||dom==9||dom==10||dom==6||dom==16||dom==12||dom==14)");
    model.result("pg41").feature("vol1").set("expr", "1");
    model.result("pg41").run();
    model.result("pg37").feature().copy("vol1", "pg41/vol1");
    model.result("pg41").feature().remove("vol1");
    model.result("pg37").feature("vol1").label("Volume 1");
    model.result("pg37").feature().move("vol1", 8);
    model.result("pg37").feature().remove("iso7");
    model.result("pg37").run();
    model.result("pg37").set("showhiddenobjects", "on");
    model.result("pg37").run();
    model.result("pg37").feature("vol1").set("expr", "dom");
    model.result("pg37").run();
    model.result("pg37").set("allowtableupdate", false);
    model.result("pg37").set("hasbeenplotted", true);
    model.result("pg37").feature("iso1").set("hasbeenplotted", true);
    model.result("pg37").feature("iso2").set("hasbeenplotted", true);
    model.result("pg37").feature("iso3").set("hasbeenplotted", true);
    model.result("pg37").feature("vol1").set("hasbeenplotted", true);
    model.result("pg37").set("renderdatacached", false);
    model.result("pg37").set("allowtableupdate", true);
    model.result("pg37").set("renderdatacached", true);
    model.result().table("evl3")
         .addRow(new double[]{-3.8124342119614063, -3.569920911900361, 6.423443907514724, 5}, new double[]{0, 0, 0, 0});
    model.result().table("evl3")
         .addRow(new double[]{-3.8124342119614063, -3.569920911900361, 6.423443907514724, 5}, new double[]{0, 0, 0, 0});
    model.result().table("evl3")
         .addRow(new double[]{-3.8124342119614063, -3.569920911900361, 6.423443907514724, 5}, new double[]{0, 0, 0, 0});
    model.result().table("evl3")
         .addRow(new double[]{1.0160034003915062, -2.188439773764713, 5.53401971808687, 22}, new double[]{0, 0, 0, 0});
    model.result().table("evl3")
         .addRow(new double[]{2.8812510745160296, -6.876504673426152, -4.8694563605432055, 23}, new double[]{0, 0, 0, 0});
    model.result().table("evl3")
         .addRow(new double[]{-3.883510643263577, 4.832336267772911, -3.967691879553085, 4}, new double[]{0, 0, 0, 0});
    model.result("pg37").feature("vol1").feature("filt1")
         .set("expr", "!(dom==1||dom==9||dom==10||dom==6||dom==16||dom==12||dom==14||dom==4||dom==5||dom==22||dom==23)");

    return model;
  }

  public static Model run37(Model model) {
    model.result("pg37").run();
    model.result("pg37").feature("vol1").set("coloring", "uniform");
    model.result("pg37").feature("vol1").set("color", "black");
    model.result("pg37").run();
    model.result("pg37").feature("vol1").set("coloring", "colortable");
    model.result("pg37").run();
    model.result("pg37").feature("vol1").feature("filt1")
         .set("expr", "x>0&&!(dom==1||dom==9||dom==10||dom==6||dom==16||dom==12||dom==14||dom==4||dom==5||dom==22||dom==23)");
    model.result("pg37").run();
    model.result("pg37").feature().duplicate("vol2", "vol1");
    model.result("pg37").feature("vol2").feature("filt1")
         .set("expr", "x<0&&!(dom==1||dom==9||dom==10||dom==6||dom==16||dom==12||dom==14||dom==4||dom==5||dom==22||dom==23)");
    model.result("pg37").feature("vol1").set("coloring", "uniform");
    model.result("pg37").feature("vol1").set("color", "blue");
    model.result("pg37").feature("vol2").set("coloring", "uniform");
    model.result("pg37").feature("vol2").set("color", "red");
    model.result("pg37").run();
    model.result("pg37").feature("iso1").create("filt1", "Filter");
    model.result("pg37").feature("iso1").feature("filt1").set("expr", "angap(bn,en)<10&&abs(z)<1.5e-3");
    model.result("pg37").feature("iso1").set("expr", "ang - pi/2");
    model.result("pg37").run();
    model.result("pg37").feature("iso2").create("filt1", "Filter");
    model.result("pg37").feature("iso2").feature("filt1").set("expr", "angap(bn,en)<10&&abs(z)<1.5e-3");
    model.result("pg37").feature("iso3").create("filt1", "Filter");
    model.result("pg37").feature("iso3").feature("filt1").set("expr", "angap(bn,en)<10&&abs(z)<1.5e-3");
    model.result("pg37").feature("iso3").set("expr", "ang -pi/2 + 60");
    model.result("pg37").feature("iso2").set("expr", "ang -pi/2 +30");
    model.result("pg37").run();
    model.result("pg37").feature("iso1").feature("filt1").set("expr", "angap(bn,en)<10&&abs(z)<1.75e-3");
    model.result("pg37").run();
    model.result("pg37").feature("iso1").feature("filt1").set("expr", "angap(bn,en)<10&&abs(z)<1.7e-3");
    model.result("pg37").run();
    model.result("pg37").feature("iso1").feature("filt1").set("expr", "angap(bn,en)<10&&abs(z)<1.5e-3");
    model.result("pg37").run();
    model.result("pg37").feature("iso1").feature("filt1").set("expr", "angap(bn,en)<10&&abs(z)<2e-3");
    model.result("pg37").feature("iso2").feature("filt1").set("expr", "angap(bn,en)<10&&abs(z)<2e-3");
    model.result("pg37").feature("iso3").feature("filt1").set("expr", "angap(bn,en)<10&&abs(z)<2e-3");
    model.result("pg37").run();

    model.param().set("xrs", "0");

    model.sol("sol63").study("std6");

    model.study("std6").feature("stat").set("notlistsolnum", 1);
    model.study("std6").feature("stat").set("notsolnum", "1");
    model.study("std6").feature("stat").set("listsolnum", 1);
    model.study("std6").feature("stat").set("solnum", "1");

    model.sol("sol63").feature().remove("s1");
    model.sol("sol63").feature().remove("v1");
    model.sol("sol63").feature().remove("st1");
    model.sol("sol63").create("st1", "StudyStep");
    model.sol("sol63").feature("st1").set("study", "std6");
    model.sol("sol63").feature("st1").set("studystep", "stat");
    model.sol("sol63").create("v1", "Variables");
    model.sol("sol63").feature("v1").set("control", "stat");
    model.sol("sol63").create("s1", "Stationary");
    model.sol("sol63").feature("s1").create("p1", "Parametric");
    model.sol("sol63").feature("s1").feature("p1").set("pname", new String[]{"vm1"});
    model.sol("sol63").feature("s1").feature("p1").set("plistarr", new String[]{"range(0,20,0)"});
    model.sol("sol63").feature("s1").feature("p1").set("punit", new String[]{""});
    model.sol("sol63").feature("s1").feature("p1").set("sweeptype", "sparse");
    model.sol("sol63").feature("s1").feature("p1").set("preusesol", "no");
    model.sol("sol63").feature("s1").feature("p1").set("pcontinuationmode", "no");
    model.sol("sol63").feature("s1").feature("p1").set("plot", "off");
    model.sol("sol63").feature("s1").feature("p1").set("plotgroup", "pg6");
    model.sol("sol63").feature("s1").feature("p1").set("probesel", "all");
    model.sol("sol63").feature("s1").feature("p1").set("probes", new String[]{"pdom1"});
    model.sol("sol63").feature("s1").feature("p1").set("control", "param");
    model.sol("sol63").feature("s1").set("control", "stat");
    model.sol("sol63").feature("s1").create("se1", "Segregated");
    model.sol("sol63").feature("s1").feature("se1").feature().remove("ssDef");
    model.sol("sol63").feature("s1").feature("se1").create("ss1", "SegregatedStep");
    model.sol("sol63").feature("s1").feature("se1").feature("ss1").set("segvar", new String[]{"mod1_V"});
    model.sol("sol63").feature("s1").create("i1", "Iterative");
    model.sol("sol63").feature("s1").feature("i1").set("linsolver", "cg");
    model.sol("sol63").feature("s1").feature("i1").create("mg1", "Multigrid");
    model.sol("sol63").feature("s1").feature("i1").feature("mg1").set("prefun", "amg");
    model.sol("sol63").feature("s1").feature("se1").feature("ss1").set("linsolver", "i1");
    model.sol("sol63").feature("s1").feature("se1").create("ss2", "SegregatedStep");
    model.sol("sol63").feature("s1").feature("se1").feature("ss2").set("segvar", new String[]{"mod1_Vm"});
    model.sol("sol63").feature("s1").create("i2", "Iterative");
    model.sol("sol63").feature("s1").feature("i2").set("linsolver", "cg");
    model.sol("sol63").feature("s1").feature("i2").create("mg1", "Multigrid");
    model.sol("sol63").feature("s1").feature("i2").feature("mg1").set("prefun", "amg");
    model.sol("sol63").feature("s1").feature("se1").feature("ss2").set("linsolver", "i2");
    model.sol("sol63").feature("s1").feature().remove("fcDef");

    model.study("std7").feature("stat").set("notsolnum", "auto");
    model.study("std7").feature("stat").set("notsolvertype", "solnum");
    model.study("std7").feature("stat").set("notlistsolnum", new String[]{"1"});
    model.study("std7").feature("stat").set("notsolnum", "auto");
    model.study("std7").feature("stat").set("notsolnumhide", "off");
    model.study("std7").feature("stat").set("notstudyhide", "on");
    model.study("std7").feature("stat").set("notsolhide", "on");

    model.sol("sol64").feature("v1").set("notsolnum", "auto");
    model.sol("sol64").feature("v1").set("notsolvertype", "solnum");
    model.sol("sol64").feature("v1").set("notlistsolnum", new String[]{"1"});
    model.sol("sol64").feature("v1").set("notsolnum", "auto");
    model.sol("sol64").feature("v1").set("control", "stat");
    model.sol("sol63").attach("std6");

    model.result().create("pg42", "PlotGroup3D");
    model.result("pg42").label("Magnetic Flux Density Norm (mfnc)");
    model.result("pg42").set("data", "dset17");
    model.result("pg42").set("solvertype", "none");
    model.result("pg42").set("data", "dset17");
    model.result("pg42").feature().create("mslc1", "Multislice");
    model.result("pg42").feature("mslc1").set("solvertype", "none");
    model.result("pg42").feature("mslc1").set("expr", "mfnc.normB");
    model.result("pg42").feature("mslc1").set("data", "parent");
    model.result().create("pg43", "PlotGroup3D");
    model.result("pg43").label("Electric Potential (es)");
    model.result("pg43").set("data", "dset17");
    model.result("pg43").set("solvertype", "none");
    model.result("pg43").set("frametype", "spatial");
    model.result("pg43").set("data", "dset17");
    model.result("pg43").feature().create("mslc1", "Multislice");
    model.result("pg43").feature("mslc1").set("solvertype", "none");
    model.result("pg43").feature("mslc1").set("expr", "V");
    model.result("pg43").feature("mslc1").set("data", "parent");

    model.probe("pdom1").genResult("none");

    model.sol("sol63").runAll();
    model.sol("sol64").study("std7");

    model.study("std7").feature("stat").set("notlistsolnum", 1);
    model.study("std7").feature("stat").set("notsolnum", "auto");
    model.study("std7").feature("stat").set("listsolnum", 1);
    model.study("std7").feature("stat").set("solnum", "1");

    model.sol("sol64").feature().remove("s1");
    model.sol("sol64").feature().remove("v1");
    model.sol("sol64").feature().remove("st1");
    model.sol("sol64").create("st1", "StudyStep");
    model.sol("sol64").feature("st1").set("study", "std7");
    model.sol("sol64").feature("st1").set("studystep", "stat");
    model.sol("sol64").create("v1", "Variables");
    model.sol("sol64").feature("v1").set("control", "stat");
    model.sol("sol64").create("s1", "Stationary");
    model.sol("sol64").feature("s1").create("p1", "Parametric");
    model.sol("sol64").feature("s1").feature().remove("pDef");
    model.sol("sol64").feature("s1").feature("p1").set("control", "stat");
    model.sol("sol64").feature("s1").set("control", "stat");
    model.sol("sol64").attach("std7");

    model.probe("pdom1").genResult("none");

    model.sol("sol64").runAll();

    model.result("pg37").run();
    model.result("pg37").create("iso7", "Isosurface");
    model.result("pg37").feature("iso7").label("Trap Contour");
    model.result("pg37").feature("iso7").set("expr", "real(f32energy(bn,es.normE,ang))-enm");
    model.result("pg37").feature("iso7").set("levelmethod", "levels");
    model.result("pg37").feature("iso7").set("levels", "5");
    model.result("pg37").feature("iso7").set("data", "dset18");
    model.result("pg37").feature("iso7").setIndex("looplevel", "51", 0);
    model.result("pg37").feature("iso7").set("expr", "real(f32energy(bn,es.normE,ang))");
    model.result("pg37").run();
    model.result("pg37").feature("iso7").create("filt1", "Filter");
    model.result("pg37").feature("iso7").feature("filt1").set("expr", "sqrt(x^2+y^2+z^2)<8e-4");
    model.result("pg37").run();
    model.result("pg37").feature("iso7").feature("filt1").set("expr", "sqrt(x^2+y^2+z^2)<8e-4&&(x<0||y<0||z<0)");
    model.result("pg37").run();
    model.result("pg37").feature("iso7").set("expr", "real(f32energy(bn,es.normE,ang))-enm");
    model.result("pg37").feature("iso7").set("levels", "range(1,1,5)");
    model.result("pg37").run();
    model.result("pg37").feature("iso7").feature("filt1").set("expr", "sqrt(x^2+y^2+z^2)<8e-4&&(x<=0||y>=0||z<=0)");
    model.result("pg37").run();
    model.result("pg37").feature("iso7").feature("filt1").set("expr", "sqrt(x^2+y^2+z^2)<8e-4&&(x<=0||z<=0)");
    model.result("pg37").run();
    model.result("pg37").set("allowtableupdate", false);
    model.result("pg37").set("hasbeenplotted", true);
    model.result("pg37").feature("iso1").set("hasbeenplotted", true);
    model.result("pg37").feature("iso2").set("hasbeenplotted", true);
    model.result("pg37").feature("iso3").set("hasbeenplotted", true);
    model.result("pg37").feature("vol1").set("hasbeenplotted", true);
    model.result("pg37").feature("vol2").set("hasbeenplotted", true);
    model.result("pg37").feature("iso7").set("hasbeenplotted", true);
    model.result("pg37").set("renderdatacached", false);
    model.result("pg37").set("allowtableupdate", true);
    model.result("pg37").set("renderdatacached", true);
    model.result("pg37").feature("iso2")
         .set("customcolor", new double[]{0.4117647111415863, 0.4117647111415863, 0.4117647111415863});
    model.result("pg37").feature("iso3")
         .set("customcolor", new double[]{0.7529411911964417, 0.7529411911964417, 0.7529411911964417});
    model.result("pg37").feature("vol1").set("color", "custom");
    model.result("pg37").feature("vol1").set("customcolor", new double[]{0, 0.3333333432674408, 0.5882353186607361});
    model.result("pg37").feature("vol2").set("color", "custom");
    model.result("pg37").feature("vol2")
         .set("customcolor", new double[]{0.6980392336845398, 0.13333334028720856, 0.13333334028720856});
    model.result("pg37").feature("iso7").set("resolution", "fine");
    model.result("pg37").feature("iso7").set("threshold", "none");
    model.result("pg37").run();
    model.result("pg37").set("allowtableupdate", false);
    model.result("pg37").set("hasbeenplotted", true);
    model.result("pg37").feature("iso1").set("hasbeenplotted", true);
    model.result("pg37").feature("iso2").set("hasbeenplotted", true);
    model.result("pg37").feature("iso3").set("hasbeenplotted", true);
    model.result("pg37").feature("vol1").set("hasbeenplotted", true);
    model.result("pg37").feature("vol2").set("hasbeenplotted", true);
    model.result("pg37").feature("iso7").set("hasbeenplotted", true);
    model.result("pg37").set("renderdatacached", false);
    model.result("pg37").set("allowtableupdate", true);
    model.result("pg37").set("renderdatacached", true);
    model.result().table("evl3")
         .addRow(new double[]{0.30759185721346016, 1.0877902684083516, -0.5203046079912852, 18}, new double[]{0, 0, 0, 0});
    model.result("pg37").feature("iso7").feature("filt1").set("nodespec", "all");
    model.result("pg37").run();
    model.result("pg37").feature("iso7").feature("filt1").set("nodespec", "smooth");
    model.result("pg37").feature("iso7").feature("filt1").set("expr", "(x<=0||z<=0)");
    model.result("pg37").feature("iso7").set("levels", "4");
    model.result("pg37").feature("iso7").set("expr", "real(f32energy(bn,es.normE,ang))");
    model.result("pg37").run();
    model.result("pg37").feature("iso7").feature("filt1").set("expr", "x^2+y^2+z^2<1e-6&&(x<=0||z<=0)");
    model.result("pg37").feature("iso7").set("expr", "real(f32energy(bn,es.normE,ang))-enm");
    model.result("pg37").run();
    model.result("pg37").set("allowtableupdate", false);
    model.result("pg37").set("hasbeenplotted", true);
    model.result("pg37").feature("iso1").set("hasbeenplotted", true);
    model.result("pg37").feature("iso2").set("hasbeenplotted", true);
    model.result("pg37").feature("iso3").set("hasbeenplotted", true);
    model.result("pg37").feature("vol1").set("hasbeenplotted", true);
    model.result("pg37").feature("vol2").set("hasbeenplotted", true);
    model.result("pg37").feature("iso7").set("hasbeenplotted", true);
    model.result("pg37").set("renderdatacached", false);
    model.result("pg37").set("allowtableupdate", true);
    model.result("pg37").set("renderdatacached", true);
    model.result().table("evl3")
         .addRow(new double[]{-0.17206427199047258, -0.1895834762166042, -0.3582125562146814, 4}, new double[]{0, 0, 0, 0});
    model.result("pg37").feature("iso7").set("smooth", "everywhere");
    model.result("pg37").feature("iso7").set("coloring", "uniform");
    model.result("pg37").feature("iso7").set("color", "green");
    model.result("pg37").feature("iso7").set("resolution", "finer");
    model.result("pg37").feature("iso7").set("colorlegend", "off");
    model.result("pg37").run();
    model.result("pg37").feature("iso7").feature("filt1").set("expr", "x^2+y^2+z^2<1e-6&&(100*x<=0||100*z<=0)");
    model.result("pg37").run();
    model.result("pg37").set("allowtableupdate", false);
    model.result("pg37").set("hasbeenplotted", true);
    model.result("pg37").feature("iso1").set("hasbeenplotted", true);
    model.result("pg37").feature("iso2").set("hasbeenplotted", true);
    model.result("pg37").feature("iso3").set("hasbeenplotted", true);
    model.result("pg37").feature("vol1").set("hasbeenplotted", true);
    model.result("pg37").feature("vol2").set("hasbeenplotted", true);
    model.result("pg37").feature("iso7").set("hasbeenplotted", true);
    model.result("pg37").set("renderdatacached", false);
    model.result("pg37").set("allowtableupdate", true);
    model.result("pg37").set("renderdatacached", true);
    model.result("pg37").create("con3", "Contour");
    model.result("pg37").feature("con3").set("data", "dset18");
    model.result("pg37").feature("con3").setIndex("looplevel", "51", 0);
    model.result("pg37").feature("con3").set("expr", "real(f32energy(bn,es.normE,ang))-enm");
    model.result("pg37").feature("con3").set("levelmethod", "levels");
    model.result("pg37").feature("con3").set("levels", "4");
    model.result("pg37").run();
    model.result("pg37").feature("con3").set("coloring", "uniform");
    model.result("pg37").run();
    model.result("pg37").feature("con3").set("colorlegend", "off");
    model.result("pg37").feature("con3").set("expr", "bn");
    model.result("pg37").feature("con3").set("levels", "0.5");
    model.result("pg37").run();
    model.result("pg37").feature("con3").set("levels", "0.2");
    model.result("pg37").run();
    model.result("pg37").set("allowtableupdate", false);
    model.result("pg37").set("hasbeenplotted", true);
    model.result("pg37").feature("iso1").set("hasbeenplotted", true);
    model.result("pg37").feature("iso2").set("hasbeenplotted", true);
    model.result("pg37").feature("iso3").set("hasbeenplotted", true);
    model.result("pg37").feature("vol1").set("hasbeenplotted", true);
    model.result("pg37").feature("vol2").set("hasbeenplotted", true);
    model.result("pg37").feature("iso7").set("hasbeenplotted", true);
    model.result("pg37").feature("con3").set("hasbeenplotted", true);
    model.result("pg37").set("renderdatacached", false);
    model.result("pg37").set("allowtableupdate", true);
    model.result("pg37").set("renderdatacached", true);
    model.result().table("evl3")
         .addRow(new double[]{-0.0019020618791660837, 0.9632956042159254, 1.886952900451293, -1.0842021724855044E-19}, new double[]{0, 0, 0, 0});
    model.result("pg37").feature("con3").set("contourtype", "filled");
    model.result("pg37").run();
    model.result("pg37").feature("con3").set("contourtype", "tubes");
    model.result("pg37").feature("con3").set("radiusexpr", "0.01");
    model.result("pg37").run();
    model.result("pg37").set("allowtableupdate", false);
    model.result("pg37").set("hasbeenplotted", true);
    model.result("pg37").feature("iso1").set("hasbeenplotted", true);
    model.result("pg37").feature("iso2").set("hasbeenplotted", true);
    model.result("pg37").feature("iso3").set("hasbeenplotted", true);
    model.result("pg37").feature("vol1").set("hasbeenplotted", true);
    model.result("pg37").feature("vol2").set("hasbeenplotted", true);
    model.result("pg37").feature("iso7").set("hasbeenplotted", true);
    model.result("pg37").feature("con3").set("tuberadiusscale", 9.600000000000001);
    model.result("pg37").feature("con3").set("tuberadiusscaleactive", false);
    model.result("pg37").feature("con3").set("hasbeenplotted", true);
    model.result("pg37").set("renderdatacached", false);
    model.result("pg37").set("allowtableupdate", true);
    model.result("pg37").set("renderdatacached", true);
    model.result().table("evl3")
         .addRow(new double[]{0.23913918076123197, -0.20408843067478488, 1.80631406752806, 30}, new double[]{0, 0, 0, 0});
    model.result("pg37").feature("con3").set("contourtype", "lines");
    model.result("pg37").feature("con3").set("resolution", "fine");
    model.result("pg37").run();
    model.result().dataset().create("cpl5", "CutPlane");
    model.result().dataset("cpl5").set("data", "dset18");
    model.result().dataset("cpl5").set("quickplane", "yx");
    model.result().dataset("cpl5").set("genparaactive", "on");
    model.result().dataset("cpl5").set("genparadist", "range(-0.5,0.1,0.5)");
    model.result("pg37").feature("con3").set("data", "cpl5");
    model.result("pg37").run();
    model.result("pg37").feature("iso7").active(false);
    model.result("pg37").feature("con3").set("expr", "real(f32energy(bn,es.normE,ang))-enm");
    model.result("pg37").feature("con3").set("levels", "4");
    model.result("pg37").feature("con3").set("resolution", "normal");
    model.result("pg37").run();
    model.result("pg37").set("allowtableupdate", false);
    model.result("pg37").set("hasbeenplotted", true);
    model.result("pg37").feature("iso1").set("hasbeenplotted", true);
    model.result("pg37").feature("iso2").set("hasbeenplotted", true);
    model.result("pg37").feature("iso3").set("hasbeenplotted", true);
    model.result("pg37").feature("vol1").set("hasbeenplotted", true);
    model.result("pg37").feature("vol2").set("hasbeenplotted", true);
    model.result("pg37").feature("con3").set("hasbeenplotted", true);
    model.result("pg37").set("renderdatacached", false);
    model.result("pg37").set("allowtableupdate", true);
    model.result("pg37").set("renderdatacached", true);
    model.result("pg37").feature().duplicate("con4", "con3");
    model.result().dataset("cpl5").label("xy_slices");
    model.result().dataset().duplicate("cpl6", "cpl5");
    model.result().dataset("cpl6").label("yz_slice");
    model.result().dataset("cpl6").set("quickplane", "yz");
    model.result().dataset("cpl6").label("yz_slices");
    model.result().dataset().duplicate("cpl7", "cpl6");
    model.result().dataset("cpl7").label("xz_slices");
    model.result().dataset("cpl7").set("quickplane", "xz");
    model.result("pg37").feature("con4").set("data", "cpl6");
    model.result("pg37").feature().duplicate("con5", "con4");
    model.result("pg37").feature("con5").set("data", "cpl7");
    model.result("pg37").run();
    model.result("pg37").feature("con4").active(false);
    model.result("pg37").feature("con5").active(false);
    model.result("pg37").run();
    model.result().dataset("cpl6").set("genparaactive", "off");
    model.result().dataset("cpl7").set("genparaactive", "off");
    model.result("pg37").feature("con4").active(true);
    model.result("pg37").run();
    model.result("pg37").feature("con5").active(true);
    model.result("pg37").run();
    model.result("pg37").feature("con3").set("color", "custom");
    model.result("pg37").feature("con3")
         .set("customcolor", new double[]{0.03529411926865578, 0.4627451002597809, 0.03529411926865578});
    model.result("pg37").feature("con4").set("inheritplot", "con3");
    model.result("pg37").feature("con5").set("inheritplot", "con4");
    model.result("pg37").run();

    model.view("view1").set("showgrid", false);
    model.view("view1").set("scenelight", "off");
    model.view("view1").set("transparency", "off");

    model.result("pg37").feature("con3").active(false);
    model.result("pg37").feature("con4").active(false);
    model.result("pg37").feature("con5").active(false);
    model.result("pg37").feature("iso7").active(true);
    model.result("pg37").run();

    model.view("view1").set("transparency", "on");
    model.view("view1").set("scenelight", "on");
    model.view("view1").set("transparency", "off");
    model.view("view1").set("showaxisorientation", false);

    model.result("pg37").set("showlegends", false);
    model.result("pg37").feature("iso7").set("resolution", "normal");
    model.result("pg37").run();
    model.result("pg37").set("allowtableupdate", false);
    model.result("pg37").set("hasbeenplotted", true);
    model.result("pg37").feature("iso1").set("hasbeenplotted", true);
    model.result("pg37").feature("iso2").set("hasbeenplotted", true);
    model.result("pg37").feature("iso3").set("hasbeenplotted", true);
    model.result("pg37").feature("vol1").set("hasbeenplotted", true);
    model.result("pg37").feature("vol2").set("hasbeenplotted", true);
    model.result("pg37").feature("iso7").set("hasbeenplotted", true);
    model.result("pg37").set("renderdatacached", false);
    model.result("pg37").set("allowtableupdate", true);
    model.result("pg37").set("renderdatacached", true);
    model.result().table("evl3")
         .addRow(new double[]{-0.1046243074176676, 5.000161951640436E-5, -0.7649829472488463, 0}, new double[]{0, 0, 0, 0});

    model.view("view1").set("scenelight", "off");

    model.result("pg37").feature("iso7").active(false);
    model.result("pg37").feature("iso7").active(true);

    model.view("view1").set("transparency", "off");

    model.result("pg37").feature("iso1")
         .set("customcolor", new double[]{0.7529411911964417, 0.7529411911964417, 0.7529411911964417});
    model.result("pg37").feature("iso3").set("customcolor", new double[]{0, 0, 0});
    model.result("pg37").feature("iso7").active(false);
    model.result("pg37").feature("con3").active(true);
    model.result("pg37").feature("con4").active(true);
    model.result("pg37").feature("con5").active(true);
    model.result("pg37").run();
    model.result("pg37").feature("con3").active(false);
    model.result("pg37").feature("con4").active(false);
    model.result("pg37").feature("con5").active(false);
    model.result("pg37").feature("iso7").set("levels", "2,4,6");
    model.result("pg37").feature("iso7").feature("filt1").set("expr", "x^2+y^2+z^2<1e-6&&z<=0");
    model.result("pg37").feature("iso7").active(true);
    model.result("pg37").run();

    model.view("view1").set("scenelight", "off");

    model.result("pg37").feature("iso7").active(false);
    model.result().dataset("cpl5").set("genparaactive", "off");
    model.result("pg37").feature("con3").active(true);
    model.result("pg37").feature("con4").active(true);
    model.result("pg37").feature("con5").active(true);
    model.result("pg37").run();
    model.result("pg37").feature("con3").set("levels", "1,4");
    model.result("pg37").run();
    model.result("pg37").feature("con4").set("levels", "1,4");
    model.result("pg37").feature("con5").set("levels", "1,4");
    model.result("pg37").run();
    model.result("pg37").feature("con3").active(false);
    model.result("pg37").feature("con4").active(false);
    model.result("pg37").feature("con5").active(false);
    model.result("pg37").feature("vol2").label("Pin Domain 2");
    model.result("pg37").feature("vol1").label("Pin Domain 1");
    model.result("pg37").feature().duplicate("vol3", "vol2");
    model.result("pg37").feature().move("vol3", 10);
    model.result("pg37").feature("vol3").label("Electric Pin");
    model.result("pg37").feature("vol3").feature("filt1").set("expr", "(dom==4||dom==5||dom==22||dom==23)");
    model.result("pg37").feature("vol3").set("customcolor", new double[]{1, 0.8196078538894653, 0.3607843220233917});
    model.result("pg37").run();
    model.result("pg37").feature("vol3").set("data", "dset18");
    model.result("pg37").run();
    model.result("pg37").set("allowtableupdate", false);
    model.result("pg37").set("hasbeenplotted", true);
    model.result("pg37").feature("iso1").set("hasbeenplotted", true);
    model.result("pg37").feature("iso2").set("hasbeenplotted", true);
    model.result("pg37").feature("iso3").set("hasbeenplotted", true);
    model.result("pg37").feature("vol1").set("hasbeenplotted", true);
    model.result("pg37").feature("vol2").set("hasbeenplotted", true);
    model.result("pg37").feature("vol3").set("hasbeenplotted", true);
    model.result("pg37").set("renderdatacached", false);
    model.result("pg37").set("allowtableupdate", true);
    model.result("pg37").set("renderdatacached", true);
    model.result().table("evl3")
         .addRow(new double[]{-3.8443144721191223, 2.1890317518252944, 6.426106926446131, 5}, new double[]{0, 0, 0, 0});

    model.view("view1").set("transparency", "on");

    model.result("pg37").feature("vol3").feature("filt1").set("expr", "(dom==4||dom==5||dom==22)");
    model.result("pg37").run();
    model.result("pg37").feature("vol3").feature("filt1").set("expr", "(dom==4||dom==5||dom==23)");
    model.result("pg37").run();
    model.result("pg37").feature("vol3").feature("filt1").set("expr", "(dom==4||dom==22||dom==23)");
    model.result("pg37").run();

    model.view("view1").set("transparency", "off");

    model.result("pg37").feature("vol3").active(false);
    model.result("pg37").create("iso8", "Isosurface");
    model.result("pg37").feature("iso8").set("expr", "sqrt(x^2+y^2+z^2)");
    model.result("pg37").feature("iso8").set("levelmethod", "levels");
    model.result("pg37").feature("iso8").set("levels", "1e-4");
    model.result("pg37").feature("iso8").set("coloring", "uniform");
    model.result("pg37").feature("iso8").set("color", "cyan");
    model.result("pg37").run();
    model.result("pg37").feature("iso8").set("levels", "0.1");
    model.result("pg37").run();
    model.result("pg37").feature("iso8").set("levels", "0.05");
    model.result("pg37").feature("iso8").set("color", "custom");
    model.result("pg37").feature("iso8")
         .set("customcolor", new double[]{0.03529411926865578, 0.4627451002597809, 0.03529411926865578});
    model.result("pg37").run();

    model.view("view1").set("showgrid", false);
    model.view("view1").set("scenelight", "off");
    model.view("view1").set("transparency", "off");

    model.result("pg37").set("allowtableupdate", false);
    model.result("pg37").set("hasbeenplotted", true);
    model.result("pg37").feature("iso1").set("hasbeenplotted", true);
    model.result("pg37").feature("iso2").set("hasbeenplotted", true);
    model.result("pg37").feature("iso3").set("hasbeenplotted", true);
    model.result("pg37").feature("vol1").set("hasbeenplotted", true);
    model.result("pg37").feature("vol2").set("hasbeenplotted", true);
    model.result("pg37").feature("iso8").set("hasbeenplotted", true);
    model.result("pg37").set("renderdatacached", false);
    model.result("pg37").set("allowtableupdate", true);
    model.result("pg37").set("renderdatacached", true);

    model.label("me_rodliteral_losses.mph");

    model.result("pg37").run();
    model.result("pg37").feature("iso1").feature("filt1").set("expr", "angap(bn,en)<10&&abs(z)<2e-3&&abs(x)<2");
    model.result("pg37").run();

    model.view("view1").set("showaxisorientation", false);

    model.result("pg37").feature("iso1").feature("filt1").set("expr", "angap(bn,en)<10&&abs(z)<2e-3&&abs(x)<2e-3");
    model.result("pg37").feature("iso2").feature("filt1").set("expr", "angap(bn,en)<10&&abs(z)<2e-3&&abs(x)<2e-3");
    model.result("pg37").feature("iso3").feature("filt1").set("expr", "angap(bn,en)<10&&abs(z)<2e-3&&abs(x)<2e-3");
    model.result("pg37").run();
    model.result("pg37").feature("iso2").setIndex("looplevel", "56", 0);
    model.result("pg37").feature("vol1").feature("filt1")
         .set("expr", "x>1e-4&&!(dom==1||dom==9||dom==10||dom==6||dom==16||dom==12||dom==14||dom==4||dom==5||dom==22||dom==23)");
    model.result("pg37").run();
    model.result("pg37").feature("vol2").feature("filt1")
         .set("expr", "x<-2e-4&&!(dom==1||dom==9||dom==10||dom==6||dom==16||dom==12||dom==14||dom==4||dom==5||dom==22||dom==23)");
    model.result("pg37").feature("vol1").feature("filt1")
         .set("expr", "x>2e-4&&!(dom==1||dom==9||dom==10||dom==6||dom==16||dom==12||dom==14||dom==4||dom==5||dom==22||dom==23)");
    model.result("pg37").feature().duplicate("vol4", "vol2");
    model.result("pg37").feature().move("vol4", 10);
    model.result("pg37").feature("vol4").label("Pin Domain Gap");
    model.result("pg37").feature("vol4").set("customcolor", new double[]{0, 0, 0});
    model.result("pg37").feature("vol4").feature("filt1")
         .set("expr", "abs(x)<2e-4&&!(dom==1||dom==9||dom==10||dom==6||dom==16||dom==12||dom==14||dom==4||dom==5||dom==22||dom==23)");
    model.result("pg37").run();

    model.view("view1").set("transparency", "off");

    model.result("pg37").feature("vol4")
         .set("customcolor", new double[]{0.13333334028720856, 0.13333334028720856, 0.13333334028720856});
    model.result("pg37").run();
    model.result("pg37").feature("vol4")
         .set("customcolor", new double[]{0.20000000298023224, 0.20000000298023224, 0.20000000298023224});
    model.result("pg37").run();
    model.result("pg37").feature("vol4")
         .set("customcolor", new double[]{0.13333334028720856, 0.13333334028720856, 0.13333334028720856});
    model.result("pg37").run();
    model.result("pg35").run();
    model.result().duplicate("pg44", "pg37");

    return model;
  }

  public static Model run38(Model model) {
    model.result("pg44").label("Depth of Loss Region");
    model.result("pg44").feature().remove("iso4");
    model.result("pg44").feature().remove("iso5");
    model.result("pg44").feature().remove("iso6");
    model.result("pg44").feature().remove("con1");
    model.result("pg44").feature().remove("con2");
    model.result("pg44").feature("iso1").create("col1", "Color");
    model.result("pg44").feature("iso1").feature("col1").set("expr", "real(f32energy(bn,es.normE,ang))-enm");
    model.result("pg44").feature("iso1").setIndex("looplevel", "56", 0);
    model.result("pg44").feature("iso2").setIndex("looplevel", "58", 0);
    model.result("pg44").feature("iso2").create("col1", "Color");
    model.result("pg44").feature("iso2").feature("col1").set("expr", "real(f32energy(bn,es.normE,ang))-enm");
    model.result("pg44").feature("iso3").setIndex("looplevel", "69", 0);
    model.result("pg44").feature("iso3").create("col1", "Color");
    model.result("pg44").feature("iso3").feature("col1").set("expr", "real(f32energy(bn,es.normE,ang))-enm");
    model.result("pg44").run();

    model.view("view1").set("transparency", "on");

    model.result("pg44").set("allowtableupdate", false);
    model.result("pg44").set("hasbeenplotted", true);
    model.result("pg44").feature("iso1").feature("col1").set("rangeunit", "");
    model.result("pg44").feature("iso1").feature("col1").set("rangecolormin", 0.23038594214431865);
    model.result("pg44").feature("iso1").feature("col1").set("rangecolormax", 33.937137855668524);
    model.result("pg44").feature("iso1").feature("col1").set("rangecoloractive", "off");
    model.result("pg44").feature("iso1").feature("col1").set("rangedatamin", 0.23038594214431865);
    model.result("pg44").feature("iso1").feature("col1").set("rangedatamax", 33.937137855668524);
    model.result("pg44").feature("iso1").feature("col1").set("rangedataactive", "off");
    model.result("pg44").feature("iso1").feature("col1")
         .set("rangeactualminmax", new double[]{0.23038594214431865, 33.937137855668524});
    model.result("pg44").feature("iso1").set("hasbeenplotted", true);
    model.result("pg44").feature("iso2").feature("col1").set("rangeunit", "");
    model.result("pg44").feature("iso2").feature("col1").set("rangecolormin", 0.40213332047439326);
    model.result("pg44").feature("iso2").feature("col1").set("rangecolormax", 33.91684928487601);
    model.result("pg44").feature("iso2").feature("col1").set("rangecoloractive", "off");
    model.result("pg44").feature("iso2").feature("col1").set("rangedatamin", 0.40213332047439326);
    model.result("pg44").feature("iso2").feature("col1").set("rangedatamax", 33.91684928487601);
    model.result("pg44").feature("iso2").feature("col1").set("rangedataactive", "off");
    model.result("pg44").feature("iso2").feature("col1")
         .set("rangeactualminmax", new double[]{0.40213332047439326, 33.91684928487601});
    model.result("pg44").feature("iso2").set("hasbeenplotted", true);
    model.result("pg44").feature("iso3").feature("col1").set("rangeunit", "");
    model.result("pg44").feature("iso3").feature("col1").set("rangecolormin", 1.3112370396954913);
    model.result("pg44").feature("iso3").feature("col1").set("rangecolormax", 33.807993000297);
    model.result("pg44").feature("iso3").feature("col1").set("rangecoloractive", "off");
    model.result("pg44").feature("iso3").feature("col1").set("rangedatamin", 1.3112370396954913);
    model.result("pg44").feature("iso3").feature("col1").set("rangedatamax", 33.807993000297);
    model.result("pg44").feature("iso3").feature("col1").set("rangedataactive", "off");
    model.result("pg44").feature("iso3").feature("col1")
         .set("rangeactualminmax", new double[]{1.3112370396954913, 33.807993000297});
    model.result("pg44").feature("iso3").set("hasbeenplotted", true);
    model.result("pg44").feature("vol1").set("hasbeenplotted", true);
    model.result("pg44").feature("vol2").set("hasbeenplotted", true);
    model.result("pg44").feature("vol4").set("hasbeenplotted", true);
    model.result("pg44").feature("iso8").set("hasbeenplotted", true);
    model.result("pg44").set("renderdatacached", false);
    model.result("pg44").set("allowtableupdate", true);
    model.result("pg44").set("renderdatacached", true);
    model.result().table("evl3")
         .addRow(new double[]{0.07441542147639968, -0.07016757632520543, 0.561458883280026, 3.901074637496708}, new double[]{0, 0, 0, 0});
    model.result().table("evl3")
         .addRow(new double[]{0.07441542147639968, -0.07016757632520543, 0.561458883280026, 3.901074637496708}, new double[]{0, 0, 0, 0});
    model.result().table("evl3")
         .addRow(new double[]{0.09058512507135497, -0.09515903080217569, 0.6790125386467087, 4.865335545367415}, new double[]{0, 0, 0, 0});
    model.result().table("evl3")
         .addRow(new double[]{0.09092414409500194, -0.09483161124524564, 0.6769560400698378, 4.8518131952262715}, new double[]{0, 0, 0, 0});
    model.result().table("evl3")
         .addRow(new double[]{0.12540539593413058, -0.07324201717128664, 0.7217361328290632, 5.185892093740909}, new double[]{0, 0, 0, 0});
    model.result().table("evl3")
         .addRow(new double[]{0.07293846360598355, -0.07122699649862185, 0.5587922014953577, 3.88159990919236}, new double[]{0, 0, 0, 0});
    model.result().table("evl3")
         .addRow(new double[]{0.09709676731581407, -0.08854126753698077, 0.6764570628783382, 4.841910550869535}, new double[]{0, 0, 0, 0});

    model.view("view1").set("transparency", "off");

    model.result().table("evl3")
         .addRow(new double[]{0.09687369864862472, -0.08872727010715553, 0.6811162606907191, 4.871954196093311}, new double[]{0, 0, 0, 0});
    model.result().table("evl3")
         .addRow(new double[]{0.09760978590145708, -0.08949490265850835, 0.6919941262205089, 4.958354084520639}, new double[]{0, 0, 0, 0});
    model.result().table("evl3")
         .addRow(new double[]{0.19707127665298074, -0.16738074995204943, 1.0196609606431561, 7.481060312170806}, new double[]{0, 0, 0, 0});

    model.label("me_rodliteral_losses.mph");

    return model;
  }

  public static void main(String[] args) {
    Model model = run();
    model = run2(model);
    model = run3(model);
    model = run4(model);
    model = run5(model);
    model = run6(model);
    model = run7(model);
    model = run8(model);
    model = run9(model);
    model = run10(model);
    model = run11(model);
    model = run12(model);
    model = run13(model);
    model = run14(model);
    model = run15(model);
    model = run16(model);
    model = run17(model);
    model = run18(model);
    model = run19(model);
    model = run20(model);
    model = run21(model);
    model = run22(model);
    model = run23(model);
    model = run24(model);
    model = run25(model);
    model = run26(model);
    model = run27(model);
    model = run28(model);
    model = run29(model);
    model = run30(model);
    model = run31(model);
    model = run32(model);
    model = run33(model);
    model = run34(model);
    model = run35(model);
    model = run36(model);
    model = run37(model);
    run38(model);
  }

}
